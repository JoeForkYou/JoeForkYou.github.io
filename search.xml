<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【CPP基础】【五】【CPP速通】</title>
      <link href="/2025/04/04/CPP/CPP%E5%9F%BA%E7%A1%80_5_%E9%80%9F%E9%80%9A/"/>
      <url>/2025/04/04/CPP/CPP%E5%9F%BA%E7%A1%80_5_%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="完整的C-编程教程"><a href="#完整的C-编程教程" class="headerlink" title="完整的C++编程教程"></a>完整的C++编程教程</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#1-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">开发环境配置</a></li><li><a href="#2-c%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">C++知识体系</a></li><li><a href="#3-%E7%8E%B0%E4%BB%A3c%E7%89%B9%E6%80%A7">现代C++特性</a></li><li><a href="#4-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">设计模式</a></li><li><a href="#5-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a></li><li><a href="#6-cmake%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA">CMake项目构建</a></li><li><a href="#7-%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7">调试技巧</a></li><li><a href="#8-%E8%BF%9B%E9%98%B6%E4%B8%BB%E9%A2%98">进阶主题</a></li><li><a href="#9-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90">学习资源</a></li></ol><hr><h2 id="1-开发环境配置"><a href="#1-开发环境配置" class="headerlink" title="1. 开发环境配置"></a>1. 开发环境配置</h2><h3 id="1-1-安装编译器"><a href="#1-1-安装编译器" class="headerlink" title="1.1 安装编译器"></a>1.1 安装编译器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install g++ build-essential</span><br></pre></td></tr></table></figure><h3 id="1-2-安装构建工具"><a href="#1-2-安装构建工具" class="headerlink" title="1.2 安装构建工具"></a>1.2 安装构建工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install cmake</span><br></pre></td></tr></table></figure><h3 id="1-3-VS-Code配置"><a href="#1-3-VS-Code配置" class="headerlink" title="1.3 VS Code配置"></a>1.3 VS Code配置</h3><ol><li>安装C++扩展</li><li>配置调试环境</li><li>安装CMake Tools扩展</li></ol><h2 id="2-C-知识体系"><a href="#2-C-知识体系" class="headerlink" title="2. C++知识体系"></a>2. C++知识体系</h2><h3 id="2-1-基础语法"><a href="#2-1-基础语法" class="headerlink" title="2.1 基础语法"></a>2.1 基础语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-面向对象编程"><a href="#2-2-面向对象编程" class="headerlink" title="2.2 面向对象编程"></a>2.2 面向对象编程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;MyClass instance&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-现代C-特性"><a href="#3-现代C-特性" class="headerlink" title="3. 现代C++特性"></a>3. 现代C++特性</h2><h3 id="3-1-自动类型推导"><a href="#3-1-自动类型推导" class="headerlink" title="3.1 自动类型推导"></a>3.1 自动类型推导</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">5</span>; <span class="comment">// 自动推导为int</span></span><br><span class="line"><span class="keyword">auto</span> str = <span class="string">&quot;hello&quot;</span>; <span class="comment">// 自动推导为const char*</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Lambda表达式"><a href="#3-2-Lambda表达式" class="headerlink" title="3.2 Lambda表达式"></a>3.2 Lambda表达式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> sum = [](<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; std::endl; <span class="comment">// 输出7</span></span><br></pre></td></tr></table></figure><h2 id="4-设计模式"><a href="#4-设计模式" class="headerlink" title="4. 设计模式"></a>4. 设计模式</h2><h3 id="4-1-单例模式"><a href="#4-1-单例模式" class="headerlink" title="4.1 单例模式"></a>4.1 单例模式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton&amp; <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> Singleton instance;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------------+</span><br><span class="line">|    Singleton     |</span><br><span class="line">+------------------+</span><br><span class="line">| - instance: static Singleton |</span><br><span class="line">+------------------+</span><br><span class="line">| + getInstance(): static Singleton&amp; |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>全局配置管理</li><li>日志系统</li><li>数据库连接池</li><li>缓存系统</li><li>线程池</li></ul><p>性能分析：</p><ul><li>线程安全（C++11后static局部变量初始化是线程安全的）</li><li>延迟初始化</li><li>内存效率高</li><li>首次调用可能有轻微性能开销</li></ul><p>现代C++改进：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用std::call_once确保线程安全</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafeSingleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ThreadSafeSingleton</span>() &#123;&#125;</span><br><span class="line">    <span class="type">static</span> std::once_flag initFlag;</span><br><span class="line">    <span class="type">static</span> std::unique_ptr&lt;ThreadSafeSingleton&gt; instance;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> ThreadSafeSingleton&amp; <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::<span class="built_in">call_once</span>(initFlag, []() &#123;</span><br><span class="line">            instance.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">ThreadSafeSingleton</span>());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> *instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-1-单例模式-1"><a href="#4-1-单例模式-1" class="headerlink" title="4.1 单例模式"></a>4.1 单例模式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton&amp; <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> Singleton instance;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="UML图-1"><a href="#UML图-1" class="headerlink" title="UML图"></a>UML图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------------+</span><br><span class="line">|    Singleton     |</span><br><span class="line">+------------------+</span><br><span class="line">| - instance: static Singleton |</span><br><span class="line">+------------------+</span><br><span class="line">| + getInstance(): static Singleton&amp; |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>全局配置管理</li><li>日志系统</li><li>数据库连接池</li><li>缓存系统</li><li>线程池</li></ul><p>性能分析：</p><ul><li>线程安全（C++11后static局部变量初始化是线程安全的）</li><li>延迟初始化</li><li>内存效率高</li><li>首次调用可能有轻微性能开销</li></ul><p>现代C++改进：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用std::call_once确保线程安全</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafeSingleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">ThreadSafeSingleton</span>() &#123;&#125;</span><br><span class="line">    <span class="type">static</span> std::once_flag initFlag;</span><br><span class="line">    <span class="type">static</span> std::unique_ptr&lt;ThreadSafeSingleton&gt; instance;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> ThreadSafeSingleton&amp; <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::<span class="built_in">call_once</span>(initFlag, []() &#123;</span><br><span class="line">            instance.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">ThreadSafeSingleton</span>());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> *instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-2-工厂模式"><a href="#4-2-工厂模式" class="headerlink" title="4.2 工厂模式"></a>4.2 工厂模式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Product</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operation</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ConcreteProductA operation&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operation</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ConcreteProductB operation&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product* <span class="title">createProduct</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactoryA</span> : <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product* <span class="title">createProduct</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactoryB</span> : <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product* <span class="title">createProduct</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="UML图-2"><a href="#UML图-2" class="headerlink" title="UML图"></a>UML图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------------------+       +------------------+</span><br><span class="line">|     Product      |&lt;------| ConcreteProductA |</span><br><span class="line">+------------------+       +------------------+</span><br><span class="line">| + operation(): virtual |  +------------------+</span><br><span class="line">+------------------+       | ConcreteProductB |</span><br><span class="line">                           +------------------+</span><br><span class="line"></span><br><span class="line">+------------------+       +------------------+</span><br><span class="line">|     Factory      |&lt;------| ConcreteFactoryA |</span><br><span class="line">+------------------+       +------------------+</span><br><span class="line">| + createProduct(): virtual |  +------------------+</span><br><span class="line">+------------------+       | ConcreteFactoryB |</span><br><span class="line">                           +------------------+</span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>需要创建多种相似对象</li><li>对象创建逻辑复杂</li><li>需要解耦客户端和具体产品类</li><li>需要动态扩展产品类型</li><li>需要集中管理对象创建</li></ul><p>性能分析：</p><ul><li>虚函数调用开销</li><li>对象创建成本</li><li>内存分配开销</li></ul><p>现代C++改进：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用智能指针避免内存泄漏</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;Product&gt; <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_unique</span>&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模板工厂</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ProductType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TemplateFactory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Product&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">make_unique</span>&lt;ProductType&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lambda工厂</span></span><br><span class="line"><span class="keyword">auto</span> productFactory = [](<span class="keyword">auto</span>&amp;&amp;... args) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_unique</span>&lt;Product&gt;(std::forward&lt;<span class="keyword">decltype</span>(args)&gt;(args)...);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Product</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operation</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ConcreteProductA operation&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operation</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;ConcreteProductB operation&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product* <span class="title">createProduct</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactoryA</span> : <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product* <span class="title">createProduct</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactoryB</span> : <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product* <span class="title">createProduct</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="UML图-3"><a href="#UML图-3" class="headerlink" title="UML图"></a>UML图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------------------+       +------------------+</span><br><span class="line">|     Product      |&lt;------| ConcreteProductA |</span><br><span class="line">+------------------+       +------------------+</span><br><span class="line">| + operation(): virtual |  +------------------+</span><br><span class="line">+------------------+       | ConcreteProductB |</span><br><span class="line">                           +------------------+</span><br><span class="line"></span><br><span class="line">+------------------+       +------------------+</span><br><span class="line">|     Factory      |&lt;------| ConcreteFactoryA |</span><br><span class="line">+------------------+       +------------------+</span><br><span class="line">| + createProduct(): virtual |  +------------------+</span><br><span class="line">+------------------+       | ConcreteFactoryB |</span><br><span class="line">                           +------------------+</span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>需要创建多种相似对象</li><li>对象创建逻辑复杂</li><li>需要解耦客户端和具体产品类</li><li>需要动态扩展产品类型</li><li>需要集中管理对象创建</li></ul><p>性能分析：</p><ul><li>虚函数调用开销</li><li>对象创建成本</li><li>内存分配开销</li></ul><p>现代C++改进：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用智能指针避免内存泄漏</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;Product&gt; <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_unique</span>&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模板工厂</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ProductType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TemplateFactory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Product&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">make_unique</span>&lt;ProductType&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lambda工厂</span></span><br><span class="line"><span class="keyword">auto</span> productFactory = [](<span class="keyword">auto</span>&amp;&amp;... args) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_unique</span>&lt;Product&gt;(std::forward&lt;<span class="keyword">decltype</span>(args)&gt;(args)...);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-3-观察者模式"><a href="#4-3-观察者模式" class="headerlink" title="4.3 观察者模式"></a>4.3 观察者模式</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;any&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础观察者接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Observer</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主题/被观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;std::weak_ptr&lt;Observer&gt;&gt; observers;</span><br><span class="line">    std::mutex mtx;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 线程安全的观察者注册</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">attach</span><span class="params">(std::shared_ptr&lt;Observer&gt; obs)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        observers.<span class="built_in">emplace_back</span>(obs);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线程安全的观察者注销</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">detach</span><span class="params">(std::shared_ptr&lt;Observer&gt; obs)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        observers.<span class="built_in">erase</span>(</span><br><span class="line">            std::<span class="built_in">remove_if</span>(observers.<span class="built_in">begin</span>(), observers.<span class="built_in">end</span>(),</span><br><span class="line">                [&amp;obs](<span class="type">const</span> std::weak_ptr&lt;Observer&gt;&amp; weakObs) &#123;</span><br><span class="line">                    <span class="keyword">return</span> weakObs.<span class="built_in">expired</span>() || weakObs.<span class="built_in">lock</span>() == obs;</span><br><span class="line">                &#125;),</span><br><span class="line">            observers.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线程安全的通知所有观察者</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = observers.<span class="built_in">begin</span>(); it != observers.<span class="built_in">end</span>(); ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">auto</span> obs = it-&gt;<span class="built_in">lock</span>()) &#123;</span><br><span class="line">                obs-&gt;<span class="built_in">update</span>(message);</span><br><span class="line">                ++it;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                it = observers.<span class="built_in">erase</span>(it);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体观察者实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver</span> : <span class="keyword">public</span> Observer &#123;</span><br><span class="line">    std::string name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteObserver</span><span class="params">(std::string name)</span> : name(std::move(name)) &#123;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Observer &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; received: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现代C++改进：使用std::function和lambda</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line">    std::vector&lt;std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string&amp;)&gt;&gt; observers;</span><br><span class="line">    std::mutex mtx;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">subscribe</span><span class="params">(std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string&amp;)&gt; observer)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        observers.<span class="built_in">push_back</span>(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unsubscribe</span><span class="params">(std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string&amp;)&gt; observer)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        observers.<span class="built_in">erase</span>(</span><br><span class="line">            std::<span class="built_in">remove</span>(observers.<span class="built_in">begin</span>(), observers.<span class="built_in">end</span>(), observer),</span><br><span class="line">            observers.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; observer : observers) &#123;</span><br><span class="line">            <span class="built_in">observer</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++20 协程改进</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EventAwaiter</span> &#123;</span><br><span class="line">    Observable&amp; observable;</span><br><span class="line">    std::string message;</span><br><span class="line">    <span class="type">bool</span> ready = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">EventAwaiter</span>(Observable&amp; obs) : <span class="built_in">observable</span>(obs) &#123;</span><br><span class="line">        observable.<span class="built_in">subscribe</span>([<span class="keyword">this</span>](<span class="type">const</span> std::string&amp; msg) &#123;</span><br><span class="line">            message = msg;</span><br><span class="line">            ready = <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">await_ready</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> ready; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">await_suspend</span><span class="params">(std::coroutine_handle&lt;&gt;)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function">std::string <span class="title">await_resume</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> message; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="function">Task <span class="title">asyncEventListener</span><span class="params">(Observable&amp; observable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> message = <span class="keyword">co_await</span> <span class="built_in">EventAwaiter</span>(observable);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Received async message: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 传统观察者模式使用</span></span><br><span class="line">    <span class="keyword">auto</span> subject = std::<span class="built_in">make_shared</span>&lt;Subject&gt;();</span><br><span class="line">    <span class="keyword">auto</span> observer1 = std::<span class="built_in">make_shared</span>&lt;ConcreteObserver&gt;(<span class="string">&quot;Observer1&quot;</span>);</span><br><span class="line">    <span class="keyword">auto</span> observer2 = std::<span class="built_in">make_shared</span>&lt;ConcreteObserver&gt;(<span class="string">&quot;Observer2&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    subject-&gt;<span class="built_in">attach</span>(observer1);</span><br><span class="line">    subject-&gt;<span class="built_in">attach</span>(observer2);</span><br><span class="line">    subject-&gt;<span class="built_in">notify</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 现代C++风格使用</span></span><br><span class="line">    Observable modernSubject;</span><br><span class="line">    <span class="keyword">auto</span> callback = [](<span class="type">const</span> std::string&amp; msg) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Lambda observer received: &quot;</span> &lt;&lt; msg &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    modernSubject.<span class="built_in">subscribe</span>(callback);</span><br><span class="line">    modernSubject.<span class="built_in">notify</span>(<span class="string">&quot;Modern C++ message&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UML图-4"><a href="#UML图-4" class="headerlink" title="UML图"></a>UML图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------------------+       +------------------+</span><br><span class="line">|     Subject      |&lt;&gt;-----&gt;|     Observer     |</span><br><span class="line">+------------------+       +------------------+</span><br><span class="line">| + attach(Observer) |      | + update(): virtual |</span><br><span class="line">| + detach(Observer) |      +------------------+</span><br><span class="line">| + notify()         |               ^</span><br><span class="line">+------------------+                |</span><br><span class="line">                                    |</span><br><span class="line">                         +------------------+</span><br><span class="line">                         | ConcreteObserver |</span><br><span class="line">                         +------------------+</span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>事件驱动系统</li><li>GUI组件交互</li><li>发布-订阅系统</li><li>状态监控</li><li>数据同步</li><li>微服务架构中的事件通知</li><li>物联网设备状态更新</li><li>金融交易实时监控</li><li>游戏引擎事件处理</li><li>分布式系统状态同步</li></ul><p>性能优化：</p><ul><li>使用weak_ptr避免内存泄漏</li><li>异步通知减少阻塞</li><li>批量通知优化</li><li>线程安全实现</li><li>观察者去重</li><li>使用对象池管理观察者</li><li>事件过滤减少不必要通知</li><li>按优先级分组通知</li><li>使用无锁数据结构优化高频事件</li><li>事件合并减少通知频率</li></ul><p>现代C++改进：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用信号槽库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/signals2.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Event triggered&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">boost::signals2::signal&lt;<span class="built_in">void</span>()&gt; signal;</span><br><span class="line">signal.<span class="built_in">connect</span>(<span class="built_in">Event</span>());</span><br><span class="line"><span class="built_in">signal</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用std::function和lambda</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line">    std::vector&lt;std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string&amp;)&gt;&gt; observers;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">subscribe</span><span class="params">(std::function&lt;<span class="type">void</span>(<span class="type">const</span> std::string&amp;)&gt; observer)</span> </span>&#123;</span><br><span class="line">        observers.<span class="built_in">push_back</span>(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">notify</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; observer : observers) &#123;</span><br><span class="line">            <span class="built_in">observer</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-数据结构"><a href="#5-数据结构" class="headerlink" title="5. 数据结构"></a>5. 数据结构</h2><h3 id="5-1-链表实现"><a href="#5-1-链表实现" class="headerlink" title="5.1 链表实现"></a>5.1 链表实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">    Node* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> data)</span> </span>&#123;</span><br><span class="line">        Node* newNode = <span class="keyword">new</span> Node&#123;data, head&#125;;</span><br><span class="line">        head = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-CMake项目构建"><a href="#6-CMake项目构建" class="headerlink" title="6. CMake项目构建"></a>6. CMake项目构建</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(MyProject)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(myapp main.cpp)</span><br></pre></td></tr></table></figure><h2 id="7-调试技巧"><a href="#7-调试技巧" class="headerlink" title="7. 调试技巧"></a>7. 调试技巧</h2><ol><li>使用gdb调试</li><li>打印变量值</li><li>设置断点</li><li>查看调用栈</li></ol><h2 id="8-进阶主题"><a href="#8-进阶主题" class="headerlink" title="8. 进阶主题"></a>8. 进阶主题</h2><h3 id="8-1-模板元编程"><a href="#8-1-模板元编程" class="headerlink" title="8.1 模板元编程"></a>8.1 模板元编程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++20 概念(Concepts)示例</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">concept</span> Numeric = std::is_arithmetic_v&lt;T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;Numeric T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">square</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译期字符串处理</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">size_t</span> <span class="title">string_length</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *str ? <span class="number">1</span> + <span class="built_in">string_length</span>(str + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++23 编译期反射提案示例</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct Person &#123;</span></span><br><span class="line"><span class="comment">    std::string name;</span></span><br><span class="line"><span class="comment">    int age;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">constexpr auto members = reflect(Person);</span></span><br><span class="line"><span class="comment">static_assert(members.size() == 2);</span></span><br><span class="line"><span class="comment">static_assert(members[0].name == &quot;name&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>编译期类型检查</li><li>领域特定嵌入式语言(EDSL)</li><li>序列化&#x2F;反序列化框架</li><li>高性能数学库</li><li>编译期数据结构</li></ul><p>性能优化技巧：</p><ol><li>使用constexpr if减少实例化</li><li>模板特化优化热点路径</li><li>使用变量模板缓存中间结果</li><li>编译期字符串哈希优化查找</li><li>使用折叠表达式简化可变参数模板<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Factorial</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> value = N * Factorial&lt;N<span class="number">-1</span>&gt;::value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Factorial</span>&lt;<span class="number">0</span>&gt; &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> value = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译期断言</span></span><br><span class="line"><span class="built_in">static_assert</span>(Factorial&lt;<span class="number">5</span>&gt;::value == <span class="number">120</span>, <span class="string">&quot;Factorial calculation error&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><p>现代C++改进（C++11&#x2F;14&#x2F;17）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++11 constexpr函数</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * <span class="built_in">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++14 constexpr函数改进</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">auto</span> <span class="title">factorial14</span><span class="params">(<span class="keyword">auto</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">decltype</span>(n) result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">decltype</span>(n) i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        result *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++17 变量模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">auto</span> N&gt;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> factorial17 = N * factorial17&lt;N<span class="number">-1</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">auto</span> factorial17&lt;<span class="number">0</span>&gt; = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++20 consteval函数</span></span><br><span class="line"><span class="function"><span class="keyword">consteval</span> <span class="type">int</span> <span class="title">compile_time_factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * <span class="built_in">compile_time_factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景：</p><ul><li>编译期计算</li><li>类型特征检查</li><li>代码生成</li><li>算法优化</li><li>领域特定语言(DSL)</li></ul><p>性能分析：</p><ul><li>零运行时开销</li><li>增加编译时间</li><li>可能增加二进制大小</li></ul><p>高级技巧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SFINAE (Substitution Failure Is Not An Error)</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">print_type_info</span><span class="params">(<span class="type">const</span> T&amp; t)</span> -&gt; <span class="title">decltype</span><span class="params">(t.toString(), <span class="type">void</span>())</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; t.<span class="built_in">toString</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">print_type_info</span><span class="params">(<span class="type">const</span> T&amp; t)</span> -&gt; <span class="title">decltype</span><span class="params">(t.to_string(), <span class="type">void</span>())</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; t.<span class="built_in">to_string</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">print_type_info</span><span class="params">(<span class="type">const</span> T&amp; t)</span> -&gt; <span class="title">decltype</span><span class="params">(std::cout &lt;&lt; t, <span class="type">void</span>())</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; t &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型特征</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">is_pointer</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">bool</span> value = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">is_pointer</span>&lt;T*&gt; &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">bool</span> value = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用if constexpr (C++17)</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">process</span><span class="params">(<span class="type">const</span> T&amp; t)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(is_pointer&lt;T&gt;::value)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Pointer to &quot;</span> &lt;&lt; *t &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Value &quot;</span> &lt;&lt; t &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-并发编程"><a href="#8-2-并发编程" class="headerlink" title="8.2 并发编程"></a>8.2 并发编程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;latch&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;barrier&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++20 新特性示例</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">concurrent_operations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// std::latch 一次性屏障</span></span><br><span class="line">    <span class="function">std::latch <span class="title">work_done</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// std::barrier 可重用屏障</span></span><br><span class="line">    <span class="function">std::barrier <span class="title">sync_point</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// std::counting_semaphore 信号量</span></span><br><span class="line">    <span class="function">std::counting_semaphore&lt;10&gt; <span class="title">sem</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> worker = [&amp;](<span class="type">int</span> id) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Worker &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; started&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟工作</span></span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span> * id));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用信号量</span></span><br><span class="line">        sem.<span class="built_in">acquire</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Worker &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; acquired semaphore&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        sem.<span class="built_in">release</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 到达同步点</span></span><br><span class="line">        work_done.<span class="built_in">count_down</span>();</span><br><span class="line">        sync_point.<span class="built_in">arrive_and_wait</span>();</span><br><span class="line">        </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Worker &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; completed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::jthread <span class="title">t1</span><span class="params">(worker, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">std::jthread <span class="title">t2</span><span class="params">(worker, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">std::jthread <span class="title">t3</span><span class="params">(worker, <span class="number">3</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    work_done.<span class="built_in">wait</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;All workers finished initial phase&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本线程同步</span></span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="type">bool</span> ready = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">worker_thread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    cv.<span class="built_in">wait</span>(lock, []&#123; <span class="keyword">return</span> ready; &#125;);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Worker thread is processing data&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程安全队列</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafeQueue</span> &#123;</span><br><span class="line">    std::queue&lt;T&gt; queue;</span><br><span class="line">    <span class="keyword">mutable</span> std::mutex mtx;</span><br><span class="line">    std::condition_variable cv;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        queue.<span class="built_in">push</span>(std::<span class="built_in">move</span>(value));</span><br><span class="line">        cv.<span class="built_in">notify_one</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">try_pop</span><span class="params">(T&amp; value)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (queue.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        value = std::<span class="built_in">move</span>(queue.<span class="built_in">front</span>());</span><br><span class="line">        queue.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">wait_and_pop</span><span class="params">(T&amp; value)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        cv.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>]&#123; <span class="keyword">return</span> !queue.<span class="built_in">empty</span>(); &#125;);</span><br><span class="line">        value = std::<span class="built_in">move</span>(queue.<span class="built_in">front</span>());</span><br><span class="line">        queue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原子操作</span></span><br><span class="line"><span class="function">std::atomic&lt;<span class="type">int</span>&gt; <span class="title">counter</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">increment_atomic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i) &#123;</span><br><span class="line">        ++counter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基本线程示例</span></span><br><span class="line">    <span class="function">std::thread <span class="title">worker</span><span class="params">(worker_thread)</span></span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        ready = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cv.<span class="built_in">notify_one</span>();</span><br><span class="line">    worker.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池示例</span></span><br><span class="line">    <span class="type">const</span> <span class="type">unsigned</span> num_threads = std::thread::<span class="built_in">hardware_concurrency</span>();</span><br><span class="line">    std::vector&lt;std::thread&gt; threads;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建线程池工作函数</span></span><br><span class="line">    <span class="keyword">auto</span> worker = [](<span class="type">int</span> id) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Thread &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; 开始工作&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟工作负载</span></span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">        </span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Thread &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; 完成工作&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动所有工作线程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> i = <span class="number">0</span>; i &lt; num_threads; ++i) &#123;</span><br><span class="line">        threads.<span class="built_in">emplace_back</span>(worker, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等待所有线程完成</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : threads) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.<span class="built_in">joinable</span>()) &#123;</span><br><span class="line">            t.<span class="built_in">join</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;所有线程任务已完成&quot;</span> &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><h3 id="8-3-内存管理"><a href="#8-3-内存管理" class="headerlink" title="8.3 内存管理"></a>8.3 内存管理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory_resource&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内存对齐分配示例 (C++17)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AlignedAllocator</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> value_type = T;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">AlignedAllocator</span><span class="params">(<span class="type">size_t</span> alignment = <span class="keyword">alignof</span>(T))</span> </span></span><br><span class="line"><span class="function">        : alignment(alignment) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (alignment &amp; (alignment - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Alignment must be power of two&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function">    <span class="title">AlignedAllocator</span><span class="params">(<span class="type">const</span> AlignedAllocator&lt;U&gt;&amp; other)</span> <span class="keyword">noexcept</span> </span></span><br><span class="line"><span class="function">        : alignment(other.alignment) &#123;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    [[nodiscard]] <span class="function">T* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; std::numeric_limits&lt;<span class="type">size_t</span>&gt;::<span class="built_in">max</span>() / <span class="built_in">sizeof</span>(T)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">size_t</span> size = n * <span class="built_in">sizeof</span>(T);</span><br><span class="line">        <span class="type">void</span>* ptr = std::<span class="built_in">aligned_alloc</span>(alignment, size);</span><br><span class="line">        <span class="keyword">if</span> (!ptr) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;T*&gt;(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">(T* p, <span class="type">size_t</span> n)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        std::<span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> AlignedAllocator&amp;) <span class="type">const</span> <span class="keyword">noexcept</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> AlignedAllocator&amp;) <span class="type">const</span> <span class="keyword">noexcept</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> alignment;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>, AlignedAllocator&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">aligned_vec</span>(<span class="built_in">AlignedAllocator</span>&lt;<span class="type">int</span>&gt;(<span class="number">64</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义内存池分配器 (C++11)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PoolAllocator</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">        Block* next;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    Block* freeList = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> value_type = T;</span><br><span class="line">    <span class="keyword">using</span> propagate_on_container_copy_assignment = std::true_type;</span><br><span class="line">    <span class="keyword">using</span> propagate_on_container_move_assignment = std::true_type;</span><br><span class="line">    <span class="keyword">using</span> propagate_on_container_swap = std::true_type;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">PoolAllocator</span><span class="params">(<span class="type">size_t</span> poolSize = <span class="number">1024</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (poolSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Pool size must be positive&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 预分配内存池</span></span><br><span class="line">        freeList = <span class="built_in">static_cast</span>&lt;Block*&gt;(::<span class="keyword">operator</span> <span class="built_in">new</span>(poolSize * <span class="built_in">sizeof</span>(T)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化空闲链表</span></span><br><span class="line">        Block* current = freeList;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; poolSize - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            current-&gt;next = <span class="built_in">reinterpret_cast</span>&lt;Block*&gt;(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(current) + <span class="built_in">sizeof</span>(T));</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        current-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">PoolAllocator</span>(<span class="type">const</span> PoolAllocator&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    PoolAllocator&amp; <span class="keyword">operator</span>=(<span class="type">const</span> PoolAllocator&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    </span><br><span class="line">    [[nodiscard]] <span class="function">T* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">1</span> || !freeList) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Block* block = freeList;</span><br><span class="line">        freeList = freeList-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reinterpret_cast</span>&lt;T*&gt;(block);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">(T* p, <span class="type">size_t</span> n)</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">1</span> || !p) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        Block* block = <span class="built_in">reinterpret_cast</span>&lt;Block*&gt;(p);</span><br><span class="line">        block-&gt;next = freeList;</span><br><span class="line">        freeList = block;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">rebind</span> &#123;</span><br><span class="line">        <span class="keyword">using</span> other = PoolAllocator&lt;U&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>, PoolAllocator&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">vec</span>(<span class="built_in">PoolAllocator</span>&lt;<span class="type">int</span>&gt;(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现代C++内存管理特性</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 智能指针 (C++11):</span></span><br><span class="line"><span class="comment">   - std::unique_ptr: 独占所有权</span></span><br><span class="line"><span class="comment">   - std::shared_ptr: 共享所有权</span></span><br><span class="line"><span class="comment">   - std::weak_ptr: 打破循环引用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 内存资源 (C++17):</span></span><br><span class="line"><span class="comment">   - std::pmr::memory_resource</span></span><br><span class="line"><span class="comment">   - std::pmr::polymorphic_allocator</span></span><br><span class="line"><span class="comment">   - 内置内存资源 (monotonic, pool, synchronized)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 垃圾回收支持 (C++11):</span></span><br><span class="line"><span class="comment">   - std::declare_reachable</span></span><br><span class="line"><span class="comment">   - std::undeclare_reachable</span></span><br><span class="line"><span class="comment">   - std::declare_no_pointers</span></span><br><span class="line"><span class="comment">   - std::undeclare_no_pointers</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. 内存模型 (C++11):</span></span><br><span class="line"><span class="comment">   - std::atomic</span></span><br><span class="line"><span class="comment">   - 内存顺序约束</span></span><br><span class="line"><span class="comment">   - 线程安全保证</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">现代C++内存管理特性：</span><br><span class="line">1. 内存资源(Memory Resources)</span><br><span class="line">```cpp</span><br><span class="line">class MonotonicResource : public std::pmr::memory_resource &#123;</span><br><span class="line">    void* current = nullptr;</span><br><span class="line">    size_t remaining = 0;</span><br><span class="line">    </span><br><span class="line">protected:</span><br><span class="line">    void* do_allocate(size_t bytes, size_t alignment) override &#123;</span><br><span class="line">        // 简单线性分配实现</span><br><span class="line">        void* p = std::align(alignment, bytes, current, remaining);</span><br><span class="line">        if (!p) throw std::bad_alloc();</span><br><span class="line">        current = static_cast&lt;char*&gt;(p) + bytes;</span><br><span class="line">        remaining -= bytes;</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void do_deallocate(void*, size_t, size_t) override &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    bool do_is_equal(const memory_resource&amp; other) const noexcept override &#123;</span><br><span class="line">        return this == &amp;other;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>多态内存资源</li><li>栈分配器(stack allocator)</li><li>内存池优化</li></ol><p>性能分析工具：</p><ul><li>Valgrind</li><li>AddressSanitizer</li><li>MemorySanitizer</li><li>ThreadSanitizer</li><li>自定义分配器性能测试方法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resource</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Resource</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Resource acquired&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    ~<span class="built_in">Resource</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Resource released&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用智能指针自动管理内存</span></span><br><span class="line">    <span class="keyword">auto</span> ptr = std::<span class="built_in">make_unique</span>&lt;Resource&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移动语义示例</span></span><br><span class="line">    <span class="keyword">auto</span> ptr2 = std::<span class="built_in">move</span>(ptr); <span class="comment">// 所有权转移</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 共享所有权</span></span><br><span class="line">    <span class="keyword">auto</span> shared = std::<span class="built_in">make_shared</span>&lt;Resource&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>现代C++特性：</p><ul><li>移动语义（std::move）</li><li>完美转发</li><li>RAII原则</li></ul><h2 id="9-学习资源"><a href="#9-学习资源" class="headerlink" title="9. 学习资源"></a>9. 学习资源</h2><ol><li>《C++ Primer》</li><li>《Effective C++》</li><li>cppreference.com</li><li>Stack Overflow C++社区</li></ol>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debugging</title>
      <link href="/2025/03/21/nodic/zephyr/development/debugging/"/>
      <url>/2025/03/21/nodic/zephyr/development/debugging/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-调试技巧"><a href="#Zephyr-调试技巧" class="headerlink" title="Zephyr 调试技巧"></a>Zephyr 调试技巧</h1><p>本文档提供了在 Zephyr RTOS 中进行应用程序调试的详细指南，包括调试工具链设置、日志系统使用、断点和观察点设置、内存调试以及性能分析等内容。</p><h2 id="调试工具链设置"><a href="#调试工具链设置" class="headerlink" title="调试工具链设置"></a>调试工具链设置</h2><h3 id="安装调试工具"><a href="#安装调试工具" class="headerlink" title="安装调试工具"></a>安装调试工具</h3><ol><li><strong>安装必要的工具</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt install gdb-multiarch openocd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于 ARM 开发</span></span><br><span class="line"><span class="built_in">sudo</span> apt install gcc-arm-none-eabi</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置 OpenOCD</strong></li></ol><p>创建板级配置文件（例如 <code>my_board.cfg</code>）：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择调试适配器</span></span><br><span class="line"><span class="keyword">source</span> [find interface/jlink.cfg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择目标芯片</span></span><br><span class="line"><span class="keyword">source</span> [find target/nrf52.cfg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置时钟速度</span></span><br><span class="line">adapter speed <span class="number">4000</span></span><br></pre></td></tr></table></figure><h3 id="调试环境设置"><a href="#调试环境设置" class="headerlink" title="调试环境设置"></a>调试环境设置</h3><ol><li><strong>构建调试版本</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west build -b &lt;board&gt; -- -DCMAKE_BUILD_TYPE=Debug</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>启动调试会话</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 west</span></span><br><span class="line">west debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或手动启动</span></span><br><span class="line">openocd -f my_board.cfg</span><br><span class="line">gdb-multiarch build/zephyr/zephyr.elf</span><br></pre></td></tr></table></figure><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><h3 id="配置日志系统"><a href="#配置日志系统" class="headerlink" title="配置日志系统"></a>配置日志系统</h3><p>在 <code>prj.conf</code> 中启用日志功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 启用日志系统</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line"></span><br><span class="line"># 设置日志级别</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3  # INFO</span><br><span class="line"></span><br><span class="line"># 配置后端</span><br><span class="line">CONFIG_LOG_BACKEND_UART=y</span><br><span class="line">CONFIG_LOG_BACKEND_RTT=y</span><br></pre></td></tr></table></figure><h3 id="使用日志-API"><a href="#使用日志-API" class="headerlink" title="使用日志 API"></a>使用日志 API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册日志模块</span></span><br><span class="line">LOG_MODULE_REGISTER(my_module, CONFIG_MY_MODULE_LOG_LEVEL);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_function</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不同级别的日志</span></span><br><span class="line">    LOG_ERR(<span class="string">&quot;Error message&quot;</span>);</span><br><span class="line">    LOG_WRN(<span class="string">&quot;Warning message&quot;</span>);</span><br><span class="line">    LOG_INF(<span class="string">&quot;Info message&quot;</span>);</span><br><span class="line">    LOG_DBG(<span class="string">&quot;Debug message&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的日志</span></span><br><span class="line">    <span class="type">uint32_t</span> value = <span class="number">42</span>;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Value is %d&quot;</span>, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 十六进制数据</span></span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line">    LOG_HEXDUMP_INF(data, <span class="keyword">sizeof</span>(data), <span class="string">&quot;Data buffer:&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日志过滤"><a href="#日志过滤" class="headerlink" title="日志过滤"></a>日志过滤</h3><p>在运行时动态调整日志级别：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置模块日志级别</span></span><br><span class="line">log_filter_set(<span class="literal">NULL</span>, <span class="string">&quot;my_module&quot;</span>, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置实例日志级别</span></span><br><span class="line">log_filter_set(my_instance, <span class="string">&quot;my_module&quot;</span>, LOG_LEVEL_ERR);</span><br></pre></td></tr></table></figure><h2 id="断点和观察点"><a href="#断点和观察点" class="headerlink" title="断点和观察点"></a>断点和观察点</h2><h3 id="GDB-调试命令"><a href="#GDB-调试命令" class="headerlink" title="GDB 调试命令"></a>GDB 调试命令</h3><ol><li><strong>基本命令</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 设置断点</span><br><span class="line">break main</span><br><span class="line">break my_function</span><br><span class="line">break file.c:123</span><br><span class="line"></span><br><span class="line"># 设置条件断点</span><br><span class="line">break file.c:123 if value == 42</span><br><span class="line"></span><br><span class="line"># 设置观察点</span><br><span class="line">watch my_variable</span><br><span class="line">rwatch my_variable  # 读观察点</span><br><span class="line">awatch my_variable  # 读写观察点</span><br><span class="line"></span><br><span class="line"># 执行控制</span><br><span class="line">continue</span><br><span class="line">step</span><br><span class="line">next</span><br><span class="line">finish</span><br><span class="line"></span><br><span class="line"># 检查变量</span><br><span class="line">print my_variable</span><br><span class="line">print/x my_variable  # 十六进制显示</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>高级命令</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 查看线程</span><br><span class="line">info threads</span><br><span class="line">thread &lt;number&gt;</span><br><span class="line"></span><br><span class="line"># 查看调用栈</span><br><span class="line">backtrace</span><br><span class="line">frame &lt;number&gt;</span><br><span class="line"></span><br><span class="line"># 查看内存</span><br><span class="line">x/10x 0x20000000  # 显示 10 个字节的内存</span><br><span class="line">x/s 0x20000000    # 显示字符串</span><br><span class="line"></span><br><span class="line"># 修改变量</span><br><span class="line">set my_variable = 42</span><br></pre></td></tr></table></figure><h3 id="使用-VSCode-调试"><a href="#使用-VSCode-调试" class="headerlink" title="使用 VSCode 调试"></a>使用 VSCode 调试</h3><p>配置 <code>.vscode/launch.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Zephyr Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cortex-debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;servertype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openocd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;executable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build/zephyr/zephyr.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;configFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;board/my_board.cfg&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;svdFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nrf52.svd&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="内存调试"><a href="#内存调试" class="headerlink" title="内存调试"></a>内存调试</h2><h3 id="内存监控"><a href="#内存监控" class="headerlink" title="内存监控"></a>内存监控</h3><ol><li><strong>启用内存统计</strong></li></ol><p>在 <code>prj.conf</code> 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=16384</span><br><span class="line">CONFIG_HEAP_LISTENER=y</span><br><span class="line">CONFIG_HEAP_LISTENER_LOG=y</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用内存监控 API</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/heap_listener.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">heap_alloc_cb</span><span class="params">(<span class="type">uintptr_t</span> heap_id, <span class="type">void</span> *mem, <span class="type">size_t</span> bytes)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Allocated %zu bytes at %p\n&quot;</span>, bytes, mem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">heap_free_cb</span><span class="params">(<span class="type">uintptr_t</span> heap_id, <span class="type">void</span> *mem, <span class="type">size_t</span> bytes)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Freed %zu bytes at %p\n&quot;</span>, bytes, mem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册监听器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heap_listener</span> <span class="title">my_listener</span> =</span> &#123;</span><br><span class="line">    .alloc_cb = heap_alloc_cb,</span><br><span class="line">    .free_cb = heap_free_cb</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">heap_listener_register(&amp;my_listener);</span><br></pre></td></tr></table></figure><h3 id="内存泄漏检测"><a href="#内存泄漏检测" class="headerlink" title="内存泄漏检测"></a>内存泄漏检测</h3><p>使用 Zephyr 的内存泄漏检测功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_DEBUG_HEAP_MEM_POOL=y</span><br></pre></td></tr></table></figure><h3 id="栈溢出检测"><a href="#栈溢出检测" class="headerlink" title="栈溢出检测"></a>栈溢出检测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_STACK_SENTINEL=y</span><br><span class="line">CONFIG_STACK_CANARIES=y</span><br></pre></td></tr></table></figure><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="系统监控"><a href="#系统监控" class="headerlink" title="系统监控"></a>系统监控</h3><ol><li><strong>启用统计功能</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_THREAD_RUNTIME_STATS=y</span><br><span class="line">CONFIG_THREAD_MONITOR=y</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用统计 API</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_thread_stats</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_thread_runtime_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">    k_thread_runtime_stats_get(k_current_get(), &amp;stats);</span><br><span class="line">    printk(<span class="string">&quot;Execution cycles: %llu\n&quot;</span>, stats.execution_cycles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能计数器"><a href="#性能计数器" class="headerlink" title="性能计数器"></a>性能计数器</h3><ol><li><strong>使用内核时间 API</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">measure_performance</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> start_time = k_cycle_get_32();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行要测量的代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">uint32_t</span> end_time = k_cycle_get_32();</span><br><span class="line">    <span class="type">uint32_t</span> cycles = end_time - start_time;</span><br><span class="line">    printk(<span class="string">&quot;Operation took %u cycles\n&quot;</span>, cycles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用性能计数器</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/counter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">use_hardware_counter</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">counter_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(timer0));</span><br><span class="line">    <span class="type">uint32_t</span> start, end;</span><br><span class="line">    </span><br><span class="line">    counter_get_value(counter_dev, &amp;start);</span><br><span class="line">    <span class="comment">// 执行要测量的代码</span></span><br><span class="line">    counter_get_value(counter_dev, &amp;end);</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Operation took %u ticks\n&quot;</span>, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级调试技巧"><a href="#高级调试技巧" class="headerlink" title="高级调试技巧"></a>高级调试技巧</h2><h3 id="1-系统视图跟踪"><a href="#1-系统视图跟踪" class="headerlink" title="1. 系统视图跟踪"></a>1. 系统视图跟踪</h3><p>使用 SEGGER SystemView：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_SEGGER_SYSTEMVIEW=y</span><br><span class="line">CONFIG_TRACING=y</span><br></pre></td></tr></table></figure><h3 id="2-核心转储"><a href="#2-核心转储" class="headerlink" title="2. 核心转储"></a>2. 核心转储</h3><p>配置核心转储功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_DEBUG_COREDUMP=y</span><br><span class="line">CONFIG_DEBUG_COREDUMP_BACKEND_LOGGING=y</span><br></pre></td></tr></table></figure><h3 id="3-远程调试"><a href="#3-远程调试" class="headerlink" title="3. 远程调试"></a>3. 远程调试</h3><p>设置网络调试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_NET_DEBUG_NET_PKT=y</span><br><span class="line">CONFIG_NET_LOG=y</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>调试准备</strong></p><ul><li>使用 Debug 构建类型</li><li>启用适当的调试功能</li><li>保留调试符号</li></ul></li><li><p><strong>日志使用</strong></p><ul><li>合理设置日志级别</li><li>使用有意义的日志消息</li><li>避免过多日志影响性能</li></ul></li><li><p><strong>断点策略</strong></p><ul><li>使用条件断点减少中断</li><li>在关键路径设置断点</li><li>合理使用观察点</li></ul></li><li><p><strong>内存调试</strong></p><ul><li>定期检查内存使用情况</li><li>注意内存对齐要求</li><li>监控栈使用情况</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>使用性能计数器识别瓶颈</li><li>优化关键路径代码</li><li>监控中断延迟</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>无法连接调试器</strong></p><ul><li>检查硬件连接</li><li>验证调试器驱动</li><li>确认 OpenOCD 配置</li></ul></li><li><p><strong>断点不触发</strong></p><ul><li>检查代码是否优化</li><li>验证断点位置</li><li>确认调试符号存在</li></ul></li><li><p><strong>内存问题</strong></p><ul><li>使用内存监控工具</li><li>检查栈大小配置</li><li>验证内存分配</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>使用性能分析工具</li><li>检查中断处理</li><li>优化内存访问</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>调试是嵌入式开发中不可或缺的一部分。通过合理使用 Zephyr 提供的调试工具和功能，可以有效地定位和解决问题。记住要根据具体情况选择合适的调试方法，并在开发过程中保持良好的调试习惯。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>devicetree</title>
      <link href="/2025/03/21/nodic/zephyr/development/devicetree/"/>
      <url>/2025/03/21/nodic/zephyr/development/devicetree/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-设备树配置"><a href="#Zephyr-设备树配置" class="headerlink" title="Zephyr 设备树配置"></a>Zephyr 设备树配置</h1><p>本文档详细介绍了 Zephyr RTOS 的设备树配置系统，包括基本概念、节点和属性、绑定文件以及覆盖文件的使用方法。</p><h2 id="设备树基础"><a href="#设备树基础" class="headerlink" title="设备树基础"></a>设备树基础</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>设备树是描述硬件配置的数据结构，它以层次化的方式表示系统中的硬件设备及其属性。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基本节点结构 */</span></span><br><span class="line"><span class="title class_">node-name@unit-address</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;address size&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    property1 = <span class="params">&lt;value1&gt;</span><span class="punctuation">;</span></span><br><span class="line">    property2 = <span class="string">&quot;string-value&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">    <span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">child-node</span> <span class="punctuation">&#123;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ol><li><strong>compatible</strong>：标识设备类型和驱动程序</li><li><strong>reg</strong>：设备寄存器地址和大小</li><li><strong>status</strong>：设备状态（”okay”、”disabled”）</li><li><strong>label</strong>：设备标签</li><li><strong>interrupts</strong>：中断配置</li><li><strong>clocks</strong>：时钟配置</li><li><strong>gpios</strong>：GPIO 配置</li></ol><h2 id="节点和属性"><a href="#节点和属性" class="headerlink" title="节点和属性"></a>节点和属性</h2><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><ol><li><p><strong>根节点 (&#x2F;)</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">model</span> <span class="operator">=</span> <span class="string">&quot;Board Name&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,board&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">    <span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>总线节点</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">i2c@40003000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,i2c&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40003000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">    <span class="meta">#size-cells = &lt;0&gt;;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设备节点</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">sensor@48</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,sensor&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x48</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">int-gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">24</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><ol><li><p><strong>整数属性</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">24</span> <span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">100000</span>&gt;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>字符串属性</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;UART_0&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>布尔属性</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hw-flow-control</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">auto-enable</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组属性</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwms</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;pwm0</span> <span class="number">0</span> <span class="number">1000000</span> PWM_POLARITY_NORMAL&gt;</span>,</span><br><span class="line">       <span class="params">&lt;<span class="variable">&amp;pwm1</span> <span class="number">1</span> <span class="number">2000000</span> PWM_POLARITY_INVERTED&gt;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>引用属性（phandle）</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;clk_ctrl</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">dmas</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;dma0</span> <span class="number">0</span> <span class="variable">&amp;dma0</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="绑定文件"><a href="#绑定文件" class="headerlink" title="绑定文件"></a>绑定文件</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">Device</span> <span class="string">Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compatible:</span> <span class="string">&quot;vendor,my-device&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">include:</span> <span class="string">base.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">reg:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">registers</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">interrupts:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">interrupts</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">clock-frequency:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">        <span class="attr">default:</span> <span class="number">100000</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Clock</span> <span class="string">frequency</span> <span class="string">in</span> <span class="string">Hz</span></span><br><span class="line"></span><br><span class="line"><span class="attr">child-binding:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Child</span> <span class="string">node</span> <span class="string">properties</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">reg:</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">Child</span> <span class="string">address</span></span><br></pre></td></tr></table></figure><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><ol><li><p><strong>基本属性</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">my-property:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Property</span> <span class="string">description</span></span><br></pre></td></tr></table></figure></li><li><p><strong>枚举属性</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">operation-mode:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">enum:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;normal&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;fast&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;slow&quot;</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Operating</span> <span class="string">mode</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组属性</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">pin-config:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Pin</span> <span class="string">configuration</span></span><br></pre></td></tr></table></figure></li><li><p><strong>GPIO 属性</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">enable-gpios:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">phandle-array</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Enable</span> <span class="string">GPIO</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="约束定义"><a href="#约束定义" class="headerlink" title="约束定义"></a>约束定义</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">min-frequency:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">            <span class="attr">min:</span> <span class="number">1000</span></span><br><span class="line">            <span class="attr">max:</span> <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">supported-modes:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">            <span class="attr">min-items:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">max-items:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="覆盖文件"><a href="#覆盖文件" class="headerlink" title="覆盖文件"></a>覆盖文件</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li><p><strong>应用程序覆盖文件 (app.overlay)</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 修改现有节点 */</span></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">400000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加新设备 */</span></span><br><span class="line">    <span class="title class_">sensor@48</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,sensor&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x48</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加新节点 */</span></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">my-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>板级覆盖文件 (board.overlay)</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 禁用设备 */</span></span><br><span class="line"><span class="variable">&amp;uart1</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;disabled&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改 GPIO 配置 */</span></span><br><span class="line"><span class="variable">&amp;gpio0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">ngpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="常用修改"><a href="#常用修改" class="headerlink" title="常用修改"></a>常用修改</h3><ol><li><p><strong>修改时钟频率</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">400000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 GPIO</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;gpio0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">ngpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">32</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">gpio-reserved-ranges</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">10</span> <span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>添加设备</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>修改中断配置</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">3</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupt-names</span> <span class="operator">=</span> <span class="string">&quot;rx&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="使用设备树"><a href="#使用设备树" class="headerlink" title="使用设备树"></a>使用设备树</h2><h3 id="在代码中访问"><a href="#在代码中访问" class="headerlink" title="在代码中访问"></a>在代码中访问</h3><ol><li><p><strong>检查节点状态</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_NODE DT_ALIAS(led0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !DT_NODE_HAS_STATUS(LED0_NODE, okay)</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;LED device not enabled&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取属性值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取寄存器地址 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_ADDR DT_REG_ADDR(DT_NODELABEL(uart0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取中断号 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_IRQ DT_IRQN(DT_NODELABEL(uart0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取时钟频率 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_FREQ DT_PROP(DT_NODELABEL(i2c0), clock_frequency)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取 GPIO 信息</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义 GPIO 规范 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led</span> =</span></span><br><span class="line">    GPIO_DT_SPEC_GET(DT_NODELABEL(led0), gpios);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 GPIO */</span></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(led.port)) &#123;</span><br><span class="line">    <span class="keyword">return</span> -ENODEV;</span><br><span class="line">&#125;</span><br><span class="line">gpio_pin_configure_dt(&amp;led, GPIO_OUTPUT_ACTIVE);</span><br></pre></td></tr></table></figure></li><li><p><strong>遍历节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 遍历所有 I2C 设备 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOREACH_I2C_DEVICE(node_id) \</span></span><br><span class="line"><span class="meta">    DT_FOREACH_CHILD(DT_NODELABEL(i2c0), node_id)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROCESS_I2C_DEVICE(node_id) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (DT_NODE_HAS_STATUS(node_id, okay)) &#123; \</span></span><br><span class="line"><span class="meta">            <span class="comment">/* 处理设备 */</span> \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line">FOREACH_I2C_DEVICE(PROCESS_I2C_DEVICE);</span><br></pre></td></tr></table></figure></li></ol><h3 id="编译时检查"><a href="#编译时检查" class="headerlink" title="编译时检查"></a>编译时检查</h3><ol><li><p><strong>节点存在性检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ASSERT(DT_NODE_EXISTS(DT_NODELABEL(i2c0)),</span><br><span class="line">            <span class="string">&quot;I2C0 node not found&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>属性检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ASSERT(DT_NODE_HAS_PROP(DT_NODELABEL(uart0), current_speed),</span><br><span class="line">            <span class="string">&quot;UART speed not configured&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>兼容性检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ASSERT(DT_HAS_COMPAT_STATUS_OKAY(vendor_device),</span><br><span class="line">            <span class="string">&quot;Required device not found&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><h3 id="1-查看处理后的设备树"><a href="#1-查看处理后的设备树" class="headerlink" title="1. 查看处理后的设备树"></a>1. 查看处理后的设备树</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成预处理后的设备树</span></span><br><span class="line">west build -t devicetree_preprocessed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最终的设备树</span></span><br><span class="line">west build -t devicetree_generated</span><br></pre></td></tr></table></figure><h3 id="2-验证设备树语法"><a href="#2-验证设备树语法" class="headerlink" title="2. 验证设备树语法"></a>2. 验证设备树语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 dtc 工具验证</span></span><br><span class="line">dtc -I dts -O dts -o /dev/null build/zephyr/zephyr.dts</span><br></pre></td></tr></table></figure><h3 id="3-检查节点路径"><a href="#3-检查节点路径" class="headerlink" title="3. 检查节点路径"></a>3. 检查节点路径</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在代码中打印节点路径 */</span></span><br><span class="line">LOG_INF(<span class="string">&quot;Node path: %s&quot;</span>, DT_NODE_PATH(DT_NODELABEL(my_device)));</span><br></pre></td></tr></table></figure><h3 id="4-调试绑定问题"><a href="#4-调试绑定问题" class="headerlink" title="4. 调试绑定问题"></a>4. 调试绑定问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看绑定警告</span></span><br><span class="line">west build -t devicetree_generated -- -DDTC_WARN_UNDEFINED_BINDING=y</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-设备树组织"><a href="#1-设备树组织" class="headerlink" title="1. 设备树组织"></a>1. 设备树组织</h3><ul><li>使用逻辑分组</li><li>保持结构清晰</li><li>适当使用标签</li><li>文档化配置</li></ul><h3 id="2-属性命名"><a href="#2-属性命名" class="headerlink" title="2. 属性命名"></a>2. 属性命名</h3><ul><li>使用标准属性名</li><li>遵循命名约定</li><li>清晰描述用途</li><li>添加适当注释</li></ul><h3 id="3-覆盖文件使用"><a href="#3-覆盖文件使用" class="headerlink" title="3. 覆盖文件使用"></a>3. 覆盖文件使用</h3><ul><li>最小化修改</li><li>保持兼容性</li><li>文档化更改</li><li>验证修改效果</li></ul><h3 id="4-代码集成"><a href="#4-代码集成" class="headerlink" title="4. 代码集成"></a>4. 代码集成</h3><ul><li>使用设备树宏</li><li>验证配置</li><li>错误处理</li><li>维护性考虑</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-节点不可见"><a href="#1-节点不可见" class="headerlink" title="1. 节点不可见"></a>1. 节点不可见</h3><p><strong>问题</strong>：无法访问设备树节点</p><p><strong>解决方案</strong>：</p><ul><li>检查节点状态</li><li>验证路径正确</li><li>确认编译选项</li><li>检查依赖关系</li></ul><h3 id="2-属性访问错误"><a href="#2-属性访问错误" class="headerlink" title="2. 属性访问错误"></a>2. 属性访问错误</h3><p><strong>问题</strong>：无法获取属性值</p><p><strong>解决方案</strong>：</p><ul><li>检查属性类型</li><li>验证属性存在</li><li>确认访问方法</li><li>检查绑定文件</li></ul><h3 id="3-绑定问题"><a href="#3-绑定问题" class="headerlink" title="3. 绑定问题"></a>3. 绑定问题</h3><p><strong>问题</strong>：绑定文件不生效</p><p><strong>解决方案</strong>：</p><ul><li>检查文件位置</li><li>验证语法正确</li><li>确认兼容性字符串</li><li>更新构建系统</li></ul><h3 id="4-覆盖冲突"><a href="#4-覆盖冲突" class="headerlink" title="4. 覆盖冲突"></a>4. 覆盖冲突</h3><p><strong>问题</strong>：覆盖文件冲突</p><p><strong>解决方案</strong>：</p><ul><li>检查优先级</li><li>解决冲突</li><li>统一配置</li><li>文档化选择</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>设备树是 Zephyr RTOS 中描述硬件配置的核心机制。通过正确使用节点、属性、绑定文件和覆盖文件，可以灵活地配置和管理硬件资源。本文档提供了详细的指导和实例，帮助开发者更好地理解和使用设备树系统。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>driver</title>
      <link href="/2025/03/21/nodic/zephyr/development/driver/"/>
      <url>/2025/03/21/nodic/zephyr/development/driver/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-驱动开发指南"><a href="#Zephyr-驱动开发指南" class="headerlink" title="Zephyr 驱动开发指南"></a>Zephyr 驱动开发指南</h1><p>本文档提供了在 Zephyr RTOS 中开发设备驱动程序的详细指南。它涵盖了驱动模型概述、设备树使用、驱动 API 实现以及驱动测试和调试的方法。</p><h2 id="驱动模型概述"><a href="#驱动模型概述" class="headerlink" title="驱动模型概述"></a>驱动模型概述</h2><p>Zephyr 的驱动模型基于以下核心概念：</p><ol><li><strong>设备</strong>：表示硬件或软件实体</li><li><strong>驱动</strong>：实现设备操作的代码</li><li><strong>API</strong>：定义设备操作的标准接口</li><li><strong>设备树</strong>：描述硬件配置的数据结构</li></ol><h3 id="驱动结构"><a href="#驱动结构" class="headerlink" title="驱动结构"></a>驱动结构</h3><p>典型的 Zephyr 驱动程序包括以下组件：</p><ol><li><strong>驱动 API 结构体</strong>：定义设备操作函数</li><li><strong>设备配置结构体</strong>：存储设备的静态配置</li><li><strong>设备数据结构体</strong>：存储设备的运行时数据</li><li><strong>初始化函数</strong>：执行设备初始化</li><li><strong>API 实现函数</strong>：实现具体的设备操作</li></ol><h2 id="设备树使用"><a href="#设备树使用" class="headerlink" title="设备树使用"></a>设备树使用</h2><p>设备树用于描述硬件配置，驱动程序可以从中获取必要的信息。</p><h3 id="设备树节点示例"><a href="#设备树节点示例" class="headerlink" title="设备树节点示例"></a>设备树节点示例</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">my_device:</span> <span class="title class_">my_device@40000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">10</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;MY_DEVICE&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="在驱动中访问设备树信息"><a href="#在驱动中访问设备树信息" class="headerlink" title="在驱动中访问设备树信息"></a>在驱动中访问设备树信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_NODE DT_NODELABEL(my_device)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取寄存器地址</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_BASE_ADDR DT_REG_ADDR(MY_DEVICE_NODE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取中断信息</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_IRQ DT_IRQN(MY_DEVICE_NODE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_IRQ_PRIO DT_IRQ(MY_DEVICE_NODE, priority)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查设备状态</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DT_NODE_HAS_STATUS(MY_DEVICE_NODE, okay)</span></span><br><span class="line"><span class="comment">// 设备已启用</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="驱动-API-实现"><a href="#驱动-API-实现" class="headerlink" title="驱动 API 实现"></a>驱动 API 实现</h2><h3 id="1-定义-API-结构体"><a href="#1-定义-API-结构体" class="headerlink" title="1. 定义 API 结构体"></a>1. 定义 API 结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*init)(<span class="type">const</span> <span class="keyword">struct</span> device *dev);</span><br><span class="line">    <span class="type">int</span> (*read)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> *data);</span><br><span class="line">    <span class="type">int</span> (*write)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-实现-API-函数"><a href="#2-实现-API-函数" class="headerlink" title="2. 实现 API 函数"></a>2. 实现 API 函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 初始化代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_read</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> <span class="title">my_driver_api</span> =</span> &#123;</span><br><span class="line">    .init = my_device_init,</span><br><span class="line">    .read = my_device_read,</span><br><span class="line">    .write = my_device_write,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-定义设备配置和数据结构"><a href="#3-定义设备配置和数据结构" class="headerlink" title="3. 定义设备配置和数据结构"></a>3. 定义设备配置和数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_device_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> irq;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_device_data</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> current_value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-实现初始化函数"><a href="#4-实现初始化函数" class="headerlink" title="4. 实现初始化函数"></a>4. 实现初始化函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_device_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_device_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用配置信息初始化设备</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-注册设备"><a href="#5-注册设备" class="headerlink" title="5. 注册设备"></a>5. 注册设备</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_INIT(n)                                             \</span></span><br><span class="line"><span class="meta">    static const struct my_device_config my_device_config_##n = &#123;     \</span></span><br><span class="line"><span class="meta">        .base_addr = DT_INST_REG_ADDR(n),                             \</span></span><br><span class="line"><span class="meta">        .irq = DT_INST_IRQN(n),                                       \</span></span><br><span class="line"><span class="meta">    &#125;;                                                                \</span></span><br><span class="line"><span class="meta">                                                                      \</span></span><br><span class="line"><span class="meta">    static struct my_device_data my_device_data_##n;                  \</span></span><br><span class="line"><span class="meta">                                                                      \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(n,                                          \</span></span><br><span class="line"><span class="meta">                          my_device_init,                             \</span></span><br><span class="line"><span class="meta">                          NULL,                                       \</span></span><br><span class="line"><span class="meta">                          &amp;my_device_data_##n,                        \</span></span><br><span class="line"><span class="meta">                          &amp;my_device_config_##n,                      \</span></span><br><span class="line"><span class="meta">                          POST_KERNEL,                                \</span></span><br><span class="line"><span class="meta">                          CONFIG_KERNEL_INIT_PRIORITY_DEVICE,         \</span></span><br><span class="line"><span class="meta">                          &amp;my_driver_api);</span></span><br><span class="line"></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_DEVICE_INIT)</span><br></pre></td></tr></table></figure><h2 id="驱动测试和调试"><a href="#驱动测试和调试" class="headerlink" title="驱动测试和调试"></a>驱动测试和调试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>使用 Zephyr 的测试框架为驱动程序编写单元测试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/my_driver.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">test_my_driver_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_device));</span><br><span class="line">    zassert_true(device_is_ready(dev), <span class="string">&quot;Device not ready&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">test_my_driver_read</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_device));</span><br><span class="line">    <span class="type">uint32_t</span> data;</span><br><span class="line">    <span class="type">int</span> ret = my_driver_read(dev, &amp;data);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;Read failed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZTEST(my_driver_tests, test_my_driver_init);</span><br><span class="line">ZTEST(my_driver_tests, test_my_driver_read);</span><br><span class="line"></span><br><span class="line">ZTEST_SUITE(my_driver_tests, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h3><ol><li><strong>使用日志系统</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(my_driver, CONFIG_MY_DRIVER_LOG_LEVEL);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Initializing my device&quot;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用断言</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/__assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    __ASSERT(dev != <span class="literal">NULL</span>, <span class="string">&quot;Device pointer is NULL&quot;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>使用 GDB 调试</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -b &lt;board&gt; -- -DCMAKE_BUILD_TYPE=Debug</span><br><span class="line">west debug</span><br></pre></td></tr></table></figure><h2 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h2><h3 id="1-电源管理集成"><a href="#1-电源管理集成" class="headerlink" title="1. 电源管理集成"></a>1. 电源管理集成</h3><p>实现电源管理回调：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_pm_action</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                               <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">// 唤醒设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">// 挂起设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PM_DEVICE_DT_INST_DEFINE(<span class="number">0</span>, my_device_pm_action);</span><br></pre></td></tr></table></figure><h3 id="2-DMA-支持"><a href="#2-DMA-支持" class="headerlink" title="2. DMA 支持"></a>2. DMA 支持</h3><p>使用 Zephyr 的 DMA API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_dma_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                  <span class="type">uint32_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;</span><br><span class="line">        .channel_direction = MEMORY_TO_PERIPHERAL,</span><br><span class="line">        .source_data_size = <span class="number">4</span>,</span><br><span class="line">        .dest_data_size = <span class="number">4</span>,</span><br><span class="line">        .source_burst_length = <span class="number">4</span>,</span><br><span class="line">        .dest_burst_length = <span class="number">4</span>,</span><br><span class="line">        .dma_callback = dma_callback,</span><br><span class="line">        .user_data = (<span class="type">void</span> *)dev,</span><br><span class="line">        .complete_callback_en = <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block</span> =</span> &#123;</span><br><span class="line">        .source_address = (<span class="type">uint32_t</span>)data,</span><br><span class="line">        .dest_address = MY_DEVICE_BASE_ADDR,</span><br><span class="line">        .block_size = size,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    dma_cfg.head_block = &amp;dma_block;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-中断处理"><a href="#3-中断处理" class="headerlink" title="3. 中断处理"></a>3. 中断处理</h3><p>配置和处理中断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/irq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">my_device_isr</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_device_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="comment">// 处理中断</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_device_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line"></span><br><span class="line">    IRQ_CONNECT(config-&gt;irq, config-&gt;irq_prio, my_device_isr,</span><br><span class="line">                DEVICE_GET(my_device), <span class="number">0</span>);</span><br><span class="line">    irq_enable(config-&gt;irq);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>模块化设计</strong></p><ul><li>将功能分解为小型、可重用的函数</li><li>使用清晰的接口分离关注点</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>始终检查返回值并处理错误</li><li>使用有意义的错误代码</li></ul></li><li><p><strong>配置灵活性</strong></p><ul><li>尽可能使用设备树进行配置</li><li>提供运行时配置选项</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>最小化关键路径上的操作</li><li>考虑使用 DMA 进行大数据传输</li></ul></li><li><p><strong>可移植性</strong></p><ul><li>使用 Zephyr 的抽象 API</li><li>避免直接访问硬件寄存器</li></ul></li><li><p><strong>文档</strong></p><ul><li>为 API 函数提供清晰的文档</li><li>包含使用示例和注意事项</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>设备初始化失败</strong></p><ul><li>检查设备树配置</li><li>验证硬件连接</li><li>确保依赖的时钟和电源已启用</li></ul></li><li><p><strong>中断不工作</strong></p><ul><li>检查中断配置（IRQ 号、优先级）</li><li>验证中断处理函数是否正确注册</li><li>检查中断是否已启用</li></ul></li><li><p><strong>DMA 传输问题</strong></p><ul><li>验证 DMA 通道配置</li><li>检查内存对齐要求</li><li>确保源和目标地址正确</li></ul></li><li><p><strong>电源管理问题</strong></p><ul><li>检查电源管理回调是否正确实现</li><li>验证设备状态转换逻辑</li><li>测试不同电源状态下的设备行为</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开发 Zephyr 驱动程序需要深入理解硬件特性和 Zephyr 的驱动模型。通过遵循本指南中的最佳实践和建议，您可以开发出高质量、可靠的设备驱动程序。记住要充分利用 Zephyr 提供的抽象和工具，如设备树、电源管理和 DMA 支持，以创建灵活、高效的驱动程序。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>drivers</title>
      <link href="/2025/03/21/nodic/zephyr/development/drivers/"/>
      <url>/2025/03/21/nodic/zephyr/development/drivers/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-驱动开发"><a href="#Zephyr-驱动开发" class="headerlink" title="Zephyr 驱动开发"></a>Zephyr 驱动开发</h1><p>本文档详细介绍了 Zephyr RTOS 的驱动开发过程，包括驱动模型、API 设计、设备树绑定以及实际示例。</p><h2 id="驱动模型"><a href="#驱动模型" class="headerlink" title="驱动模型"></a>驱动模型</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Zephyr 的驱动模型基于以下核心概念：</p><ol><li><strong>设备对象</strong>：表示硬件设备的软件抽象</li><li><strong>驱动 API</strong>：定义设备操作接口</li><li><strong>设备树</strong>：描述硬件配置</li><li><strong>设备实例</strong>：运行时的设备表示</li></ol><h3 id="驱动结构"><a href="#驱动结构" class="headerlink" title="驱动结构"></a>驱动结构</h3><p>典型的驱动程序包含以下部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 驱动 API 定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*init)(<span class="type">const</span> <span class="keyword">struct</span> device *dev);</span><br><span class="line">    <span class="type">int</span> (*read)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">void</span> *buf, <span class="type">size_t</span> len);</span><br><span class="line">    <span class="type">int</span> (*write)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备数据结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> config_value;</span><br><span class="line">    <span class="type">uint8_t</span> status;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备配置结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> irq_num;</span><br><span class="line">    <span class="type">uint32_t</span> clock_freq;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动实例化 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DRIVER_INIT(n)                                            \</span></span><br><span class="line"><span class="meta">    static struct my_driver_data my_driver_data_##n = &#123;             \</span></span><br><span class="line"><span class="meta">        .status = 0,                                                \</span></span><br><span class="line"><span class="meta">    &#125;;                                                              \</span></span><br><span class="line"><span class="meta">                                                                    \</span></span><br><span class="line"><span class="meta">    static const struct my_driver_config my_driver_config_##n = &#123;   \</span></span><br><span class="line"><span class="meta">        .base_addr = DT_INST_REG_ADDR(n),                          \</span></span><br><span class="line"><span class="meta">        .irq_num = DT_INST_IRQN(n),                                \</span></span><br><span class="line"><span class="meta">        .clock_freq = DT_INST_PROP(n, clock_frequency),            \</span></span><br><span class="line"><span class="meta">    &#125;;                                                              \</span></span><br><span class="line"><span class="meta">                                                                    \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(n,                                       \</span></span><br><span class="line"><span class="meta">                         my_driver_init,                            \</span></span><br><span class="line"><span class="meta">                         NULL,                                      \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_data_##n,                       \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_config_##n,                     \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                               \</span></span><br><span class="line"><span class="meta">                         CONFIG_KERNEL_INIT_PRIORITY_DEVICE,        \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_api);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为每个实例生成代码 */</span></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_DRIVER_INIT)</span><br></pre></td></tr></table></figure><h2 id="驱动-API"><a href="#驱动-API" class="headerlink" title="驱动 API"></a>驱动 API</h2><h3 id="API-设计原则"><a href="#API-设计原则" class="headerlink" title="API 设计原则"></a>API 设计原则</h3><ol><li><p><strong>一致性</strong></p><ul><li>遵循 Zephyr API 命名约定</li><li>保持参数顺序一致</li><li>使用统一的错误码</li></ul></li><li><p><strong>可重入性</strong></p><ul><li>保护共享资源</li><li>避免全局变量</li><li>使用线程安全机制</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>返回有意义的错误码</li><li>提供详细的错误信息</li><li>实现错误恢复机制</li></ul></li></ol><h3 id="API-实现示例"><a href="#API-实现示例" class="headerlink" title="API 实现示例"></a>API 实现示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 驱动初始化函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化同步原语 */</span></span><br><span class="line">    k_sem_init(&amp;data-&gt;lock, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置硬件 */</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_read</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                         <span class="type">void</span> *buf, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取锁 */</span></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行读取操作 */</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放锁 */</span></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写入函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取锁 */</span></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行写入操作 */</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放锁 */</span></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* API 结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> <span class="title">my_driver_api</span> =</span> &#123;</span><br><span class="line">    .init = my_driver_init,</span><br><span class="line">    .read = my_driver_read,</span><br><span class="line">    .write = my_driver_write,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="设备树绑定"><a href="#设备树绑定" class="headerlink" title="设备树绑定"></a>设备树绑定</h2><h3 id="绑定文件"><a href="#绑定文件" class="headerlink" title="绑定文件"></a>绑定文件</h3><p>设备树绑定文件 (*.yaml) 定义了设备的属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">Device</span> <span class="string">Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compatible:</span> <span class="string">&quot;vendor,my-device&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">include:</span> <span class="string">base.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">reg:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">registers</span> <span class="string">location</span> <span class="string">and</span> <span class="string">length</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">interrupts:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">interrupt</span> <span class="string">lines</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">clock-frequency:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">clock</span> <span class="string">frequency</span> <span class="string">in</span> <span class="string">Hz</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enable-gpios:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">phandle-array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">GPIO</span> <span class="string">for</span> <span class="string">device</span> <span class="string">enable</span> <span class="string">control</span></span><br><span class="line"></span><br><span class="line"><span class="attr">child-binding:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Child</span> <span class="string">node</span> <span class="string">properties</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">reg:</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">Child</span> <span class="string">device</span> <span class="string">address</span></span><br></pre></td></tr></table></figure><h3 id="设备树节点"><a href="#设备树节点" class="headerlink" title="设备树节点"></a>设备树节点</h3><p>设备树中的设备节点：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">my_device:</span> <span class="title class_">my-device@40000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">10</span> <span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">enable-gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">15</span> GPIO_ACTIVE_HIGH&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">child@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="驱动示例"><a href="#驱动示例" class="headerlink" title="驱动示例"></a>驱动示例</h2><h3 id="1-GPIO-驱动"><a href="#1-GPIO-驱动" class="headerlink" title="1. GPIO 驱动"></a>1. GPIO 驱动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动数据 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> <span class="title">config</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> pin_state;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> port_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 配置函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_driver_configure</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_flags_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pin &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 GPIO */</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; GPIO_OUTPUT) &#123;</span><br><span class="line">        <span class="comment">/* 配置为输出 */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; GPIO_INPUT) &#123;</span><br><span class="line">        <span class="comment">/* 配置为输入 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 获取函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_driver_get</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                          <span class="type">gpio_flags_t</span> *flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pin &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取 GPIO 状态 */</span></span><br><span class="line">    *flags = (data-&gt;pin_state &amp; BIT(pin)) ? GPIO_ACTIVE_HIGH : GPIO_ACTIVE_LOW;</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 设置函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_driver_set</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pin &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置 GPIO 状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        data-&gt;pin_state |= BIT(pin);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        data-&gt;pin_state &amp;= ~BIT(pin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 驱动 API */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_api</span> <span class="title">gpio_driver_api</span> =</span> &#123;</span><br><span class="line">    .pin_configure = gpio_driver_configure,</span><br><span class="line">    .pin_get = gpio_driver_get,</span><br><span class="line">    .pin_set = gpio_driver_set,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动初始化宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_DRIVER_INIT(n)                                          \</span></span><br><span class="line"><span class="meta">    static struct gpio_driver_data gpio_driver_data_##n = &#123;         \</span></span><br><span class="line"><span class="meta">        .pin_state = 0,                                            \</span></span><br><span class="line"><span class="meta">    &#125;;                                                             \</span></span><br><span class="line"><span class="meta">                                                                   \</span></span><br><span class="line"><span class="meta">    static const struct gpio_driver_config gpio_driver_config_##n = &#123;\</span></span><br><span class="line"><span class="meta">        .base_addr = DT_INST_REG_ADDR(n),                         \</span></span><br><span class="line"><span class="meta">        .port_num = DT_INST_PROP(n, port),                        \</span></span><br><span class="line"><span class="meta">    &#125;;                                                             \</span></span><br><span class="line"><span class="meta">                                                                   \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(n,                                      \</span></span><br><span class="line"><span class="meta">                         gpio_driver_init,                         \</span></span><br><span class="line"><span class="meta">                         NULL,                                     \</span></span><br><span class="line"><span class="meta">                         &amp;gpio_driver_data_##n,                    \</span></span><br><span class="line"><span class="meta">                         &amp;gpio_driver_config_##n,                  \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                              \</span></span><br><span class="line"><span class="meta">                         CONFIG_GPIO_INIT_PRIORITY,                \</span></span><br><span class="line"><span class="meta">                         &amp;gpio_driver_api);</span></span><br><span class="line"></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(GPIO_DRIVER_INIT)</span><br></pre></td></tr></table></figure><h3 id="2-I2C-驱动"><a href="#2-I2C-驱动" class="headerlink" title="2. I2C 驱动"></a>2. I2C 驱动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动数据 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">lock</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> speed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> irq_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I2C 传输函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">i2c_driver_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                              <span class="keyword">struct</span> i2c_msg *msgs,</span></span><br><span class="line"><span class="params">                              <span class="type">uint8_t</span> num_msgs,</span></span><br><span class="line"><span class="params">                              <span class="type">uint16_t</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理每个消息 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_msgs; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (msgs[i].flags &amp; I2C_MSG_READ) &#123;</span><br><span class="line">            <span class="comment">/* 读取操作 */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 写入操作 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I2C 驱动 API */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_api</span> <span class="title">i2c_driver_api</span> =</span> &#123;</span><br><span class="line">    .transfer = i2c_driver_transfer,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动初始化宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_DRIVER_INIT(n)                                          \</span></span><br><span class="line"><span class="meta">    static struct i2c_driver_data i2c_driver_data_##n = &#123;         \</span></span><br><span class="line"><span class="meta">        .speed = DT_INST_PROP(n, clock_frequency),               \</span></span><br><span class="line"><span class="meta">    &#125;;                                                             \</span></span><br><span class="line"><span class="meta">                                                                   \</span></span><br><span class="line"><span class="meta">    static const struct i2c_driver_config i2c_driver_config_##n = &#123;\</span></span><br><span class="line"><span class="meta">        .base_addr = DT_INST_REG_ADDR(n),                         \</span></span><br><span class="line"><span class="meta">        .irq_num = DT_INST_IRQN(n),                              \</span></span><br><span class="line"><span class="meta">    &#125;;                                                             \</span></span><br><span class="line"><span class="meta">                                                                   \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(n,                                      \</span></span><br><span class="line"><span class="meta">                         i2c_driver_init,                         \</span></span><br><span class="line"><span class="meta">                         NULL,                                     \</span></span><br><span class="line"><span class="meta">                         &amp;i2c_driver_data_##n,                    \</span></span><br><span class="line"><span class="meta">                         &amp;i2c_driver_config_##n,                  \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                              \</span></span><br><span class="line"><span class="meta">                         CONFIG_I2C_INIT_PRIORITY,                \</span></span><br><span class="line"><span class="meta">                         &amp;i2c_driver_api);</span></span><br><span class="line"></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(I2C_DRIVER_INIT)</span><br></pre></td></tr></table></figure><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><h3 id="1-使用日志"><a href="#1-使用日志" class="headerlink" title="1. 使用日志"></a>1. 使用日志</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(my_driver, CONFIG_MY_DRIVER_LOG_LEVEL);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_function</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    LOG_DBG(<span class="string">&quot;Debug message&quot;</span>);</span><br><span class="line">    LOG_INF(<span class="string">&quot;Info message&quot;</span>);</span><br><span class="line">    LOG_WRN(<span class="string">&quot;Warning message&quot;</span>);</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Error message&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用断言"><a href="#2-使用断言" class="headerlink" title="2. 使用断言"></a>2. 使用断言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/check.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_function</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数检查 */</span></span><br><span class="line">    CHECKIF(dev == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 状态检查 */</span></span><br><span class="line">    CHECKIF(!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-性能分析"><a href="#3-性能分析" class="headerlink" title="3. 性能分析"></a>3. 性能分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/timing/timing.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_function</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">timing_t</span> start_time, end_time;</span><br><span class="line">    <span class="type">uint64_t</span> cycles, ns;</span><br><span class="line"></span><br><span class="line">    timing_init();</span><br><span class="line">    timing_start();</span><br><span class="line">    start_time = timing_counter_get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行操作 */</span></span><br><span class="line"></span><br><span class="line">    end_time = timing_counter_get();</span><br><span class="line">    cycles = timing_cycles_get(&amp;start_time, &amp;end_time);</span><br><span class="line">    ns = timing_cycles_to_ns(cycles);</span><br><span class="line">    timing_stop();</span><br><span class="line"></span><br><span class="line">    LOG_INF(<span class="string">&quot;Operation took %llu ns&quot;</span>, ns);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-驱动设计"><a href="#1-驱动设计" class="headerlink" title="1. 驱动设计"></a>1. 驱动设计</h3><ul><li>使用标准 API</li><li>实现错误处理</li><li>支持电源管理</li><li>考虑并发访问</li></ul><h3 id="2-资源管理"><a href="#2-资源管理" class="headerlink" title="2. 资源管理"></a>2. 资源管理</h3><ul><li>使用设备树配置</li><li>正确初始化资源</li><li>实现清理函数</li><li>避免资源泄漏</li></ul><h3 id="3-性能优化"><a href="#3-性能优化" class="headerlink" title="3. 性能优化"></a>3. 性能优化</h3><ul><li>最小化关中断时间</li><li>使用 DMA（如适用）</li><li>优化数据传输</li><li>减少上下文切换</li></ul><h3 id="4-可移植性"><a href="#4-可移植性" class="headerlink" title="4. 可移植性"></a>4. 可移植性</h3><ul><li>使用抽象层</li><li>避免硬编码</li><li>支持多平台</li><li>文档完善</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-初始化失败"><a href="#1-初始化失败" class="headerlink" title="1. 初始化失败"></a>1. 初始化失败</h3><p><strong>问题</strong>：驱动初始化失败</p><p><strong>解决方案</strong>：</p><ul><li>检查设备树配置</li><li>验证硬件连接</li><li>确认时序要求</li><li>检查资源冲突</li></ul><h3 id="2-通信错误"><a href="#2-通信错误" class="headerlink" title="2. 通信错误"></a>2. 通信错误</h3><p><strong>问题</strong>：与设备通信失败</p><p><strong>解决方案</strong>：</p><ul><li>检查总线配置</li><li>验证设备地址</li><li>确认协议实现</li><li>使用示波器分析</li></ul><h3 id="3-并发问题"><a href="#3-并发问题" class="headerlink" title="3. 并发问题"></a>3. 并发问题</h3><p><strong>问题</strong>：多线程访问冲突</p><p><strong>解决方案</strong>：</p><ul><li>使用同步机制</li><li>保护共享资源</li><li>避免死锁</li><li>实现超时机制</li></ul><h3 id="4-性能问题"><a href="#4-性能问题" class="headerlink" title="4. 性能问题"></a>4. 性能问题</h3><p><strong>问题</strong>：驱动性能不达标</p><p><strong>解决方案</strong>：</p><ul><li>优化数据路径</li><li>使用中断模式</li><li>实现 DMA 传输</li><li>减少等待时间</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 驱动开发需要深入理解硬件特性和软件架构。通过遵循驱动模型、正确实现 API、使用设备树配置，可以开发出高质量的设备驱动程序。本文档提供了详细的指导和实例，帮助开发者更好地理解和实践 Zephyr 驱动开发。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kernel</title>
      <link href="/2025/03/21/nodic/zephyr/development/kernel/"/>
      <url>/2025/03/21/nodic/zephyr/development/kernel/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-内核服务"><a href="#Zephyr-内核服务" class="headerlink" title="Zephyr 内核服务"></a>Zephyr 内核服务</h1><p>本文档详细介绍了 Zephyr RTOS 的内核服务，包括线程管理、同步机制、内存管理和定时器服务等核心功能。</p><h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><h3 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h3><ol><li><p><strong>静态创建</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义线程栈 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(thread_stack, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程数据结构 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程入口函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 线程工作 */</span></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建线程 */</span></span><br><span class="line">k_thread_create(&amp;thread_data, thread_stack,</span><br><span class="line">                K_THREAD_STACK_SIZEOF(thread_stack),</span><br><span class="line">                thread_entry,</span><br><span class="line">                <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                K_PRIO_PREEMPT(<span class="number">7</span>), <span class="number">0</span>, K_NO_WAIT);</span><br></pre></td></tr></table></figure></li><li><p><strong>动态创建</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 分配线程栈 */</span></span><br><span class="line"><span class="type">k_thread_stack_t</span> *<span class="built_in">stack</span> = k_thread_stack_alloc(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建线程 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> *<span class="title">thread</span> =</span> k_thread_create(<span class="literal">NULL</span>, <span class="built_in">stack</span>, <span class="number">1024</span>,</span><br><span class="line">                                        thread_entry,</span><br><span class="line">                                        <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                                        K_PRIO_PREEMPT(<span class="number">7</span>), <span class="number">0</span>, K_NO_WAIT);</span><br></pre></td></tr></table></figure></li></ol><h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><ol><li><p><strong>线程状态管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 挂起线程 */</span></span><br><span class="line">k_thread_suspend(thread);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 恢复线程 */</span></span><br><span class="line">k_thread_resume(thread);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中止线程 */</span></span><br><span class="line">k_thread_abort(thread);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 启动线程 */</span></span><br><span class="line">k_thread_start(thread);</span><br></pre></td></tr></table></figure></li><li><p><strong>优先级管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置优先级 */</span></span><br><span class="line">k_thread_priority_set(thread, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取优先级 */</span></span><br><span class="line"><span class="type">int</span> prio = k_thread_priority_get(thread);</span><br></pre></td></tr></table></figure></li><li><p><strong>时间管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 线程休眠 */</span></span><br><span class="line">k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line">k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 让出处理器 */</span></span><br><span class="line">k_yield();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 忙等待 */</span></span><br><span class="line">k_busy_wait(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="同步机制"><a href="#同步机制" class="headerlink" title="同步机制"></a>同步机制</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 静态定义 */</span></span><br><span class="line">K_SEM_DEFINE(my_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">sem</span>;</span></span><br><span class="line">k_sem_init(&amp;sem, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用信号量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 等待信号量 */</span></span><br><span class="line">k_sem_take(&amp;sem, K_FOREVER);</span><br><span class="line">k_sem_take(&amp;sem, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放信号量 */</span></span><br><span class="line">k_sem_give(&amp;sem);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重置信号量 */</span></span><br><span class="line">k_sem_reset(&amp;sem);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取信号量计数 */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> count = k_sem_count_get(&amp;sem);</span><br></pre></td></tr></table></figure></li></ol><h3 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 静态定义 */</span></span><br><span class="line">K_MUTEX_DEFINE(my_mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">mutex</span>;</span></span><br><span class="line">k_mutex_init(&amp;mutex);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用互斥量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取互斥量 */</span></span><br><span class="line">k_mutex_lock(&amp;mutex, K_FOREVER);</span><br><span class="line">k_mutex_lock(&amp;mutex, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放互斥量 */</span></span><br><span class="line">k_mutex_unlock(&amp;mutex);</span><br></pre></td></tr></table></figure></li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 静态定义 */</span></span><br><span class="line">K_EVENT_DEFINE(my_event);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_event</span> <span class="title">event</span>;</span></span><br><span class="line">k_event_init(&amp;event);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用事件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置事件 */</span></span><br><span class="line">k_event_set(&amp;event, <span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等待事件 */</span></span><br><span class="line"><span class="type">uint32_t</span> events = k_event_wait(&amp;event, <span class="number">0x01</span>, <span class="literal">false</span>, K_FOREVER);</span><br><span class="line">events = k_event_wait_all(&amp;event, <span class="number">0x03</span>, <span class="literal">false</span>, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清除事件 */</span></span><br><span class="line">k_event_clear(&amp;event, <span class="number">0x01</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义消息缓冲区 */</span></span><br><span class="line">K_MSGQ_DEFINE(my_msgq, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> my_msg), <span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_msgq</span> <span class="title">msgq</span>;</span></span><br><span class="line"><span class="type">char</span> __aligned(<span class="number">4</span>) buffer[<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> my_msg)];</span><br><span class="line">k_msgq_init(&amp;msgq, buffer, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> my_msg), <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用消息队列</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 发送消息 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_msg</span> <span class="title">msg</span> =</span> &#123; ... &#125;;</span><br><span class="line">k_msgq_put(&amp;msgq, &amp;msg, K_FOREVER);</span><br><span class="line">k_msgq_put(&amp;msgq, &amp;msg, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收消息 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_msg</span> <span class="title">rx_msg</span>;</span></span><br><span class="line">k_msgq_get(&amp;msgq, &amp;rx_msg, K_FOREVER);</span><br><span class="line">k_msgq_get(&amp;msgq, &amp;rx_msg, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清空队列 */</span></span><br><span class="line">k_msgq_purge(&amp;msgq);</span><br></pre></td></tr></table></figure></li></ol><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><ol><li><p><strong>内存分配</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 分配内存 */</span></span><br><span class="line"><span class="type">void</span> *ptr = k_malloc(size);</span><br><span class="line"><span class="type">void</span> *aligned_ptr = k_aligned_alloc(alignment, size);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放内存 */</span></span><br><span class="line">k_free(ptr);</span><br></pre></td></tr></table></figure></li><li><p><strong>内存池</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义内存池 */</span></span><br><span class="line">K_MEM_POOL_DEFINE(my_pool, <span class="number">64</span>, <span class="number">256</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从内存池分配 */</span></span><br><span class="line"><span class="type">void</span> *ptr = k_mem_pool_alloc(&amp;my_pool, size, K_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放到内存池 */</span></span><br><span class="line">k_mem_pool_free(&amp;ptr);</span><br></pre></td></tr></table></figure></li></ol><h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3><ol><li><p><strong>线程栈</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义线程栈 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(my_stack, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取栈大小 */</span></span><br><span class="line"><span class="type">size_t</span> size = K_THREAD_STACK_SIZEOF(my_stack);</span><br></pre></td></tr></table></figure></li><li><p><strong>栈统计</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取栈使用情况 */</span></span><br><span class="line"><span class="type">size_t</span> unused = k_thread_stack_space_get(thread);</span><br></pre></td></tr></table></figure></li></ol><h2 id="定时器服务"><a href="#定时器服务" class="headerlink" title="定时器服务"></a>定时器服务</h2><h3 id="内核定时器"><a href="#内核定时器" class="headerlink" title="内核定时器"></a>内核定时器</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义定时器 */</span></span><br><span class="line">K_TIMER_DEFINE(my_timer, timer_expiry_fn, timer_stop_fn);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_timer</span> <span class="title">timer</span>;</span></span><br><span class="line">k_timer_init(&amp;timer, timer_expiry_fn, timer_stop_fn);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用定时器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 启动定时器 */</span></span><br><span class="line">k_timer_start(&amp;timer, K_MSEC(<span class="number">100</span>), K_MSEC(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 停止定时器 */</span></span><br><span class="line">k_timer_stop(&amp;timer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取剩余时间 */</span></span><br><span class="line"><span class="type">uint32_t</span> remaining = k_timer_remaining_get(&amp;timer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取过期次数 */</span></span><br><span class="line"><span class="type">uint32_t</span> count = k_timer_status_get(&amp;timer);</span><br></pre></td></tr></table></figure></li></ol><h3 id="系统时钟"><a href="#系统时钟" class="headerlink" title="系统时钟"></a>系统时钟</h3><ol><li><p><strong>时间获取</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取系统节拍数 */</span></span><br><span class="line"><span class="type">uint64_t</span> ticks = k_uptime_ticks();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取系统运行时间 */</span></span><br><span class="line"><span class="type">int64_t</span> uptime = k_uptime_get();</span><br><span class="line"><span class="type">int64_t</span> delta = k_uptime_delta(&amp;last_uptime);</span><br></pre></td></tr></table></figure></li><li><p><strong>时间转换</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 转换为毫秒 */</span></span><br><span class="line"><span class="type">uint32_t</span> ms = k_ticks_to_ms_floor64(ticks);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 转换为节拍 */</span></span><br><span class="line"><span class="type">uint64_t</span> ticks = k_ms_to_ticks_ceil32(ms);</span><br></pre></td></tr></table></figure></li></ol><h2 id="中断管理"><a href="#中断管理" class="headerlink" title="中断管理"></a>中断管理</h2><h3 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h3><ol><li><p><strong>中断处理函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">irq_handler</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 处理中断 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 安装中断处理函数 */</span></span><br><span class="line">IRQ_CONNECT(IRQ_NUM, IRQ_PRIO, irq_handler, <span class="literal">NULL</span>, IRQ_FLAGS);</span><br></pre></td></tr></table></figure></li><li><p><strong>中断控制</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">irq_enable(IRQ_NUM);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用中断 */</span></span><br><span class="line">irq_disable(IRQ_NUM);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断中断状态 */</span></span><br><span class="line"><span class="type">bool</span> is_enabled = irq_is_enabled(IRQ_NUM);</span><br></pre></td></tr></table></figure></li></ol><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><ol><li><p><strong>关中断保护</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入临界区 */</span></span><br><span class="line">key = irq_lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临界区代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 退出临界区 */</span></span><br><span class="line">irq_unlock(key);</span><br></pre></td></tr></table></figure></li><li><p><strong>调度器锁定</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 禁止调度 */</span></span><br><span class="line">k_sched_lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不可抢占代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 允许调度 */</span></span><br><span class="line">k_sched_unlock();</span><br></pre></td></tr></table></figure></li></ol><h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h2><h3 id="工作项"><a href="#工作项" class="headerlink" title="工作项"></a>工作项</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义工作项 */</span></span><br><span class="line">K_WORK_DEFINE(my_work, work_handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_work</span> <span class="title">work</span>;</span></span><br><span class="line">k_work_init(&amp;work, work_handler);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用工作项</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 提交工作 */</span></span><br><span class="line">k_work_submit(&amp;work);</span><br><span class="line">k_work_submit_to_queue(&amp;workq, &amp;work);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取消工作 */</span></span><br><span class="line">k_work_cancel(&amp;work);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等待完成 */</span></span><br><span class="line">k_work_flush(&amp;work, &amp;sync);</span><br></pre></td></tr></table></figure></li></ol><h3 id="延迟工作"><a href="#延迟工作" class="headerlink" title="延迟工作"></a>延迟工作</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义延迟工作 */</span></span><br><span class="line">K_DELAYED_WORK_DEFINE(my_dwork, work_handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_delayed_work</span> <span class="title">dwork</span>;</span></span><br><span class="line">k_delayed_work_init(&amp;dwork, work_handler);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用延迟工作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 提交延迟工作 */</span></span><br><span class="line">k_delayed_work_submit(&amp;dwork, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取消延迟工作 */</span></span><br><span class="line">k_delayed_work_cancel(&amp;dwork);</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-线程管理"><a href="#1-线程管理" class="headerlink" title="1. 线程管理"></a>1. 线程管理</h3><ul><li>合理设置优先级</li><li>避免长时间阻塞</li><li>使用适当的栈大小</li><li>处理线程退出</li></ul><h3 id="2-同步机制"><a href="#2-同步机制" class="headerlink" title="2. 同步机制"></a>2. 同步机制</h3><ul><li>选择合适的机制</li><li>避免死锁</li><li>使用超时机制</li><li>处理错误情况</li></ul><h3 id="3-内存管理"><a href="#3-内存管理" class="headerlink" title="3. 内存管理"></a>3. 内存管理</h3><ul><li>避免内存泄漏</li><li>检查分配失败</li><li>使用内存池</li><li>监控内存使用</li></ul><h3 id="4-中断处理"><a href="#4-中断处理" class="headerlink" title="4. 中断处理"></a>4. 中断处理</h3><ul><li>最小化中断处理时间</li><li>使用工作队列</li><li>保护共享资源</li><li>处理中断嵌套</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-栈溢出"><a href="#1-栈溢出" class="headerlink" title="1. 栈溢出"></a>1. 栈溢出</h3><p><strong>问题</strong>：线程栈空间不足</p><p><strong>解决方案</strong>：</p><ul><li>增加栈大小</li><li>减少局部变量</li><li>使用动态分配</li><li>监控栈使用</li></ul><h3 id="2-死锁"><a href="#2-死锁" class="headerlink" title="2. 死锁"></a>2. 死锁</h3><p><strong>问题</strong>：多个线程互相等待</p><p><strong>解决方案</strong>：</p><ul><li>使用超时机制</li><li>统一加锁顺序</li><li>避免嵌套锁定</li><li>使用死锁检测</li></ul><h3 id="3-内存泄漏"><a href="#3-内存泄漏" class="headerlink" title="3. 内存泄漏"></a>3. 内存泄漏</h3><p><strong>问题</strong>：未释放的内存</p><p><strong>解决方案</strong>：</p><ul><li>跟踪内存分配</li><li>使用内存检测工具</li><li>实现清理函数</li><li>定期检查内存</li></ul><h3 id="4-优先级反转"><a href="#4-优先级反转" class="headerlink" title="4. 优先级反转"></a>4. 优先级反转</h3><p><strong>问题</strong>：低优先级任务阻塞高优先级任务</p><p><strong>解决方案</strong>：</p><ul><li>使用优先级继承</li><li>减少关键区</li><li>优化锁定时间</li><li>合理设置优先级</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了丰富的内核服务，包括线程管理、同步机制、内存管理和定时器服务等。通过正确使用这些服务，可以开发出高效、可靠的嵌入式应用程序。本文档提供了详细的指导和实例，帮助开发者更好地理解和使用 Zephyr 内核服务。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>networking</title>
      <link href="/2025/03/21/nodic/zephyr/development/networking/"/>
      <url>/2025/03/21/nodic/zephyr/development/networking/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-网络开发"><a href="#Zephyr-网络开发" class="headerlink" title="Zephyr 网络开发"></a>Zephyr 网络开发</h1><p>本文档详细介绍了 Zephyr RTOS 的网络开发功能，包括网络协议栈、网络接口、协议实现以及网络应用开发。</p><h2 id="网络协议栈"><a href="#网络协议栈" class="headerlink" title="网络协议栈"></a>网络协议栈</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol><li><p><strong>Kconfig 配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 启用网络功能</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line"></span><br><span class="line"># IPv4 支持</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_IPV4_AUTO_LOCAL_ADDR_SET=y</span><br><span class="line"></span><br><span class="line"># IPv6 支持</span><br><span class="line">CONFIG_NET_IPV6=y</span><br><span class="line">CONFIG_NET_IPV6_AUTO_LOCAL_ADDR_SET=y</span><br><span class="line"></span><br><span class="line"># TCP 支持</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line">CONFIG_NET_TCP_TIME_WAIT=y</span><br><span class="line"></span><br><span class="line"># UDP 支持</span><br><span class="line">CONFIG_NET_UDP=y</span><br><span class="line"></span><br><span class="line"># DNS 支持</span><br><span class="line">CONFIG_DNS_RESOLVER=y</span><br><span class="line">CONFIG_DNS_SERVER_IP_ADDRESSES=y</span><br></pre></td></tr></table></figure></li><li><p><strong>网络接口配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网络接口数据 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_if_config</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">netmask</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">gw</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置网络接口 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">setup_network</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if_config</span> <span class="title">cfg</span>;</span></span><br><span class="line"></span><br><span class="line">    iface = net_if_get_default();</span><br><span class="line">    <span class="keyword">if</span> (!iface) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 IPv4 地址 */</span></span><br><span class="line">    net_if_ipv4_addr_add(iface, &amp;cfg.addr,</span><br><span class="line">                         NET_ADDR_MANUAL, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置网关 */</span></span><br><span class="line">    net_if_ipv4_set_gw(iface, &amp;cfg.gw);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置子网掩码 */</span></span><br><span class="line">    net_if_ipv4_set_netmask(iface, &amp;cfg.netmask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="协议栈初始化"><a href="#协议栈初始化" class="headerlink" title="协议栈初始化"></a>协议栈初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网络初始化 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_network</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 等待网络就绪 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span> =</span> net_if_get_default();</span><br><span class="line">    <span class="keyword">if</span> (!iface) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待地址配置完成 */</span></span><br><span class="line">    k_sem_take(&amp;wait_for_addr, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DNS */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dns_resolve_context</span> *<span class="title">ctx</span> =</span> dns_resolve_get_default();</span><br><span class="line">    <span class="keyword">if</span> (ctx) &#123;</span><br><span class="line">        dns_resolve_init(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络接口"><a href="#网络接口" class="headerlink" title="网络接口"></a>网络接口</h2><h3 id="以太网接口"><a href="#以太网接口" class="headerlink" title="以太网接口"></a>以太网接口</h3><ol><li><p><strong>配置以太网</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以太网配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ethernet_init</span><span class="params">(<span class="keyword">struct</span> net_if *iface)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* MAC 地址配置 */</span></span><br><span class="line">    <span class="type">uint8_t</span> mac[<span class="number">6</span>] = &#123;<span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x22</span>, <span class="number">0x33</span>, <span class="number">0x44</span>, <span class="number">0x55</span>&#125;;</span><br><span class="line">    net_if_set_link_addr(iface, mac, <span class="keyword">sizeof</span>(mac),</span><br><span class="line">                        NET_LINK_ETHERNET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 以太网配置 */</span></span><br><span class="line">    ethernet_configure(iface);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NET_DEVICE_INIT(eth_driver, <span class="string">&quot;ETH_0&quot;</span>,</span><br><span class="line">                ethernet_init, <span class="literal">NULL</span>,</span><br><span class="line">                &amp;eth_data, &amp;eth_config,</span><br><span class="line">                CONFIG_ETH_INIT_PRIORITY, &amp;eth_api,</span><br><span class="line">                ETHERNET_L2, NET_L2_GET_CTX_TYPE(ETHERNET_L2),</span><br><span class="line">                NET_ETH_MTU);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用以太网</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 发送数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ethernet_send</span><span class="params">(<span class="keyword">struct</span> net_if *iface,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> net_pkt *pkt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 准备数据包 */</span></span><br><span class="line">    net_pkt_set_iface(pkt, iface);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    <span class="keyword">return</span> eth_tx(iface, pkt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ethernet_recv</span><span class="params">(<span class="keyword">struct</span> net_if *iface,</span></span><br><span class="line"><span class="params">                         <span class="keyword">struct</span> net_pkt *pkt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 处理接收到的数据 */</span></span><br><span class="line">    <span class="keyword">if</span> (net_recv_data(iface, pkt) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        net_pkt_unref(pkt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="无线接口"><a href="#无线接口" class="headerlink" title="无线接口"></a>无线接口</h3><ol><li><p><strong>配置 Wi-Fi</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Wi-Fi 配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">wifi_config</span> <span class="title">wifi_cfg</span> =</span> &#123;</span><br><span class="line">    .ssid = <span class="string">&quot;MyNetwork&quot;</span>,</span><br><span class="line">    .psk = <span class="string">&quot;MyPassword&quot;</span>,</span><br><span class="line">    .security = WIFI_SECURITY_TYPE_PSK,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 Wi-Fi */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wifi_init</span><span class="params">(<span class="keyword">struct</span> net_if *iface)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置 Wi-Fi */</span></span><br><span class="line">    wifi_connect(iface, &amp;wifi_cfg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 Wi-Fi</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wifi_connect_cb</span><span class="params">(<span class="keyword">struct</span> net_if *iface,</span></span><br><span class="line"><span class="params">                           <span class="type">int</span> status,</span></span><br><span class="line"><span class="params">                           <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 连接成功 */</span></span><br><span class="line">        k_sem_give(&amp;wifi_connected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 扫描回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wifi_scan_cb</span><span class="params">(<span class="keyword">struct</span> net_if *iface,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span> status,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> wifi_scan_result *entry,</span></span><br><span class="line"><span class="params">                        <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">0</span> &amp;&amp; entry) &#123;</span><br><span class="line">        <span class="comment">/* 处理扫描结果 */</span></span><br><span class="line">        LOG_INF(<span class="string">&quot;Found SSID: %s&quot;</span>, entry-&gt;ssid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="协议实现"><a href="#协议实现" class="headerlink" title="协议实现"></a>协议实现</h2><h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><ol><li><p><strong>TCP 服务器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* TCP 服务器配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">tcp_server</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> sock, client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 监听连接 */</span></span><br><span class="line">    listen(sock, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        client = accept(sock, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (client &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 处理客户端连接 */</span></span><br><span class="line">        handle_client(client);</span><br><span class="line">        close(client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>TCP 客户端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* TCP 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">tcp_client</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接服务器 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    inet_pton(AF_INET, SERVER_ADDR, &amp;addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr,</span><br><span class="line">                <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送和接收数据 */</span></span><br><span class="line">    communicate(sock);</span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="UDP-协议"><a href="#UDP-协议" class="headerlink" title="UDP 协议"></a>UDP 协议</h3><ol><li><p><strong>UDP 服务器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* UDP 服务器配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">udp_server</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 接收数据 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        handle_udp_data(sock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>UDP 客户端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* UDP 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">udp_client</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置目标地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    inet_pton(AF_INET, SERVER_ADDR, &amp;addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    send_udp_data(sock, &amp;addr);</span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h2><h3 id="HTTP-客户端"><a href="#HTTP-客户端" class="headerlink" title="HTTP 客户端"></a>HTTP 客户端</h3><ol><li><p><strong>基本配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* HTTP 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">http_client_request</span> <span class="title">req</span> =</span> &#123;</span><br><span class="line">    .method = HTTP_GET,</span><br><span class="line">    .url = <span class="string">&quot;/api/data&quot;</span>,</span><br><span class="line">    .host = <span class="string">&quot;example.com&quot;</span>,</span><br><span class="line">    .protocol = <span class="string">&quot;HTTP/1.1&quot;</span>,</span><br><span class="line">    .header_fields = <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>发送请求</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 发送 HTTP 请求 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">http_get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">http_client_ctx</span> <span class="title">ctx</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化上下文 */</span></span><br><span class="line">    http_client_init(&amp;ctx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送请求 */</span></span><br><span class="line">    ret = http_client_send_req(&amp;ctx, &amp;req, response_cb, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOG_ERR(<span class="string">&quot;Failed to send HTTP request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="MQTT-客户端"><a href="#MQTT-客户端" class="headerlink" title="MQTT 客户端"></a>MQTT 客户端</h3><ol><li><p><strong>基本配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* MQTT 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mqtt_client</span> <span class="title">client</span> =</span> &#123;</span><br><span class="line">    .client_id = <span class="string">&quot;zephyr_mqtt&quot;</span>,</span><br><span class="line">    .broker = &amp;broker,</span><br><span class="line">    .evt_cb = mqtt_evt_handler,</span><br><span class="line">    .protocol_version = MQTT_VERSION_3_1_1,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>连接和发布</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* MQTT 事件处理 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">mqtt_evt_handler</span><span class="params">(<span class="keyword">struct</span> mqtt_client *client,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="keyword">struct</span> mqtt_evt *evt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (evt-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> MQTT_EVT_CONNACK:</span><br><span class="line">        <span class="keyword">if</span> (evt-&gt;result == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 连接成功 */</span></span><br><span class="line">            subscribe_topics();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> MQTT_EVT_PUBLISH:</span><br><span class="line">        <span class="comment">/* 处理接收到的消息 */</span></span><br><span class="line">        handle_publish(evt);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发布消息 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">publish_message</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mqtt_publish_param</span> <span class="title">param</span> =</span> &#123;</span><br><span class="line">        .message.topic.qos = MQTT_QOS_1_AT_LEAST_ONCE,</span><br><span class="line">        .message.topic.topic.utf8 = <span class="string">&quot;test/topic&quot;</span>,</span><br><span class="line">        .message.topic.topic.size = <span class="number">10</span>,</span><br><span class="line">        .message.payload.data = <span class="string">&quot;Hello MQTT&quot;</span>,</span><br><span class="line">        .message.payload.len = <span class="number">10</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    mqtt_publish(&amp;client, &amp;param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="CoAP-客户端"><a href="#CoAP-客户端" class="headerlink" title="CoAP 客户端"></a>CoAP 客户端</h3><ol><li><p><strong>基本配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CoAP 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">coap_client</span> <span class="title">client</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">coap_packet</span> <span class="title">request</span>;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>发送请求</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 发送 CoAP 请求 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">coap_get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *data;</span><br><span class="line">    <span class="type">uint16_t</span> id;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备请求 */</span></span><br><span class="line">    data = (<span class="type">uint8_t</span> *)k_malloc(MAX_COAP_MSG_LEN);</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = coap_packet_init(&amp;request, data, MAX_COAP_MSG_LEN,</span><br><span class="line">                         <span class="number">1</span>, COAP_TYPE_CON, <span class="number">8</span>, coap_next_token(),</span><br><span class="line">                         COAP_METHOD_GET, id);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        k_free(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送请求 */</span></span><br><span class="line">    r = coap_packet_send(&amp;request, sock, &amp;server_addr);</span><br><span class="line">    k_free(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><h3 id="1-网络调试"><a href="#1-网络调试" class="headerlink" title="1. 网络调试"></a>1. 网络调试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 启用网络日志 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NET_LOG_ENABLED 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(net_app, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据包跟踪 */</span></span><br><span class="line">NET_PKT_DATA_ACCESS_DEFINE(pkt_data);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_pkt</span> *<span class="title">pkt</span> =</span> net_pkt_alloc_with_buffer(iface,</span><br><span class="line">                                               size,</span><br><span class="line">                                               AF_INET,</span><br><span class="line">                                               IPPROTO_TCP,</span><br><span class="line">                                               K_NO_WAIT);</span><br></pre></td></tr></table></figure><h3 id="2-抓包分析"><a href="#2-抓包分析" class="headerlink" title="2. 抓包分析"></a>2. 抓包分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Wireshark 分析</span></span><br><span class="line"><span class="built_in">sudo</span> ip <span class="built_in">link</span> <span class="built_in">set</span> dev zeth up</span><br><span class="line"><span class="built_in">sudo</span> wireshark -i zeth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcpdump 抓包</span></span><br><span class="line"><span class="built_in">sudo</span> tcpdump -i zeth -w capture.pcap</span><br></pre></td></tr></table></figure><h3 id="3-性能分析"><a href="#3-性能分析" class="headerlink" title="3. 性能分析"></a>3. 性能分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网络性能统计 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">net_mgmt(NET_REQUEST_STATS_GET_ALL, iface, &amp;stats, <span class="keyword">sizeof</span>(stats));</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-网络安全"><a href="#1-网络安全" class="headerlink" title="1. 网络安全"></a>1. 网络安全</h3><ul><li>使用安全协议</li><li>验证证书</li><li>加密敏感数据</li><li>实现访问控制</li></ul><h3 id="2-错误处理"><a href="#2-错误处理" class="headerlink" title="2. 错误处理"></a>2. 错误处理</h3><ul><li>检查返回值</li><li>实现超时机制</li><li>处理断开连接</li><li>实现重连逻辑</li></ul><h3 id="3-资源管理"><a href="#3-资源管理" class="headerlink" title="3. 资源管理"></a>3. 资源管理</h3><ul><li>释放套接字</li><li>管理内存使用</li><li>限制并发连接</li><li>实现清理机制</li></ul><h3 id="4-性能优化"><a href="#4-性能优化" class="headerlink" title="4. 性能优化"></a>4. 性能优化</h3><ul><li>使用缓冲池</li><li>优化数据包大小</li><li>实现数据压缩</li><li>减少数据复制</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-连接问题"><a href="#1-连接问题" class="headerlink" title="1. 连接问题"></a>1. 连接问题</h3><p><strong>问题</strong>：无法建立网络连接</p><p><strong>解决方案</strong>：</p><ul><li>检查网络配置</li><li>验证防火墙设置</li><li>确认路由配置</li><li>测试网络可达性</li></ul><h3 id="2-性能问题"><a href="#2-性能问题" class="headerlink" title="2. 性能问题"></a>2. 性能问题</h3><p><strong>问题</strong>：网络性能不佳</p><p><strong>解决方案</strong>：</p><ul><li>优化缓冲区大小</li><li>减少数据拷贝</li><li>使用零拷贝技术</li><li>实现数据批处理</li></ul><h3 id="3-内存问题"><a href="#3-内存问题" class="headerlink" title="3. 内存问题"></a>3. 内存问题</h3><p><strong>问题</strong>：内存使用过高</p><p><strong>解决方案</strong>：</p><ul><li>使用内存池</li><li>限制缓冲区大小</li><li>及时释放资源</li><li>监控内存使用</li></ul><h3 id="4-稳定性问题"><a href="#4-稳定性问题" class="headerlink" title="4. 稳定性问题"></a>4. 稳定性问题</h3><p><strong>问题</strong>：连接不稳定</p><p><strong>解决方案</strong>：</p><ul><li>实现重连机制</li><li>添加心跳检测</li><li>处理超时情况</li><li>实现错误恢复</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了完整的网络开发支持，包括多种协议实现和网络应用框架。通过正确使用这些功能，可以开发出稳定、高效的网络应用。本文档提供了详细的指导和实例，帮助开发者更好地理解和使用 Zephyr 的网络功能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>porting</title>
      <link href="/2025/03/21/nodic/zephyr/development/porting/"/>
      <url>/2025/03/21/nodic/zephyr/development/porting/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-移植指南"><a href="#Zephyr-移植指南" class="headerlink" title="Zephyr 移植指南"></a>Zephyr 移植指南</h1><p>本文档详细介绍了如何将 Zephyr RTOS 移植到新的硬件平台，包括板级支持包开发、SOC 适配、驱动移植和启动配置等内容。</p><h2 id="板级支持包"><a href="#板级支持包" class="headerlink" title="板级支持包"></a>板级支持包</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ol><li><p><strong>目录结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">boards/</span><br><span class="line">└── arm/</span><br><span class="line">    └── my_board/</span><br><span class="line">        ├── board.cmake</span><br><span class="line">        ├── CMakeLists.txt</span><br><span class="line">        ├── Kconfig.board</span><br><span class="line">        ├── Kconfig.defconfig</span><br><span class="line">        ├── my_board_defconfig</span><br><span class="line">        ├── my_board.dts</span><br><span class="line">        └── my_board.yaml</span><br></pre></td></tr></table></figure></li><li><p><strong>配置文件</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># board.cmake</span></span><br><span class="line">board_runner_args(jlink <span class="string">&quot;--device=nrf52&quot;</span> <span class="string">&quot;--speed=4000&quot;</span>)</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$&#123;ZEPHYR_BASE&#125;</span>/boards/common/jlink.board.cmake)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line"><span class="keyword">if</span>(CONFIG_PINMUX)</span><br><span class="line">  zephyr_library()</span><br><span class="line">  zephyr_library_sources(pinmux.c)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure></li></ol><h3 id="板级定义"><a href="#板级定义" class="headerlink" title="板级定义"></a>板级定义</h3><ol><li><p><strong>Kconfig 配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Kconfig.board</span><br><span class="line">config BOARD_MY_BOARD</span><br><span class="line">    bool &quot;My Custom Board&quot;</span><br><span class="line">    depends on SOC_NRF52840_QIAA</span><br><span class="line"></span><br><span class="line"># Kconfig.defconfig</span><br><span class="line">if BOARD_MY_BOARD</span><br><span class="line"></span><br><span class="line">config BOARD</span><br><span class="line">    default &quot;my_board&quot;</span><br><span class="line"></span><br><span class="line">config GPIO_AS_PINMUX</span><br><span class="line">    default y</span><br><span class="line"></span><br><span class="line">endif # BOARD_MY_BOARD</span><br></pre></td></tr></table></figure></li><li><p><strong>设备树文件</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* my_board.dts */</span></span><br><span class="line"><span class="keyword">/dts-v1/</span><span class="punctuation">;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nordic/nrf52840_qiaa.dtsi&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">model</span> <span class="operator">=</span> <span class="string">&quot;My Custom Board&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-board&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,shell-uart</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,uart-mcumgr</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,bt-mon-uart</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        zephyr,bt-c2<span class="attr">h-uart</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">buttons</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-keys&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        button0:</span> <span class="title class_">button_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">11</span> (GPIO_PULL_UP | GPIO_ACTIVE_LOW)&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Push button switch 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">tx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">6</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">rx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">8</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">sda-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">26</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">scl-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">27</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;spi0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">sck-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">27</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">mosi-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">26</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">miso-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">29</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="SOC-适配"><a href="#SOC-适配" class="headerlink" title="SOC 适配"></a>SOC 适配</h2><h3 id="SOC-支持"><a href="#SOC-支持" class="headerlink" title="SOC 支持"></a>SOC 支持</h3><ol><li><p><strong>SOC 定义</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># soc/arm/vendor/my_soc/Kconfig.soc</span><br><span class="line">config SOC_SERIES_MY_SOC</span><br><span class="line">    bool &quot;My SOC Series&quot;</span><br><span class="line">    select ARM</span><br><span class="line">    select CPU_CORTEX_M4</span><br><span class="line">    select CPU_HAS_FPU</span><br><span class="line">    help</span><br><span class="line">      Enable support for My SOC Series</span><br><span class="line"></span><br><span class="line">config SOC_MY_SOC</span><br><span class="line">    bool &quot;My SOC&quot;</span><br><span class="line">    select SOC_SERIES_MY_SOC</span><br><span class="line">    help</span><br><span class="line">      My SOC</span><br></pre></td></tr></table></figure></li><li><p><strong>SOC 配置</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># soc/arm/vendor/my_soc/CMakeLists.txt</span></span><br><span class="line">zephyr_library()</span><br><span class="line">zephyr_library_sources(</span><br><span class="line">    soc.c</span><br><span class="line">    power.c</span><br><span class="line">    )</span><br><span class="line">zephyr_library_include_directories(.)</span><br></pre></td></tr></table></figure></li></ol><h3 id="时钟配置"><a href="#时钟配置" class="headerlink" title="时钟配置"></a>时钟配置</h3><ol><li><p><strong>时钟初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/soc.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sys_clock_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置系统时钟 */</span></span><br><span class="line">    NRF_CLOCK-&gt;EVENTS_HFCLKSTARTED = <span class="number">0</span>;</span><br><span class="line">    NRF_CLOCK-&gt;TASKS_HFCLKSTART = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (NRF_CLOCK-&gt;EVENTS_HFCLKSTARTED == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 等待时钟稳定 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 LFCLK */</span></span><br><span class="line">    NRF_CLOCK-&gt;LFCLKSRC = CLOCK_LFCLKSRC_SRC_Xtal;</span><br><span class="line">    NRF_CLOCK-&gt;TASKS_LFCLKSTART = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>电源管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/power.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sys_set_power_state</span><span class="params">(<span class="keyword">enum</span> power_states state)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">    <span class="keyword">case</span> POWER_STATE_SLEEP:</span><br><span class="line">        <span class="comment">/* 进入睡眠模式 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> POWER_STATE_DEEP_SLEEP:</span><br><span class="line">        <span class="comment">/* 进入深度睡眠模式 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="驱动移植"><a href="#驱动移植" class="headerlink" title="驱动移植"></a>驱动移植</h2><h3 id="GPIO-驱动"><a href="#GPIO-驱动" class="headerlink" title="GPIO 驱动"></a>GPIO 驱动</h3><ol><li><p><strong>驱动结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* drivers/gpio/gpio_my_soc.c */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_config</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 设备配置 */</span></span><br><span class="line">    <span class="type">uint32_t</span> port;</span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> irq_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_data</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 驱动数据 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> <span class="title">config</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>驱动实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GPIO 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_my_soc_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化硬件 */</span></span><br><span class="line">    sys_write32(<span class="number">0xFFFFFFFF</span>, config-&gt;base_addr + GPIO_OUTCLR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化同步原语 */</span></span><br><span class="line">    k_sem_init(&amp;data-&gt;lock, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_my_soc_configure</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_flags_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">uint32_t</span> reg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pin &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 GPIO */</span></span><br><span class="line">    reg = sys_read32(config-&gt;base_addr + GPIO_CNF(pin));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (flags &amp; GPIO_OUTPUT) &#123;</span><br><span class="line">        reg |= GPIO_CNF_DIR_OUTPUT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reg &amp;= ~GPIO_CNF_DIR_OUTPUT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; GPIO_PULL_UP) &#123;</span><br><span class="line">        reg |= GPIO_CNF_PULL_UP;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; GPIO_PULL_DOWN) &#123;</span><br><span class="line">        reg |= GPIO_CNF_PULL_DOWN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sys_write32(reg, config-&gt;base_addr + GPIO_CNF(pin));</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="UART-驱动"><a href="#UART-驱动" class="headerlink" title="UART 驱动"></a>UART 驱动</h3><ol><li><p><strong>驱动结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* drivers/serial/uart_my_soc.c */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> clock_freq;</span><br><span class="line">    <span class="type">uint8_t</span> tx_pin;</span><br><span class="line">    <span class="type">uint8_t</span> rx_pin;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uart_config</span> <span class="title">config</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">tx_sem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">rx_sem</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>驱动实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* UART 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">uart_my_soc_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置引脚 */</span></span><br><span class="line">    configure_pins(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化硬件 */</span></span><br><span class="line">    sys_write32(UART_ENABLE, config-&gt;base_addr + UART_CONFIG);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置波特率 */</span></span><br><span class="line">    set_baudrate(dev, data-&gt;config.baudrate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化信号量 */</span></span><br><span class="line">    k_sem_init(&amp;data-&gt;tx_sem, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    k_sem_init(&amp;data-&gt;rx_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    sys_write32(UART_INT_RXDRDY | UART_INT_TXDRDY,</span><br><span class="line">                config-&gt;base_addr + UART_INTENSET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* UART 发送 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">uart_my_soc_poll_out</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                               <span class="type">unsigned</span> <span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待发送完成 */</span></span><br><span class="line">    <span class="keyword">while</span> (!(sys_read32(config-&gt;base_addr + UART_STATUS) &amp;</span><br><span class="line">             UART_STATUS_TXDRDY)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    sys_write32(c, config-&gt;base_addr + UART_TXD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="启动配置"><a href="#启动配置" class="headerlink" title="启动配置"></a>启动配置</h2><h3 id="启动文件"><a href="#启动文件" class="headerlink" title="启动文件"></a>启动文件</h3><ol><li><p><strong>向量表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/vector_table.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*<span class="type">vector_t</span>)</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vector_table</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *<span class="built_in">stack</span>;</span><br><span class="line">    <span class="type">vector_t</span> reset;</span><br><span class="line">    <span class="type">vector_t</span> nmi;</span><br><span class="line">    <span class="type">vector_t</span> hard_fault;</span><br><span class="line">    <span class="type">vector_t</span> mpu_fault;</span><br><span class="line">    <span class="type">vector_t</span> bus_fault;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>启动代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/startup.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">z_arm_reset</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化系统 */</span></span><br><span class="line">    SystemInit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化 BSS */</span></span><br><span class="line">    z_bss_zero();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化数据段 */</span></span><br><span class="line">    z_data_copy();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调用主函数 */</span></span><br><span class="line">    z_arm_start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="链接脚本"><a href="#链接脚本" class="headerlink" title="链接脚本"></a>链接脚本</h3><ol><li><strong>内存布局</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/* soc/arm/vendor/my_soc/linker.ld */</span><br><span class="line">MEMORY</span><br><span class="line">&#123;</span><br><span class="line">    FLASH (rx) : ORIGIN = 0x00000000, LENGTH = 1M</span><br><span class="line">    RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 256K</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    .text :</span><br><span class="line">    &#123;</span><br><span class="line">        __text_start = .;</span><br><span class="line">        *(.text*)</span><br><span class="line">        __text_end = .;</span><br><span class="line">    &#125; &gt; FLASH</span><br><span class="line"></span><br><span class="line">    .rodata :</span><br><span class="line">    &#123;</span><br><span class="line">        __rodata_start = .;</span><br><span class="line">        *(.rodata*)</span><br><span class="line">        __rodata_end = .;</span><br><span class="line">    &#125; &gt; FLASH</span><br><span class="line"></span><br><span class="line">    .data :</span><br><span class="line">    &#123;</span><br><span class="line">        __data_start = .;</span><br><span class="line">        *(.data*)</span><br><span class="line">        __data_end = .;</span><br><span class="line">    &#125; &gt; RAM AT &gt; FLASH</span><br><span class="line"></span><br><span class="line">    .bss :</span><br><span class="line">    &#123;</span><br><span class="line">        __bss_start = .;</span><br><span class="line">        *(.bss*)</span><br><span class="line">        __bss_end = .;</span><br><span class="line">    &#125; &gt; RAM</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h3><ol><li><p><strong>时钟配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/soc_init.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置时钟 */</span></span><br><span class="line">    configure_system_clock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置中断 */</span></span><br><span class="line">    NVIC_SetPriority(PendSV_IRQn, _EXC_PENDSV_PRIO);</span><br><span class="line">    NVIC_SetPriority(SysTick_IRQn, _EXC_SYSTICK_PRIO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>中断配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/irq_init.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">z_arm_irq_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置中断向量表 */</span></span><br><span class="line">    SCB-&gt;VTOR = (<span class="type">uint32_t</span>)_vector_table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置中断优先级组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    __enable_irq();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试支持"><a href="#调试支持" class="headerlink" title="调试支持"></a>调试支持</h2><h3 id="JTAG-SWD"><a href="#JTAG-SWD" class="headerlink" title="JTAG&#x2F;SWD"></a>JTAG&#x2F;SWD</h3><ol><li><p><strong>调试接口配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># boards/arm/my_board/board.cmake</span><br><span class="line">board_runner_args(jlink &quot;--device=my_soc&quot; &quot;--speed=4000&quot;)</span><br><span class="line">include($&#123;ZEPHYR_BASE&#125;/boards/common/jlink.board.cmake)</span><br></pre></td></tr></table></figure></li><li><p><strong>OpenOCD 配置</strong></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boards/arm/my_board/support/openocd.cfg</span></span><br><span class="line"><span class="keyword">source</span> [find interface/jlink.cfg]</span><br><span class="line">transport select swd</span><br><span class="line"><span class="keyword">source</span> [find target/my_soc.cfg]</span><br><span class="line"></span><br><span class="line">adapter_khz <span class="number">4000</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$_TARGETNAME</span> configure -event gdb-attach &#123;</span><br><span class="line">    echo <span class="string">&quot;Debugger attaching...&quot;</span></span><br><span class="line">    reset init</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="串口调试"><a href="#串口调试" class="headerlink" title="串口调试"></a>串口调试</h3><ol><li><p><strong>串口配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 串口初始化 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">board_init_debug_console</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line"></span><br><span class="line">    dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uart_configure(dev, &amp;uart_config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>调试输出</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 调试输出函数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">arch_printk_char_out</span><span class="params">(<span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line"></span><br><span class="line">    dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uart_poll_out(dev, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-移植策略"><a href="#1-移植策略" class="headerlink" title="1. 移植策略"></a>1. 移植策略</h3><ul><li>分步骤移植</li><li>验证每个步骤</li><li>保持代码清晰</li><li>文档完善</li></ul><h3 id="2-硬件抽象"><a href="#2-硬件抽象" class="headerlink" title="2. 硬件抽象"></a>2. 硬件抽象</h3><ul><li>使用设备树</li><li>驱动抽象</li><li>配置灵活</li><li>接口统一</li></ul><h3 id="3-调试支持"><a href="#3-调试支持" class="headerlink" title="3. 调试支持"></a>3. 调试支持</h3><ul><li>完整调试接口</li><li>日志系统</li><li>错误处理</li><li>性能监控</li></ul><h3 id="4-文档维护"><a href="#4-文档维护" class="headerlink" title="4. 文档维护"></a>4. 文档维护</h3><ul><li>硬件文档</li><li>移植指南</li><li>API 文档</li><li>示例代码</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-启动问题"><a href="#1-启动问题" class="headerlink" title="1. 启动问题"></a>1. 启动问题</h3><p><strong>问题</strong>：系统无法启动</p><p><strong>解决方案</strong>：</p><ul><li>检查时钟配置</li><li>验证启动代码</li><li>检查链接脚本</li><li>调试复位向量</li></ul><h3 id="2-驱动问题"><a href="#2-驱动问题" class="headerlink" title="2. 驱动问题"></a>2. 驱动问题</h3><p><strong>问题</strong>：驱动无法工作</p><p><strong>解决方案</strong>：</p><ul><li>检查硬件配置</li><li>验证驱动代码</li><li>测试中断处理</li><li>检查时序要求</li></ul><h3 id="3-内存问题"><a href="#3-内存问题" class="headerlink" title="3. 内存问题"></a>3. 内存问题</h3><p><strong>问题</strong>：内存访问错误</p><p><strong>解决方案</strong>：</p><ul><li>检查内存映射</li><li>验证栈配置</li><li>检查对齐要求</li><li>分析内存使用</li></ul><h3 id="4-调试问题"><a href="#4-调试问题" class="headerlink" title="4. 调试问题"></a>4. 调试问题</h3><p><strong>问题</strong>：无法调试</p><p><strong>解决方案</strong>：</p><ul><li>检查调试接口</li><li>验证调试配置</li><li>测试串口通信</li><li>使用调试工具</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将 Zephyr RTOS 移植到新的硬件平台需要系统的方法和细致的工作。通过正确实施板级支持包开发、SOC 适配、驱动移植和启动配置，可以成功将 Zephyr 移植到新的硬件平台。本文档提供了详细的指导和实例，帮助开发者完成移植工作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>security</title>
      <link href="/2025/03/21/nodic/zephyr/development/security/"/>
      <url>/2025/03/21/nodic/zephyr/development/security/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-安全开发"><a href="#Zephyr-安全开发" class="headerlink" title="Zephyr 安全开发"></a>Zephyr 安全开发</h1><p>本文档详细介绍了 Zephyr RTOS 的安全开发功能，包括安全启动、加密服务、安全存储和访问控制等内容。</p><h2 id="安全启动"><a href="#安全启动" class="headerlink" title="安全启动"></a>安全启动</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p><strong>安全启动流程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">引导加载程序 -&gt; 验证固件 -&gt; 加载固件 -&gt; 执行应用</span><br></pre></td></tr></table></figure></li><li><p><strong>验证机制</strong></p></li></ol><ul><li>数字签名验证</li><li>哈希校验</li><li>版本控制</li><li>回滚保护</li></ul><h3 id="MCUboot-配置"><a href="#MCUboot-配置" class="headerlink" title="MCUboot 配置"></a>MCUboot 配置</h3><ol><li><p><strong>基本配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># MCUboot Kconfig 配置</span><br><span class="line">CONFIG_BOOTLOADER_MCUBOOT=y</span><br><span class="line">CONFIG_MCUBOOT_SIGNATURE_TYPE_RSA=y</span><br><span class="line">CONFIG_MCUBOOT_SIGNATURE_KEY_FILE=&quot;bootloader/mcuboot/root-rsa-2048.pem&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>签名配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 签名配置结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mcuboot_sign_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> key_id;</span><br><span class="line">    <span class="type">uint16_t</span> algorithm;</span><br><span class="line">    <span class="type">uint16_t</span> key_size;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> *public_key;</span><br><span class="line">    <span class="type">uint16_t</span> public_key_len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h3><ol><li><p><strong>验证固件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 固件验证函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">verify_firmware</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> flash_area *fa,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="keyword">struct</span> mcuboot_sign_config *cfg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">image_header</span> <span class="title">hdr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取镜像头 */</span></span><br><span class="line">    rc = flash_area_read(fa, <span class="number">0</span>, &amp;hdr, <span class="keyword">sizeof</span>(hdr));</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证签名 */</span></span><br><span class="line">    rc = boot_image_verify(&amp;hdr, fa, cfg);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>更新固件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 固件更新函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">update_firmware</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> flash_area *fa,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 擦除分区 */</span></span><br><span class="line">    rc = flash_area_erase(fa, <span class="number">0</span>, fa-&gt;fa_size);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写入新固件 */</span></span><br><span class="line">    rc = flash_area_write(fa, <span class="number">0</span>, data, size);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="加密服务"><a href="#加密服务" class="headerlink" title="加密服务"></a>加密服务</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><ol><li><p><strong>AES 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* AES 配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cipher_ctx</span> <span class="title">ctx</span> =</span> &#123;</span><br><span class="line">    .keylen = <span class="number">16</span>,</span><br><span class="line">    .key = key,</span><br><span class="line">    .flags = CAP_RAW_KEY | CAP_SYNC_OPS,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* AES-CBC 模式 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cipher_pkt</span> <span class="title">enc</span> =</span> &#123;</span><br><span class="line">    .in_buf = in_buf,</span><br><span class="line">    .in_len = in_len,</span><br><span class="line">    .out_buf = out_buf,</span><br><span class="line">    .out_len = out_len</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>加密操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* AES 加密 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">aes_encrypt</span><span class="params">(<span class="keyword">struct</span> cipher_ctx *ctx,</span></span><br><span class="line"><span class="params">                      <span class="keyword">struct</span> cipher_pkt *enc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化加密上下文 */</span></span><br><span class="line">    ret = cipher_begin_session(ctx-&gt;device, ctx,</span><br><span class="line">                             CRYPTO_CIPHER_ALGO_AES,</span><br><span class="line">                             CRYPTO_CIPHER_MODE_CBC,</span><br><span class="line">                             CRYPTO_CIPHER_OP_ENCRYPT);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行加密 */</span></span><br><span class="line">    ret = cipher_cbc_op(ctx, enc);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cipher_free_session(ctx-&gt;device, ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><ol><li><p><strong>RSA 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* RSA 配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rsa_key</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> *n;  <span class="comment">/* 模数 */</span></span><br><span class="line">    <span class="type">uint8_t</span> *e;  <span class="comment">/* 公钥指数 */</span></span><br><span class="line">    <span class="type">uint8_t</span> *d;  <span class="comment">/* 私钥指数 */</span></span><br><span class="line">    <span class="type">size_t</span> len;  <span class="comment">/* 密钥长度 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>签名验证</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* RSA 签名验证 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">rsa_verify</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> rsa_key *key,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> len,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> <span class="type">uint8_t</span> *sig, <span class="type">size_t</span> sig_len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    mbedtls_rsa_context rsa;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化 RSA 上下文 */</span></span><br><span class="line">    mbedtls_rsa_init(&amp;rsa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 导入公钥 */</span></span><br><span class="line">    ret = mbedtls_rsa_import_raw(&amp;rsa, key-&gt;n, key-&gt;len,</span><br><span class="line">                                <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>,</span><br><span class="line">                                key-&gt;e, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证签名 */</span></span><br><span class="line">    ret = mbedtls_rsa_pkcs1_verify(&amp;rsa, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                                  MBEDTLS_RSA_PUBLIC,</span><br><span class="line">                                  MBEDTLS_MD_SHA256,</span><br><span class="line">                                  <span class="number">32</span>, data, sig);</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line">    mbedtls_rsa_free(&amp;rsa);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><ol><li><p><strong>SHA-256 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SHA-256 配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hash_ctx</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tc_sha256_state_struct</span> <span class="title">sha256_state</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> digest[TC_SHA256_DIGEST_SIZE];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>计算哈希</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算 SHA-256 哈希 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">calc_sha256</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> len,</span></span><br><span class="line"><span class="params">                      <span class="type">uint8_t</span> *digest)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hash_ctx</span> <span class="title">ctx</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化哈希上下文 */</span></span><br><span class="line">    ret = tc_sha256_init(&amp;ctx.sha256_state);</span><br><span class="line">    <span class="keyword">if</span> (ret != TC_CRYPTO_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 更新哈希 */</span></span><br><span class="line">    ret = tc_sha256_update(&amp;ctx.sha256_state, data, len);</span><br><span class="line">    <span class="keyword">if</span> (ret != TC_CRYPTO_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 完成哈希计算 */</span></span><br><span class="line">    ret = tc_sha256_final(digest, &amp;ctx.sha256_state);</span><br><span class="line">    <span class="keyword">if</span> (ret != TC_CRYPTO_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="安全存储"><a href="#安全存储" class="headerlink" title="安全存储"></a>安全存储</h2><h3 id="文件系统加密"><a href="#文件系统加密" class="headerlink" title="文件系统加密"></a>文件系统加密</h3><ol><li><p><strong>配置加密文件系统</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 加密文件系统配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">enc_fs_config</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_mount_t</span> *<span class="title">mp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cipher_ctx</span> <span class="title">enc_ctx</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> key[<span class="number">16</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>加密操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 加密文件写入 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">write_encrypted_file</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> enc_fs_config *cfg,</span></span><br><span class="line"><span class="params">                              <span class="type">const</span> <span class="type">char</span> *path,</span></span><br><span class="line"><span class="params">                              <span class="type">const</span> <span class="type">void</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *enc_buf;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 分配加密缓冲区 */</span></span><br><span class="line">    enc_buf = k_malloc(len + <span class="number">16</span>);  <span class="comment">/* 包含 IV */</span></span><br><span class="line">    <span class="keyword">if</span> (!enc_buf) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 加密数据 */</span></span><br><span class="line">    ret = encrypt_data(&amp;cfg-&gt;enc_ctx, data, len,</span><br><span class="line">                      enc_buf + <span class="number">16</span>, len);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        k_free(enc_buf);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写入文件 */</span></span><br><span class="line">    ret = fs_write(cfg-&gt;mp, path, enc_buf, len + <span class="number">16</span>);</span><br><span class="line">    k_free(enc_buf);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="安全密钥存储"><a href="#安全密钥存储" class="headerlink" title="安全密钥存储"></a>安全密钥存储</h3><ol><li><p><strong>密钥存储配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 密钥存储配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key_storage</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> *storage_area;</span><br><span class="line">    <span class="type">size_t</span> storage_size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cipher_ctx</span> <span class="title">enc_ctx</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>密钥操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 存储密钥 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">store_key</span><span class="params">(<span class="keyword">struct</span> key_storage *ks,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_len,</span></span><br><span class="line"><span class="params">                    <span class="type">uint32_t</span> key_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key_entry</span> &#123;</span></span><br><span class="line">        <span class="type">uint32_t</span> id;</span><br><span class="line">        <span class="type">uint16_t</span> len;</span><br><span class="line">        <span class="type">uint8_t</span> data[];</span><br><span class="line">    &#125; *entry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查找存储位置 */</span></span><br><span class="line">    entry = find_key_slot(ks, key_id);</span><br><span class="line">    <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENOSPC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 加密密钥 */</span></span><br><span class="line">    ret = encrypt_key(&amp;ks-&gt;enc_ctx, key, key_len,</span><br><span class="line">                     entry-&gt;data);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    entry-&gt;id = key_id;</span><br><span class="line">    entry-&gt;len = key_len;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><h3 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h3><ol><li><p><strong>认证配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 认证配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> hash[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> salt[<span class="number">16</span>];</span><br><span class="line">    <span class="type">uint32_t</span> iterations;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>密码验证</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 验证密码 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">verify_password</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> auth_config *cfg,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="type">char</span> *password)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> hash[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算密码哈希 */</span></span><br><span class="line">    ret = pbkdf2_hmac_sha256(password, <span class="built_in">strlen</span>(password),</span><br><span class="line">                            cfg-&gt;salt, <span class="keyword">sizeof</span>(cfg-&gt;salt),</span><br><span class="line">                            cfg-&gt;iterations, hash);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 比较哈希值 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">memcmp</span>(hash, cfg-&gt;hash, <span class="keyword">sizeof</span>(hash)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EPERM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><ol><li><p><strong>权限配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 权限配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">acl_entry</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> resource_id;</span><br><span class="line">    <span class="type">uint32_t</span> permissions;</span><br><span class="line">    <span class="type">uint32_t</span> user_id;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>权限检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 检查权限 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">check_permission</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> acl_entry *acl,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> user_id,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> resource_id,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> required_perm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (acl-&gt;resource_id != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (acl-&gt;resource_id == resource_id &amp;&amp;</span><br><span class="line">            acl-&gt;user_id == user_id) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((acl-&gt;permissions &amp; required_perm) ==</span><br><span class="line">                required_perm) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -EPERM;</span><br><span class="line">        &#125;</span><br><span class="line">        acl++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -EACCES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="安全监控"><a href="#安全监控" class="headerlink" title="安全监控"></a>安全监控</h2><h3 id="日志审计"><a href="#日志审计" class="headerlink" title="日志审计"></a>日志审计</h3><ol><li><p><strong>审计配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 审计配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">audit_config</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">log_backend</span> *<span class="title">backend</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> log_level;</span><br><span class="line">    <span class="type">bool</span> enabled;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>审计记录</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 记录审计日志 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">audit_log</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> audit_config *cfg,</span></span><br><span class="line"><span class="params">                     <span class="type">uint32_t</span> event_id,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> <span class="type">char</span> *msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cfg-&gt;enabled) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录事件 */</span></span><br><span class="line">    LOG_MODULE_DECLARE(audit, cfg-&gt;log_level);</span><br><span class="line">    LOG_INF(<span class="string">&quot;Event %u: %s&quot;</span>, event_id, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="入侵检测"><a href="#入侵检测" class="headerlink" title="入侵检测"></a>入侵检测</h3><ol><li><p><strong>IDS 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* IDS 配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ids_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> threshold;</span><br><span class="line">    <span class="type">uint32_t</span> window_size;</span><br><span class="line">    <span class="type">void</span> (*alert_handler)(<span class="type">uint32_t</span> event_id);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>检测逻辑</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 入侵检测 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">check_intrusion</span><span class="params">(<span class="keyword">struct</span> ids_config *cfg,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> event_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uint32_t</span> event_count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int64_t</span> window_start = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int64_t</span> now = k_uptime_get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查时间窗口 */</span></span><br><span class="line">    <span class="keyword">if</span> (now - window_start &gt; cfg-&gt;window_size) &#123;</span><br><span class="line">        event_count = <span class="number">0</span>;</span><br><span class="line">        window_start = now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 增加事件计数 */</span></span><br><span class="line">    event_count++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查阈值 */</span></span><br><span class="line">    <span class="keyword">if</span> (event_count &gt; cfg-&gt;threshold) &#123;</span><br><span class="line">        cfg-&gt;alert_handler(event_id);</span><br><span class="line">        event_count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-安全配置"><a href="#1-安全配置" class="headerlink" title="1. 安全配置"></a>1. 安全配置</h3><ul><li>使用安全默认值</li><li>禁用不必要服务</li><li>定期更新固件</li><li>实施最小权限</li></ul><h3 id="2-密钥管理"><a href="#2-密钥管理" class="headerlink" title="2. 密钥管理"></a>2. 密钥管理</h3><ul><li>安全生成密钥</li><li>定期轮换密钥</li><li>安全存储密钥</li><li>销毁敏感数据</li></ul><h3 id="3-错误处理"><a href="#3-错误处理" class="headerlink" title="3. 错误处理"></a>3. 错误处理</h3><ul><li>不泄露敏感信息</li><li>记录安全事件</li><li>实现失败安全</li><li>优雅降级</li></ul><h3 id="4-代码安全"><a href="#4-代码安全" class="headerlink" title="4. 代码安全"></a>4. 代码安全</h3><ul><li>输入验证</li><li>缓冲区检查</li><li>安全编码实践</li><li>代码审查</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-启动失败"><a href="#1-启动失败" class="headerlink" title="1. 启动失败"></a>1. 启动失败</h3><p><strong>问题</strong>：安全启动验证失败</p><p><strong>解决方案</strong>：</p><ul><li>检查签名</li><li>验证密钥</li><li>更新固件</li><li>检查启动配置</li></ul><h3 id="2-加密错误"><a href="#2-加密错误" class="headerlink" title="2. 加密错误"></a>2. 加密错误</h3><p><strong>问题</strong>：加密操作失败</p><p><strong>解决方案</strong>：</p><ul><li>检查密钥</li><li>验证参数</li><li>确认算法</li><li>检查内存</li></ul><h3 id="3-认证问题"><a href="#3-认证问题" class="headerlink" title="3. 认证问题"></a>3. 认证问题</h3><p><strong>问题</strong>：认证失败</p><p><strong>解决方案</strong>：</p><ul><li>验证凭证</li><li>检查配置</li><li>更新密码</li><li>检查权限</li></ul><h3 id="4-安全漏洞"><a href="#4-安全漏洞" class="headerlink" title="4. 安全漏洞"></a>4. 安全漏洞</h3><p><strong>问题</strong>：发现安全漏洞</p><p><strong>解决方案</strong>：</p><ul><li>评估影响</li><li>及时修复</li><li>更新系统</li><li>加强监控</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了全面的安全功能，包括安全启动、加密服务、安全存储和访问控制等。通过正确实施这些安全措施，可以显著提高系统的安全性。本文档提供了详细的指导和实例，帮助开发者构建安全的嵌入式系统。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>testing</title>
      <link href="/2025/03/21/nodic/zephyr/development/testing/"/>
      <url>/2025/03/21/nodic/zephyr/development/testing/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-测试与调试"><a href="#Zephyr-测试与调试" class="headerlink" title="Zephyr 测试与调试"></a>Zephyr 测试与调试</h1><p>本文档详细介绍了 Zephyr RTOS 的测试和调试功能，包括单元测试、集成测试、调试技术和性能分析等内容。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><ol><li><p><strong>Ztest 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 测试配置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试套件 */</span></span><br><span class="line">ZTEST_SUITE(my_test_suite, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试用例 */</span></span><br><span class="line">ZTEST(my_test_suite, test_function)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 测试代码 */</span></span><br><span class="line">    zassert_true(condition, <span class="string">&quot;Test failed&quot;</span>);</span><br><span class="line">    zassert_equal(a, b, <span class="string">&quot;Values not equal&quot;</span>);</span><br><span class="line">    zassert_not_null(ptr, <span class="string">&quot;Pointer is NULL&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试夹具</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化测试环境 */</span></span><br><span class="line">    <span class="keyword">return</span> test_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">teardown</span><span class="params">(<span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 清理测试环境 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZTEST_SUITE(my_suite, <span class="literal">NULL</span>, setup, <span class="literal">NULL</span>, teardown, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试实现"><a href="#测试实现" class="headerlink" title="测试实现"></a>测试实现</h3><ol><li><p><strong>基本测试</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数测试 */</span></span><br><span class="line">ZTEST(basic_tests, test_addition)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    zassert_equal(result, <span class="number">5</span>, <span class="string">&quot;Addition failed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 边界测试 */</span></span><br><span class="line">ZTEST(basic_tests, test_boundaries)</span><br><span class="line">&#123;</span><br><span class="line">    zassert_equal(add(INT_MAX, <span class="number">1</span>), INT_MIN,</span><br><span class="line">                 <span class="string">&quot;Overflow not handled&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>模拟和存根</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 模拟函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mock_read</span><span class="params">(<span class="type">void</span> *buf, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 返回测试数据 */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(buf, test_data, len);</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用模拟 */</span></span><br><span class="line">ZTEST(mock_tests, test_with_mock)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 替换原始函数 */</span></span><br><span class="line">    ztest_mock_function_replace(read, mock_read);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行测试 */</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">64</span>];</span><br><span class="line">    <span class="type">int</span> ret = read(buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    zassert_equal(ret, <span class="keyword">sizeof</span>(buf), <span class="string">&quot;Read failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 恢复原始函数 */</span></span><br><span class="line">    ztest_mock_function_restore(read);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ol><li><p><strong>QEMU 测试</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line"><span class="keyword">target_compile_definitions</span>(app PRIVATE</span><br><span class="line">    -DCONFIG_TEST_ENVIRONMENT</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">west build -b qemu_x86 tests/integration</span><br><span class="line">west build -t run</span><br></pre></td></tr></table></figure></li><li><p><strong>硬件测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在实际硬件上运行测试</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 tests/integration</span><br><span class="line">west flash</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h3><ol><li><p><strong>系统测试</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 系统初始化测试 */</span></span><br><span class="line">ZTEST(system_tests, test_init)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 验证系统初始化 */</span></span><br><span class="line">    zassert_true(is_system_ready(), <span class="string">&quot;System not ready&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 检查关键服务 */</span></span><br><span class="line">    zassert_not_null(get_main_service(),</span><br><span class="line">                     <span class="string">&quot;Main service not initialized&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>网络测试</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网络连接测试 */</span></span><br><span class="line">ZTEST(network_tests, test_connection)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span> =</span> net_if_get_default();</span><br><span class="line">    zassert_not_null(iface, <span class="string">&quot;No network interface&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待连接 */</span></span><br><span class="line">    k_sem_take(&amp;wait_for_connect, K_SECONDS(<span class="number">10</span>));</span><br><span class="line">    zassert_true(net_if_is_up(iface),</span><br><span class="line">                 <span class="string">&quot;Network interface not up&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试技术"><a href="#调试技术" class="headerlink" title="调试技术"></a>调试技术</h2><h3 id="GDB-调试"><a href="#GDB-调试" class="headerlink" title="GDB 调试"></a>GDB 调试</h3><ol><li><p><strong>启动调试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动调试会话</span></span><br><span class="line">west debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用特定调试器</span></span><br><span class="line">west debug --runner jlink</span><br></pre></td></tr></table></figure></li><li><p><strong>调试命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 设置断点</span><br><span class="line">break main</span><br><span class="line">break file.c:123</span><br><span class="line"></span><br><span class="line"># 检查变量</span><br><span class="line">print variable</span><br><span class="line">print *pointer</span><br><span class="line">print array[index]</span><br><span class="line"></span><br><span class="line"># 查看内存</span><br><span class="line">x/10x 0x20000000</span><br><span class="line">x/s string_ptr</span><br><span class="line"></span><br><span class="line"># 查看寄存器</span><br><span class="line">info registers</span><br><span class="line">print $pc</span><br></pre></td></tr></table></figure></li></ol><h3 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h3><ol><li><p><strong>配置日志</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 模块日志 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(my_module, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用日志 */</span></span><br><span class="line">LOG_INF(<span class="string">&quot;System initialized&quot;</span>);</span><br><span class="line">LOG_DBG(<span class="string">&quot;Debug value: %d&quot;</span>, value);</span><br><span class="line">LOG_WRN(<span class="string">&quot;Warning condition&quot;</span>);</span><br><span class="line">LOG_ERR(<span class="string">&quot;Error occurred: %d&quot;</span>, err);</span><br></pre></td></tr></table></figure></li><li><p><strong>日志过滤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置日志级别</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3</span><br><span class="line">CONFIG_LOG_OVERRIDE_LEVEL=0</span><br></pre></td></tr></table></figure></li></ol><h3 id="内存调试"><a href="#内存调试" class="headerlink" title="内存调试"></a>内存调试</h3><ol><li><p><strong>堆检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 内存分配跟踪 */</span></span><br><span class="line"><span class="type">void</span> *ptr = k_malloc(size);</span><br><span class="line"><span class="keyword">if</span> (!ptr) &#123;</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Memory allocation failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 内存释放 */</span></span><br><span class="line">k_free(ptr);</span><br></pre></td></tr></table></figure></li><li><p><strong>栈检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 检查栈使用 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(my_stack, <span class="number">1024</span>);</span><br><span class="line"><span class="type">size_t</span> unused = k_thread_stack_space_get(thread);</span><br><span class="line">LOG_INF(<span class="string">&quot;Unused stack: %zu&quot;</span>, unused);</span><br></pre></td></tr></table></figure></li></ol><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="时间测量"><a href="#时间测量" class="headerlink" title="时间测量"></a>时间测量</h3><ol><li><p><strong>基本计时</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用系统时钟 */</span></span><br><span class="line"><span class="type">uint32_t</span> start = k_cycle_get_32();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行代码 */</span></span><br><span class="line">do_something();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算时间 */</span></span><br><span class="line"><span class="type">uint32_t</span> cycles = k_cycle_get_32() - start;</span><br><span class="line"><span class="type">uint32_t</span> ns = k_cyc_to_ns_floor64(cycles);</span><br></pre></td></tr></table></figure></li><li><p><strong>高精度计时</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用高精度计时器 */</span></span><br><span class="line"><span class="type">timing_t</span> start_time, end_time;</span><br><span class="line"></span><br><span class="line">timing_init();</span><br><span class="line">timing_start();</span><br><span class="line"></span><br><span class="line">start_time = timing_counter_get();</span><br><span class="line"><span class="comment">/* 执行代码 */</span></span><br><span class="line">end_time = timing_counter_get();</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> cycles = timing_cycles_get(&amp;start_time, &amp;end_time);</span><br><span class="line"><span class="type">uint64_t</span> ns = timing_cycles_to_ns(cycles);</span><br></pre></td></tr></table></figure></li></ol><h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><ol><li><p><strong>CPU 使用率</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CPU 负载监控 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread_runtime_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">k_thread_runtime_stats_get(thread, &amp;stats);</span><br><span class="line"></span><br><span class="line">LOG_INF(<span class="string">&quot;CPU cycles: %llu&quot;</span>, stats.execution_cycles);</span><br></pre></td></tr></table></figure></li><li><p><strong>内存使用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 内存使用监控 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_mem_slab_info</span> <span class="title">info</span>;</span></span><br><span class="line">k_mem_slab_info_get(&amp;my_slab, &amp;info);</span><br><span class="line"></span><br><span class="line">LOG_INF(<span class="string">&quot;Total blocks: %zu&quot;</span>, info.num_blocks);</span><br><span class="line">LOG_INF(<span class="string">&quot;Free blocks: %zu&quot;</span>, info.num_free);</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><h3 id="1-系统查看器"><a href="#1-系统查看器" class="headerlink" title="1. 系统查看器"></a>1. 系统查看器</h3><ol><li><p><strong>SystemView 配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 启用 SystemView</span><br><span class="line">CONFIG_SEGGER_SYSTEMVIEW=y</span><br><span class="line">CONFIG_USE_SEGGER_RTT=y</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 SystemView</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 记录事件 */</span></span><br><span class="line">SEGGER_SYSVIEW_RecordU32(ID_EVENT, value);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 记录任务切换 */</span></span><br><span class="line">SEGGER_SYSVIEW_OnTaskStartExec(task_id);</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-内存分析器"><a href="#2-内存分析器" class="headerlink" title="2. 内存分析器"></a>2. 内存分析器</h3><ol><li><p><strong>堆分析</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 启用堆监控 */</span></span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=<span class="number">16384</span></span><br><span class="line">CONFIG_HEAP_LISTENER=y</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 监控分配 */</span></span><br><span class="line"><span class="type">void</span> heap_alloc_cb(<span class="type">uintptr_t</span> heap_id, <span class="type">void</span> *mem, <span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Allocated %zu bytes at %p&quot;</span>, bytes, mem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>内存映射</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成内存映射</span></span><br><span class="line">west build -t ram_report</span><br><span class="line">west build -t rom_report</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-覆盖率分析"><a href="#3-覆盖率分析" class="headerlink" title="3. 覆盖率分析"></a>3. 覆盖率分析</h3><ol><li><p><strong>配置覆盖率</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 启用覆盖率</span><br><span class="line">CONFIG_COVERAGE=y</span><br><span class="line">CONFIG_COVERAGE_GCOV=y</span><br></pre></td></tr></table></figure></li><li><p><strong>生成报告</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">west build -t run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成覆盖率报告</span></span><br><span class="line">gcovr -r . --html --html-details -o coverage.html</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-测试策略"><a href="#1-测试策略" class="headerlink" title="1. 测试策略"></a>1. 测试策略</h3><ul><li>编写全面的测试</li><li>自动化测试流程</li><li>持续集成测试</li><li>回归测试</li></ul><h3 id="2-调试方法"><a href="#2-调试方法" class="headerlink" title="2. 调试方法"></a>2. 调试方法</h3><ul><li>系统化调试</li><li>日志分级</li><li>错误追踪</li><li>性能优化</li></ul><h3 id="3-文档维护"><a href="#3-文档维护" class="headerlink" title="3. 文档维护"></a>3. 文档维护</h3><ul><li>测试文档</li><li>调试指南</li><li>性能报告</li><li>问题追踪</li></ul><h3 id="4-工具使用"><a href="#4-工具使用" class="headerlink" title="4. 工具使用"></a>4. 工具使用</h3><ul><li>选择合适工具</li><li>自动化工具</li><li>集成开发环境</li><li>版本控制</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-测试失败"><a href="#1-测试失败" class="headerlink" title="1. 测试失败"></a>1. 测试失败</h3><p><strong>问题</strong>：测试用例失败</p><p><strong>解决方案</strong>：</p><ul><li>检查测试环境</li><li>验证测试数据</li><li>分析失败原因</li><li>修复问题代码</li></ul><h3 id="2-调试困难"><a href="#2-调试困难" class="headerlink" title="2. 调试困难"></a>2. 调试困难</h3><p><strong>问题</strong>：难以定位问题</p><p><strong>解决方案</strong>：</p><ul><li>增加日志</li><li>使用调试器</li><li>简化问题</li><li>隔离故障</li></ul><h3 id="3-性能问题"><a href="#3-性能问题" class="headerlink" title="3. 性能问题"></a>3. 性能问题</h3><p><strong>问题</strong>：性能不达标</p><p><strong>解决方案</strong>：</p><ul><li>性能分析</li><li>优化代码</li><li>调整配置</li><li>监控资源</li></ul><h3 id="4-内存问题"><a href="#4-内存问题" class="headerlink" title="4. 内存问题"></a>4. 内存问题</h3><p><strong>问题</strong>：内存泄漏</p><p><strong>解决方案</strong>：</p><ul><li>内存跟踪</li><li>检查分配</li><li>验证释放</li><li>使用工具</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了丰富的测试和调试工具，支持从单元测试到系统级调试的各种需求。通过合理使用这些工具，可以提高代码质量，加快问题定位和解决速度。本文档提供了详细的指导和实例，帮助开发者更好地进行测试和调试工作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>drivers</title>
      <link href="/2025/03/21/nodic/zephyr/core/drivers/"/>
      <url>/2025/03/21/nodic/zephyr/core/drivers/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-驱动系统"><a href="#Zephyr-驱动系统" class="headerlink" title="Zephyr 驱动系统"></a>Zephyr 驱动系统</h1><p>Zephyr RTOS 提供了丰富的驱动系统，用于支持各种硬件外设。本文档将详细介绍 Zephyr 驱动系统的使用方法和常见外设驱动。</p><h2 id="驱动框架"><a href="#驱动框架" class="headerlink" title="驱动框架"></a>驱动框架</h2><h3 id="设备模型"><a href="#设备模型" class="headerlink" title="设备模型"></a>设备模型</h3><p>Zephyr 的设备模型基于以下概念：</p><ol><li><strong>设备对象</strong>：表示一个硬件设备</li><li><strong>驱动 API</strong>：定义设备操作接口</li><li><strong>设备树</strong>：描述硬件配置</li></ol><h3 id="获取设备实例"><a href="#获取设备实例" class="headerlink" title="获取设备实例"></a>获取设备实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过设备树标签获取设备</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(uart0));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查设备是否就绪</span></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设备初始化"><a href="#设备初始化" class="headerlink" title="设备初始化"></a>设备初始化</h3><p>设备初始化过程：</p><ol><li>系统启动时，按照初始化级别顺序初始化设备</li><li>每个设备的初始化函数被调用</li><li>设备初始化完成后标记为就绪</li></ol><p>初始化级别：</p><ul><li><code>PRE_KERNEL_1</code>：基础硬件初始化</li><li><code>PRE_KERNEL_2</code>：设备和驱动初始化</li><li><code>POST_KERNEL</code>：需要内核服务的设备</li><li><code>APPLICATION</code>：应用级设备</li></ul><h2 id="常用外设驱动"><a href="#常用外设驱动" class="headerlink" title="常用外设驱动"></a>常用外设驱动</h2><h3 id="GPIO-驱动"><a href="#GPIO-驱动" class="headerlink" title="GPIO 驱动"></a>GPIO 驱动</h3><ol><li><strong>配置 GPIO</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 GPIO 设备</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">gpio</span> =</span> DEVICE_DT_GET(DT_NODELABEL(gpio0));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 GPIO 引脚</span></span><br><span class="line">gpio_pin_configure(gpio, PIN, GPIO_OUTPUT_ACTIVE);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>控制 GPIO</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置引脚电平</span></span><br><span class="line">gpio_pin_set(gpio, PIN, <span class="number">1</span>);  <span class="comment">// 高电平</span></span><br><span class="line">gpio_pin_set(gpio, PIN, <span class="number">0</span>);  <span class="comment">// 低电平</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取引脚电平</span></span><br><span class="line"><span class="type">int</span> val = gpio_pin_get(gpio, PIN);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>GPIO 中断</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中断回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">gpio_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">                  <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理中断</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置中断</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">gpio_cb</span>;</span></span><br><span class="line">gpio_init_callback(&amp;gpio_cb, gpio_callback, BIT(PIN));</span><br><span class="line">gpio_add_callback(gpio, &amp;gpio_cb);</span><br><span class="line">gpio_pin_interrupt_configure(gpio, PIN, GPIO_INT_EDGE_RISING);</span><br></pre></td></tr></table></figure><h3 id="UART-驱动"><a href="#UART-驱动" class="headerlink" title="UART 驱动"></a>UART 驱动</h3><ol><li><strong>配置 UART</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">uart</span> =</span> DEVICE_DT_GET(DT_NODELABEL(uart0));</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>发送数据</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送单个字节</span></span><br><span class="line">uart_poll_out(uart, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据块</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *data = <span class="string">&quot;Hello, Zephyr!&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(data); i++) &#123;</span><br><span class="line">    uart_poll_out(uart, data[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>接收数据</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收单个字节</span></span><br><span class="line"><span class="type">uint8_t</span> c;</span><br><span class="line"><span class="type">int</span> ret = uart_poll_in(uart, &amp;c);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理接收到的字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>异步 UART</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">uart_cb</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> uart_event *evt, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (evt-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> UART_RX_RDY:</span><br><span class="line">        <span class="comment">// 处理接收到的数据</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> UART_TX_DONE:</span><br><span class="line">        <span class="comment">// 发送完成</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 其他事件处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置异步 UART</span></span><br><span class="line">uart_callback_set(uart, uart_cb, <span class="literal">NULL</span>);</span><br><span class="line">uart_rx_enable(uart, rx_buf, <span class="keyword">sizeof</span>(rx_buf), <span class="number">100</span>);</span><br><span class="line">uart_tx(uart, tx_buf, len, SYS_FOREVER_MS);</span><br></pre></td></tr></table></figure><h3 id="SPI-驱动"><a href="#SPI-驱动" class="headerlink" title="SPI 驱动"></a>SPI 驱动</h3><ol><li><strong>配置 SPI</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">spi</span> =</span> DEVICE_DT_GET(DT_NODELABEL(spi0));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">spi_cfg</span> =</span> &#123;</span><br><span class="line">    .frequency = <span class="number">1000000</span>,</span><br><span class="line">    .operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(<span class="number">8</span>) | SPI_TRANSFER_MSB,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>SPI 传输</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line"><span class="type">uint8_t</span> tx_buffer[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line"><span class="type">uint8_t</span> rx_buffer[<span class="keyword">sizeof</span>(tx_buffer)];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">tx_buf</span> =</span> &#123;</span><br><span class="line">    .buf = tx_buffer,</span><br><span class="line">    .len = <span class="keyword">sizeof</span>(tx_buffer)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">rx_buf</span> =</span> &#123;</span><br><span class="line">    .buf = rx_buffer,</span><br><span class="line">    .len = <span class="keyword">sizeof</span>(rx_buffer)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">tx</span> =</span> &#123;</span><br><span class="line">    .buffers = &amp;tx_buf,</span><br><span class="line">    .count = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">rx</span> =</span> &#123;</span><br><span class="line">    .buffers = &amp;rx_buf,</span><br><span class="line">    .count = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行传输</span></span><br><span class="line"><span class="type">int</span> ret = spi_transceive(spi, &amp;spi_cfg, &amp;tx, &amp;rx);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 传输成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I2C-驱动"><a href="#I2C-驱动" class="headerlink" title="I2C 驱动"></a>I2C 驱动</h3><ol><li><strong>配置 I2C</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2c</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2c0));</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>I2C 读写</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写数据</span></span><br><span class="line"><span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>&#125;;</span><br><span class="line"><span class="type">int</span> ret = i2c_write(i2c, data, <span class="keyword">sizeof</span>(data), SLAVE_ADDR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读数据</span></span><br><span class="line"><span class="type">uint8_t</span> buffer[<span class="number">2</span>];</span><br><span class="line">ret = i2c_read(i2c, buffer, <span class="keyword">sizeof</span>(buffer), SLAVE_ADDR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写后读</span></span><br><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0x00</span>;</span><br><span class="line">ret = i2c_write_read(i2c, SLAVE_ADDR, &amp;reg, <span class="number">1</span>, buffer, <span class="keyword">sizeof</span>(buffer));</span><br></pre></td></tr></table></figure><h2 id="传感器子系统"><a href="#传感器子系统" class="headerlink" title="传感器子系统"></a>传感器子系统</h2><h3 id="传感器-API"><a href="#传感器-API" class="headerlink" title="传感器 API"></a>传感器 API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">sensor</span> =</span> DEVICE_DT_GET(DT_NODELABEL(temp_sensor));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取传感器数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">temp</span>;</span></span><br><span class="line">sensor_sample_fetch(sensor);</span><br><span class="line">sensor_channel_get(sensor, SENSOR_CHAN_AMBIENT_TEMP, &amp;temp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为浮点数</span></span><br><span class="line"><span class="type">double</span> temperature = sensor_value_to_double(&amp;temp);</span><br></pre></td></tr></table></figure><h3 id="常见传感器类型"><a href="#常见传感器类型" class="headerlink" title="常见传感器类型"></a>常见传感器类型</h3><ol><li><p><strong>温度传感器</strong></p><ul><li>环境温度 (<code>SENSOR_CHAN_AMBIENT_TEMP</code>)</li><li>对象温度 (<code>SENSOR_CHAN_OBJ_TEMP</code>)</li></ul></li><li><p><strong>加速度传感器</strong></p><ul><li>X 轴加速度 (<code>SENSOR_CHAN_ACCEL_X</code>)</li><li>Y 轴加速度 (<code>SENSOR_CHAN_ACCEL_Y</code>)</li><li>Z 轴加速度 (<code>SENSOR_CHAN_ACCEL_Z</code>)</li><li>XYZ 轴加速度 (<code>SENSOR_CHAN_ACCEL_XYZ</code>)</li></ul></li><li><p><strong>陀螺仪</strong></p><ul><li>X 轴角速度 (<code>SENSOR_CHAN_GYRO_X</code>)</li><li>Y 轴角速度 (<code>SENSOR_CHAN_GYRO_Y</code>)</li><li>Z 轴角速度 (<code>SENSOR_CHAN_GYRO_Z</code>)</li><li>XYZ 轴角速度 (<code>SENSOR_CHAN_GYRO_XYZ</code>)</li></ul></li><li><p><strong>其他传感器</strong></p><ul><li>气压传感器 (<code>SENSOR_CHAN_PRESS</code>)</li><li>湿度传感器 (<code>SENSOR_CHAN_HUMIDITY</code>)</li><li>光线传感器 (<code>SENSOR_CHAN_LIGHT</code>)</li></ul></li></ol><h3 id="传感器触发"><a href="#传感器触发" class="headerlink" title="传感器触发"></a>传感器触发</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发回调函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">sensor_trigger_handler</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                  <span class="type">const</span> <span class="keyword">struct</span> sensor_trigger *trigger)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理传感器触发事件</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">data</span>;</span></span><br><span class="line">    sensor_sample_fetch(dev);</span><br><span class="line">    sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &amp;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置触发</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sensor_trigger</span> <span class="title">trigger</span> =</span> &#123;</span><br><span class="line">    .type = SENSOR_TRIG_THRESHOLD,</span><br><span class="line">    .chan = SENSOR_CHAN_AMBIENT_TEMP,</span><br><span class="line">&#125;;</span><br><span class="line">sensor_trigger_set(sensor, &amp;trigger, sensor_trigger_handler);</span><br></pre></td></tr></table></figure><h2 id="存储驱动"><a href="#存储驱动" class="headerlink" title="存储驱动"></a>存储驱动</h2><h3 id="Flash-存储"><a href="#Flash-存储" class="headerlink" title="Flash 存储"></a>Flash 存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/flash.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">flash_dev</span> =</span> DEVICE_DT_GET(DT_CHOSEN(zephyr_flash_controller));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 Flash</span></span><br><span class="line"><span class="type">uint8_t</span> buffer[<span class="number">256</span>];</span><br><span class="line">flash_read(flash_dev, offset, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 擦除 Flash</span></span><br><span class="line">flash_erase(flash_dev, offset, FLASH_SECTOR_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入 Flash</span></span><br><span class="line"><span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line">flash_write(flash_dev, offset, data, <span class="keyword">sizeof</span>(data));</span><br></pre></td></tr></table></figure><h3 id="EEPROM"><a href="#EEPROM" class="headerlink" title="EEPROM"></a>EEPROM</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/eeprom.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">eeprom</span> =</span> DEVICE_DT_GET(DT_NODELABEL(eeprom0));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 EEPROM</span></span><br><span class="line"><span class="type">uint8_t</span> buffer[<span class="number">16</span>];</span><br><span class="line">eeprom_read(eeprom, offset, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入 EEPROM</span></span><br><span class="line"><span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line">eeprom_write(eeprom, offset, data, <span class="keyword">sizeof</span>(data));</span><br></pre></td></tr></table></figure><h2 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h2><h3 id="设备电源管理"><a href="#设备电源管理" class="headerlink" title="设备电源管理"></a>设备电源管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置设备电源状态</span></span><br><span class="line">pm_device_state_set(dev, PM_DEVICE_STATE_LOW_POWER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取设备电源状态</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">pm_device_state</span> <span class="title">state</span>;</span></span><br><span class="line">pm_device_state_get(dev, &amp;state);</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>设备树配置</strong></p><ul><li>使用设备树配置硬件</li><li>避免硬编码硬件参数</li><li>利用设备树覆盖文件定制配置</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>检查设备是否就绪</li><li>处理所有驱动 API 返回的错误码</li><li>实现适当的错误恢复机制</li></ul></li><li><p><strong>资源管理</strong></p><ul><li>合理使用中断和 DMA</li><li>避免长时间阻塞</li><li>使用异步 API 提高效率</li></ul></li><li><p><strong>电源优化</strong></p><ul><li>不使用时禁用外设</li><li>使用低功耗模式</li><li>优化数据传输批量处理</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>设备未就绪</strong></p><ul><li>检查设备树配置</li><li>确认驱动已启用</li><li>验证硬件连接</li></ul></li><li><p><strong>通信错误</strong></p><ul><li>检查通信参数（波特率、极性等）</li><li>验证设备地址</li><li>检查时序要求</li></ul></li><li><p><strong>中断问题</strong></p><ul><li>确认中断配置正确</li><li>检查中断优先级</li><li>避免中断处理函数中的长时间操作</li></ul></li><li><p><strong>DMA 传输失败</strong></p><ul><li>检查内存对齐</li><li>验证 DMA 通道配置</li><li>确保缓冲区在传输期间有效</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 驱动系统提供了丰富的硬件抽象层，简化了与外设的交互。通过使用标准化的驱动 API，可以开发出可移植、可维护的嵌入式应用。深入理解这些驱动接口对于开发高质量的 Zephyr 应用至关重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>filesystem</title>
      <link href="/2025/03/21/nodic/zephyr/core/filesystem/"/>
      <url>/2025/03/21/nodic/zephyr/core/filesystem/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-文件系统"><a href="#Zephyr-文件系统" class="headerlink" title="Zephyr 文件系统"></a>Zephyr 文件系统</h1><p>Zephyr RTOS 提供了多种文件系统支持，可以用于数据存储和管理。本文档将详细介绍 Zephyr 文件系统的架构和使用方法。</p><h2 id="文件系统概述"><a href="#文件系统概述" class="headerlink" title="文件系统概述"></a>文件系统概述</h2><h3 id="支持的文件系统"><a href="#支持的文件系统" class="headerlink" title="支持的文件系统"></a>支持的文件系统</h3><p>Zephyr 支持多种文件系统：</p><ol><li><p><strong>FAT 文件系统</strong></p><ul><li>FAT12&#x2F;16&#x2F;32</li><li>基于 FatFs 库实现</li><li>适用于 SD 卡、USB 存储等</li></ul></li><li><p><strong>LittleFS</strong></p><ul><li>为闪存设计的轻量级文件系统</li><li>支持掉电保护</li><li>磨损均衡</li></ul></li><li><p><strong>NFFS (Newtron Flash File System)</strong></p><ul><li>为闪存设计的文件系统</li><li>支持磨损均衡</li></ul></li><li><p><strong>NVS (Non-Volatile Storage)</strong></p><ul><li>简单的键值存储</li><li>支持掉电保护</li><li>适用于配置数据</li></ul></li></ol><h3 id="文件系统架构"><a href="#文件系统架构" class="headerlink" title="文件系统架构"></a>文件系统架构</h3><p>Zephyr 文件系统架构包括：</p><ol><li><strong>VFS 层</strong>：提供统一的文件系统 API</li><li><strong>文件系统实现</strong>：特定文件系统的实现</li><li><strong>存储层</strong>：与底层存储设备交互</li></ol><h2 id="文件系统配置"><a href="#文件系统配置" class="headerlink" title="文件系统配置"></a>文件系统配置</h2><h3 id="启用文件系统"><a href="#启用文件系统" class="headerlink" title="启用文件系统"></a>启用文件系统</h3><p>在 <code>prj.conf</code> 中启用文件系统功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 启用文件系统</span><br><span class="line">CONFIG_FILE_SYSTEM=y</span><br><span class="line"></span><br><span class="line"># 启用特定文件系统</span><br><span class="line">CONFIG_FAT_FILESYSTEM_ELM=y  # FAT 文件系统</span><br><span class="line">CONFIG_FILE_SYSTEM_LITTLEFS=y  # LittleFS</span><br><span class="line">CONFIG_FILE_SYSTEM_NFFS=y  # NFFS</span><br><span class="line">CONFIG_NVS=y  # NVS</span><br><span class="line"></span><br><span class="line"># 文件系统缓冲区配置</span><br><span class="line">CONFIG_FS_BUFFER_SIZE=64</span><br></pre></td></tr></table></figure><h3 id="挂载文件系统"><a href="#挂载文件系统" class="headerlink" title="挂载文件系统"></a>挂载文件系统</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/littlefs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LittleFS 配置</span></span><br><span class="line">FS_LITTLEFS_DECLARE_DEFAULT_CONFIG(lfs_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件系统挂载点</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_mount_t</span> <span class="title">lfs_mount</span> =</span> &#123;</span><br><span class="line">    .type = FS_LITTLEFS,</span><br><span class="line">    .fs_data = &amp;lfs_data,</span><br><span class="line">    .storage_dev = (<span class="type">void</span> *)FLASH_AREA_ID(storage),</span><br><span class="line">    .mnt_point = <span class="string">&quot;/lfs&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载文件系统</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mount_filesystem</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_mount(&amp;lfs_mount);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error mounting LittleFS [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;LittleFS mounted at %s\n&quot;</span>, lfs_mount.mnt_point);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs/data.txt&quot;</span>, FS_O_CREATE | FS_O_WRITE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error opening file [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *data = <span class="string">&quot;Hello, Zephyr File System!&quot;</span>;</span><br><span class="line">    ret = fs_write(&amp;file, data, <span class="built_in">strlen</span>(data));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error writing file [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Wrote %d bytes to file\n&quot;</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">read_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs/data.txt&quot;</span>, FS_O_READ);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error opening file [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">    ret = fs_read(&amp;file, buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error reading file [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buffer[ret] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Read %d bytes: %s\n&quot;</span>, ret, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">create_directory</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_mkdir(<span class="string">&quot;/lfs/mydir&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error creating directory [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Directory created\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出目录内容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_directory</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_dir_t</span> <span class="title">dir</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开目录</span></span><br><span class="line">    ret = fs_opendir(&amp;dir, <span class="string">&quot;/lfs&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error opening directory [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取目录项</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">fs_dirent</span> <span class="title">entry</span>;</span></span><br><span class="line">        </span><br><span class="line">        ret = fs_readdir(&amp;dir, &amp;entry);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Error reading directory [%d]\n&quot;</span>, ret);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 到达目录末尾</span></span><br><span class="line">        <span class="keyword">if</span> (entry.name[<span class="number">0</span>] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 打印文件信息</span></span><br><span class="line">        printk(<span class="string">&quot;  %s [%s] %zu bytes\n&quot;</span>, entry.name,</span><br><span class="line">               (entry.type == FS_DIR_ENTRY_FILE) ? <span class="string">&quot;FILE&quot;</span> : <span class="string">&quot;DIR&quot;</span>,</span><br><span class="line">               entry.size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭目录</span></span><br><span class="line">    fs_closedir(&amp;dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查文件是否存在</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_dirent</span> <span class="title">entry</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_stat(<span class="string">&quot;/lfs/data.txt&quot;</span>, &amp;entry);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;File exists, size: %zu bytes\n&quot;</span>, entry.size);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;File does not exist [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rename_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_rename(<span class="string">&quot;/lfs/data.txt&quot;</span>, <span class="string">&quot;/lfs/newdata.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error renaming file [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;File renamed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_unlink(<span class="string">&quot;/lfs/newdata.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error deleting file [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;File deleted\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特定文件系统"><a href="#特定文件系统" class="headerlink" title="特定文件系统"></a>特定文件系统</h2><h3 id="FAT-文件系统"><a href="#FAT-文件系统" class="headerlink" title="FAT 文件系统"></a>FAT 文件系统</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/disk_access.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FAT 文件系统挂载</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mount_fat</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *disk_mount_pt = <span class="string">&quot;/SD:&quot;</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *disk_pdrv = <span class="string">&quot;SD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载配置</span></span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_mount_t</span> <span class="title">mp</span> =</span> &#123;</span><br><span class="line">        .type = FS_FATFS,</span><br><span class="line">        .mnt_point = disk_mount_pt,</span><br><span class="line">        .fs_data = <span class="literal">NULL</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查磁盘是否就绪</span></span><br><span class="line">    <span class="keyword">if</span> (disk_access_init(disk_pdrv) != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Disk access initialization failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载文件系统</span></span><br><span class="line">    mp.storage_dev = (<span class="type">void</span> *)disk_pdrv;</span><br><span class="line">    <span class="type">int</span> ret = fs_mount(&amp;mp);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error mounting FAT [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;FAT file system mounted\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LittleFS"><a href="#LittleFS" class="headerlink" title="LittleFS"></a>LittleFS</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/littlefs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/flash_map.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LittleFS 配置</span></span><br><span class="line">FS_LITTLEFS_DECLARE_DEFAULT_CONFIG(lfs_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载 LittleFS</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mount_littlefs</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 挂载配置</span></span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_mount_t</span> <span class="title">mp</span> =</span> &#123;</span><br><span class="line">        .type = FS_LITTLEFS,</span><br><span class="line">        .fs_data = &amp;lfs_data,</span><br><span class="line">        .storage_dev = (<span class="type">void</span> *)FLASH_AREA_ID(lfs_storage),</span><br><span class="line">        .mnt_point = <span class="string">&quot;/lfs&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载文件系统</span></span><br><span class="line">    <span class="type">int</span> ret = fs_mount(&amp;mp);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error mounting LittleFS [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;LittleFS mounted\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NVS-Non-Volatile-Storage"><a href="#NVS-Non-Volatile-Storage" class="headerlink" title="NVS (Non-Volatile Storage)"></a>NVS (Non-Volatile Storage)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/nvs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/flash_map.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NVS 实例</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">nvs_fs</span> <span class="title">fs</span> =</span> &#123;</span><br><span class="line">    .sector_size = <span class="number">4096</span>,  <span class="comment">// 扇区大小</span></span><br><span class="line">    .sector_count = <span class="number">4</span>,    <span class="comment">// 扇区数量</span></span><br><span class="line">    .offset = FLASH_AREA_OFFSET(nvs_storage),  <span class="comment">// 闪存区域偏移</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 NVS</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_nvs</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 NVS</span></span><br><span class="line">    ret = nvs_init(&amp;fs, DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error initializing NVS [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;NVS initialized\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 NVS</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">use_nvs</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="type">uint32_t</span> value = <span class="number">12345</span>;</span><br><span class="line">    ret = nvs_write(&amp;fs, <span class="number">1</span>, &amp;value, <span class="keyword">sizeof</span>(value));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error writing to NVS [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Data written to NVS\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="type">uint32_t</span> read_value;</span><br><span class="line">    ret = nvs_read(&amp;fs, <span class="number">1</span>, &amp;read_value, <span class="keyword">sizeof</span>(read_value));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error reading from NVS [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Read value: %u\n&quot;</span>, read_value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除数据</span></span><br><span class="line">    ret = nvs_delete(&amp;fs, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error deleting from NVS [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Data deleted from NVS\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="存储分区"><a href="#存储分区" class="headerlink" title="存储分区"></a>存储分区</h2><h3 id="分区配置"><a href="#分区配置" class="headerlink" title="分区配置"></a>分区配置</h3><p>在设备树中配置存储分区：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,code-partition</span> <span class="operator">=</span> <span class="variable">&amp;slot0_partition</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">flash_partitions</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;fixed-partitions&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">        <span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">        boot_partition:</span> <span class="title class_">partition@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;mcuboot&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x00000000</span> <span class="number">0x10000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">        slot0_partition:</span> <span class="title class_">partition@10000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;image-0&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x00010000</span> <span class="number">0x40000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">        slot1_partition:</span> <span class="title class_">partition@50000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;image-1&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x00050000</span> <span class="number">0x40000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">        storage_partition:</span> <span class="title class_">partition@90000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;storage&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x00090000</span> <span class="number">0x10000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="访问分区"><a href="#访问分区" class="headerlink" title="访问分区"></a>访问分区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/flash_map.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取分区信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">access_partition</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">flash_area</span> *<span class="title">fa</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开分区</span></span><br><span class="line">    ret = flash_area_open(FLASH_AREA_ID(storage), &amp;fa);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error opening flash area [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 擦除分区</span></span><br><span class="line">    ret = flash_area_erase(fa, <span class="number">0</span>, fa-&gt;fa_size);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error erasing flash area [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line">    ret = flash_area_write(fa, <span class="number">0</span>, data, <span class="keyword">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error writing to flash area [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="type">uint8_t</span> read_data[<span class="number">4</span>];</span><br><span class="line">    ret = flash_area_read(fa, <span class="number">0</span>, read_data, <span class="keyword">sizeof</span>(read_data));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error reading from flash area [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Read data: %02x %02x %02x %02x\n&quot;</span>,</span><br><span class="line">           read_data[<span class="number">0</span>], read_data[<span class="number">1</span>], read_data[<span class="number">2</span>], read_data[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    <span class="comment">// 关闭分区</span></span><br><span class="line">    flash_area_close(fa);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件系统-Shell-命令"><a href="#文件系统-Shell-命令" class="headerlink" title="文件系统 Shell 命令"></a>文件系统 Shell 命令</h2><p>Zephyr 提供了文件系统 Shell 命令，可以用于交互式文件操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用文件系统 Shell</span><br><span class="line">CONFIG_FILE_SYSTEM_SHELL=y</span><br></pre></td></tr></table></figure><p>可用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs cd &lt;path&gt;                  # 更改当前目录</span><br><span class="line">fs ls [path]                  # 列出目录内容</span><br><span class="line">fs mkdir &lt;path&gt;               # 创建目录</span><br><span class="line">fs read &lt;path&gt; [offset] [len] # 读取文件</span><br><span class="line">fs write &lt;path&gt; &lt;str&gt;         # 写入文件</span><br><span class="line">fs rm &lt;path&gt;                  # 删除文件</span><br><span class="line">fs mount &lt;path&gt;               # 挂载文件系统</span><br><span class="line">fs unmount &lt;path&gt;             # 卸载文件系统</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>文件系统选择</strong></p><ul><li>对于小型闪存，使用 LittleFS</li><li>对于 SD 卡等外部存储，使用 FAT</li><li>对于简单键值存储，使用 NVS</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>适当配置缓冲区大小</li><li>批量读写操作</li><li>避免频繁打开关闭文件</li></ul></li><li><p><strong>可靠性保证</strong></p><ul><li>使用支持掉电保护的文件系统</li><li>定期同步文件系统</li><li>实现错误恢复机制</li></ul></li><li><p><strong>资源管理</strong></p><ul><li>及时关闭文件和目录</li><li>避免过度分配文件句柄</li><li>定期清理临时文件</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>挂载失败</strong></p><ul><li>检查存储设备是否正常</li><li>验证分区配置</li><li>确认文件系统类型</li></ul></li><li><p><strong>读写错误</strong></p><ul><li>检查文件权限</li><li>验证路径是否正确</li><li>确认存储空间是否充足</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>增加缓冲区大小</li><li>减少小块读写操作</li><li>使用更适合的文件系统</li></ul></li><li><p><strong>文件系统损坏</strong></p><ul><li>使用文件系统检查工具</li><li>实现自动修复机制</li><li>备份重要数据</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 文件系统提供了丰富的功能，支持多种文件系统类型和存储设备。通过合理配置和使用这些功能，可以开发出高效、可靠的数据存储应用。深入理解这些文件系统接口对于开发高质量的 Zephyr 应用至关重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hardware</title>
      <link href="/2025/03/21/nodic/zephyr/core/hardware/"/>
      <url>/2025/03/21/nodic/zephyr/core/hardware/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-RTOS-硬件抽象层"><a href="#Zephyr-RTOS-硬件抽象层" class="headerlink" title="Zephyr RTOS 硬件抽象层"></a>Zephyr RTOS 硬件抽象层</h1><p>硬件抽象层（HAL）是 Zephyr RTOS 中的一个关键组件，它提供了一个统一的接口来访问不同硬件平台的功能。本文档详细介绍了 HAL 的架构、使用方法和最佳实践。</p><h2 id="1-HAL-架构"><a href="#1-HAL-架构" class="headerlink" title="1. HAL 架构"></a>1. HAL 架构</h2><h3 id="1-1-架构概述"><a href="#1-1-架构概述" class="headerlink" title="1.1 架构概述"></a>1.1 架构概述</h3><p>Zephyr HAL 采用分层设计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+</span><br><span class="line">|      应用层            |</span><br><span class="line">+------------------------+</span><br><span class="line">|      驱动 API          |</span><br><span class="line">+------------------------+</span><br><span class="line">|      HAL API          |</span><br><span class="line">+------------------------+</span><br><span class="line">|   SOC 特定实现         |</span><br><span class="line">+------------------------+</span><br><span class="line">|      硬件             |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><h3 id="1-2-主要组件"><a href="#1-2-主要组件" class="headerlink" title="1.2 主要组件"></a>1.2 主要组件</h3><ul><li><strong>SOC HAL</strong>：处理器核心相关的抽象</li><li><strong>外设 HAL</strong>：片上外设的抽象</li><li><strong>板级支持包</strong>：特定开发板的支持</li></ul><h2 id="2-SOC-HAL"><a href="#2-SOC-HAL" class="headerlink" title="2. SOC HAL"></a>2. SOC HAL</h2><h3 id="2-1-处理器核心配置"><a href="#2-1-处理器核心配置" class="headerlink" title="2.1 处理器核心配置"></a>2.1 处理器核心配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/arch/cpu.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/arch/arm/aarch32/cortex_m/cmsis.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cpu_config_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置系统时钟 */</span></span><br><span class="line">    SystemCoreClockUpdate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置中断优先级分组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置 SysTick */</span></span><br><span class="line">    SysTick_Config(SystemCoreClock / CONFIG_SYS_CLOCK_TICKS_PER_SEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-中断控制"><a href="#2-2-中断控制" class="headerlink" title="2.2 中断控制"></a>2.2 中断控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/arch/cpu.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/irq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">interrupt_config_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置中断优先级 */</span></span><br><span class="line">    IRQ_CONNECT(MY_IRQ, MY_IRQ_PRIO, my_isr, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置中断优先级 */</span></span><br><span class="line">    irq_set_priority(MY_IRQ, MY_IRQ_PRIO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    irq_enable(MY_IRQ);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-内存管理单元-MMU"><a href="#2-3-内存管理单元-MMU" class="headerlink" title="2.3 内存管理单元 (MMU)"></a>2.3 内存管理单元 (MMU)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/arch/arm/aarch32/mmu/arm_mmu.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">arm_mmu_region</span> <span class="title">mmu_regions</span>[] =</span> &#123;</span><br><span class="line">    <span class="comment">/* 闪存区域 */</span></span><br><span class="line">    MMU_REGION_FLAT_ENTRY(<span class="string">&quot;FLASH&quot;</span>,</span><br><span class="line">                         CONFIG_FLASH_BASE_ADDRESS,</span><br><span class="line">                         CONFIG_FLASH_SIZE,</span><br><span class="line">                         MT_NORMAL | MT_P_RX_U_NA),</span><br><span class="line">    <span class="comment">/* SRAM 区域 */</span></span><br><span class="line">    MMU_REGION_FLAT_ENTRY(<span class="string">&quot;SRAM&quot;</span>,</span><br><span class="line">                         CONFIG_SRAM_BASE_ADDRESS,</span><br><span class="line">                         CONFIG_SRAM_SIZE,</span><br><span class="line">                         MT_NORMAL | MT_P_RW_U_NA),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">arm_mmu_config</span> <span class="title">mmu_config</span> =</span> &#123;</span><br><span class="line">    .num_regions = ARRAY_SIZE(mmu_regions),</span><br><span class="line">    .mmu_regions = mmu_regions,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmu_config_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    arm_mmu_init();</span><br><span class="line">    arm_mmu_enable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-外设-HAL"><a href="#3-外设-HAL" class="headerlink" title="3. 外设 HAL"></a>3. 外设 HAL</h2><h3 id="3-1-GPIO-HAL"><a href="#3-1-GPIO-HAL" class="headerlink" title="3.1 GPIO HAL"></a>3.1 GPIO HAL</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> pin;</span><br><span class="line">    <span class="type">gpio_flags_t</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="keyword">struct</span> gpio_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置 GPIO */</span></span><br><span class="line">    <span class="keyword">return</span> gpio_pin_configure(dev, config-&gt;pin, config-&gt;flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 中断配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_int_config</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="keyword">struct</span> gpio_config *config,</span></span><br><span class="line"><span class="params">                         <span class="type">gpio_callback_handler_t</span> handler)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">callback</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置中断 */</span></span><br><span class="line">    gpio_init_callback(&amp;callback, handler, BIT(config-&gt;pin));</span><br><span class="line">    gpio_add_callback(dev, &amp;callback);</span><br><span class="line">    <span class="keyword">return</span> gpio_pin_interrupt_configure(dev, config-&gt;pin,</span><br><span class="line">                                     GPIO_INT_EDGE_BOTH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-UART-HAL"><a href="#3-2-UART-HAL" class="headerlink" title="3.2 UART HAL"></a>3.2 UART HAL</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* UART 配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uart_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> baud_rate;</span><br><span class="line">    <span class="type">uint8_t</span> data_bits;</span><br><span class="line">    <span class="type">uint8_t</span> stop_bits;</span><br><span class="line">    <span class="type">uint8_t</span> parity;</span><br><span class="line">    <span class="type">uint8_t</span> flow_ctrl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* UART 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">uart_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="keyword">struct</span> uart_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uart_config</span> <span class="title">cfg</span>;</span></span><br><span class="line"></span><br><span class="line">    cfg.baudrate = config-&gt;baud_rate;</span><br><span class="line">    cfg.parity = config-&gt;parity;</span><br><span class="line">    cfg.stop_bits = config-&gt;stop_bits;</span><br><span class="line">    cfg.data_bits = config-&gt;data_bits;</span><br><span class="line">    cfg.flow_ctrl = config-&gt;flow_ctrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uart_configure(dev, &amp;cfg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* UART 接收回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">uart_rx_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uart_fifo_read(dev, &amp;c, <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 处理接收到的数据 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-SPI-HAL"><a href="#3-3-SPI-HAL" class="headerlink" title="3.3 SPI HAL"></a>3.3 SPI HAL</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI 配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> frequency;</span><br><span class="line">    <span class="type">uint8_t</span> operation;</span><br><span class="line">    <span class="type">uint8_t</span> slave;</span><br><span class="line">    <span class="type">uint16_t</span> cs_delay;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">spi_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                   <span class="type">const</span> <span class="keyword">struct</span> spi_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    cfg.frequency = config-&gt;frequency;</span><br><span class="line">    cfg.operation = config-&gt;operation;</span><br><span class="line">    cfg.slave = config-&gt;slave;</span><br><span class="line">    cfg.cs_delay = config-&gt;cs_delay;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> spi_configure(dev, &amp;cfg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI 传输 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">spi_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                       <span class="type">const</span> <span class="type">uint8_t</span> *tx_data,</span></span><br><span class="line"><span class="params">                       <span class="type">uint8_t</span> *rx_data,</span></span><br><span class="line"><span class="params">                       <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">tx_buf</span> =</span> &#123;</span><br><span class="line">        .buf = (<span class="type">void</span> *)tx_data,</span><br><span class="line">        .len = len</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">rx_buf</span> =</span> &#123;</span><br><span class="line">        .buf = rx_data,</span><br><span class="line">        .len = len</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">tx</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;tx_buf,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">rx</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;rx_buf,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> spi_transceive(dev, &amp;tx, &amp;rx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-时钟管理"><a href="#4-时钟管理" class="headerlink" title="4. 时钟管理"></a>4. 时钟管理</h2><h3 id="4-1-系统时钟配置"><a href="#4-1-系统时钟配置" class="headerlink" title="4.1 系统时钟配置"></a>4.1 系统时钟配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/clock_control.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 时钟配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clock_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> source;</span><br><span class="line">    <span class="type">uint32_t</span> frequency;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置系统时钟 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">clock_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> <span class="keyword">struct</span> clock_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = CLOCK_CONTROL_SUBSYS_ALL,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clock_control_on(dev, &amp;subsys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取时钟频率 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">clock_get_rate</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> rate;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = CLOCK_CONTROL_SUBSYS_ALL,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    clock_control_get_rate(dev, &amp;subsys, &amp;rate);</span><br><span class="line">    <span class="keyword">return</span> rate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-外设时钟控制"><a href="#4-2-外设时钟控制" class="headerlink" title="4.2 外设时钟控制"></a>4.2 外设时钟控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/clock_control.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能外设时钟 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">periph_clock_enable</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="type">uint32_t</span> periph)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = periph,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clock_control_on(dev, &amp;subsys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用外设时钟 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">periph_clock_disable</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                              <span class="type">uint32_t</span> periph)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = periph,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clock_control_off(dev, &amp;subsys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-电源管理"><a href="#5-电源管理" class="headerlink" title="5. 电源管理"></a>5. 电源管理</h2><h3 id="5-1-电源状态控制"><a href="#5-1-电源状态控制" class="headerlink" title="5.1 电源状态控制"></a>5.1 电源状态控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电源管理配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pm_config</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">pm_state</span> <span class="title">state</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> substate_id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入低功耗模式 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">pm_enter_state</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> pm_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pm_state_info</span> <span class="title">info</span> =</span> &#123;</span><br><span class="line">        .state = config-&gt;state,</span><br><span class="line">        .substate_id = config-&gt;substate_id,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pm_state_force(<span class="number">0u</span>, &amp;info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电源状态变化回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pm_state_entry</span><span class="params">(<span class="keyword">enum</span> pm_state state)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 处理电源状态变化 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册电源管理回调 */</span></span><br><span class="line">PM_STATE_INFO_DT_DEFINE(DT_NODELABEL(cpu0), <span class="literal">NULL</span>, pm_state_entry);</span><br></pre></td></tr></table></figure><h3 id="5-2-设备电源管理"><a href="#5-2-设备电源管理" class="headerlink" title="5.2 设备电源管理"></a>5.2 设备电源管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备电源管理回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">device_pm_control</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                           <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">/* 恢复设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">/* 挂起设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_ON:</span><br><span class="line">        <span class="comment">/* 开启设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_OFF:</span><br><span class="line">        <span class="comment">/* 关闭设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册设备电源管理 */</span></span><br><span class="line">PM_DEVICE_DT_DEFINE(DT_NODELABEL(my_device), device_pm_control);</span><br></pre></td></tr></table></figure><h2 id="6-DMA-控制器"><a href="#6-DMA-控制器" class="headerlink" title="6. DMA 控制器"></a>6. DMA 控制器</h2><h3 id="6-1-DMA-配置"><a href="#6-1-DMA-配置" class="headerlink" title="6.1 DMA 配置"></a>6.1 DMA 配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> channel;</span><br><span class="line">    <span class="type">uint32_t</span> source;</span><br><span class="line">    <span class="type">uint32_t</span> dest;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dma_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dma_dev,</span></span><br><span class="line"><span class="params">                        <span class="type">void</span> *user_data,</span></span><br><span class="line"><span class="params">                        <span class="type">uint32_t</span> channel,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 处理 DMA 传输完成 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置 DMA 传输 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dma_transfer_config</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="keyword">struct</span> dma_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">cfg</span> =</span> &#123;</span><br><span class="line">        .channel_direction = MEMORY_TO_MEMORY,</span><br><span class="line">        .source_data_size = <span class="number">4</span>,</span><br><span class="line">        .dest_data_size = <span class="number">4</span>,</span><br><span class="line">        .source_burst_length = <span class="number">4</span>,</span><br><span class="line">        .dest_burst_length = <span class="number">4</span>,</span><br><span class="line">        .dma_callback = dma_callback,</span><br><span class="line">        .block_count = <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">block_cfg</span> =</span> &#123;</span><br><span class="line">        .source_address = config-&gt;source,</span><br><span class="line">        .dest_address = config-&gt;dest,</span><br><span class="line">        .block_size = config-&gt;size,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    cfg.head_block = &amp;block_cfg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dma_config(dev, config-&gt;channel, &amp;cfg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-DMA-传输控制"><a href="#6-2-DMA-传输控制" class="headerlink" title="6.2 DMA 传输控制"></a>6.2 DMA 传输控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dma_start_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                            <span class="type">uint32_t</span> channel)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> dma_start(dev, channel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 停止 DMA 传输 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dma_stop_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                           <span class="type">uint32_t</span> channel)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> dma_stop(dev, channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-最佳实践"><a href="#7-最佳实践" class="headerlink" title="7. 最佳实践"></a>7. 最佳实践</h2><ol><li><p>硬件初始化：</p><ul><li>按正确的顺序初始化硬件</li><li>验证初始化结果</li><li>实现错误恢复机制</li></ul></li><li><p>中断处理：</p><ul><li>最小化中断处理时间</li><li>使用适当的中断优先级</li><li>避免在中断上下文中执行长时间操作</li></ul></li><li><p>电源管理：</p><ul><li>实现完整的电源状态转换</li><li>正确处理唤醒源</li><li>优化低功耗模式</li></ul></li><li><p>DMA 使用：</p><ul><li>对大数据传输使用 DMA</li><li>正确配置 DMA 通道</li><li>实现适当的错误处理</li></ul></li><li><p>时钟管理：</p><ul><li>优化时钟配置</li><li>必要时才使能外设时钟</li><li>监控时钟状态</li></ul></li><li><p>调试支持：</p><ul><li>添加调试接口</li><li>实现状态监控</li><li>提供错误诊断</li></ul></li><li><p>可移植性：</p><ul><li>使用硬件抽象接口</li><li>避免直接访问硬件寄存器</li><li>使用配置参数而不是硬编码值</li></ul></li></ol><p>通过遵循这些最佳实践，您可以开发出可靠、高效的硬件抽象层实现。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kernel</title>
      <link href="/2025/03/21/nodic/zephyr/core/kernel/"/>
      <url>/2025/03/21/nodic/zephyr/core/kernel/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-内核模块"><a href="#Zephyr-内核模块" class="headerlink" title="Zephyr 内核模块"></a>Zephyr 内核模块</h1><p>Zephyr 内核模块提供了实时操作系统的核心功能，包括线程管理、内存管理、同步原语和定时器等。本文档将详细介绍这些功能的使用方法。</p><h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><h3 id="线程创建与控制"><a href="#线程创建与控制" class="headerlink" title="线程创建与控制"></a>线程创建与控制</h3><ol><li><strong>创建线程</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_PRIORITY 7</span></span><br><span class="line"></span><br><span class="line">K_THREAD_STACK_DEFINE(thread_stack, STACK_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 线程工作</span></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建线程</span></span><br><span class="line">k_thread_create(&amp;thread_data, thread_stack,</span><br><span class="line">                K_THREAD_STACK_SIZEOF(thread_stack),</span><br><span class="line">                thread_entry, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                THREAD_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>线程控制</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挂起线程</span></span><br><span class="line">k_thread_suspend(&amp;thread_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复线程</span></span><br><span class="line">k_thread_resume(&amp;thread_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终止线程</span></span><br><span class="line">k_thread_abort(&amp;thread_data);</span><br></pre></td></tr></table></figure><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><ol><li><strong>优先级调度</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置线程优先级</span></span><br><span class="line">k_thread_priority_set(&amp;thread_data, new_priority);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让出处理器</span></span><br><span class="line">k_yield();</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>时间片轮转</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置时间片（在 prj.conf 中）</span></span><br><span class="line">CONFIG_TIMESLICING=y</span><br><span class="line">CONFIG_TIMESLICE_SIZE=<span class="number">10</span></span><br><span class="line">CONFIG_TIMESLICE_PRIORITY=<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="静态内存分配"><a href="#静态内存分配" class="headerlink" title="静态内存分配"></a>静态内存分配</h3><ol><li><strong>栈内存分配</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K_THREAD_STACK_DEFINE(my_stack, STACK_SIZE);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>静态内存对象</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K_MEM_SLAB_DEFINE(my_slab, <span class="number">32</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><ol><li><strong>内存池</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> POOL_BLOCK_SIZE 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> POOL_BLOCK_COUNT 10</span></span><br><span class="line">K_MEM_POOL_DEFINE(my_pool, POOL_BLOCK_SIZE, POOL_BLOCK_SIZE,</span><br><span class="line">                  POOL_BLOCK_COUNT, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *memory = k_mem_pool_alloc(&amp;my_pool, POOL_BLOCK_SIZE,</span><br><span class="line">                               K_NO_WAIT);</span><br><span class="line"><span class="keyword">if</span> (memory != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用内存</span></span><br><span class="line">    k_mem_pool_free(&amp;memory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>堆内存</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 prj.conf 中启用堆内存</span></span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=<span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用堆内存</span></span><br><span class="line"><span class="type">void</span> *ptr = k_malloc(size);</span><br><span class="line"><span class="keyword">if</span> (ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用内存</span></span><br><span class="line">    k_free(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步原语"><a href="#同步原语" class="headerlink" title="同步原语"></a>同步原语</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><ol><li><strong>定义和初始化</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">K_SEM_DEFINE(my_sem, <span class="number">0</span>, <span class="number">1</span>);  <span class="comment">// 初始值0，最大值1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或动态初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">my_sem</span>;</span></span><br><span class="line">k_sem_init(&amp;my_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用信号量</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待信号量</span></span><br><span class="line">k_sem_take(&amp;my_sem, K_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放信号量</span></span><br><span class="line">k_sem_give(&amp;my_sem);</span><br></pre></td></tr></table></figure><h3 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h3><ol><li><strong>定义和初始化</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">K_MUTEX_DEFINE(my_mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或动态初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">my_mutex</span>;</span></span><br><span class="line">k_mutex_init(&amp;my_mutex);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用互斥量</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取互斥量</span></span><br><span class="line">k_mutex_lock(&amp;my_mutex, K_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放互斥量</span></span><br><span class="line">k_mutex_unlock(&amp;my_mutex);</span><br></pre></td></tr></table></figure><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><ol><li><strong>定义和初始化</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">K_CONDVAR_DEFINE(my_condvar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或动态初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_condvar</span> <span class="title">my_condvar</span>;</span></span><br><span class="line">k_condvar_init(&amp;my_condvar);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用条件变量</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待条件</span></span><br><span class="line">k_condvar_wait(&amp;my_condvar, &amp;my_mutex, K_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 唤醒等待线程</span></span><br><span class="line">k_condvar_signal(&amp;my_condvar);</span><br></pre></td></tr></table></figure><h2 id="定时器与时间管理"><a href="#定时器与时间管理" class="headerlink" title="定时器与时间管理"></a>定时器与时间管理</h2><h3 id="内核定时器"><a href="#内核定时器" class="headerlink" title="内核定时器"></a>内核定时器</h3><ol><li><strong>定义定时器</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">timer_handler</span><span class="params">(<span class="keyword">struct</span> k_timer *timer)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定时器处理函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">K_TIMER_DEFINE(my_timer, timer_handler, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用定时器</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动定时器</span></span><br><span class="line">k_timer_start(&amp;my_timer, K_MSEC(<span class="number">100</span>), K_MSEC(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line">k_timer_stop(&amp;my_timer);</span><br></pre></td></tr></table></figure><h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><ol><li><strong>延时函数</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延时指定时间</span></span><br><span class="line">k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line">k_usleep(<span class="number">1000</span>);  <span class="comment">// 微秒级延时</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>获取系统时间</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取系统启动后的时间（毫秒）</span></span><br><span class="line"><span class="type">int64_t</span> uptime = k_uptime_get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取系统滴答计数</span></span><br><span class="line"><span class="type">uint32_t</span> cycles = k_cycle_get_32();</span><br></pre></td></tr></table></figure><h2 id="中断管理"><a href="#中断管理" class="headerlink" title="中断管理"></a>中断管理</h2><h3 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h3><ol><li><strong>定义中断处理函数</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">irq_handler</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 中断处理代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置中断</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IRQ_CONNECT(IRQ_NUM, IRQ_PRIO, irq_handler, <span class="literal">NULL</span>, IRQ_FLAGS);</span><br><span class="line">irq_enable(IRQ_NUM);</span><br></pre></td></tr></table></figure><h3 id="中断控制"><a href="#中断控制" class="headerlink" title="中断控制"></a>中断控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁用中断</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key = irq_lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临界区代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复中断</span></span><br><span class="line">irq_unlock(key);</span><br></pre></td></tr></table></figure><h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h2><h3 id="定义工作项"><a href="#定义工作项" class="headerlink" title="定义工作项"></a>定义工作项</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">work_handler</span><span class="params">(<span class="keyword">struct</span> k_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 工作处理函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">K_WORK_DEFINE(my_work, work_handler);</span><br></pre></td></tr></table></figure><h3 id="使用工作队列"><a href="#使用工作队列" class="headerlink" title="使用工作队列"></a>使用工作队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交工作项</span></span><br><span class="line">k_work_submit(&amp;my_work);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟工作项</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_work_delayable</span> <span class="title">delayed_work</span>;</span></span><br><span class="line">k_work_init_delayable(&amp;delayed_work, work_handler);</span><br><span class="line">k_work_schedule(&amp;delayed_work, K_MSEC(<span class="number">1000</span>));</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>线程优先级</strong>：</p><ul><li>合理分配线程优先级</li><li>避免优先级反转</li><li>使用优先级继承的互斥量</li></ul></li><li><p><strong>内存管理</strong>：</p><ul><li>优先使用静态分配</li><li>避免频繁的动态分配</li><li>注意内存对齐要求</li></ul></li><li><p><strong>同步机制</strong>：</p><ul><li>选择合适的同步原语</li><li>避免死锁</li><li>最小化临界区</li></ul></li><li><p><strong>定时器使用</strong>：</p><ul><li>避免过于频繁的定时器中断</li><li>合理设置定时器周期</li><li>注意定时器回调函数的执行时间</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>栈溢出</strong>：</p><ul><li>增加栈大小</li><li>检查递归深度</li><li>使用栈检测功能</li></ul></li><li><p><strong>优先级反转</strong>：</p><ul><li>使用优先级继承</li><li>最小化关键区</li><li>避免长时间持有互斥量</li></ul></li><li><p><strong>死锁</strong>：</p><ul><li>按固定顺序获取互斥量</li><li>使用超时机制</li><li>避免循环等待</li></ul></li><li><p><strong>实时性问题</strong>：</p><ul><li>减少中断禁用时间</li><li>优化关键路径</li><li>使用适当的同步机制</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 内核模块提供了丰富的功能，支持开发各种实时应用。通过合理使用这些功能，可以开发出高效、可靠的嵌入式系统。深入理解这些核心概念对于开发高质量的 Zephyr 应用至关重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>networking</title>
      <link href="/2025/03/21/nodic/zephyr/core/networking/"/>
      <url>/2025/03/21/nodic/zephyr/core/networking/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-网络协议栈"><a href="#Zephyr-网络协议栈" class="headerlink" title="Zephyr 网络协议栈"></a>Zephyr 网络协议栈</h1><p>Zephyr RTOS 提供了功能丰富的网络协议栈，支持多种网络技术和协议。本文档将详细介绍 Zephyr 网络子系统的架构和使用方法。</p><h2 id="网络协议栈概述"><a href="#网络协议栈概述" class="headerlink" title="网络协议栈概述"></a>网络协议栈概述</h2><h3 id="支持的网络技术"><a href="#支持的网络技术" class="headerlink" title="支持的网络技术"></a>支持的网络技术</h3><p>Zephyr 网络协议栈支持多种网络技术：</p><ol><li><p><strong>有线网络</strong></p><ul><li>以太网</li><li>CAN 总线</li><li>USB 网络</li></ul></li><li><p><strong>无线网络</strong></p><ul><li>Wi-Fi</li><li>蓝牙</li><li>蓝牙低功耗 (BLE)</li><li>IEEE 802.15.4</li><li>LoRaWAN</li><li>NB-IoT&#x2F;LTE-M</li></ul></li></ol><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><p>Zephyr 支持多种网络协议：</p><ol><li><p><strong>IPv4&#x2F;IPv6</strong></p><ul><li>双栈支持</li><li>地址自动配置</li><li>邻居发现</li></ul></li><li><p><strong>传输层协议</strong></p><ul><li>TCP</li><li>UDP</li><li>DTLS</li></ul></li><li><p><strong>应用层协议</strong></p><ul><li>HTTP</li><li>CoAP</li><li>MQTT</li><li>LwM2M</li><li>SNTP</li></ul></li></ol><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>在 <code>prj.conf</code> 中启用网络功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 启用网络功能</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line"></span><br><span class="line"># IPv4 支持</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_IPV4_AUTO=y</span><br><span class="line"></span><br><span class="line"># IPv6 支持</span><br><span class="line">CONFIG_NET_IPV6=y</span><br><span class="line">CONFIG_NET_IPV6_AUTO_PREFIX=y</span><br><span class="line"></span><br><span class="line"># 协议支持</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line">CONFIG_NET_UDP=y</span><br><span class="line"></span><br><span class="line"># 网络缓冲区配置</span><br><span class="line">CONFIG_NET_BUF_RX_COUNT=16</span><br><span class="line">CONFIG_NET_BUF_TX_COUNT=16</span><br><span class="line">CONFIG_NET_PKT_RX_COUNT=16</span><br><span class="line">CONFIG_NET_PKT_TX_COUNT=16</span><br></pre></td></tr></table></figure><h3 id="网络接口配置"><a href="#网络接口配置" class="headerlink" title="网络接口配置"></a>网络接口配置</h3><p>通过设备树配置网络接口：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;eth0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">local-mac-address</span> <span class="operator">=</span> [<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">02</span> <span class="number">03</span>]<span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="TCP-IP-协议栈"><a href="#TCP-IP-协议栈" class="headerlink" title="TCP&#x2F;IP 协议栈"></a>TCP&#x2F;IP 协议栈</h2><h3 id="套接字-API"><a href="#套接字-API" class="headerlink" title="套接字 API"></a>套接字 API</h3><p>Zephyr 提供了兼容 BSD 套接字的 API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建套接字</span></span><br><span class="line"><span class="type">int</span> sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到服务器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = htons(<span class="number">80</span>);</span><br><span class="line">inet_pton(AF_INET, <span class="string">&quot;192.168.1.1&quot;</span>, &amp;addr.sin_addr);</span><br><span class="line">connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">send(sock, data, len, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line">recv(sock, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭套接字</span></span><br><span class="line">close(sock);</span><br></pre></td></tr></table></figure><h3 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP 客户端"></a>TCP 客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tcp_client</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建套接字</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器地址</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">80</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;192.168.1.1&quot;</span>, &amp;addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务器</span></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to connect\n&quot;</span>);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 HTTP 请求</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *request = <span class="string">&quot;GET / HTTP/1.1\r\nHost: 192.168.1.1\r\n\r\n&quot;</span>;</span><br><span class="line">    send(sock, request, <span class="built_in">strlen</span>(request), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收响应</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len = recv(sock, buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buffer[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TCP-服务器"><a href="#TCP-服务器" class="headerlink" title="TCP 服务器"></a>TCP 服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tcp_server</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> server_sock, client_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建服务器套接字</span></span><br><span class="line">    server_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (server_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create server socket\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定地址</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(<span class="number">8080</span>);</span><br><span class="line">    <span class="keyword">if</span> (bind(server_sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">             <span class="keyword">sizeof</span>(server_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind server socket\n&quot;</span>);</span><br><span class="line">        close(server_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听连接</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_sock, <span class="number">5</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to listen\n&quot;</span>);</span><br><span class="line">        close(server_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;TCP server listening on port 8080\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受连接</span></span><br><span class="line">    client_sock = accept(server_sock, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">                         &amp;client_addr_len);</span><br><span class="line">    <span class="keyword">if</span> (client_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to accept connection\n&quot;</span>);</span><br><span class="line">        close(server_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理客户端请求</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len = recv(client_sock, buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buffer[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送响应</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *response = <span class="string">&quot;HTTP/1.1 200 OK\r\n\r\nHello from Zephyr!\r\n&quot;</span>;</span><br><span class="line">        send(client_sock, response, <span class="built_in">strlen</span>(response), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    close(client_sock);</span><br><span class="line">    close(server_sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP-通信"><a href="#UDP-通信" class="headerlink" title="UDP 通信"></a>UDP 通信</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">udp_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">local_addr</span>, <span class="title">remote_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> remote_addr_len = <span class="keyword">sizeof</span>(remote_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 UDP 套接字</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create UDP socket\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定本地地址</span></span><br><span class="line">    local_addr.sin_family = AF_INET;</span><br><span class="line">    local_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    local_addr.sin_port = htons(<span class="number">5683</span>);</span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;local_addr, <span class="keyword">sizeof</span>(local_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind UDP socket\n&quot;</span>);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len = recvfrom(sock, buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">                       (<span class="keyword">struct</span> sockaddr *)&amp;remote_addr, &amp;remote_addr_len);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buffer[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送响应</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *response = <span class="string">&quot;ACK&quot;</span>;</span><br><span class="line">        sendto(sock, response, <span class="built_in">strlen</span>(response), <span class="number">0</span>,</span><br><span class="line">               (<span class="keyword">struct</span> sockaddr *)&amp;remote_addr, remote_addr_len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭套接字</span></span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="蓝牙支持"><a href="#蓝牙支持" class="headerlink" title="蓝牙支持"></a>蓝牙支持</h2><h3 id="蓝牙配置"><a href="#蓝牙配置" class="headerlink" title="蓝牙配置"></a>蓝牙配置</h3><p>在 <code>prj.conf</code> 中启用蓝牙功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 蓝牙核心功能</span><br><span class="line">CONFIG_BT=y</span><br><span class="line"></span><br><span class="line"># 蓝牙角色</span><br><span class="line">CONFIG_BT_PERIPHERAL=y  # 外设角色</span><br><span class="line">CONFIG_BT_CENTRAL=y     # 中心角色</span><br><span class="line"></span><br><span class="line"># 蓝牙 LE 功能</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr BLE Device&quot;</span><br><span class="line">CONFIG_BT_DEVICE_APPEARANCE=0</span><br><span class="line">CONFIG_BT_MAX_CONN=5</span><br></pre></td></tr></table></figure><h3 id="蓝牙-LE-外设"><a href="#蓝牙-LE-外设" class="headerlink" title="蓝牙 LE 外设"></a>蓝牙 LE 外设</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/conn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 广播数据</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_UUID16_ALL, <span class="number">0x0a</span>, <span class="number">0x18</span>),  <span class="comment">// 设备信息服务</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connection failed (err %u)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断开连接回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disconnected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Disconnected (reason %u)\n&quot;</span>, reason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接回调结构体</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_conn_cb</span> <span class="title">conn_callbacks</span> =</span> &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">    .disconnected = disconnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化蓝牙</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ble_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化蓝牙</span></span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册连接回调</span></span><br><span class="line">    bt_conn_cb_register(&amp;conn_callbacks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始广播</span></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Advertising started\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GATT-服务"><a href="#GATT-服务" class="headerlink" title="GATT 服务"></a>GATT 服务</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义服务 UUID</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_SERVICE_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_SERVICE BT_UUID_DECLARE_128(BT_UUID_CUSTOM_SERVICE_VAL)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特征 UUID</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_CHRC_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_CHRC BT_UUID_DECLARE_128(BT_UUID_CUSTOM_CHRC_VAL)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特征值</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> custom_value[] = &#123;<span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">read_custom</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                          <span class="type">void</span> *buf, <span class="type">uint16_t</span> len, <span class="type">uint16_t</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> *value = attr-&gt;user_data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bt_gatt_attr_read(conn, attr, buf, len, offset, value,</span><br><span class="line">                            <span class="keyword">sizeof</span>(custom_value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">write_custom</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">uint16_t</span> len, <span class="type">uint16_t</span> offset,</span></span><br><span class="line"><span class="params">                           <span class="type">uint8_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *value = attr-&gt;user_data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (offset + len &gt; <span class="keyword">sizeof</span>(custom_value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(value + offset, buf, len);</span><br><span class="line">    printk(<span class="string">&quot;Value updated: %u\n&quot;</span>, *value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 GATT 服务</span></span><br><span class="line">BT_GATT_SERVICE_DEFINE(custom_svc,</span><br><span class="line">    BT_GATT_PRIMARY_SERVICE(BT_UUID_CUSTOM_SERVICE),</span><br><span class="line">    BT_GATT_CHARACTERISTIC(BT_UUID_CUSTOM_CHRC,</span><br><span class="line">                         BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE,</span><br><span class="line">                         BT_GATT_PERM_READ | BT_GATT_PERM_WRITE,</span><br><span class="line">                         read_custom, write_custom, custom_value),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="IEEE-802-15-4"><a href="#IEEE-802-15-4" class="headerlink" title="IEEE 802.15.4"></a>IEEE 802.15.4</h2><h3 id="配置-802-15-4"><a href="#配置-802-15-4" class="headerlink" title="配置 802.15.4"></a>配置 802.15.4</h3><p>在 <code>prj.conf</code> 中启用 IEEE 802.15.4 功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 启用 IEEE 802.15.4</span><br><span class="line">CONFIG_NET_L2_IEEE802154=y</span><br><span class="line">CONFIG_NET_L2_IEEE802154_SHELL=y</span><br><span class="line"></span><br><span class="line"># 配置 IEEE 802.15.4 参数</span><br><span class="line">CONFIG_IEEE802154_CHANNEL=26</span><br><span class="line">CONFIG_IEEE802154_PAN_ID=0xabcd</span><br></pre></td></tr></table></figure><h3 id="使用-802-15-4"><a href="#使用-802-15-4" class="headerlink" title="使用 802.15.4"></a>使用 802.15.4</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/ieee802154_mgmt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 IEEE 802.15.4 接口</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">configure_ieee802154</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ieee802154_req_params</span> <span class="title">params</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 IEEE 802.15.4 接口</span></span><br><span class="line">    iface = net_if_get_first_by_type(&amp;NET_L2_GET_NAME(IEEE802154));</span><br><span class="line">    <span class="keyword">if</span> (!iface) &#123;</span><br><span class="line">        printk(<span class="string">&quot;No IEEE 802.15.4 interface found\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 PAN ID</span></span><br><span class="line">    params.pan_id = <span class="number">0xabcd</span>;</span><br><span class="line">    net_mgmt(NET_REQUEST_IEEE802154_SET_PAN_ID, iface, &amp;params, <span class="keyword">sizeof</span>(params));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置信道</span></span><br><span class="line">    params.channel = <span class="number">26</span>;</span><br><span class="line">    net_mgmt(NET_REQUEST_IEEE802154_SET_CHANNEL, iface, &amp;params, <span class="keyword">sizeof</span>(params));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动接口</span></span><br><span class="line">    net_if_up(iface);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LoRaWAN"><a href="#LoRaWAN" class="headerlink" title="LoRaWAN"></a>LoRaWAN</h2><h3 id="配置-LoRaWAN"><a href="#配置-LoRaWAN" class="headerlink" title="配置 LoRaWAN"></a>配置 LoRaWAN</h3><p>在 <code>prj.conf</code> 中启用 LoRaWAN 功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 启用 LoRaWAN</span><br><span class="line">CONFIG_LORA=y</span><br><span class="line">CONFIG_LORAWAN=y</span><br><span class="line"></span><br><span class="line"># LoRaWAN 配置</span><br><span class="line">CONFIG_LORAWAN_REGION_EU868=y</span><br></pre></td></tr></table></figure><h3 id="使用-LoRaWAN"><a href="#使用-LoRaWAN" class="headerlink" title="使用 LoRaWAN"></a>使用 LoRaWAN</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/lorawan/lorawan.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LoRaWAN 参数</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> dev_eui[] = &#123;<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> app_eui[] = &#123;<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> app_key[] = &#123;<span class="number">0x2B</span>, <span class="number">0x7E</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x28</span>, <span class="number">0xAE</span>, <span class="number">0xD2</span>, <span class="number">0xA6</span>,</span><br><span class="line">                           <span class="number">0xAB</span>, <span class="number">0xF7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, <span class="number">0x09</span>, <span class="number">0xCF</span>, <span class="number">0x4F</span>, <span class="number">0x3C</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoRaWAN 回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dl_callback</span><span class="params">(<span class="type">uint8_t</span> port, <span class="type">bool</span> data_pending,</span></span><br><span class="line"><span class="params">                       <span class="type">uint8_t</span> *data, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;LoRaWAN downlink: port %d, pending %d, len %d\n&quot;</span>,</span><br><span class="line">           port, data_pending, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 LoRaWAN</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lorawan_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lorawan_join_config</span> <span class="title">join_cfg</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置入网参数</span></span><br><span class="line">    join_cfg.mode = LORAWAN_ACT_OTAA;</span><br><span class="line">    join_cfg.dev_eui = dev_eui;</span><br><span class="line">    join_cfg.otaa.join_eui = app_eui;</span><br><span class="line">    join_cfg.otaa.app_key = app_key;</span><br><span class="line">    join_cfg.otaa.nwk_key = app_key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 LoRaWAN</span></span><br><span class="line">    ret = lorawan_start();</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;LoRaWAN start failed: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册回调</span></span><br><span class="line">    lorawan_register_downlink_callback(dl_callback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入网</span></span><br><span class="line">    ret = lorawan_join(&amp;join_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;LoRaWAN join failed: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;LoRaWAN join requested\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 LoRaWAN 数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lorawan_send</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = lorawan_send(<span class="number">2</span>, data, <span class="keyword">sizeof</span>(data), LORAWAN_MSG_CONFIRMED);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;LoRaWAN send failed: %d\n&quot;</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><h3 id="网络接口管理"><a href="#网络接口管理" class="headerlink" title="网络接口管理"></a>网络接口管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_mgmt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取网络接口</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span> =</span> net_if_get_default();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用接口</span></span><br><span class="line">net_if_up(iface);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用接口</span></span><br><span class="line">net_if_down(iface);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 IPv4 地址</span></span><br><span class="line"><span class="type">char</span> addr_str[NET_IPV4_ADDR_LEN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_if_addr</span> *<span class="title">if_addr</span> =</span> net_if_ipv4_addr_add(iface, &amp;addr, NET_ADDR_MANUAL, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (if_addr) &#123;</span><br><span class="line">    net_addr_ntop(AF_INET, &amp;addr, addr_str, <span class="keyword">sizeof</span>(addr_str));</span><br><span class="line">    printk(<span class="string">&quot;IPv4 address: %s\n&quot;</span>, addr_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网络事件监听"><a href="#网络事件监听" class="headerlink" title="网络事件监听"></a>网络事件监听</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_mgmt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_event.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事件处理函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">net_event_handler</span><span class="params">(<span class="keyword">struct</span> net_mgmt_event_callback *cb,</span></span><br><span class="line"><span class="params">                             <span class="type">uint32_t</span> mgmt_event, <span class="keyword">struct</span> net_if *iface)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mgmt_event == NET_EVENT_IPV4_ADDR_ADD) &#123;</span><br><span class="line">        printk(<span class="string">&quot;IPv4 address added\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mgmt_event == NET_EVENT_IPV4_ADDR_DEL) &#123;</span><br><span class="line">        printk(<span class="string">&quot;IPv4 address removed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册事件回调</span></span><br><span class="line">NET_MGMT_REGISTER_EVENT_HANDLER(net_event_cb, net_event_handler,</span><br><span class="line">                              NET_EVENT_IPV4_ADDR_ADD | NET_EVENT_IPV4_ADDR_DEL);</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>网络配置</strong></p><ul><li>合理配置网络缓冲区大小</li><li>根据应用需求选择合适的协议</li><li>优化网络参数以降低功耗</li></ul></li><li><p><strong>安全性</strong></p><ul><li>使用 TLS&#x2F;DTLS 保护通信</li><li>实施适当的认证机制</li><li>定期更新安全凭证</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>处理网络连接错误</li><li>实现重连机制</li><li>监控网络状态变化</li></ul></li><li><p><strong>资源优化</strong></p><ul><li>减少网络流量</li><li>使用异步通信</li><li>批量处理数据传输</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>连接问题</strong></p><ul><li>检查网络配置</li><li>验证网络接口状态</li><li>确认 IP 地址配置</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>增加网络缓冲区大小</li><li>优化数据传输批量处理</li><li>减少不必要的网络请求</li></ul></li><li><p><strong>功耗问题</strong></p><ul><li>使用低功耗网络模式</li><li>减少网络唤醒频率</li><li>优化数据传输批量处理</li></ul></li><li><p><strong>协议兼容性</strong></p><ul><li>确保协议版本兼容</li><li>验证协议实现是否完整</li><li>测试与不同设备的互操作性</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 网络协议栈提供了丰富的网络功能，支持多种网络技术和协议。通过合理配置和使用这些功能，可以开发出高效、可靠的联网应用。深入理解这些网络接口对于开发高质量的 Zephyr 网络应用至关重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>power</title>
      <link href="/2025/03/21/nodic/zephyr/core/power/"/>
      <url>/2025/03/21/nodic/zephyr/core/power/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-电源管理"><a href="#Zephyr-电源管理" class="headerlink" title="Zephyr 电源管理"></a>Zephyr 电源管理</h1><p>Zephyr RTOS 提供了全面的电源管理功能，用于优化系统功耗和延长电池寿命。本文档将详细介绍 Zephyr 电源管理系统的架构和使用方法。</p><h2 id="电源管理概述"><a href="#电源管理概述" class="headerlink" title="电源管理概述"></a>电源管理概述</h2><p>Zephyr 的电源管理系统包括以下主要组件：</p><ol><li><strong>系统电源管理</strong>：控制整个系统的电源状态</li><li><strong>设备电源管理</strong>：管理单个设备的电源状态</li><li><strong>CPU 电源管理</strong>：控制 CPU 的低功耗模式</li><li><strong>时钟管理</strong>：管理系统和外设时钟</li><li><strong>唤醒源管理</strong>：配置可以唤醒系统的事件源</li></ol><h2 id="电源管理配置"><a href="#电源管理配置" class="headerlink" title="电源管理配置"></a>电源管理配置</h2><h3 id="启用电源管理"><a href="#启用电源管理" class="headerlink" title="启用电源管理"></a>启用电源管理</h3><p>在 <code>prj.conf</code> 中启用电源管理功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 启用电源管理</span><br><span class="line">CONFIG_PM=y</span><br><span class="line"></span><br><span class="line"># 启用设备电源管理</span><br><span class="line">CONFIG_PM_DEVICE=y</span><br><span class="line"></span><br><span class="line"># 启用设备运行时电源管理</span><br><span class="line">CONFIG_PM_DEVICE_RUNTIME=y</span><br><span class="line"></span><br><span class="line"># 启用电源状态调试</span><br><span class="line">CONFIG_PM_DEBUG=y</span><br></pre></td></tr></table></figure><h2 id="系统电源管理"><a href="#系统电源管理" class="headerlink" title="系统电源管理"></a>系统电源管理</h2><h3 id="电源状态"><a href="#电源状态" class="headerlink" title="电源状态"></a>电源状态</h3><p>Zephyr 定义了以下系统电源状态：</p><ol><li><strong>ACTIVE</strong>：系统完全运行</li><li><strong>RUNTIME_IDLE</strong>：低功耗空闲状态</li><li><strong>SUSPEND_TO_RAM</strong>：挂起到内存</li><li><strong>SUSPEND_TO_DISK</strong>：挂起到磁盘</li><li><strong>SOFT_OFF</strong>：软关机</li></ol><h3 id="电源状态约束"><a href="#电源状态约束" class="headerlink" title="电源状态约束"></a>电源状态约束</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置电源状态约束</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_power_constraint</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 防止系统进入 SUSPEND_TO_RAM 状态</span></span><br><span class="line">    pm_constraint_set(PM_STATE_SUSPEND_TO_RAM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放电源状态约束</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">release_power_constraint</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    pm_constraint_release(PM_STATE_SUSPEND_TO_RAM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="电源状态钩子"><a href="#电源状态钩子" class="headerlink" title="电源状态钩子"></a>电源状态钩子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义电源状态钩子</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_pm_hook</span><span class="params">(<span class="keyword">enum</span> pm_state state)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_STATE_RUNTIME_IDLE:</span><br><span class="line">        <span class="comment">// 准备进入 RUNTIME_IDLE 状态</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_STATE_SUSPEND_TO_RAM:</span><br><span class="line">        <span class="comment">// 准备进入 SUSPEND_TO_RAM 状态</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册电源状态钩子</span></span><br><span class="line">PM_STATE_INFO_DT_DEFINE(DT_NODELABEL(cpu0), my_pm_hook);</span><br></pre></td></tr></table></figure><h2 id="设备电源管理"><a href="#设备电源管理" class="headerlink" title="设备电源管理"></a>设备电源管理</h2><h3 id="设备电源状态"><a href="#设备电源状态" class="headerlink" title="设备电源状态"></a>设备电源状态</h3><p>设备可以处于以下电源状态：</p><ol><li><strong>PM_DEVICE_STATE_ACTIVE</strong>：设备完全运行</li><li><strong>PM_DEVICE_STATE_LOW_POWER</strong>：设备处于低功耗模式</li><li><strong>PM_DEVICE_STATE_SUSPENDED</strong>：设备挂起</li><li><strong>PM_DEVICE_STATE_OFF</strong>：设备关闭</li></ol><h3 id="设备电源管理-API"><a href="#设备电源管理-API" class="headerlink" title="设备电源管理 API"></a>设备电源管理 API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置设备电源状态</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_device_power_state</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_state_set(dev, PM_DEVICE_STATE_LOW_POWER);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set device power state\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取设备电源状态</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_device_power_state</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">pm_device_state</span> <span class="title">state</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_state_get(dev, &amp;state);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to get device power state\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Device power state: %d\n&quot;</span>, state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设备运行时电源管理"><a href="#设备运行时电源管理" class="headerlink" title="设备运行时电源管理"></a>设备运行时电源管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用设备运行时电源管理</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enable_device_runtime_pm</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_runtime_enable(dev);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to enable runtime PM\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取设备</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">use_device</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_runtime_get(dev);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to get device\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用设备...</span></span><br><span class="line"></span><br><span class="line">    pm_device_runtime_put(dev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CPU-电源管理"><a href="#CPU-电源管理" class="headerlink" title="CPU 电源管理"></a>CPU 电源管理</h2><h3 id="CPU-空闲状态"><a href="#CPU-空闲状态" class="headerlink" title="CPU 空闲状态"></a>CPU 空闲状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 CPU 空闲状态</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">configure_cpu_idle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 允许 CPU 进入低功耗模式</span></span><br><span class="line">    k_cpu_idle();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许 CPU 进入深度睡眠模式</span></span><br><span class="line">    k_cpu_atomic_idle(K_FOREVER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CPU-频率缩放"><a href="#CPU-频率缩放" class="headerlink" title="CPU 频率缩放"></a>CPU 频率缩放</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/policy.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 CPU 频率</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_cpu_frequency</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置 CPU 频率为最大值</span></span><br><span class="line">    pm_policy_state_lock_get(PM_STATE_RUNTIME_IDLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 CPU 频率为最小值</span></span><br><span class="line">    pm_policy_state_lock_put(PM_STATE_RUNTIME_IDLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时钟管理"><a href="#时钟管理" class="headerlink" title="时钟管理"></a>时钟管理</h2><h3 id="系统时钟管理"><a href="#系统时钟管理" class="headerlink" title="系统时钟管理"></a>系统时钟管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/clock_control.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置系统时钟</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">configure_system_clock</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">clock_dev</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    clock_dev = DEVICE_DT_GET(DT_NODELABEL(clock));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(clock_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Clock device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置时钟频率</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = CLOCK_CONTROL_SUBSYS_SYSTEM,</span><br><span class="line">        .data = (<span class="type">void</span> *)<span class="number">16000000</span>  <span class="comment">// 设置为 16MHz</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ret = clock_control_set_rate(clock_dev, &amp;subsys);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set clock rate\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外设时钟管理"><a href="#外设时钟管理" class="headerlink" title="外设时钟管理"></a>外设时钟管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/clock_control.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制外设时钟</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">control_peripheral_clock</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">clock_dev</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    clock_dev = DEVICE_DT_GET(DT_NODELABEL(clock));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(clock_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Clock device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用外设时钟</span></span><br><span class="line">    ret = clock_control_on(clock_dev, (<span class="type">clock_control_subsys_t</span>)dev);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to enable peripheral clock\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用外设时钟</span></span><br><span class="line">    ret = clock_control_off(clock_dev, (<span class="type">clock_control_subsys_t</span>)dev);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to disable peripheral clock\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="唤醒源管理"><a href="#唤醒源管理" class="headerlink" title="唤醒源管理"></a>唤醒源管理</h2><h3 id="配置唤醒源"><a href="#配置唤醒源" class="headerlink" title="配置唤醒源"></a>配置唤醒源</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置设备作为唤醒源</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">configure_wakeup_source</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_wakeup_enable(dev, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to enable device as wakeup source\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查设备是否为唤醒源</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_wakeup_source</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> is_wakeup_source;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_wakeup_is_enabled(dev, &amp;is_wakeup_source);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to check wakeup source\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Device is %sa wakeup source\n&quot;</span>, is_wakeup_source ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;not &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="唤醒事件处理"><a href="#唤醒事件处理" class="headerlink" title="唤醒事件处理"></a>唤醒事件处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 唤醒事件处理函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">my_wakeup_event_handler</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Wakeup event from device: %s\n&quot;</span>, dev-&gt;name);</span><br><span class="line">    <span class="comment">// 返回 true 表示处理了唤醒事件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册唤醒事件处理函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">register_wakeup_handler</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_wakeup_event_register(dev, my_wakeup_event_handler, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to register wakeup event handler\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="电源管理策略"><a href="#电源管理策略" class="headerlink" title="电源管理策略"></a>电源管理策略</h2><h3 id="自定义电源管理策略"><a href="#自定义电源管理策略" class="headerlink" title="自定义电源管理策略"></a>自定义电源管理策略</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/policy.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义自定义电源管理策略</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">enum</span> pm_state <span class="title function_">my_pm_policy</span><span class="params">(<span class="keyword">enum</span> pm_state state)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 根据系统状态决定合适的电源状态</span></span><br><span class="line">    <span class="keyword">if</span> (some_condition) &#123;</span><br><span class="line">        <span class="keyword">return</span> PM_STATE_RUNTIME_IDLE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PM_STATE_SUSPEND_TO_RAM;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义电源管理策略</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">register_custom_pm_policy</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    pm_policy_state_lock_get(PM_ALL_STATES);</span><br><span class="line">    pm_policy_set_custom(my_pm_policy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="电源管理调试"><a href="#电源管理调试" class="headerlink" title="电源管理调试"></a>电源管理调试</h2><h3 id="启用电源管理调试"><a href="#启用电源管理调试" class="headerlink" title="启用电源管理调试"></a>启用电源管理调试</h3><p>在 <code>prj.conf</code> 中启用调试选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_PM_DEBUG=y</span><br></pre></td></tr></table></figure><h3 id="电源状态跟踪"><a href="#电源状态跟踪" class="headerlink" title="电源状态跟踪"></a>电源状态跟踪</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 电源状态变化回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pm_state_change_callback</span><span class="params">(<span class="keyword">enum</span> pm_state state)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Power state changed to: %d\n&quot;</span>, state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册电源状态变化回调</span></span><br><span class="line">PM_STATE_INFO_DEFINE(PM_STATE_SUSPEND_TO_RAM, pm_state_change_callback);</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>系统级优化</strong></p><ul><li>合理配置系统电源状态</li><li>使用电源状态约束避免不必要的深度睡眠</li><li>实现自定义电源管理策略</li></ul></li><li><p><strong>设备级优化</strong></p><ul><li>充分利用设备运行时电源管理</li><li>及时关闭不使用的设备</li><li>合理配置设备唤醒源</li></ul></li><li><p><strong>CPU 优化</strong></p><ul><li>使用 CPU 频率缩放</li><li>在空闲时允许 CPU 进入低功耗模式</li><li>优化中断处理以减少 CPU 唤醒</li></ul></li><li><p><strong>时钟优化</strong></p><ul><li>动态调整系统时钟频率</li><li>关闭不需要的外设时钟</li><li>使用异步通信减少时钟同步需求</li></ul></li><li><p><strong>应用优化</strong></p><ul><li>使用事件驱动编程模型</li><li>批量处理任务减少唤醒次数</li><li>优化算法减少 CPU 使用时间</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>系统无法进入深度睡眠</strong></p><ul><li>检查是否有活跃的电源状态约束</li><li>验证所有设备是否支持目标电源状态</li><li>检查是否有未处理的中断或定时器</li></ul></li><li><p><strong>设备电源管理失败</strong></p><ul><li>确保设备驱动实现了必要的电源管理回调</li><li>检查设备树配置是否正确</li><li>验证设备是否支持目标电源状态</li></ul></li><li><p><strong>唤醒源配置问题</strong></p><ul><li>确保唤醒源设备支持唤醒功能</li><li>检查唤醒源配置是否正确</li><li>验证唤醒事件处理函数是否正确注册</li></ul></li><li><p><strong>功耗高于预期</strong></p><ul><li>使用电源分析工具监控系统功耗</li><li>检查是否有不必要的设备保持活跃状态</li><li>优化应用代码减少 CPU 使用率</li></ul></li><li><p><strong>电源状态切换延迟</strong></p><ul><li>优化电源状态切换回调函数</li><li>减少进入&#x2F;退出低功耗模式的准备工作</li><li>考虑使用更轻量级的低功耗模式</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 的电源管理系统提供了全面的功能，用于优化系统功耗和延长电池寿命。通过合理配置和使用这些功能，可以开发出高效、低功耗的嵌入式应用。深入理解这些电源管理接口对于开发高质量的 Zephyr 应用至关重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 设备树指南</title>
      <link href="/2025/03/21/nodic/zephyr/devicetree/README/"/>
      <url>/2025/03/21/nodic/zephyr/devicetree/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-设备树指南"><a href="#Zephyr-设备树指南" class="headerlink" title="Zephyr 设备树指南"></a>Zephyr 设备树指南</h1><h2 id="1-设备树基础"><a href="#1-设备树基础" class="headerlink" title="1. 设备树基础"></a>1. 设备树基础</h2><h3 id="1-1-设备树概述"><a href="#1-1-设备树概述" class="headerlink" title="1.1 设备树概述"></a>1.1 设备树概述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[设备树源文件 .dts] --&gt; B[预处理器]</span><br><span class="line">    B --&gt; C[编译器 dtc]</span><br><span class="line">    C --&gt; D[设备树二进制 .dtb]</span><br><span class="line">    D --&gt; E[内核使用]</span><br></pre></td></tr></table></figure><h3 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基本节点结构 */</span></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">node-name@unit-address</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;address size&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        </span><br><span class="line">        <span class="title class_">child-node</span> <span class="punctuation">&#123;</span></span><br><span class="line">            property1 = <span class="string">&quot;value&quot;</span><span class="punctuation">;</span></span><br><span class="line">            property2 = <span class="params">&lt;numeric-value&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="2-常用节点类型"><a href="#2-常用节点类型" class="headerlink" title="2. 常用节点类型"></a>2. 常用节点类型</h2><h3 id="2-1-CPU节点"><a href="#2-1-CPU节点" class="headerlink" title="2.1 CPU节点"></a>2.1 CPU节点</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">cpus</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">    <span class="meta">#size-cells = &lt;0&gt;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="title class_">cpu@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;cpu&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;arm,cortex-m4f&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">80000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-内存节点"><a href="#2-2-内存节点" class="headerlink" title="2.2 内存节点"></a>2.2 内存节点</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">memory@20000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;memory&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x20000000</span> <span class="number">0x20000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-GPIO控制器"><a href="#2-3-GPIO控制器" class="headerlink" title="2.3 GPIO控制器"></a>2.3 GPIO控制器</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">gpio0:</span> <span class="title class_">gpio@40000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;nordic,nrf-gpio&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="meta">#gpio-cells = &lt;2&gt;;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-串口设备"><a href="#2-4-串口设备" class="headerlink" title="2.4 串口设备"></a>2.4 串口设备</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">uart0:</span> <span class="title class_">uart@40002000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;nordic,nrf-uarte&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40002000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="3-属性定义"><a href="#3-属性定义" class="headerlink" title="3. 属性定义"></a>3. 属性定义</h2><h3 id="3-1-常用属性"><a href="#3-1-常用属性" class="headerlink" title="3.1 常用属性"></a>3.1 常用属性</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">my-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* 基本属性 */</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 中断属性 */</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupt-parent</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;intc</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 时钟属性 */</span></span><br><span class="line">    <span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;clk</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">100000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIO属性 */</span></span><br><span class="line">    <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_HIGH&gt;</span><span class="punctuation">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 自定义属性 */</span></span><br><span class="line">    <span class="attr">my-property</span> <span class="operator">=</span> <span class="string">&quot;custom value&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">my-numbers</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-标签和引用"><a href="#3-2-标签和引用" class="headerlink" title="3.2 标签和引用"></a>3.2 标签和引用</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义标签 */</span></span><br><span class="line"><span class="symbol">uart0:</span> <span class="title class_">uart@40002000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* 节点内容 */</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引用标签 */</span></span><br><span class="line"><span class="title class_">my-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">my-uart</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;uart0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="4-设备树覆盖"><a href="#4-设备树覆盖" class="headerlink" title="4. 设备树覆盖"></a>4. 设备树覆盖</h2><h3 id="4-1-覆盖文件"><a href="#4-1-覆盖文件" class="headerlink" title="4.1 覆盖文件"></a>4.1 覆盖文件</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* board.overlay */</span></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 修改现有节点 */</span></span><br><span class="line">    <span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">230400</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 添加新节点 */</span></span><br><span class="line">    <span class="title class_">new-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,new-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-条件编译"><a href="#4-2-条件编译" class="headerlink" title="4.2 条件编译"></a>4.2 条件编译</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用预处理器指令 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FEATURE</span></span><br><span class="line">    <span class="title class_">feature-node</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="title class_">feature-node</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;disabled&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="5-设备树绑定"><a href="#5-设备树绑定" class="headerlink" title="5. 设备树绑定"></a>5. 设备树绑定</h2><h3 id="5-1-绑定文件"><a href="#5-1-绑定文件" class="headerlink" title="5.1 绑定文件"></a>5.1 绑定文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dts/bindings/vendor,device.yaml</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">Device</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compatible:</span> <span class="string">&quot;vendor,device&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">reg:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Register</span> <span class="string">address</span> <span class="string">and</span> <span class="string">size</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">interrupts:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Interrupt</span> <span class="string">lines</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">my-property:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Custom</span> <span class="string">property</span></span><br></pre></td></tr></table></figure><h3 id="5-2-绑定示例"><a href="#5-2-绑定示例" class="headerlink" title="5.2 绑定示例"></a>5.2 绑定示例</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用绑定的设备 */</span></span><br><span class="line"><span class="title class_">my-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">my-property</span> <span class="operator">=</span> <span class="string">&quot;value&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="6-代码中使用设备树"><a href="#6-代码中使用设备树" class="headerlink" title="6. 代码中使用设备树"></a>6. 代码中使用设备树</h2><h3 id="6-1-获取设备"><a href="#6-1-获取设备" class="headerlink" title="6.1 获取设备"></a>6.1 获取设备</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过节点标识符获取设备 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE DT_NODELABEL(my_device)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">device_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    </span><br><span class="line">    dev = DEVICE_DT_GET(MY_DEVICE);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用设备 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-访问属性"><a href="#6-2-访问属性" class="headerlink" title="6.2 访问属性"></a>6.2 访问属性</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取属性值 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE DT_NODELABEL(my_device)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取reg属性 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_BASE_ADDR DT_REG_ADDR(MY_DEVICE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_SIZE DT_REG_SIZE(MY_DEVICE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取其他属性 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_STATUS DT_PROP(MY_DEVICE, status)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_SPEED DT_PROP(MY_DEVICE, current-speed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检查属性是否存在 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DT_NODE_HAS_PROP(MY_DEVICE, my_property)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> MY_PROP DT_PROP(MY_DEVICE, my_property)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="7-实际应用示例"><a href="#7-实际应用示例" class="headerlink" title="7. 实际应用示例"></a>7. 实际应用示例</h2><h3 id="7-1-LED控制器"><a href="#7-1-LED控制器" class="headerlink" title="7.1 LED控制器"></a>7.1 LED控制器</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义LED节点 */</span></span><br><span class="line"><span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">    led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">    led1:</span> <span class="title class_">led_1</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">14</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Red LED 1&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在代码中使用LED */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_NODE DT_ALIAS(led0)</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led0</span> =</span> GPIO_DT_SPEC_GET(LED0_NODE, gpios);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_control</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(led0.port)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    gpio_pin_configure_dt(&amp;led0, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    gpio_pin_toggle_dt(&amp;led0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-传感器配置"><a href="#7-2-传感器配置" class="headerlink" title="7.2 传感器配置"></a>7.2 传感器配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义I2C传感器 */</span></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;I2C_BITRATE_STANDARD&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">    </span></span><br><span class="line"><span class="symbol">    sensor0:</span> <span class="title class_">sensor@48</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,temperature-sensor&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x48</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">int-gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">24</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在代码中使用传感器 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SENSOR_NODE DT_NODELABEL(sensor0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sensor_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">temp</span>;</span></span><br><span class="line">    </span><br><span class="line">    dev = DEVICE_DT_GET(SENSOR_NODE);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sensor_sample_fetch(dev);</span><br><span class="line">    sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &amp;temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-串口配置"><a href="#7-3-串口配置" class="headerlink" title="7.3 串口配置"></a>7.3 串口配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 配置串口 */</span></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;uart0_default</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">pinctrl-names</span> <span class="operator">=</span> <span class="string">&quot;default&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在代码中使用串口 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_NODE DT_NODELABEL(uart0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uart_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    </span><br><span class="line">    dev = DEVICE_DT_GET(UART_NODE);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用串口 */</span></span><br><span class="line">    <span class="type">uint8_t</span> data[] = <span class="string">&quot;Hello\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(data); i++) &#123;</span><br><span class="line">        uart_poll_out(dev, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr DMA 子系统指南</title>
      <link href="/2025/03/21/nodic/zephyr/dma/README/"/>
      <url>/2025/03/21/nodic/zephyr/dma/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-DMA-管理指南"><a href="#Zephyr-DMA-管理指南" class="headerlink" title="Zephyr DMA 管理指南"></a>Zephyr DMA 管理指南</h1><h2 id="1-DMA-概述"><a href="#1-DMA-概述" class="headerlink" title="1. DMA 概述"></a>1. DMA 概述</h2><p>DMA（直接内存访问）是一种允许外设直接访问系统内存而无需 CPU 干预的技术，能显著提高数据传输效率。Zephyr RTOS 提供了统一的 DMA API，支持各种硬件平台的 DMA 控制器。</p><h2 id="2-DMA-配置"><a href="#2-DMA-配置" class="headerlink" title="2. DMA 配置"></a>2. DMA 配置</h2><h3 id="2-1-基本配置-prj-conf"><a href="#2-1-基本配置-prj-conf" class="headerlink" title="2.1 基本配置 (prj.conf)"></a>2.1 基本配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># DMA 支持</span><br><span class="line">CONFIG_DMA=y</span><br><span class="line">CONFIG_DMA_64BIT=y  # 如果需要 64 位 DMA 支持</span><br><span class="line"></span><br><span class="line"># 特定控制器支持（根据硬件选择）</span><br><span class="line">CONFIG_DMA_STM32=y  # STM32 DMA 控制器</span><br><span class="line"># 或</span><br><span class="line">CONFIG_DMA_NRFX=y   # Nordic nRF DMA 控制器</span><br><span class="line"># 或</span><br><span class="line">CONFIG_DMA_SAM0=y   # Atmel SAM0 DMA 控制器</span><br><span class="line"></span><br><span class="line"># DMA 调试支持</span><br><span class="line">CONFIG_DMA_LOG_LEVEL_DBG=y</span><br></pre></td></tr></table></figure><h3 id="2-2-设备树配置"><a href="#2-2-设备树配置" class="headerlink" title="2.2 设备树配置"></a>2.2 设备树配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;dma0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为特定外设配置 DMA */</span></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">dmas</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;dma0</span> <span class="number">0</span> <span class="number">0</span>&gt;</span>, <span class="params">&lt;<span class="variable">&amp;dma0</span> <span class="number">1</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">dma-names</span> <span class="operator">=</span> <span class="string">&quot;tx&quot;</span>, <span class="string">&quot;rx&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="3-DMA-基本操作"><a href="#3-DMA-基本操作" class="headerlink" title="3. DMA 基本操作"></a>3. DMA 基本操作</h2><h3 id="3-1-DMA-初始化与配置"><a href="#3-1-DMA-初始化与配置" class="headerlink" title="3.1 DMA 初始化与配置"></a>3.1 DMA 初始化与配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dma_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA controller device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 源数据和目标缓冲区 */</span></span><br><span class="line">    <span class="type">uint8_t</span> tx_data[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_data[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 填充源数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_data); i++) &#123;</span><br><span class="line">        tx_data[i] = i &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg.block_size = <span class="keyword">sizeof</span>(tx_data);</span><br><span class="line">    dma_block_cfg.source_address = (<span class="type">uint32_t</span>)tx_data;</span><br><span class="line">    dma_block_cfg.dest_address = (<span class="type">uint32_t</span>)rx_data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_MEMORY;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待传输完成 */</span></span><br><span class="line">    k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(rx_data); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rx_data[i] != tx_data[i]) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Data mismatch at index %d: %u != %u\n&quot;</span>,</span><br><span class="line">                   i, rx_data[i], tx_data[i]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;DMA transfer completed successfully\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-DMA-回调处理"><a href="#4-DMA-回调处理" class="headerlink" title="4. DMA 回调处理"></a>4. DMA 回调处理</h2><h3 id="4-1-DMA-回调函数"><a href="#4-1-DMA-回调函数" class="headerlink" title="4.1 DMA 回调函数"></a>4.1 DMA 回调函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义信号量 */</span></span><br><span class="line">K_SEM_DEFINE(dma_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 传输完成回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dma_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dma_dev, <span class="type">void</span> *user_data,</span></span><br><span class="line"><span class="params">                        <span class="type">uint32_t</span> channel, <span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA transfer error: %d\n&quot;</span>, status);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA transfer completed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放信号量通知传输完成 */</span></span><br><span class="line">    k_sem_give(&amp;dma_sem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dma_with_callback</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA controller device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 源数据和目标缓冲区 */</span></span><br><span class="line">    <span class="type">uint8_t</span> tx_data[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_data[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 填充源数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_data); i++) &#123;</span><br><span class="line">        tx_data[i] = i &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg.block_size = <span class="keyword">sizeof</span>(tx_data);</span><br><span class="line">    dma_block_cfg.source_address = (<span class="type">uint32_t</span>)tx_data;</span><br><span class="line">    dma_block_cfg.dest_address = (<span class="type">uint32_t</span>)rx_data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_MEMORY;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = dma_callback;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待传输完成 */</span></span><br><span class="line">    <span class="keyword">if</span> (k_sem_take(&amp;dma_sem, K_MSEC(<span class="number">1000</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA transfer timed out\n&quot;</span>);</span><br><span class="line">        dma_stop(dma_dev, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(rx_data); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rx_data[i] != tx_data[i]) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Data mismatch at index %d: %u != %u\n&quot;</span>,</span><br><span class="line">                   i, rx_data[i], tx_data[i]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;DMA transfer completed successfully\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-高级-DMA-功能"><a href="#5-高级-DMA-功能" class="headerlink" title="5. 高级 DMA 功能"></a>5. 高级 DMA 功能</h2><h3 id="5-1-链式-DMA-传输"><a href="#5-1-链式-DMA-传输" class="headerlink" title="5.1 链式 DMA 传输"></a>5.1 链式 DMA 传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dma_chained_transfer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span>[3] =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA controller device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 源数据和目标缓冲区 */</span></span><br><span class="line">    <span class="type">uint8_t</span> tx_data1[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> tx_data2[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> tx_data3[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_data[<span class="number">768</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 填充源数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_data1); i++) &#123;</span><br><span class="line">        tx_data1[i] = i &amp; <span class="number">0xFF</span>;</span><br><span class="line">        tx_data2[i] = (i + <span class="number">100</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        tx_data3[i] = (i + <span class="number">200</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置第一个 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg[<span class="number">0</span>].block_size = <span class="keyword">sizeof</span>(tx_data1);</span><br><span class="line">    dma_block_cfg[<span class="number">0</span>].source_address = (<span class="type">uint32_t</span>)tx_data1;</span><br><span class="line">    dma_block_cfg[<span class="number">0</span>].dest_address = (<span class="type">uint32_t</span>)rx_data;</span><br><span class="line">    dma_block_cfg[<span class="number">0</span>].next_block = &amp;dma_block_cfg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置第二个 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg[<span class="number">1</span>].block_size = <span class="keyword">sizeof</span>(tx_data2);</span><br><span class="line">    dma_block_cfg[<span class="number">1</span>].source_address = (<span class="type">uint32_t</span>)tx_data2;</span><br><span class="line">    dma_block_cfg[<span class="number">1</span>].dest_address = (<span class="type">uint32_t</span>)(rx_data + <span class="keyword">sizeof</span>(tx_data1));</span><br><span class="line">    dma_block_cfg[<span class="number">1</span>].next_block = &amp;dma_block_cfg[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置第三个 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg[<span class="number">2</span>].block_size = <span class="keyword">sizeof</span>(tx_data3);</span><br><span class="line">    dma_block_cfg[<span class="number">2</span>].source_address = (<span class="type">uint32_t</span>)tx_data3;</span><br><span class="line">    dma_block_cfg[<span class="number">2</span>].dest_address = (<span class="type">uint32_t</span>)(rx_data + <span class="keyword">sizeof</span>(tx_data1) + <span class="keyword">sizeof</span>(tx_data2));</span><br><span class="line">    dma_block_cfg[<span class="number">2</span>].next_block = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_MEMORY;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">3</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待传输完成 */</span></span><br><span class="line">    k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Chained DMA transfer completed\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-循环-DMA-传输"><a href="#5-2-循环-DMA-传输" class="headerlink" title="5.2 循环 DMA 传输"></a>5.2 循环 DMA 传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dma_cyclic_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dma_dev, <span class="type">void</span> *user_data,</span></span><br><span class="line"><span class="params">                              <span class="type">uint32_t</span> channel, <span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA transfer error: %d\n&quot;</span>, status);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    count++;</span><br><span class="line">    printk(<span class="string">&quot;DMA cyclic transfer completed: %d\n&quot;</span>, count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 如果达到指定次数，停止 DMA */</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        dma_stop(dma_dev, channel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dma_cyclic_transfer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA controller device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 源数据和目标缓冲区 */</span></span><br><span class="line">    <span class="type">uint8_t</span> tx_data[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_data[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 填充源数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_data); i++) &#123;</span><br><span class="line">        tx_data[i] = i &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg.block_size = <span class="keyword">sizeof</span>(tx_data);</span><br><span class="line">    dma_block_cfg.source_address = (<span class="type">uint32_t</span>)tx_data;</span><br><span class="line">    dma_block_cfg.dest_address = (<span class="type">uint32_t</span>)rx_data;</span><br><span class="line">    dma_block_cfg.source_reload_en = <span class="number">1</span>;  <span class="comment">/* 启用源地址重载 */</span></span><br><span class="line">    dma_block_cfg.dest_reload_en = <span class="number">1</span>;    <span class="comment">/* 启用目标地址重载 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_MEMORY;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = dma_cyclic_callback;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg;</span><br><span class="line">    dma_cfg.cyclic = <span class="number">1</span>;  <span class="comment">/* 启用循环模式 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待循环传输完成（由回调函数停止） */</span></span><br><span class="line">    k_sleep(K_SECONDS(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Cyclic DMA transfer stopped\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-与外设集成"><a href="#6-与外设集成" class="headerlink" title="6. 与外设集成"></a>6. 与外设集成</h2><h3 id="6-1-UART-与-DMA-集成"><a href="#6-1-UART-与-DMA-集成" class="headerlink" title="6.1 UART 与 DMA 集成"></a>6.1 UART 与 DMA 集成</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 完成回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">uart_dma_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dma_dev, <span class="type">void</span> *user_data,</span></span><br><span class="line"><span class="params">                            <span class="type">uint32_t</span> channel, <span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;UART DMA transfer completed with status: %d\n&quot;</span>, status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uart_dma_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">uart_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(uart0));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(uart_dev) || !device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Devices not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 要发送的数据 */</span></span><br><span class="line">    <span class="type">char</span> tx_data[] = <span class="string">&quot;Hello, DMA UART!\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg.block_size = <span class="keyword">sizeof</span>(tx_data) - <span class="number">1</span>;</span><br><span class="line">    dma_block_cfg.source_address = (<span class="type">uint32_t</span>)tx_data;</span><br><span class="line">    dma_block_cfg.dest_address = (<span class="type">uint32_t</span>)UART0_BASE_ADDR + UART_TX_REG_OFFSET;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_PERIPHERAL;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = uart_dma_callback;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待传输完成 */</span></span><br><span class="line">    k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-DMA-最佳实践"><a href="#7-DMA-最佳实践" class="headerlink" title="7. DMA 最佳实践"></a>7. DMA 最佳实践</h2><ol><li><p>内存对齐：确保 DMA 缓冲区按照硬件要求对齐，通常为 4 或 8 字节边界。</p></li><li><p>缓冲区位置：对于某些平台，DMA 缓冲区可能需要放置在特定的内存区域，如 SRAM 而非 Flash。</p></li><li><p>缓存一致性：在使用 DMA 之前，确保清除或刷新 CPU 缓存，以避免数据不一致问题。</p></li><li><p>错误处理：实现完善的错误处理机制，包括超时检测和错误恢复。</p></li><li><p>资源管理：在不需要时释放 DMA 通道，以便其他组件使用。</p></li><li><p>中断处理：使用回调函数处理 DMA 传输完成事件，避免轮询等待。</p></li><li><p>功耗优化：在低功耗应用中，考虑 DMA 传输完成后进入低功耗模式。</p></li><li><p>传输大小：根据硬件特性选择最优的传输大小，通常是 2 的幂次。</p></li><li><p>并发传输：如果硬件支持，可以使用多个 DMA 通道并行处理不同的数据流。</p></li><li><p>安全考虑：确保 DMA 不会访问受保护的内存区域，特别是在多任务系统中。</p></li></ol><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 示例代码集</title>
      <link href="/2025/03/21/nodic/zephyr/examples/README/"/>
      <url>/2025/03/21/nodic/zephyr/examples/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-示例代码"><a href="#Zephyr-示例代码" class="headerlink" title="Zephyr 示例代码"></a>Zephyr 示例代码</h1><p>本章节提供了一系列 Zephyr RTOS 的示例代码，帮助开发者快速上手和理解各种功能的使用方法。这些示例涵盖了从基础到高级的多个方面。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><p><a href="../examples/basic">基础示例</a></p><ul><li>Hello World</li><li>LED 控制</li><li>按键输入</li><li>定时器使用</li><li>多线程编程</li></ul></li><li><p><a href="../examples/networking">网络示例</a></p><ul><li>TCP&#x2F;IP 通信</li><li>UDP 通信</li><li>HTTP 客户端&#x2F;服务器</li><li>MQTT 客户端</li><li>CoAP 通信</li></ul></li><li><p><a href="../examples/sensors">传感器示例</a></p><ul><li>温度传感器</li><li>加速度传感器</li><li>压力传感器</li><li>光线传感器</li><li>传感器数据融合</li></ul></li><li><p><a href="../examples/bluetooth">蓝牙示例</a></p><ul><li>BLE 广播</li><li>GATT 服务</li><li>BLE 中心设备</li><li>BLE 外围设备</li><li>蓝牙 Mesh</li></ul></li></ol><h2 id="示例使用说明"><a href="#示例使用说明" class="headerlink" title="示例使用说明"></a>示例使用说明</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li><p><strong>安装必要工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt install --no-install-recommends git cmake ninja-build gperf \</span><br><span class="line">  ccache dfu-util device-tree-compiler wget \</span><br><span class="line">  python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \</span><br><span class="line">  make gcc gcc-multilib g++-multilib libsdl2-dev</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Zephyr SDK</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br><span class="line">tar xvf zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> zephyr-sdk-0.16.1</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>获取源码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">west init -m https://github.com/zephyrproject-rtos/zephyr --mr v2.9.1</span><br><span class="line"><span class="built_in">cd</span> zephyrproject</span><br><span class="line">west update</span><br></pre></td></tr></table></figure></li></ol><h3 id="编译和运行示例"><a href="#编译和运行示例" class="headerlink" title="编译和运行示例"></a>编译和运行示例</h3><ol><li><p><strong>基本步骤</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/&lt;sample_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录到开发板</span></span><br><span class="line">west flash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行示例（QEMU）</span></span><br><span class="line">west build -b qemu_x86 samples/&lt;sample_name&gt;</span><br><span class="line">west run</span><br></pre></td></tr></table></figure></li><li><p><strong>常用选项</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理构建</span></span><br><span class="line">west build -t clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用特定配置</span></span><br><span class="line">west build -b &lt;board&gt; -- -DCONF_FILE=prj_custom.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用设备树覆盖</span></span><br><span class="line">west build -b &lt;board&gt; -- -DDTC_OVERLAY_FILE=custom.overlay</span><br></pre></td></tr></table></figure></li></ol><h2 id="示例代码组织"><a href="#示例代码组织" class="headerlink" title="示例代码组织"></a>示例代码组织</h2><p>每个示例通常包含以下文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">samples/my_sample/</span><br><span class="line">├── CMakeLists.txt          # 构建系统配置</span><br><span class="line">├── prj.conf                # 项目配置</span><br><span class="line">├── README.rst              # 示例说明文档</span><br><span class="line">├── sample.yaml            # 示例元数据</span><br><span class="line">└── src/</span><br><span class="line">    └── main.c             # 源代码</span><br></pre></td></tr></table></figure><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Zephyr REQUIRED HINTS $ENV&#123;ZEPHYR_BASE&#125;)</span><br><span class="line"><span class="keyword">project</span>(my_sample)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_sources</span>(app PRIVATE src/main.c)</span><br></pre></td></tr></table></figure><h3 id="prj-conf"><a href="#prj-conf" class="headerlink" title="prj.conf"></a>prj.conf</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 启用需要的功能</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_GPIO=y</span><br></pre></td></tr></table></figure><h3 id="sample-yaml"><a href="#sample-yaml" class="headerlink" title="sample.yaml"></a>sample.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sample:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">My</span> <span class="string">Sample</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">Sample</span> <span class="string">description</span></span><br><span class="line"><span class="attr">tests:</span></span><br><span class="line">  <span class="attr">sample.basic.my_sample:</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">introduction</span></span><br><span class="line">    <span class="attr">platform_allow:</span> <span class="string">qemu_x86</span> <span class="string">nrf52dk_nrf52832</span></span><br></pre></td></tr></table></figure><h2 id="调试和测试"><a href="#调试和测试" class="headerlink" title="调试和测试"></a>调试和测试</h2><h3 id="使用调试器"><a href="#使用调试器" class="headerlink" title="使用调试器"></a>使用调试器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动调试会话</span></span><br><span class="line">west debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用 GDB</span></span><br><span class="line">west build -b &lt;board&gt; -- -DCMAKE_BUILD_TYPE=Debug</span><br><span class="line">gdb build/zephyr/zephyr.elf</span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 minicom（Linux）</span></span><br><span class="line">minicom -D /dev/ttyACM0 -b 115200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 PuTTY（Windows）</span></span><br><span class="line"><span class="comment"># 配置串口和波特率（115200）</span></span><br></pre></td></tr></table></figure><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ol><li><p><strong>编译错误</strong></p><ul><li>检查依赖项是否安装</li><li>验证配置选项是否正确</li><li>确认硬件平台支持</li></ul></li><li><p><strong>运行问题</strong></p><ul><li>检查硬件连接</li><li>验证固件烧录是否成功</li><li>查看串口日志</li></ul></li><li><p><strong>硬件不兼容</strong></p><ul><li>检查平台支持列表</li><li>使用兼容的硬件版本</li><li>修改设备树配置</li></ul></li></ol><h2 id="示例分类"><a href="#示例分类" class="headerlink" title="示例分类"></a>示例分类</h2><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><ul><li>适合初学者</li><li>展示基本概念</li><li>简单明了的代码</li></ul><h3 id="中级示例"><a href="#中级示例" class="headerlink" title="中级示例"></a>中级示例</h3><ul><li>展示实用功能</li><li>包含错误处理</li><li>使用多个功能模块</li></ul><h3 id="高级示例"><a href="#高级示例" class="headerlink" title="高级示例"></a>高级示例</h3><ul><li>复杂系统集成</li><li>性能优化技术</li><li>高级功能使用</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>代码学习</strong></p><ul><li>从简单示例开始</li><li>理解代码结构</li><li>尝试修改和扩展</li></ul></li><li><p><strong>功能验证</strong></p><ul><li>完整测试功能</li><li>验证错误处理</li><li>检查资源使用</li></ul></li><li><p><strong>代码复用</strong></p><ul><li>提取通用功能</li><li>创建可重用模块</li><li>保持代码整洁</li></ul></li></ol><h2 id="贡献示例"><a href="#贡献示例" class="headerlink" title="贡献示例"></a>贡献示例</h2><ol><li><p><strong>创建新示例</strong></p><ul><li>选择有意义的主题</li><li>编写清晰的文档</li><li>提供完整的测试</li></ul></li><li><p><strong>改进现有示例</strong></p><ul><li>修复问题</li><li>添加新功能</li><li>改进文档</li></ul></li><li><p><strong>提交流程</strong></p><ul><li>遵循代码规范</li><li>包含必要测试</li><li>提供使用说明</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 示例代码提供了实用的参考和学习资源。通过学习和实践这些示例，开发者可以快速掌握 Zephyr RTOS 的各种功能，并在此基础上开发自己的应用程序。</p><p>在接下来的章节中，我们将详细介绍各类示例的实现和使用方法。每个示例都包含完整的源代码、配置文件和详细的说明文档，帮助您更好地理解和使用 Zephyr RTOS。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bluetooth</title>
      <link href="/2025/03/21/nodic/zephyr/examples/bluetooth/"/>
      <url>/2025/03/21/nodic/zephyr/examples/bluetooth/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-蓝牙示例"><a href="#Zephyr-蓝牙示例" class="headerlink" title="Zephyr 蓝牙示例"></a>Zephyr 蓝牙示例</h1><p>本文档提供了 Zephyr RTOS 中使用蓝牙功能的示例代码，包括 BLE 广播、GATT 服务、BLE 中心设备、BLE 外围设备和蓝牙 Mesh 等内容。</p><h2 id="BLE-广播"><a href="#BLE-广播" class="headerlink" title="BLE 广播"></a>BLE 广播</h2><p>这个示例展示了如何实现一个 BLE 广播设备。</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义广播数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_NAME_COMPLETE, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;r&#x27;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义扫描响应数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">sd</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_UUID16_ALL, <span class="number">0x0d</span>, <span class="number">0x18</span>), <span class="comment">/* 0x180d 心率服务 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化蓝牙协议栈 */</span></span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动广播 */</span></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad),</span><br><span class="line">                         sd, ARRAY_SIZE(sd));</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Advertising started\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr&quot;</span><br></pre></td></tr></table></figure><h2 id="GATT-服务"><a href="#GATT-服务" class="headerlink" title="GATT 服务"></a>GATT 服务</h2><p>这个示例展示了如何实现一个自定义的 GATT 服务。</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自定义服务 UUID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_SERVICE_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自定义特征 UUID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_CHRC_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef1)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_uuid_128</span> <span class="title">custom_service_uuid</span> =</span> BT_UUID_INIT_128(</span><br><span class="line">    BT_UUID_CUSTOM_SERVICE_VAL);</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_uuid_128</span> <span class="title">custom_characteristic_uuid</span> =</span> BT_UUID_INIT_128(</span><br><span class="line">    BT_UUID_CUSTOM_CHRC_VAL);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 特征值 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> custom_value[] = &#123; <span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">read_custom</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                          <span class="type">void</span> *buf, <span class="type">uint16_t</span> len, <span class="type">uint16_t</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> *value = attr-&gt;user_data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bt_gatt_attr_read(conn, attr, buf, len, offset, value,</span><br><span class="line">                            <span class="keyword">sizeof</span>(custom_value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写入回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">write_custom</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">uint16_t</span> len,</span></span><br><span class="line"><span class="params">                           <span class="type">uint16_t</span> offset, <span class="type">uint8_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *value = attr-&gt;user_data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (offset + len &gt; <span class="keyword">sizeof</span>(custom_value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(value + offset, buf, len);</span><br><span class="line">    printk(<span class="string">&quot;Value updated: %u\n&quot;</span>, *value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义 GATT 服务 */</span></span><br><span class="line">BT_GATT_SERVICE_DEFINE(custom_svc,</span><br><span class="line">    BT_GATT_PRIMARY_SERVICE(&amp;custom_service_uuid),</span><br><span class="line">    BT_GATT_CHARACTERISTIC(&amp;custom_characteristic_uuid.uuid,</span><br><span class="line">                          BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE,</span><br><span class="line">                          BT_GATT_PERM_READ | BT_GATT_PERM_WRITE,</span><br><span class="line">                          read_custom, write_custom, custom_value),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connection failed (err 0x%02x)\n&quot;</span>, err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 断开连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disconnected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Disconnected (reason 0x%02x)\n&quot;</span>, reason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接回调结构体 */</span></span><br><span class="line">BT_CONN_CB_DEFINE(conn_callbacks) = &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">    .disconnected = disconnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化蓝牙协议栈 */</span></span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动广播 */</span></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Advertising started\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr GATT&quot;</span><br><span class="line">CONFIG_BT_DEVICE_APPEARANCE=0</span><br><span class="line">CONFIG_BT_MAX_CONN=1</span><br></pre></td></tr></table></figure><h2 id="BLE-中心设备"><a href="#BLE-中心设备" class="headerlink" title="BLE 中心设备"></a>BLE 中心设备</h2><p>这个示例展示了如何实现一个 BLE 中心设备，扫描并连接到外围设备。</p><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/conn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接句柄 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_conn</span> *<span class="title">default_conn</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 扫描参数 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_le_scan_param</span> <span class="title">scan_param</span> =</span> &#123;</span><br><span class="line">    .type = BT_LE_SCAN_TYPE_ACTIVE,</span><br><span class="line">    .options = BT_LE_SCAN_OPT_NONE,</span><br><span class="line">    .interval = BT_GAP_SCAN_FAST_INTERVAL,</span><br><span class="line">    .window = BT_GAP_SCAN_FAST_WINDOW,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 扫描回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">device_found</span><span class="params">(<span class="type">const</span> <span class="type">bt_addr_le_t</span> *addr, <span class="type">int8_t</span> rssi, <span class="type">uint8_t</span> type,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> net_buf_simple *ad)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> addr_str[BT_ADDR_LE_STR_LEN];</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将蓝牙地址转换为字符串 */</span></span><br><span class="line">    bt_addr_le_to_str(addr, addr_str, <span class="keyword">sizeof</span>(addr_str));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查是否已连接 */</span></span><br><span class="line">    <span class="keyword">if</span> (default_conn) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 停止扫描 */</span></span><br><span class="line">    err = bt_le_scan_stop();</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to stop scanning (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接到设备 */</span></span><br><span class="line">    err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN,</span><br><span class="line">                          BT_LE_CONN_PARAM_DEFAULT, &amp;default_conn);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create connection (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="comment">/* 重新开始扫描 */</span></span><br><span class="line">        bt_le_scan_start(&amp;scan_param, device_found);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> addr[BT_ADDR_LE_STR_LEN];</span><br><span class="line"></span><br><span class="line">    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to connect to %s (err %u)\n&quot;</span>, addr, err);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (conn == default_conn) &#123;</span><br><span class="line">            bt_conn_unref(default_conn);</span><br><span class="line">            default_conn = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 重新开始扫描 */</span></span><br><span class="line">            bt_le_scan_start(&amp;scan_param, device_found);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Connected to %s\n&quot;</span>, addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (conn == default_conn) &#123;</span><br><span class="line">        <span class="comment">/* 发现服务 */</span></span><br><span class="line">        err = bt_gatt_discover(conn, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to start discovery (err %d)\n&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 断开连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disconnected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> addr[BT_ADDR_LE_STR_LEN];</span><br><span class="line"></span><br><span class="line">    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Disconnected from %s (reason 0x%02x)\n&quot;</span>, addr, reason);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (conn == default_conn) &#123;</span><br><span class="line">        bt_conn_unref(default_conn);</span><br><span class="line">        default_conn = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 重新开始扫描 */</span></span><br><span class="line">        bt_le_scan_start(&amp;scan_param, device_found);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接回调结构体 */</span></span><br><span class="line">BT_CONN_CB_DEFINE(conn_callbacks) = &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">    .disconnected = disconnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化蓝牙协议栈 */</span></span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动扫描 */</span></span><br><span class="line">    err = bt_le_scan_start(&amp;scan_param, device_found);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Scanning failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Scanning started\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_CENTRAL=y</span><br><span class="line">CONFIG_BT_GATT_CLIENT=y</span><br></pre></td></tr></table></figure><h2 id="BLE-外围设备"><a href="#BLE-外围设备" class="headerlink" title="BLE 外围设备"></a>BLE 外围设备</h2><p>这个示例展示了如何实现一个更复杂的 BLE 外围设备，提供心率服务。</p><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/conn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 心率服务 UUID */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_uuid_16</span> <span class="title">hrs_uuid</span> =</span> BT_UUID_INIT_16(<span class="number">0x180D</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 心率测量特征 UUID */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_uuid_16</span> <span class="title">hrm_uuid</span> =</span> BT_UUID_INIT_16(<span class="number">0x2A37</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 心率值 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> hrm_value[<span class="number">2</span>] = &#123; <span class="number">0x06</span>, <span class="number">0x40</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work_delayable</span> <span class="title">hrm_work</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当前连接 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_conn</span> *<span class="title">current_conn</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">read_hrs</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                       <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                       <span class="type">void</span> *buf, <span class="type">uint16_t</span> len, <span class="type">uint16_t</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> bt_gatt_attr_read(conn, attr, buf, len, offset, hrm_value,</span><br><span class="line">                            <span class="keyword">sizeof</span>(hrm_value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 心率服务定义 */</span></span><br><span class="line">BT_GATT_SERVICE_DEFINE(hrs_svc,</span><br><span class="line">    BT_GATT_PRIMARY_SERVICE(&amp;hrs_uuid),</span><br><span class="line">    BT_GATT_CHARACTERISTIC(&amp;hrm_uuid.uuid,</span><br><span class="line">                          BT_GATT_CHRC_READ | BT_GATT_CHRC_NOTIFY,</span><br><span class="line">                          BT_GATT_PERM_READ, read_hrs, <span class="literal">NULL</span>, hrm_value),</span><br><span class="line">    BT_GATT_CCC(<span class="literal">NULL</span>, BT_GATT_PERM_READ | BT_GATT_PERM_WRITE),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更新心率值 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">hrm_update</span><span class="params">(<span class="keyword">struct</span> k_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 模拟心率变化 */</span></span><br><span class="line">    hrm_value[<span class="number">1</span>]++;</span><br><span class="line">    <span class="keyword">if</span> (hrm_value[<span class="number">1</span>] &gt; <span class="number">160</span>) &#123;</span><br><span class="line">        hrm_value[<span class="number">1</span>] = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 通知连接的设备 */</span></span><br><span class="line">    bt_gatt_notify(<span class="literal">NULL</span>, &amp;hrs_svc.attrs[<span class="number">1</span>], hrm_value, <span class="keyword">sizeof</span>(hrm_value));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 重新调度工作 */</span></span><br><span class="line">    k_work_schedule(&amp;hrm_work, K_SECONDS(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connection failed (err 0x%02x)\n&quot;</span>, err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">        current_conn = bt_conn_ref(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 断开连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disconnected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Disconnected (reason 0x%02x)\n&quot;</span>, reason);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (current_conn) &#123;</span><br><span class="line">        bt_conn_unref(current_conn);</span><br><span class="line">        current_conn = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接回调结构体 */</span></span><br><span class="line">BT_CONN_CB_DEFINE(conn_callbacks) = &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">    .disconnected = disconnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 广播数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_UUID16_ALL, <span class="number">0x0d</span>, <span class="number">0x18</span>), <span class="comment">/* 心率服务 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化工作队列 */</span></span><br><span class="line">    k_work_init_delayable(&amp;hrm_work, hrm_update);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化蓝牙协议栈 */</span></span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动广播 */</span></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Advertising started\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动心率更新 */</span></span><br><span class="line">    k_work_schedule(&amp;hrm_work, K_SECONDS(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件-3"><a href="#配置文件-3" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr HRS&quot;</span><br><span class="line">CONFIG_BT_DEVICE_APPEARANCE=833</span><br><span class="line">CONFIG_BT_MAX_CONN=1</span><br></pre></td></tr></table></figure><h2 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译 BLE 广播示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/bluetooth/beacon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 GATT 服务示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/bluetooth/peripheral</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 BLE 中心设备示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/bluetooth/central</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 BLE 外围设备示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/bluetooth/peripheral_hr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录到开发板</span></span><br><span class="line">west flash</span><br></pre></td></tr></table></figure><h2 id="蓝牙-Mesh"><a href="#蓝牙-Mesh" class="headerlink" title="蓝牙 Mesh"></a>蓝牙 Mesh</h2><p>这个示例展示了如何实现一个基本的蓝牙 Mesh 节点，包括配置服务器模型和通用开关服务器模型。</p><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/mesh.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义模型操作码 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_MESH_MODEL_OP_GEN_ONOFF_GET BT_MESH_MODEL_OP_2(0x82, 0x01)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_MESH_MODEL_OP_GEN_ONOFF_SET BT_MESH_MODEL_OP_2(0x82, 0x02)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_MESH_MODEL_OP_GEN_ONOFF_SET_UNACK BT_MESH_MODEL_OP_2(0x82, 0x03)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_MESH_MODEL_OP_GEN_ONOFF_STATUS BT_MESH_MODEL_OP_2(0x82, 0x04)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LED GPIO 设备 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">led_dev</span> =</span> DEVICE_DT_GET(DT_ALIAS(led0));</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> led_state = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通用开关服务器模型操作回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gen_onoff_get</span><span class="params">(<span class="keyword">struct</span> bt_mesh_model *model,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> bt_mesh_msg_ctx *ctx,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> net_buf_simple *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    NET_BUF_SIMPLE_DEFINE(msg, <span class="number">2</span> + <span class="number">1</span> + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    bt_mesh_model_msg_init(&amp;msg, BT_MESH_MODEL_OP_GEN_ONOFF_STATUS);</span><br><span class="line">    net_buf_simple_add_u8(&amp;msg, led_state);</span><br><span class="line"></span><br><span class="line">    bt_mesh_model_send(model, ctx, &amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gen_onoff_set_unack</span><span class="params">(<span class="keyword">struct</span> bt_mesh_model *model,</span></span><br><span class="line"><span class="params">                              <span class="keyword">struct</span> bt_mesh_msg_ctx *ctx,</span></span><br><span class="line"><span class="params">                              <span class="keyword">struct</span> net_buf_simple *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> state = net_buf_simple_pull_u8(buf);</span><br><span class="line"></span><br><span class="line">    led_state = state;</span><br><span class="line">    gpio_pin_set(led_dev, DT_ALIAS_LED0_GPIOS_PIN, led_state);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gen_onoff_set</span><span class="params">(<span class="keyword">struct</span> bt_mesh_model *model,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> bt_mesh_msg_ctx *ctx,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> net_buf_simple *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    gen_onoff_set_unack(model, ctx, buf);</span><br><span class="line">    gen_onoff_get(model, ctx, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通用开关服务器模型操作 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_model_op</span> <span class="title">gen_onoff_op</span>[] =</span> &#123;</span><br><span class="line">    &#123; BT_MESH_MODEL_OP_GEN_ONOFF_GET, <span class="number">0</span>, gen_onoff_get &#125;,</span><br><span class="line">    &#123; BT_MESH_MODEL_OP_GEN_ONOFF_SET, <span class="number">2</span>, gen_onoff_set &#125;,</span><br><span class="line">    &#123; BT_MESH_MODEL_OP_GEN_ONOFF_SET_UNACK, <span class="number">2</span>, gen_onoff_set_unack &#125;,</span><br><span class="line">    BT_MESH_MODEL_OP_END,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根元素模型 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_model</span> <span class="title">root_models</span>[] =</span> &#123;</span><br><span class="line">    BT_MESH_MODEL_CFG_SRV,</span><br><span class="line">    BT_MESH_MODEL(BT_MESH_MODEL_ID_GEN_ONOFF_SRV, gen_onoff_op, <span class="literal">NULL</span>, <span class="literal">NULL</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根元素 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_elem</span> <span class="title">elements</span>[] =</span> &#123;</span><br><span class="line">    BT_MESH_ELEM(<span class="number">0</span>, root_models, BT_MESH_MODEL_NONE),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 节点组成 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_comp</span> <span class="title">comp</span> =</span> &#123;</span><br><span class="line">    .cid = CONFIG_BT_COMPANY_ID,</span><br><span class="line">    .elem = elements,</span><br><span class="line">    .elem_count = ARRAY_SIZE(elements),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置完成回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">prov_complete</span><span class="params">(<span class="type">uint16_t</span> net_idx, <span class="type">uint16_t</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Provisioning completed\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重置回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">prov_reset</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置参数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_prov</span> <span class="title">prov</span> =</span> &#123;</span><br><span class="line">    .uuid = dev_uuid,</span><br><span class="line">    .output_size = <span class="number">4</span>,</span><br><span class="line">    .output_actions = BT_MESH_DISPLAY_NUMBER,</span><br><span class="line">    .output_number = output_number,</span><br><span class="line">    .complete = prov_complete,</span><br><span class="line">    .reset = prov_reset,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化 LED */</span></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(led_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;LED device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gpio_pin_configure(led_dev, DT_ALIAS_LED0_GPIOS_PIN, GPIO_OUTPUT_ACTIVE | DT_ALIAS_LED0_GPIOS_FLAGS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化蓝牙协议栈 */</span></span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化 Mesh */</span></span><br><span class="line">    err = bt_mesh_init(&amp;prov, &amp;comp);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Initializing mesh failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启用配置 */</span></span><br><span class="line">    bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Mesh initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件-4"><a href="#配置文件-4" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_MESH=y</span><br><span class="line">CONFIG_BT_MESH_RELAY=y</span><br><span class="line">CONFIG_BT_MESH_PB_ADV=y</span><br><span class="line">CONFIG_BT_MESH_PB_GATT=y</span><br><span class="line">CONFIG_BT_MESH_LOW_POWER=n</span><br><span class="line">CONFIG_BT_MESH_FRIEND=n</span><br><span class="line">CONFIG_BT_MESH_GATT_PROXY=y</span><br><span class="line"></span><br><span class="line">CONFIG_BT_MESH_MODEL_GROUP_COUNT=1</span><br><span class="line">CONFIG_BT_MESH_MODEL_SUBSCRIBE_GROUP_COUNT=1</span><br><span class="line">CONFIG_BT_MESH_MODEL_EXTENSIONS=y</span><br><span class="line">CONFIG_BT_MESH_SUBNET_COUNT=1</span><br><span class="line">CONFIG_BT_MESH_APP_KEY_COUNT=1</span><br><span class="line">CONFIG_BT_MESH_IV_UPDATE_TEST=y</span><br><span class="line"></span><br><span class="line">CONFIG_GPIO=y</span><br></pre></td></tr></table></figure><h2 id="编译和运行-1"><a href="#编译和运行-1" class="headerlink" title="编译和运行"></a>编译和运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译 BLE 广播示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/bluetooth/beacon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 GATT 服务示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/bluetooth/peripheral</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 BLE 中心设备示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/bluetooth/central</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 BLE 外围设备示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/bluetooth/peripheral_hr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译蓝牙 Mesh 示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/bluetooth/mesh/onoff_server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录到开发板</span></span><br><span class="line">west flash</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>蓝牙协议栈初始化</strong></p><ul><li>始终检查 <code>bt_enable()</code> 的返回值</li><li>在使用任何蓝牙功能之前确保协议栈已初始化</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>对所有 API 调用进行错误检查</li><li>实现适当的错误恢复机制</li></ul></li><li><p><strong>连接管理</strong></p><ul><li>正确处理连接和断开连接事件</li><li>在断开连接时释放资源</li></ul></li><li><p><strong>GATT 服务设计</strong></p><ul><li>遵循蓝牙 SIG 定义的标准服务和特征</li><li>为自定义服务使用唯一的 UUID</li></ul></li><li><p><strong>广播数据</strong></p><ul><li>包含必要的信息以便于发现</li><li>遵循蓝牙规范中的广播数据格式</li></ul></li><li><p><strong>电源管理</strong></p><ul><li>使用适当的连接参数</li><li>在不需要时禁用蓝牙功能</li></ul></li><li><p><strong>安全性</strong></p><ul><li>使用加密和身份验证</li><li>实现适当的配对机制</li></ul></li><li><p><strong>Mesh 网络</strong></p><ul><li>正确配置节点功能（中继、低功耗、好友节点等）</li><li>实现适当的配置服务器模型</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>设备不可见</strong></p><ul><li>检查广播数据和参数</li><li>验证蓝牙控制器是否正常工作</li></ul></li><li><p><strong>连接失败</strong></p><ul><li>检查安全要求</li><li>验证连接参数</li></ul></li><li><p><strong>GATT 操作失败</strong></p><ul><li>检查权限设置</li><li>验证特征属性</li></ul></li><li><p><strong>Mesh 节点配置失败</strong></p><ul><li>检查配置服务器模型实现</li><li>验证配置过程中的安全性</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>优化连接间隔和广播间隔</li><li>减少不必要的 GATT 操作</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些蓝牙示例展示了 Zephyr RTOS 中蓝牙功能的多个方面，包括：</p><ol><li>基本的 BLE 广播</li><li>GATT 服务的实现</li><li>BLE 中心和外围设备的角色</li><li>蓝牙 Mesh 网络的基本实现</li></ol><p>通过这些示例，您可以学习如何：</p><ul><li>初始化和配置蓝牙协议栈</li><li>实现 BLE 广播和扫描</li><li>创建和使用 GATT 服务</li><li>管理 BLE 连接</li><li>设置基本的蓝牙 Mesh 节点</li></ul><p>这些示例可以作为开发蓝牙应用的起点，您可以根据需要修改和扩展它们。记住要根据您的硬件和应用需求调整配置，并始终关注安全性和性能优化。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>interrupt</title>
      <link href="/2025/03/21/nodic/zephyr/examples/interrupt/"/>
      <url>/2025/03/21/nodic/zephyr/examples/interrupt/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-中断处理示例"><a href="#Zephyr-中断处理示例" class="headerlink" title="Zephyr 中断处理示例"></a>Zephyr 中断处理示例</h1><h2 id="1-中断配置"><a href="#1-中断配置" class="headerlink" title="1. 中断配置"></a>1. 中断配置</h2><h3 id="1-1-基础配置-prj-conf"><a href="#1-1-基础配置-prj-conf" class="headerlink" title="1.1 基础配置 (prj.conf)"></a>1.1 基础配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 中断配置</span><br><span class="line">CONFIG_IRQ_OFFLOAD=y</span><br><span class="line">CONFIG_GEN_IRQ_VECTOR_TABLE=y</span><br><span class="line"></span><br><span class="line"># GPIO中断配置（用于示例）</span><br><span class="line">CONFIG_GPIO=y</span><br><span class="line">CONFIG_GPIO_INTERRUPT=y</span><br></pre></td></tr></table></figure><h2 id="2-GPIO中断示例"><a href="#2-GPIO中断示例" class="headerlink" title="2. GPIO中断示例"></a>2. GPIO中断示例</h2><h3 id="2-1-基本GPIO中断"><a href="#2-1-基本GPIO中断" class="headerlink" title="2.1 基本GPIO中断"></a>2.1 基本GPIO中断</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义GPIO设备和引脚 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">button</span> =</span> GPIO_DT_SPEC_GET(DT_NODELABEL(button0), gpios);</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">button_cb_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中断回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">button_pressed_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                           <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">                           <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Button pressed! Pin: %d\n&quot;</span>, button.pin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(button.port)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error: button device %s is not ready\n&quot;</span>, button.port-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置GPIO为输入，启用上拉和中断 */</span></span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;button,</span><br><span class="line">                              GPIO_INPUT | GPIO_PULL_UP |</span><br><span class="line">                              GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error %d: failed to configure button\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化GPIO回调 */</span></span><br><span class="line">    gpio_init_callback(&amp;button_cb_data,</span><br><span class="line">                      button_pressed_callback,</span><br><span class="line">                      BIT(button.pin));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加回调 */</span></span><br><span class="line">    ret = gpio_add_callback(button.port, &amp;button_cb_data);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error %d: failed to add callback\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    ret = gpio_pin_interrupt_configure_dt(&amp;button, GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error %d: failed to configure interrupt\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Press the button\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_msleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-中断优先级"><a href="#3-中断优先级" class="headerlink" title="3. 中断优先级"></a>3. 中断优先级</h2><h3 id="3-1-优先级配置示例"><a href="#3-1-优先级配置示例" class="headerlink" title="3.1 优先级配置示例"></a>3.1 优先级配置示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/irq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义IRQ处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_isr</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *unused)</span></span><br><span class="line">&#123;</span><br><span class="line">    ARG_UNUSED(unused);</span><br><span class="line">    printk(<span class="string">&quot;ISR executed!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置中断 */</span></span><br><span class="line">    IRQ_CONNECT(MY_IRQ_NUM,    <span class="comment">/* IRQ号 */</span></span><br><span class="line">                <span class="number">0</span>,             <span class="comment">/* 优先级 */</span></span><br><span class="line">                my_isr,       <span class="comment">/* ISR */</span></span><br><span class="line">                <span class="literal">NULL</span>,         <span class="comment">/* ISR参数 */</span></span><br><span class="line">                <span class="number">0</span>);           <span class="comment">/* 标志 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    irq_enable(MY_IRQ_NUM);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-中断上下文"><a href="#4-中断上下文" class="headerlink" title="4. 中断上下文"></a>4. 中断上下文</h2><h3 id="4-1-中断安全代码"><a href="#4-1-中断安全代码" class="headerlink" title="4.1 中断安全代码"></a>4.1 中断安全代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/irq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 共享数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">volatile</span> <span class="type">int</span> shared_data;</span><br><span class="line"><span class="type">static</span> <span class="title function_">K_MUTEX_DEFINE</span><span class="params">(data_mutex)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中断处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">data_isr</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *unused)</span></span><br><span class="line">&#123;</span><br><span class="line">    ARG_UNUSED(unused);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 在中断上下文中安全地修改数据 */</span></span><br><span class="line">    shared_data++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程上下文函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_function</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> local_copy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 在线程上下文中安全地访问数据 */</span></span><br><span class="line">    k_mutex_lock(&amp;data_mutex, K_FOREVER);</span><br><span class="line">    local_copy = shared_data;</span><br><span class="line">    k_mutex_unlock(&amp;data_mutex);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Data value: %d\n&quot;</span>, local_copy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-嵌套中断"><a href="#5-嵌套中断" class="headerlink" title="5. 嵌套中断"></a>5. 嵌套中断</h2><h3 id="5-1-嵌套中断示例"><a href="#5-1-嵌套中断示例" class="headerlink" title="5.1 嵌套中断示例"></a>5.1 嵌套中断示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/irq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高优先级中断处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">high_priority_isr</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *unused)</span></span><br><span class="line">&#123;</span><br><span class="line">    ARG_UNUSED(unused);</span><br><span class="line">    printk(<span class="string">&quot;High priority ISR\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 低优先级中断处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">low_priority_isr</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *unused)</span></span><br><span class="line">&#123;</span><br><span class="line">    ARG_UNUSED(unused);</span><br><span class="line">    printk(<span class="string">&quot;Low priority ISR start\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 模拟一些处理时间 */</span></span><br><span class="line">    k_busy_wait(<span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Low priority ISR end\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置中断优先级 */</span></span><br><span class="line">    IRQ_CONNECT(HIGH_PRIORITY_IRQ, <span class="number">0</span>, high_priority_isr, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    IRQ_CONNECT(LOW_PRIORITY_IRQ, <span class="number">1</span>, low_priority_isr, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    irq_enable(HIGH_PRIORITY_IRQ);</span><br><span class="line">    irq_enable(LOW_PRIORITY_IRQ);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-软件中断"><a href="#6-软件中断" class="headerlink" title="6. 软件中断"></a>6. 软件中断</h2><h3 id="6-1-软件中断示例"><a href="#6-1-软件中断示例" class="headerlink" title="6.1 软件中断示例"></a>6.1 软件中断示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/irq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义软件中断处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">soft_isr</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *unused)</span></span><br><span class="line">&#123;</span><br><span class="line">    ARG_UNUSED(unused);</span><br><span class="line">    printk(<span class="string">&quot;Software interrupt executed\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置软件中断 */</span></span><br><span class="line">    IRQ_CONNECT(CONFIG_IRQ_OFFLOAD_IRQ, <span class="number">0</span>, soft_isr, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    irq_enable(CONFIG_IRQ_OFFLOAD_IRQ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 触发软件中断 */</span></span><br><span class="line">    irq_offload(soft_isr, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-中断延迟处理"><a href="#7-中断延迟处理" class="headerlink" title="7. 中断延迟处理"></a>7. 中断延迟处理</h2><h3 id="7-1-工作队列延迟处理"><a href="#7-1-工作队列延迟处理" class="headerlink" title="7.1 工作队列延迟处理"></a>7.1 工作队列延迟处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义工作队列 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work_q</span> <span class="title">isr_work_q</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="title function_">K_THREAD_STACK_DEFINE</span><span class="params">(isr_work_q_stack, <span class="number">1024</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义工作项 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work</span> <span class="title">isr_work</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 工作处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">isr_work_handler</span><span class="params">(<span class="keyword">struct</span> k_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 在线程上下文中处理中断事件 */</span></span><br><span class="line">    printk(<span class="string">&quot;Processing interrupt event\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中断处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">gpio_isr</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                    <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">                    <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 提交工作到工作队列 */</span></span><br><span class="line">    k_work_submit_to_queue(&amp;isr_work_q, &amp;isr_work);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化工作队列 */</span></span><br><span class="line">    k_work_queue_init(&amp;isr_work_q);</span><br><span class="line">    k_work_queue_start(&amp;isr_work_q,</span><br><span class="line">                      isr_work_q_stack,</span><br><span class="line">                      K_THREAD_STACK_SIZEOF(isr_work_q_stack),</span><br><span class="line">                      K_PRIO_PREEMPT(<span class="number">10</span>),</span><br><span class="line">                      <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化工作项 */</span></span><br><span class="line">    k_work_init(&amp;isr_work, isr_work_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置GPIO中断 */</span></span><br><span class="line">    <span class="comment">// ... GPIO配置代码 ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-中断调试"><a href="#8-中断调试" class="headerlink" title="8. 中断调试"></a>8. 中断调试</h2><h3 id="8-1-中断调试技巧"><a href="#8-1-中断调试技巧" class="headerlink" title="8.1 中断调试技巧"></a>8.1 中断调试技巧</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/irq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中断统计结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">irq_stats</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> count;</span><br><span class="line">    <span class="type">uint32_t</span> last_time;</span><br><span class="line">    <span class="type">uint32_t</span> max_latency;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">irq_stats</span> <span class="title">stats</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带调试信息的中断处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">debug_isr</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *unused)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> current_time = k_cycle_get_32();</span><br><span class="line">    <span class="type">uint32_t</span> latency;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 更新统计信息 */</span></span><br><span class="line">    stats.count++;</span><br><span class="line">    latency = current_time - stats.last_time;</span><br><span class="line">    <span class="keyword">if</span> (latency &gt; stats.max_latency) &#123;</span><br><span class="line">        stats.max_latency = latency;</span><br><span class="line">    &#125;</span><br><span class="line">    stats.last_time = current_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印调试信息 */</span></span><br><span class="line">    printk(<span class="string">&quot;IRQ triggered: count=%u, latency=%u cycles\n&quot;</span>,</span><br><span class="line">           stats.count, latency);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打印中断统计信息 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_irq_stats</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;IRQ Statistics:\n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;Total count: %u\n&quot;</span>, stats.count);</span><br><span class="line">    printk(<span class="string">&quot;Max latency: %u cycles\n&quot;</span>, stats.max_latency);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-中断锁定检测"><a href="#8-2-中断锁定检测" class="headerlink" title="8.2 中断锁定检测"></a>8.2 中断锁定检测</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_irq_lock</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key;</span><br><span class="line">    <span class="type">bool</span> was_locked;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查中断是否被锁定 */</span></span><br><span class="line">    was_locked = irq_lock_is_locked();</span><br><span class="line">    <span class="keyword">if</span> (was_locked) &#123;</span><br><span class="line">        printk(<span class="string">&quot;WARNING: IRQs are locked!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 安全地锁定/解锁中断 */</span></span><br><span class="line">    key = irq_lock();</span><br><span class="line">    <span class="comment">/* 临界区代码 */</span></span><br><span class="line">    irq_unlock(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>networking</title>
      <link href="/2025/03/21/nodic/zephyr/examples/networking/"/>
      <url>/2025/03/21/nodic/zephyr/examples/networking/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-网络示例"><a href="#Zephyr-网络示例" class="headerlink" title="Zephyr 网络示例"></a>Zephyr 网络示例</h1><p>本文档提供了 Zephyr RTOS 的网络编程示例，包括 TCP&#x2F;IP 通信、UDP 通信、HTTP 客户端&#x2F;服务器、MQTT 客户端和 CoAP 通信等内容。</p><h2 id="TCP-IP-通信"><a href="#TCP-IP-通信" class="headerlink" title="TCP&#x2F;IP 通信"></a>TCP&#x2F;IP 通信</h2><h3 id="TCP-服务器示例"><a href="#TCP-服务器示例" class="headerlink" title="TCP 服务器示例"></a>TCP 服务器示例</h3><p>这个示例展示了如何创建一个简单的 TCP 服务器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 4242</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> serv_sock, client_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="type">char</span> rx_buffer[BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> received;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    serv_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">             <span class="keyword">sizeof</span>(server_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind: %d\n&quot;</span>, errno);</span><br><span class="line">        close(serv_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 监听连接 */</span></span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to listen: %d\n&quot;</span>, errno);</span><br><span class="line">        close(serv_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;TCP server listening on port %d\n&quot;</span>, PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 接受客户端连接 */</span></span><br><span class="line">        client_sock = accept(serv_sock, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">                           &amp;client_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (client_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to accept: %d\n&quot;</span>, errno);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printk(<span class="string">&quot;Client connected\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 接收数据 */</span></span><br><span class="line">        received = recv(client_sock, rx_buffer, <span class="keyword">sizeof</span>(rx_buffer) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (received &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            rx_buffer[received] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            printk(<span class="string">&quot;Received: %s\n&quot;</span>, rx_buffer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 发送响应 */</span></span><br><span class="line">            send(client_sock, <span class="string">&quot;Message received\n&quot;</span>, <span class="number">16</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        close(client_sock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TCP-客户端示例"><a href="#TCP-客户端示例" class="headerlink" title="TCP 客户端示例"></a>TCP 客户端示例</h3><p>这个示例展示了如何创建一个 TCP 客户端连接服务器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 4242</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_ADDR <span class="string">&quot;192.168.1.100&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> tx_buffer[] = <span class="string">&quot;Hello from Zephyr TCP client!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> rx_buffer[BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> received;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_port = htons(SERVER_PORT);</span><br><span class="line">    inet_pton(AF_INET, SERVER_ADDR, &amp;server_addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接服务器 */</span></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">                <span class="keyword">sizeof</span>(server_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to connect: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Connected to server\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    <span class="keyword">if</span> (send(sock, tx_buffer, <span class="built_in">strlen</span>(tx_buffer), <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to send: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 接收响应 */</span></span><br><span class="line">    received = recv(sock, rx_buffer, <span class="keyword">sizeof</span>(rx_buffer) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (received &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        rx_buffer[received] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Received: %s\n&quot;</span>, rx_buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UDP-通信"><a href="#UDP-通信" class="headerlink" title="UDP 通信"></a>UDP 通信</h2><h3 id="UDP-服务器示例"><a href="#UDP-服务器示例" class="headerlink" title="UDP 服务器示例"></a>UDP 服务器示例</h3><p>这个示例展示了如何创建一个 UDP 服务器接收数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 5683</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="type">char</span> rx_buffer[BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> received;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建 UDP 套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">             <span class="keyword">sizeof</span>(server_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;UDP server listening on port %d\n&quot;</span>, PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 接收数据 */</span></span><br><span class="line">        received = recvfrom(sock, rx_buffer, <span class="keyword">sizeof</span>(rx_buffer) - <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">                          (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;client_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (received &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            rx_buffer[received] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            printk(<span class="string">&quot;Received from client: %s\n&quot;</span>, rx_buffer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 发送响应 */</span></span><br><span class="line">            sendto(sock, <span class="string">&quot;ACK&quot;</span>, <span class="number">3</span>, <span class="number">0</span>,</span><br><span class="line">                   (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, client_addr_len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP-客户端示例"><a href="#UDP-客户端示例" class="headerlink" title="UDP 客户端示例"></a>UDP 客户端示例</h3><p>这个示例展示了如何创建一个 UDP 客户端发送数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 5683</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_ADDR <span class="string">&quot;192.168.1.100&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> tx_buffer[] = <span class="string">&quot;Hello from Zephyr UDP client!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> rx_buffer[BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> received;</span><br><span class="line">    <span class="type">socklen_t</span> server_addr_len = <span class="keyword">sizeof</span>(server_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建 UDP 套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_port = htons(SERVER_PORT);</span><br><span class="line">    inet_pton(AF_INET, SERVER_ADDR, &amp;server_addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    <span class="keyword">if</span> (sendto(sock, tx_buffer, <span class="built_in">strlen</span>(tx_buffer), <span class="number">0</span>,</span><br><span class="line">               (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to send: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 接收响应 */</span></span><br><span class="line">    received = recvfrom(sock, rx_buffer, <span class="keyword">sizeof</span>(rx_buffer) - <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">                       (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, &amp;server_addr_len);</span><br><span class="line">    <span class="keyword">if</span> (received &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        rx_buffer[received] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Server response: %s\n&quot;</span>, rx_buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP-客户端"><a href="#HTTP-客户端" class="headerlink" title="HTTP 客户端"></a>HTTP 客户端</h2><p>这个示例展示了如何创建一个 HTTP 客户端发送请求。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/http/client.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HTTP_PORT 80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* HTTP 请求回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">http_response_cb</span><span class="params">(<span class="keyword">struct</span> http_response *rsp,</span></span><br><span class="line"><span class="params">                           <span class="keyword">enum</span> http_final_call final_data,</span></span><br><span class="line"><span class="params">                           <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (final_data == HTTP_DATA_MORE) &#123;</span><br><span class="line">        printk(<span class="string">&quot;%.*s&quot;</span>, rsp-&gt;data_len, (<span class="type">char</span> *)rsp-&gt;recv_buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">http_request</span> <span class="title">req</span>;</span></span><br><span class="line">    <span class="type">char</span> response[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 HTTP 请求 */</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;req, <span class="number">0</span>, <span class="keyword">sizeof</span>(req));</span><br><span class="line">    req.method = HTTP_GET;</span><br><span class="line">    req.url = <span class="string">&quot;http://example.com/&quot;</span>;</span><br><span class="line">    req.host = <span class="string">&quot;example.com&quot;</span>;</span><br><span class="line">    req.protocol = <span class="string">&quot;HTTP/1.1&quot;</span>;</span><br><span class="line">    req.response = response;</span><br><span class="line">    req.response_size = <span class="keyword">sizeof</span>(response);</span><br><span class="line">    req.header_fields = <span class="literal">NULL</span>;</span><br><span class="line">    req.payload = <span class="literal">NULL</span>;</span><br><span class="line">    req.payload_len = <span class="number">0</span>;</span><br><span class="line">    req.recv_buf = response;</span><br><span class="line">    req.recv_buf_len = <span class="keyword">sizeof</span>(response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送 HTTP 请求 */</span></span><br><span class="line">    ret = http_client_req(&amp;req, http_response_cb, <span class="number">5000</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to send HTTP request: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MQTT-客户端"><a href="#MQTT-客户端" class="headerlink" title="MQTT 客户端"></a>MQTT 客户端</h2><p>这个示例展示了如何创建一个 MQTT 客户端连接到代理服务器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/mqtt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MQTT_BROKER_ADDR <span class="string">&quot;mqtt.example.com&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MQTT_BROKER_PORT 1883</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MQTT_CLIENT_ID <span class="string">&quot;zephyr_mqtt_client&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MQTT_TOPIC <span class="string">&quot;test/topic&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* MQTT 客户端上下文 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mqtt_client</span> <span class="title">client</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> rx_buffer[<span class="number">256</span>];</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> tx_buffer[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* MQTT 事件回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">mqtt_evt_handler</span><span class="params">(<span class="keyword">struct</span> mqtt_client *client,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="keyword">struct</span> mqtt_evt *evt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (evt-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> MQTT_EVT_CONNACK:</span><br><span class="line">        <span class="keyword">if</span> (evt-&gt;result == <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;MQTT client connected\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> MQTT_EVT_DISCONNECT:</span><br><span class="line">        printk(<span class="string">&quot;MQTT client disconnected\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> MQTT_EVT_PUBLISH:</span><br><span class="line">        printk(<span class="string">&quot;MQTT PUBLISH received\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        printk(<span class="string">&quot;MQTT event: %d\n&quot;</span>, evt-&gt;type);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">broker</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置代理服务器地址 */</span></span><br><span class="line">    broker.sin_family = AF_INET;</span><br><span class="line">    broker.sin_port = htons(MQTT_BROKER_PORT);</span><br><span class="line">    inet_pton(AF_INET, MQTT_BROKER_ADDR, &amp;broker.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化 MQTT 客户端 */</span></span><br><span class="line">    mqtt_client_init(&amp;client);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 MQTT 客户端 */</span></span><br><span class="line">    client.broker = (<span class="keyword">struct</span> sockaddr *)&amp;broker;</span><br><span class="line">    client.evt_cb = mqtt_evt_handler;</span><br><span class="line">    client.client_id.utf8 = (<span class="type">uint8_t</span> *)MQTT_CLIENT_ID;</span><br><span class="line">    client.client_id.size = <span class="built_in">strlen</span>(MQTT_CLIENT_ID);</span><br><span class="line">    client.password = <span class="literal">NULL</span>;</span><br><span class="line">    client.user_name = <span class="literal">NULL</span>;</span><br><span class="line">    client.protocol_version = MQTT_VERSION_3_1_1;</span><br><span class="line">    client.rx_buf = rx_buffer;</span><br><span class="line">    client.rx_buf_size = <span class="keyword">sizeof</span>(rx_buffer);</span><br><span class="line">    client.tx_buf = tx_buffer;</span><br><span class="line">    client.tx_buf_size = <span class="keyword">sizeof</span>(tx_buffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接到代理服务器 */</span></span><br><span class="line">    ret = mqtt_connect(&amp;client);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to connect to MQTT broker: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发布消息 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mqtt_publish_param</span> <span class="title">param</span> =</span> &#123;</span><br><span class="line">        .message.topic.qos = MQTT_QOS_1_AT_LEAST_ONCE,</span><br><span class="line">        .message.topic.topic.utf8 = (<span class="type">uint8_t</span> *)MQTT_TOPIC,</span><br><span class="line">        .message.topic.topic.size = <span class="built_in">strlen</span>(MQTT_TOPIC),</span><br><span class="line">        .message.payload.data = <span class="string">&quot;Hello from Zephyr MQTT client!&quot;</span>,</span><br><span class="line">        .message.payload.len = <span class="number">29</span>,</span><br><span class="line">        .message_id = <span class="number">1</span>,</span><br><span class="line">        .dup_flag = <span class="number">0</span>,</span><br><span class="line">        .retain_flag = <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ret = mqtt_publish(&amp;client, &amp;param);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to publish message: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CoAP-通信"><a href="#CoAP-通信" class="headerlink" title="CoAP 通信"></a>CoAP 通信</h2><p>这个示例展示了如何使用 CoAP 协议进行通信。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/coap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COAP_PORT 5683</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_COAP_MSG_LEN 256</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* CoAP 资源处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">handle_get_temperature</span><span class="params">(<span class="keyword">struct</span> coap_resource *resource,</span></span><br><span class="line"><span class="params">                                <span class="keyword">struct</span> coap_packet *request,</span></span><br><span class="line"><span class="params">                                <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addr_len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> payload[] = <span class="string">&quot;23.5&quot;</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">coap_packet</span> <span class="title">response</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> *data;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    data = (<span class="type">uint8_t</span> *)k_malloc(MAX_COAP_MSG_LEN);</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = coap_packet_init(&amp;response, data, MAX_COAP_MSG_LEN,</span><br><span class="line">                        COAP_VERSION_1, COAP_TYPE_ACK,</span><br><span class="line">                        coap_header_get_token_len(request),</span><br><span class="line">                        coap_header_get_token(request),</span><br><span class="line">                        COAP_RESPONSE_CODE_CONTENT, </span><br><span class="line">                        coap_header_get_id(request));</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = coap_packet_append_payload_marker(&amp;response);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = coap_packet_append_payload(&amp;response, payload, <span class="keyword">sizeof</span>(payload) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = sendto(resource-&gt;sock, data, response.offset, <span class="number">0</span>, addr, addr_len);</span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line">    k_free(data);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CoAP 资源定义 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> temperature_path[] = &#123; <span class="string">&quot;temperature&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">coap_resource</span> <span class="title">temperature_resource</span> =</span> &#123;</span><br><span class="line">    .get = handle_get_temperature,</span><br><span class="line">    .path = temperature_path</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> received;</span><br><span class="line">    <span class="type">uint8_t</span> buffer[MAX_COAP_MSG_LEN];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建 UDP 套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    addr.sin_port = htons(COAP_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置资源的套接字 */</span></span><br><span class="line">    temperature_resource.sock = sock;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;CoAP server started on port %d\n&quot;</span>, COAP_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">client_addr</span>;</span></span><br><span class="line">        <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">coap_packet</span> <span class="title">request</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">coap_option</span> <span class="title">options</span>[16];</span></span><br><span class="line">        <span class="type">uint8_t</span> opt_num = <span class="number">16U</span>;</span><br><span class="line"></span><br><span class="line">        received = recvfrom(sock, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>,</span><br><span class="line">                          &amp;client_addr, &amp;client_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (received &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (coap_packet_parse(&amp;request, buffer, received, options, opt_num) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 处理请求 */</span></span><br><span class="line">        <span class="keyword">if</span> (coap_handle_request(&amp;request, &amp;temperature_resource,</span><br><span class="line">                              &amp;client_addr, client_addr_len) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to handle CoAP request\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>要运行这些网络示例，需要在 <code>prj.conf</code> 中添加相应的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 网络基础配置</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line">CONFIG_NET_UDP=y</span><br><span class="line"></span><br><span class="line"># 网络应用配置</span><br><span class="line">CONFIG_NET_SOCKETS=y</span><br><span class="line">CONFIG_NET_SOCKETS_POSIX_NAMES=y</span><br><span class="line"></span><br><span class="line"># HTTP 客户端配置</span><br><span class="line">CONFIG_HTTP_CLIENT=y</span><br><span class="line">CONFIG_HTTP_PARSER=y</span><br><span class="line"></span><br><span class="line"># MQTT 配置</span><br><span class="line">CONFIG_MQTT_LIB=y</span><br><span class="line">CONFIG_MQTT_LIB_TLS=n</span><br><span class="line"></span><br><span class="line"># CoAP 配置</span><br><span class="line">CONFIG_COAP=y</span><br><span class="line"></span><br><span class="line"># 网络缓冲区配置</span><br><span class="line">CONFIG_NET_BUF_RX_COUNT=16</span><br><span class="line">CONFIG_NET_BUF_TX_COUNT=16</span><br><span class="line">CONFIG_NET_PKT_RX_COUNT=16</span><br><span class="line">CONFIG_NET_PKT_TX_COUNT=16</span><br><span class="line"></span><br><span class="line"># 日志配置</span><br><span class="line">CONFIG_NET_LOG=y</span><br><span class="line">CONFIG_NET_SHELL=y</span><br></pre></td></tr></table></figure><h2 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译 TCP 示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/net/sockets/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 UDP 示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/net/sockets/udp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 HTTP 客户端示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/net/http_client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 MQTT 客户端示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/net/mqtt_publisher</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 CoAP 示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/net/coap_server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录到开发板</span></span><br><span class="line">west flash</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些网络示例展示了 Zephyr RTOS 中不同网络协议的使用方法。通过这些示例，您可以学习如何：</p><ol><li>使用套接字 API 进行 TCP&#x2F;UDP 通信</li><li>实现 HTTP 客户端发送请求</li><li>创建 MQTT 客户端与代理服务器通信</li><li>使用 CoAP 协议进行物联网通信</li></ol><p>这些示例可以作为开发网络应用的起点，您可以根据需要修改和扩展它们。记住要根据您的网络环境配置正确的网络参数，并确保网络连接可用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sensors</title>
      <link href="/2025/03/21/nodic/zephyr/examples/sensors/"/>
      <url>/2025/03/21/nodic/zephyr/examples/sensors/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-传感器示例"><a href="#Zephyr-传感器示例" class="headerlink" title="Zephyr 传感器示例"></a>Zephyr 传感器示例</h1><p>本文档提供了 Zephyr RTOS 中使用各种传感器的示例代码，包括温度传感器、加速度传感器、压力传感器、光线传感器以及传感器数据融合等内容。</p><h2 id="温度传感器"><a href="#温度传感器" class="headerlink" title="温度传感器"></a>温度传感器</h2><p>这个示例展示了如何读取温度传感器数据。</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET_ANY(ti_tmp116);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">temp</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Device %s is not ready\n&quot;</span>, dev-&gt;name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 获取温度数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (sensor_sample_fetch(dev) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to fetch sample\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &amp;temp) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to get temperature\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 打印温度值 */</span></span><br><span class="line">        printk(<span class="string">&quot;Temperature: %.2f °C\n&quot;</span>,</span><br><span class="line">               sensor_value_to_double(&amp;temp));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 延时 1 秒 */</span></span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_SENSOR=y</span><br><span class="line">CONFIG_TMP116=y</span><br></pre></td></tr></table></figure><p><strong>overlay-tmp116.conf</strong>:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">        tempsensor0 = <span class="variable">&amp;tmp116</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">    tmp116:</span> <span class="title class_">tmp116@48</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;ti,tmp116&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x48</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="加速度传感器"><a href="#加速度传感器" class="headerlink" title="加速度传感器"></a>加速度传感器</h2><p>这个示例展示了如何读取加速度传感器数据。</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 触发回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">trigger_handler</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="keyword">struct</span> sensor_trigger *trig)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">accel</span>[3];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取加速度数据 */</span></span><br><span class="line">    <span class="keyword">if</span> (sensor_sample_fetch(dev) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to fetch sample\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sensor_channel_get(dev, SENSOR_CHAN_ACCEL_XYZ, accel) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to get acceleration\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印加速度值 */</span></span><br><span class="line">    printk(<span class="string">&quot;x: %.2f , y: %.2f , z: %.2f (m/s^2)\n&quot;</span>,</span><br><span class="line">           sensor_value_to_double(&amp;accel[<span class="number">0</span>]),</span><br><span class="line">           sensor_value_to_double(&amp;accel[<span class="number">1</span>]),</span><br><span class="line">           sensor_value_to_double(&amp;accel[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET_ANY(st_lis2dh);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_trigger</span> <span class="title">trig</span> =</span> &#123;</span><br><span class="line">        .type = SENSOR_TRIG_DATA_READY,</span><br><span class="line">        .chan = SENSOR_CHAN_ACCEL_XYZ,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Device %s is not ready\n&quot;</span>, dev-&gt;name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置触发器 */</span></span><br><span class="line">    <span class="keyword">if</span> (sensor_trigger_set(dev, &amp;trig, trigger_handler) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set trigger\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_SENSOR=y</span><br><span class="line">CONFIG_LIS2DH=y</span><br></pre></td></tr></table></figure><p><strong>overlay-lis2dh.conf</strong>:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">        accel0 = <span class="variable">&amp;lis2dh</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">    lis2dh:</span> <span class="title class_">lis2dh@18</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;st,lis2dh&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x18</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">irq-gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">3</span> GPIO_ACTIVE_HIGH&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="压力传感器"><a href="#压力传感器" class="headerlink" title="压力传感器"></a>压力传感器</h2><p>这个示例展示了如何读取压力传感器数据。</p><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET_ANY(bosch_bmp280);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">pressure</span>, <span class="title">temp</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Device %s is not ready\n&quot;</span>, dev-&gt;name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 获取压力和温度数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (sensor_sample_fetch(dev) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to fetch sample\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sensor_channel_get(dev, SENSOR_CHAN_PRESS, &amp;pressure) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to get pressure\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &amp;temp) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to get temperature\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 打印数据 */</span></span><br><span class="line">        printk(<span class="string">&quot;Pressure: %.2f kPa\n&quot;</span>,</span><br><span class="line">               sensor_value_to_double(&amp;pressure));</span><br><span class="line">        printk(<span class="string">&quot;Temperature: %.2f °C\n&quot;</span>,</span><br><span class="line">               sensor_value_to_double(&amp;temp));</span><br><span class="line"></span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_SENSOR=y</span><br><span class="line">CONFIG_BMP280=y</span><br></pre></td></tr></table></figure><p><strong>overlay-bmp280.conf</strong>:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">        pressure0 = <span class="variable">&amp;bmp280</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">    bmp280:</span> <span class="title class_">bmp280@76</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;bosch,bmp280&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x76</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="光线传感器"><a href="#光线传感器" class="headerlink" title="光线传感器"></a>光线传感器</h2><p>这个示例展示了如何读取光线传感器数据。</p><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET_ANY(maxim_max44009);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">light</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Device %s is not ready\n&quot;</span>, dev-&gt;name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 获取光线数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (sensor_sample_fetch(dev) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to fetch sample\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sensor_channel_get(dev, SENSOR_CHAN_LIGHT, &amp;light) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to get light level\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 打印光线值 */</span></span><br><span class="line">        printk(<span class="string">&quot;Light level: %.2f lux\n&quot;</span>,</span><br><span class="line">               sensor_value_to_double(&amp;light));</span><br><span class="line"></span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件-3"><a href="#配置文件-3" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_SENSOR=y</span><br><span class="line">CONFIG_MAX44009=y</span><br></pre></td></tr></table></figure><p><strong>overlay-max44009.conf</strong>:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">        light0 = <span class="variable">&amp;max44009</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">    max44009:</span> <span class="title class_">max44009@4a</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;maxim,max44009&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x4a</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="传感器数据融合"><a href="#传感器数据融合" class="headerlink" title="传感器数据融合"></a>传感器数据融合</h2><p>这个示例展示了如何组合多个传感器的数据。</p><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义传感器数据结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sensor_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">temperature</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">pressure</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">humidity</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">accel</span>[3];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取所有传感器数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">read_sensor_data</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *temp_dev,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="keyword">struct</span> device *press_dev,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="keyword">struct</span> device *humid_dev,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="keyword">struct</span> device *accel_dev,</span></span><br><span class="line"><span class="params">                          <span class="keyword">struct</span> sensor_data *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 读取温度 */</span></span><br><span class="line">    <span class="keyword">if</span> (sensor_sample_fetch(temp_dev) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sensor_channel_get(temp_dev, SENSOR_CHAN_AMBIENT_TEMP,</span><br><span class="line">                          &amp;data-&gt;temperature) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取压力 */</span></span><br><span class="line">    <span class="keyword">if</span> (sensor_sample_fetch(press_dev) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sensor_channel_get(press_dev, SENSOR_CHAN_PRESS,</span><br><span class="line">                          &amp;data-&gt;pressure) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取湿度 */</span></span><br><span class="line">    <span class="keyword">if</span> (sensor_sample_fetch(humid_dev) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sensor_channel_get(humid_dev, SENSOR_CHAN_HUMIDITY,</span><br><span class="line">                          &amp;data-&gt;humidity) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取加速度 */</span></span><br><span class="line">    <span class="keyword">if</span> (sensor_sample_fetch(accel_dev) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sensor_channel_get(accel_dev, SENSOR_CHAN_ACCEL_XYZ,</span><br><span class="line">                          data-&gt;accel) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 处理传感器数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">process_sensor_data</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> sensor_data *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 计算海拔（使用温度和压力） */</span></span><br><span class="line">    <span class="type">double</span> temperature = sensor_value_to_double(&amp;data-&gt;temperature);</span><br><span class="line">    <span class="type">double</span> pressure = sensor_value_to_double(&amp;data-&gt;pressure);</span><br><span class="line">    <span class="type">double</span> altitude = <span class="number">44330.0</span> * (<span class="number">1.0</span> - <span class="built_in">pow</span>(pressure / <span class="number">101.325</span>,</span><br><span class="line">                                          <span class="number">1.0</span> / <span class="number">5.255</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算露点（使用温度和湿度） */</span></span><br><span class="line">    <span class="type">double</span> humidity = sensor_value_to_double(&amp;data-&gt;humidity);</span><br><span class="line">    <span class="type">double</span> a = <span class="number">17.27</span>;</span><br><span class="line">    <span class="type">double</span> b = <span class="number">237.7</span>;</span><br><span class="line">    <span class="type">double</span> alpha = ((a * temperature) / (b + temperature)) +</span><br><span class="line">                   <span class="built_in">log</span>(humidity / <span class="number">100.0</span>);</span><br><span class="line">    <span class="type">double</span> dew_point = (b * alpha) / (a - alpha);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算倾斜角度（使用加速度） */</span></span><br><span class="line">    <span class="type">double</span> ax = sensor_value_to_double(&amp;data-&gt;accel[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">double</span> ay = sensor_value_to_double(&amp;data-&gt;accel[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">double</span> az = sensor_value_to_double(&amp;data-&gt;accel[<span class="number">2</span>]);</span><br><span class="line">    <span class="type">double</span> pitch = <span class="built_in">atan2</span>(ax, <span class="built_in">sqrt</span>(ay * ay + az * az)) * <span class="number">180.0</span> / M_PI;</span><br><span class="line">    <span class="type">double</span> roll = <span class="built_in">atan2</span>(ay, <span class="built_in">sqrt</span>(ax * ax + az * az)) * <span class="number">180.0</span> / M_PI;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印结果 */</span></span><br><span class="line">    printk(<span class="string">&quot;Environmental Data:\n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;  Temperature: %.2f °C\n&quot;</span>, temperature);</span><br><span class="line">    printk(<span class="string">&quot;  Pressure: %.2f kPa\n&quot;</span>, pressure);</span><br><span class="line">    printk(<span class="string">&quot;  Humidity: %.2f %%\n&quot;</span>, humidity);</span><br><span class="line">    printk(<span class="string">&quot;  Altitude: %.2f m\n&quot;</span>, altitude);</span><br><span class="line">    printk(<span class="string">&quot;  Dew Point: %.2f °C\n&quot;</span>, dew_point);</span><br><span class="line">    printk(<span class="string">&quot;Motion Data:\n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;  Pitch: %.2f degrees\n&quot;</span>, pitch);</span><br><span class="line">    printk(<span class="string">&quot;  Roll: %.2f degrees\n&quot;</span>, roll);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">temp_dev</span> =</span> DEVICE_DT_GET_ANY(ti_tmp116);</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">press_dev</span> =</span> DEVICE_DT_GET_ANY(bosch_bmp280);</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">humid_dev</span> =</span> DEVICE_DT_GET_ANY(ti_hdc1080);</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">accel_dev</span> =</span> DEVICE_DT_GET_ANY(st_lis2dh);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_data</span> <span class="title">data</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查设备是否就绪 */</span></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(temp_dev) || !device_is_ready(press_dev) ||</span><br><span class="line">        !device_is_ready(humid_dev) || !device_is_ready(accel_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;One or more devices are not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 读取所有传感器数据 */</span></span><br><span class="line">        <span class="keyword">if</span> (read_sensor_data(temp_dev, press_dev, humid_dev,</span><br><span class="line">                           accel_dev, &amp;data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to read sensor data\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 处理数据 */</span></span><br><span class="line">        process_sensor_data(&amp;data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 延时 */</span></span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件-4"><a href="#配置文件-4" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_SENSOR=y</span><br><span class="line">CONFIG_TMP116=y</span><br><span class="line">CONFIG_BMP280=y</span><br><span class="line">CONFIG_HDC1080=y</span><br><span class="line">CONFIG_LIS2DH=y</span><br><span class="line">CONFIG_NEWLIB_LIBC=y</span><br></pre></td></tr></table></figure><p><strong>overlay-sensors.conf</strong>:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">        tempsensor0 = <span class="variable">&amp;tmp116</span><span class="punctuation">;</span></span><br><span class="line">        pressure0 = <span class="variable">&amp;bmp280</span><span class="punctuation">;</span></span><br><span class="line">        humidity0 = <span class="variable">&amp;hdc1080</span><span class="punctuation">;</span></span><br><span class="line">        accel0 = <span class="variable">&amp;lis2dh</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">    </span></span><br><span class="line"><span class="symbol">    tmp116:</span> <span class="title class_">tmp116@48</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;ti,tmp116&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x48</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    bmp280:</span> <span class="title class_">bmp280@76</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;bosch,bmp280&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x76</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    hdc1080:</span> <span class="title class_">hdc1080@40</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;ti,hdc1080&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    lis2dh:</span> <span class="title class_">lis2dh@18</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;st,lis2dh&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x18</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">irq-gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">3</span> GPIO_ACTIVE_HIGH&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译温度传感器示例</span></span><br><span class="line">west build -b &lt;board&gt; -- -DOVERLAY_CONFIG=overlay-tmp116.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译加速度传感器示例</span></span><br><span class="line">west build -b &lt;board&gt; -- -DOVERLAY_CONFIG=overlay-lis2dh.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译压力传感器示例</span></span><br><span class="line">west build -b &lt;board&gt; -- -DOVERLAY_CONFIG=overlay-bmp280.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译光线传感器示例</span></span><br><span class="line">west build -b &lt;board&gt; -- -DOVERLAY_CONFIG=overlay-max44009.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译传感器融合示例</span></span><br><span class="line">west build -b &lt;board&gt; -- -DOVERLAY_CONFIG=overlay-sensors.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录到开发板</span></span><br><span class="line">west flash</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>初始化检查</strong></p><ul><li>始终检查设备是否就绪</li><li>验证传感器配置是否正确</li><li>处理初始化错误</li></ul></li><li><p><strong>数据采集</strong></p><ul><li>使用适当的采样率</li><li>处理采样错误</li><li>验证数据有效性</li></ul></li><li><p><strong>数据处理</strong></p><ul><li>实现数据滤波</li><li>校准传感器</li><li>处理异常值</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>实现错误恢复机制</li><li>记录错误信息</li><li>保持系统稳定</li></ul></li><li><p><strong>电源管理</strong></p><ul><li>优化采样频率</li><li>使用低功耗模式</li><li>管理传感器电源状态</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>传感器不响应</strong></p><ul><li>检查 I2C&#x2F;SPI 配置</li><li>验证设备地址</li><li>检查电源连接</li></ul></li><li><p><strong>数据异常</strong></p><ul><li>检查传感器位置</li><li>验证采样配置</li><li>实现数据过滤</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>优化采样频率</li><li>减少处理开销</li><li>使用中断而不是轮询</li></ul></li><li><p><strong>功耗问题</strong></p><ul><li>使用低功耗模式</li><li>优化采样策略</li><li>关闭不需要的功能</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些传感器示例展示了如何在 Zephyr RTOS 中使用各种传感器，从基本的数据采集到复杂的数据融合。通过这些示例，您可以学习：</p><ol><li>如何初始化和配置不同类型的传感器</li><li>如何读取和处理传感器数据</li><li>如何实现传感器数据融合</li><li>如何处理错误和异常情况</li></ol><p>这些示例可以作为开发传感器应用的起点，您可以根据需要修改和扩展它们。记住要根据您的硬件配置正确的设备树覆盖文件，并确保所有必要的驱动程序都已启用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>timer</title>
      <link href="/2025/03/21/nodic/zephyr/examples/timer/"/>
      <url>/2025/03/21/nodic/zephyr/examples/timer/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-定时器示例"><a href="#Zephyr-定时器示例" class="headerlink" title="Zephyr 定时器示例"></a>Zephyr 定时器示例</h1><h2 id="1-定时器配置"><a href="#1-定时器配置" class="headerlink" title="1. 定时器配置"></a>1. 定时器配置</h2><h3 id="1-1-基础配置-prj-conf"><a href="#1-1-基础配置-prj-conf" class="headerlink" title="1.1 基础配置 (prj.conf)"></a>1.1 基础配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 定时器配置</span><br><span class="line">CONFIG_TIMER=y</span><br><span class="line">CONFIG_TIMER_HAS_64BIT_CYCLE_COUNTER=y</span><br><span class="line"></span><br><span class="line"># 系统时钟配置</span><br><span class="line">CONFIG_SYS_CLOCK_TICKS_PER_SEC=1000</span><br><span class="line"></span><br><span class="line"># 定时器测试配置（可选）</span><br><span class="line">CONFIG_TIMER_RANDOM_GENERATOR=y</span><br></pre></td></tr></table></figure><h2 id="2-基本定时器示例"><a href="#2-基本定时器示例" class="headerlink" title="2. 基本定时器示例"></a>2. 基本定时器示例</h2><h3 id="2-1-k-timer-示例"><a href="#2-1-k-timer-示例" class="headerlink" title="2.1 k_timer 示例"></a>2.1 k_timer 示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义定时器 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_timer</span> <span class="title">my_timer</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_expiry_function</span><span class="params">(<span class="keyword">struct</span> k_timer *timer_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Timer expired!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器停止回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_stop_function</span><span class="params">(<span class="keyword">struct</span> k_timer *timer_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Timer stopped!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化定时器 */</span></span><br><span class="line">    k_timer_init(&amp;my_timer, timer_expiry_function, timer_stop_function);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动定时器：2秒后触发，之后每秒触发一次 */</span></span><br><span class="line">    k_timer_start(&amp;my_timer, K_SECONDS(<span class="number">2</span>), K_SECONDS(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待一段时间 */</span></span><br><span class="line">    k_msleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 停止定时器 */</span></span><br><span class="line">    k_timer_stop(&amp;my_timer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-高精度定时器"><a href="#3-高精度定时器" class="headerlink" title="3. 高精度定时器"></a>3. 高精度定时器</h2><h3 id="3-1-高精度延时"><a href="#3-1-高精度延时" class="headerlink" title="3.1 高精度延时"></a>3.1 高精度延时</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/timing/timing.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">high_precision_delay</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> start_time, end_time;</span><br><span class="line">    <span class="type">uint32_t</span> cycles, ns;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化timing系统 */</span></span><br><span class="line">    timing_init();</span><br><span class="line">    timing_start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录开始时间 */</span></span><br><span class="line">    start_time = timing_counter_get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行需要计时的操作 */</span></span><br><span class="line">    k_busy_wait(<span class="number">100</span>);  <span class="comment">// 延时100微秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录结束时间 */</span></span><br><span class="line">    end_time = timing_counter_get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算经过的时间 */</span></span><br><span class="line">    cycles = timing_cycles_get(&amp;start_time, &amp;end_time);</span><br><span class="line">    ns = timing_cycles_to_ns(cycles);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Operation took %u cycles (%u ns)\n&quot;</span>, cycles, ns);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-周期性任务"><a href="#4-周期性任务" class="headerlink" title="4. 周期性任务"></a>4. 周期性任务</h2><h3 id="4-1-工作队列定时器"><a href="#4-1-工作队列定时器" class="headerlink" title="4.1 工作队列定时器"></a>4.1 工作队列定时器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义工作队列 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work_q</span> <span class="title">my_work_q</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="title function_">K_THREAD_STACK_DEFINE</span><span class="params">(my_work_q_stack, <span class="number">1024</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义延迟工作 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work_delayable</span> <span class="title">delayed_work</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 工作处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">work_handler</span><span class="params">(<span class="keyword">struct</span> k_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Periodic work executed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 重新调度下一次执行 */</span></span><br><span class="line">    k_work_schedule_for_queue(&amp;my_work_q, &amp;delayed_work, K_SECONDS(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化工作队列 */</span></span><br><span class="line">    k_work_queue_init(&amp;my_work_q);</span><br><span class="line">    k_work_queue_start(&amp;my_work_q, my_work_q_stack,</span><br><span class="line">                      K_THREAD_STACK_SIZEOF(my_work_q_stack),</span><br><span class="line">                      K_PRIO_PREEMPT(<span class="number">10</span>), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化延迟工作 */</span></span><br><span class="line">    k_work_init_delayable(&amp;delayed_work, work_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开始周期性任务 */</span></span><br><span class="line">    k_work_schedule_for_queue(&amp;my_work_q, &amp;delayed_work, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-看门狗定时器"><a href="#5-看门狗定时器" class="headerlink" title="5. 看门狗定时器"></a>5. 看门狗定时器</h2><h3 id="5-1-watchdog配置-prj-conf"><a href="#5-1-watchdog配置-prj-conf" class="headerlink" title="5.1 watchdog配置 (prj.conf)"></a>5.1 watchdog配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_WATCHDOG=y</span><br></pre></td></tr></table></figure><h3 id="5-2-watchdog示例"><a href="#5-2-watchdog示例" class="headerlink" title="5.2 watchdog示例"></a>5.2 watchdog示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/watchdog.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* watchdog回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wdt_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *wdt_dev, <span class="type">int</span> channel_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Watchdog callback triggered!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">wdt</span> =</span> DEVICE_DT_GET(DT_NODELABEL(wdt0));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(wdt)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Watchdog device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置watchdog */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">wdt_timeout_cfg</span> <span class="title">wdt_config</span> =</span> &#123;</span><br><span class="line">        .window.min = <span class="number">0</span>,</span><br><span class="line">        .window.max = <span class="number">1000</span>,  <span class="comment">/* 1秒超时 */</span></span><br><span class="line">        .callback = wdt_callback,</span><br><span class="line">        .flags = WDT_FLAG_RESET_SOC</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ret = wdt_install_timeout(wdt, &amp;wdt_config);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Watchdog install error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动watchdog */</span></span><br><span class="line">    ret = wdt_setup(wdt, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Watchdog setup error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 定期喂狗 */</span></span><br><span class="line">        wdt_feed(wdt, <span class="number">0</span>);</span><br><span class="line">        k_msleep(<span class="number">500</span>);  <span class="comment">/* 每500ms喂一次狗 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-实时时钟-RTC"><a href="#6-实时时钟-RTC" class="headerlink" title="6. 实时时钟(RTC)"></a>6. 实时时钟(RTC)</h2><h3 id="6-1-RTC配置-prj-conf"><a href="#6-1-RTC配置-prj-conf" class="headerlink" title="6.1 RTC配置 (prj.conf)"></a>6.1 RTC配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_RTC=y</span><br><span class="line">CONFIG_COUNTER=y</span><br></pre></td></tr></table></figure><h3 id="6-2-RTC示例"><a href="#6-2-RTC示例" class="headerlink" title="6.2 RTC示例"></a>6.2 RTC示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/counter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* RTC报警回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">rtc_alarm_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="type">uint8_t</span> chan_id,</span></span><br><span class="line"><span class="params">                             <span class="type">uint32_t</span> ticks,</span></span><br><span class="line"><span class="params">                             <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;RTC Alarm triggered!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">rtc</span> =</span> DEVICE_DT_GET(DT_NODELABEL(rtc0));</span><br><span class="line">    <span class="type">uint32_t</span> now;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(rtc)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;RTC device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取当前计数值 */</span></span><br><span class="line">    ret = counter_get_value(rtc, &amp;now);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to get RTC value\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置报警 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">counter_alarm_cfg</span> <span class="title">alarm_cfg</span> =</span> &#123;</span><br><span class="line">        .callback = rtc_alarm_callback,</span><br><span class="line">        .flags = <span class="number">0</span>,</span><br><span class="line">        .ticks = now + counter_us_to_ticks(rtc, <span class="number">5000000</span>)  <span class="comment">/* 5秒后报警 */</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ret = counter_set_channel_alarm(rtc, <span class="number">0</span>, &amp;alarm_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set alarm\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        ret = counter_get_value(rtc, &amp;now);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">time_t</span> timestamp = counter_ticks_to_us(rtc, now) / <span class="number">1000000</span>;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">tm_info</span> =</span> localtime(&amp;timestamp);</span><br><span class="line">            printk(<span class="string">&quot;Current time: %02d:%02d:%02d\n&quot;</span>,</span><br><span class="line">                   tm_info-&gt;tm_hour,</span><br><span class="line">                   tm_info-&gt;tm_min,</span><br><span class="line">                   tm_info-&gt;tm_sec);</span><br><span class="line">        &#125;</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-定时器最佳实践"><a href="#7-定时器最佳实践" class="headerlink" title="7. 定时器最佳实践"></a>7. 定时器最佳实践</h2><h3 id="7-1-选择合适的定时器"><a href="#7-1-选择合适的定时器" class="headerlink" title="7.1 选择合适的定时器"></a>7.1 选择合适的定时器</h3><ol><li>k_timer：用于一般的定时任务</li><li>k_work_delayable：用于需要在工作队列上下文中执行的定时任务</li><li>硬件定时器：用于高精度定时要求</li><li>watchdog：用于系统监控和故障恢复</li><li>RTC：用于实时时钟和日期功能</li></ol><h3 id="7-2-定时器使用建议"><a href="#7-2-定时器使用建议" class="headerlink" title="7.2 定时器使用建议"></a>7.2 定时器使用建议</h3><ol><li>避免在定时器回调函数中执行耗时操作</li><li>合理设置定时器周期，避免过于频繁的触发</li><li>注意检查定时器的返回值</li><li>在不需要时及时停止定时器</li><li>使用适当的优先级配置工作队列</li></ol><h3 id="7-3-错误处理示例"><a href="#7-3-错误处理示例" class="headerlink" title="7.3 错误处理示例"></a>7.3 错误处理示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_error_handling</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_timer</span> <span class="title">timer</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化定时器 */</span></span><br><span class="line">    k_timer_init(&amp;timer, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动定时器 */</span></span><br><span class="line">    k_timer_start(&amp;timer, K_SECONDS(<span class="number">1</span>), K_SECONDS(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待定时器触发 */</span></span><br><span class="line">    ret = k_timer_status_sync(&amp;timer);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Timer sync error: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查定时器状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (k_timer_remaining_get(&amp;timer) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Timer is still running\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 停止定时器 */</span></span><br><span class="line">    k_timer_stop(&amp;timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr RTOS 常见问题</title>
      <link href="/2025/03/21/nodic/zephyr/faq/README/"/>
      <url>/2025/03/21/nodic/zephyr/faq/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-RTOS-常见问题"><a href="#Zephyr-RTOS-常见问题" class="headerlink" title="Zephyr RTOS 常见问题"></a>Zephyr RTOS 常见问题</h1><p>本文档收集了 Zephyr RTOS 开发过程中的常见问题和解决方案，帮助开发者快速解决遇到的问题。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#1-%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98">编译问题</a></li><li><a href="#2-%E8%BF%90%E8%A1%8C%E9%97%AE%E9%A2%98">运行问题</a></li><li><a href="#3-%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98">开发问题</a></li><li><a href="#4-%E7%A1%AC%E4%BB%B6%E9%97%AE%E9%A2%98">硬件问题</a></li><li><a href="#5-%E8%B0%83%E8%AF%95%E9%97%AE%E9%A2%98">调试问题</a></li><li><a href="#6-%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98">性能问题</a></li><li><a href="#7-%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98">配置问题</a></li><li><a href="#8-%E5%B7%A5%E5%85%B7%E9%93%BE%E9%97%AE%E9%A2%98">工具链问题</a></li></ol><h2 id="1-编译问题"><a href="#1-编译问题" class="headerlink" title="1. 编译问题"></a>1. 编译问题</h2><h3 id="1-1-找不到-west-命令"><a href="#1-1-找不到-west-命令" class="headerlink" title="1.1 找不到 west 命令"></a>1.1 找不到 west 命令</h3><p><strong>问题</strong>: 安装 Zephyr 后，执行 west 命令时提示 “command not found”。</p><p><strong>解决方案</strong>:</p><ol><li><p>确保已正确安装 west:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user -U west</span><br></pre></td></tr></table></figure></li><li><p>确保 west 在 PATH 中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux/macOS</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=~/.local/bin:&quot;$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="comment"># 检查 %USERPROFILE%\AppData\Roaming\Python\Python3x\Scripts 是否在 PATH 中</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-2-CMake-错误"><a href="#1-2-CMake-错误" class="headerlink" title="1.2 CMake 错误"></a>1.2 CMake 错误</h3><p><strong>问题</strong>: 编译时出现 CMake 相关错误。</p><p><strong>解决方案</strong>:</p><ol><li><p>确保 CMake 版本正确:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br><span class="line"><span class="comment"># 应该是 3.20.0 或更高版本</span></span><br></pre></td></tr></table></figure></li><li><p>检查 CMakeLists.txt 文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保第一行包含</span></span><br><span class="line">cmake_minimum_required(VERSION 3.20.0)</span><br></pre></td></tr></table></figure></li><li><p>清理构建目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf build</span><br><span class="line">west build -p auto -b &lt;board_name&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-3-缺少依赖库"><a href="#1-3-缺少依赖库" class="headerlink" title="1.3 缺少依赖库"></a>1.3 缺少依赖库</h3><p><strong>问题</strong>: 编译时提示缺少某些库。</p><p><strong>解决方案</strong>:</p><ol><li><p>安装 Zephyr 所需的依赖:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> apt install --no-install-recommends git cmake ninja-build gperf \</span><br><span class="line">  ccache dfu-util device-tree-compiler wget \</span><br><span class="line">  python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \</span><br><span class="line">  make gcc gcc-multilib g++-multilib libsdl2-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># macOS</span></span><br><span class="line">brew install cmake ninja gperf python3 ccache qemu dtc</span><br></pre></td></tr></table></figure></li><li><p>对于特定模块的依赖，检查相应的文档并安装所需库。</p></li></ol><h3 id="1-4-设备树编译错误"><a href="#1-4-设备树编译错误" class="headerlink" title="1.4 设备树编译错误"></a>1.4 设备树编译错误</h3><p><strong>问题</strong>: 设备树编译时出现语法错误。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查设备树语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtc -I dts -O dts -o /dev/null &lt;your_overlay_file&gt;.overlay</span><br></pre></td></tr></table></figure></li><li><p>常见的设备树错误:</p><ul><li>缺少分号</li><li>括号不匹配</li><li>引用了不存在的节点</li><li>属性格式错误</li></ul></li><li><p>使用 west build 的详细输出查看更多信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west build -p auto -b &lt;board_name&gt; -- -DCMAKE_VERBOSE_MAKEFILE=ON</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-运行问题"><a href="#2-运行问题" class="headerlink" title="2. 运行问题"></a>2. 运行问题</h2><h3 id="2-1-无法烧录固件"><a href="#2-1-无法烧录固件" class="headerlink" title="2.1 无法烧录固件"></a>2.1 无法烧录固件</h3><p><strong>问题</strong>: 使用 <code>west flash</code> 无法将固件烧录到设备。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查设备连接:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line">lsusb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="comment"># 检查设备管理器</span></span><br></pre></td></tr></table></figure></li><li><p>检查权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -a -G dialout <span class="variable">$USER</span></span><br><span class="line"><span class="comment"># 注销并重新登录</span></span><br></pre></td></tr></table></figure></li><li><p>安装设备特定的工具:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如，对于 STM32</span></span><br><span class="line">pip3 install --user -U pyocd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于 Nordic</span></span><br><span class="line">pip3 install --user -U nrfutil</span><br></pre></td></tr></table></figure></li><li><p>尝试手动烧录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 OpenOCD</span></span><br><span class="line">openocd -f board/&lt;your_board&gt;.cfg -c <span class="string">&quot;program build/zephyr/zephyr.elf verify reset exit&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2-设备不启动"><a href="#2-2-设备不启动" class="headerlink" title="2.2 设备不启动"></a>2.2 设备不启动</h3><p><strong>问题</strong>: 固件已烧录，但设备不启动或不工作。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查串口输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minicom -D /dev/ttyUSB0 -b 115200</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">screen /dev/ttyUSB0 115200</span><br></pre></td></tr></table></figure></li><li><p>检查引导加载程序:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果使用 MCUboot，检查 MCUboot 是否正确配置</span></span><br><span class="line">west flash --hex-file build/zephyr/zephyr.signed.hex</span><br></pre></td></tr></table></figure></li><li><p>检查硬件连接:</p><ul><li>确保电源连接正确</li><li>检查晶振是否工作</li><li>检查复位电路</li></ul></li><li><p>尝试恢复出厂固件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于 Nordic 设备</span></span><br><span class="line">nrfjprog --recover</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-3-串口无输出"><a href="#2-3-串口无输出" class="headerlink" title="2.3 串口无输出"></a>2.3 串口无输出</h3><p><strong>问题</strong>: 设备运行，但串口没有输出。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查串口配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_CONSOLE=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br></pre></td></tr></table></figure></li><li><p>检查波特率:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认为 115200，确保终端程序使用相同的波特率</span></span><br><span class="line">screen /dev/ttyUSB0 115200</span><br></pre></td></tr></table></figure></li><li><p>检查硬件连接:</p><ul><li>TX&#x2F;RX 线是否正确连接</li><li>地线是否连接</li><li>电平转换是否正确（如 3.3V vs 5V）</li></ul></li><li><p>尝试其他串口工具:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如 PuTTY、minicom、screen、Tera Term 等</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-开发问题"><a href="#3-开发问题" class="headerlink" title="3. 开发问题"></a>3. 开发问题</h2><h3 id="3-1-线程优先级问题"><a href="#3-1-线程优先级问题" class="headerlink" title="3.1 线程优先级问题"></a>3.1 线程优先级问题</h3><p><strong>问题</strong>: 线程调度不符合预期。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查线程优先级:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值越小，优先级越高</span></span><br><span class="line">K_THREAD_DEFINE(my_thread_id, STACK_SIZE, my_thread_entry,</span><br><span class="line">               <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, MY_PRIORITY, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>检查线程状态:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加调试代码</span></span><br><span class="line">k_thread_foreach(thread_info_print, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现回调函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">thread_info_print</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> k_thread *thread, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[CONFIG_THREAD_MAX_NAME_LEN];</span><br><span class="line">    k_thread_state_str(thread, name, <span class="keyword">sizeof</span>(name));</span><br><span class="line">    printk(<span class="string">&quot;线程 %p 状态: %s\n&quot;</span>, thread, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>考虑使用调度锁:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在关键部分禁用调度</span></span><br><span class="line">k_sched_lock();</span><br><span class="line"><span class="comment">// 关键代码</span></span><br><span class="line">k_sched_unlock();</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-2-内存泄漏"><a href="#3-2-内存泄漏" class="headerlink" title="3.2 内存泄漏"></a>3.2 内存泄漏</h3><p><strong>问题</strong>: 系统长时间运行后内存不足。</p><p><strong>解决方案</strong>:</p><ol><li><p>启用堆监控:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=16384</span><br><span class="line">CONFIG_HEAP_LISTENER=y</span><br></pre></td></tr></table></figure></li><li><p>实现堆监听器:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/heap_listener.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">heap_listener</span> <span class="title">my_listener</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> allocated = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">heap_alloc_cb</span><span class="params">(<span class="type">uintptr_t</span> heap_id, <span class="type">void</span> *mem, <span class="type">size_t</span> bytes)</span></span><br><span class="line">&#123;</span><br><span class="line">    allocated += bytes;</span><br><span class="line">    printk(<span class="string">&quot;已分配: %zu 字节, 地址: %p\n&quot;</span>, bytes, mem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">heap_free_cb</span><span class="params">(<span class="type">uintptr_t</span> heap_id, <span class="type">void</span> *mem, <span class="type">size_t</span> bytes)</span></span><br><span class="line">&#123;</span><br><span class="line">    allocated -= bytes;</span><br><span class="line">    printk(<span class="string">&quot;已释放: %zu 字节, 地址: %p\n&quot;</span>, bytes, mem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_heap_monitor</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    heap_listener_init(&amp;my_listener, heap_alloc_cb, heap_free_cb);</span><br><span class="line">    heap_listener_register(&amp;my_listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检查内存分配模式:</p><ul><li>确保每次 <code>k_malloc</code> 都有对应的 <code>k_free</code></li><li>避免在循环中分配内存而不释放</li><li>考虑使用内存池或内存分片代替动态分配</li></ul></li></ol><h3 id="3-3-栈溢出"><a href="#3-3-栈溢出" class="headerlink" title="3.3 栈溢出"></a>3.3 栈溢出</h3><p><strong>问题</strong>: 系统崩溃，可能是由于栈溢出。</p><p><strong>解决方案</strong>:</p><ol><li><p>增加栈大小:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 2048  <span class="comment">// 增加栈大小</span></span></span><br><span class="line">K_THREAD_STACK_DEFINE(my_thread_stack, STACK_SIZE);</span><br></pre></td></tr></table></figure></li><li><p>启用栈监控:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_INIT_STACKS=y</span><br><span class="line">CONFIG_THREAD_STACK_INFO=y</span><br><span class="line">CONFIG_THREAD_MONITOR=y</span><br></pre></td></tr></table></figure></li><li><p>检查栈使用情况:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> unused = k_thread_stack_space_get(my_thread);</span><br><span class="line">printk(<span class="string">&quot;未使用的栈空间: %zu 字节\n&quot;</span>, unused);</span><br></pre></td></tr></table></figure></li><li><p>减少局部变量:</p><ul><li>避免在栈上分配大数组</li><li>考虑使用静态或动态分配的缓冲区</li><li>减少递归深度</li></ul></li></ol><h3 id="3-4-死锁"><a href="#3-4-死锁" class="headerlink" title="3.4 死锁"></a>3.4 死锁</h3><p><strong>问题</strong>: 系统卡住，可能是由于死锁。</p><p><strong>解决方案</strong>:</p><ol><li><p>使用超时:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用超时而不是 K_FOREVER</span></span><br><span class="line">ret = k_mutex_lock(&amp;my_mutex, K_MSEC(<span class="number">1000</span>));</span><br><span class="line"><span class="keyword">if</span> (ret == -EAGAIN) &#123;</span><br><span class="line">    printk(<span class="string">&quot;获取互斥量超时\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行恢复操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>遵循锁的顺序:</p><ul><li>始终按照相同的顺序获取多个锁</li><li>避免在持有锁时调用未知函数</li></ul></li><li><p>使用死锁检测:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_MUTEX_DBG=y</span><br></pre></td></tr></table></figure></li><li><p>考虑使用其他同步原语:</p><ul><li>信号量</li><li>事件</li><li>消息队列</li></ul></li></ol><h2 id="4-硬件问题"><a href="#4-硬件问题" class="headerlink" title="4. 硬件问题"></a>4. 硬件问题</h2><h3 id="4-1-GPIO-配置问题"><a href="#4-1-GPIO-配置问题" class="headerlink" title="4.1 GPIO 配置问题"></a>4.1 GPIO 配置问题</h3><p><strong>问题</strong>: GPIO 引脚不工作。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查设备树配置:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;gpio0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>检查 GPIO 初始化代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led</span> =</span> GPIO_DT_SPEC_GET(DT_ALIAS(led0), gpios);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(led.port)) &#123;</span><br><span class="line">    printk(<span class="string">&quot;GPIO 设备未就绪\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = gpio_pin_configure_dt(&amp;led, GPIO_OUTPUT_ACTIVE);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    printk(<span class="string">&quot;GPIO 配置失败: %d\n&quot;</span>, ret);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检查硬件连接:</p><ul><li>确保引脚连接正确</li><li>检查上拉&#x2F;下拉电阻</li><li>确保引脚未被其他功能占用</li></ul></li><li><p>使用示波器或逻辑分析仪检查信号。</p></li></ol><h3 id="4-2-I2C-SPI-通信问题"><a href="#4-2-I2C-SPI-通信问题" class="headerlink" title="4.2 I2C&#x2F;SPI 通信问题"></a>4.2 I2C&#x2F;SPI 通信问题</h3><p><strong>问题</strong>: 无法与 I2C 或 SPI 设备通信。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查设备树配置:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;I2C_BITRATE_STANDARD&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>检查总线初始化:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2c_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2c0));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(i2c_dev)) &#123;</span><br><span class="line">    printk(<span class="string">&quot;I2C 设备未就绪\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检查地址和寄存器:</p><ul><li>确认设备地址正确</li><li>确认寄存器地址正确</li><li>考虑字节序问题</li></ul></li><li><p>降低通信速度:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;I2C_BITRATE_STANDARD&gt;</span><span class="punctuation">;</span>  <span class="comment">// 使用标准速度 (100kHz)</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>使用逻辑分析仪检查总线信号。</p></li></ol><h3 id="4-3-中断问题"><a href="#4-3-中断问题" class="headerlink" title="4.3 中断问题"></a>4.3 中断问题</h3><p><strong>问题</strong>: 中断没有触发或处理不正确。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查中断配置:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置 GPIO 中断</span></span><br><span class="line">ret = gpio_pin_interrupt_configure_dt(&amp;button, GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    printk(<span class="string">&quot;中断配置失败: %d\n&quot;</span>, ret);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调</span></span><br><span class="line">gpio_init_callback(&amp;button_cb_data, button_pressed, BIT(button.pin));</span><br><span class="line">gpio_add_callback(button.port, &amp;button_cb_data);</span><br></pre></td></tr></table></figure></li><li><p>检查中断优先级:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IRQ_CONNECT(MY_IRQ_NUM, MY_IRQ_PRIO, my_isr, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>确保中断处理函数简短:</p><ul><li>避免在中断处理函数中执行长时间操作</li><li>考虑使用工作队列延迟处理</li></ul></li><li><p>检查硬件连接:</p><ul><li>确保中断引脚连接正确</li><li>检查上拉&#x2F;下拉电阻</li></ul></li></ol><h2 id="5-调试问题"><a href="#5-调试问题" class="headerlink" title="5. 调试问题"></a>5. 调试问题</h2><h3 id="5-1-无法启动调试会话"><a href="#5-1-无法启动调试会话" class="headerlink" title="5.1 无法启动调试会话"></a>5.1 无法启动调试会话</h3><p><strong>问题</strong>: 使用 <code>west debug</code> 无法启动调试会话。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查调试器连接:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于 J-Link</span></span><br><span class="line">JLinkExe -device &lt;your_device&gt; -<span class="keyword">if</span> SWD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于 OpenOCD</span></span><br><span class="line">openocd -f board/&lt;your_board&gt;.cfg</span><br></pre></td></tr></table></figure></li><li><p>检查调试器驱动:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 J-Link 驱动</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="comment"># 安装 OpenOCD</span></span><br></pre></td></tr></table></figure></li><li><p>尝试手动启动 GDB:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arm-none-eabi-gdb build/zephyr/zephyr.elf -ex <span class="string">&quot;target remote localhost:3333&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>检查构建类型:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west build -p auto -b &lt;board_name&gt; -- -DCMAKE_BUILD_TYPE=Debug</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2-断点不起作用"><a href="#5-2-断点不起作用" class="headerlink" title="5.2 断点不起作用"></a>5.2 断点不起作用</h3><p><strong>问题</strong>: 设置的断点不触发。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查优化级别:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_NO_OPTIMIZATIONS=y</span><br><span class="line">CONFIG_DEBUG_OPTIMIZATIONS=y</span><br></pre></td></tr></table></figure></li><li><p>检查代码是否被优化掉:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 volatile 防止优化</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或使用 __attribute__((noinline))</span></span><br><span class="line">__attribute__((noinline)) <span class="type">void</span> <span class="title function_">my_function</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>检查符号信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arm-none-eabi-objdump -t build/zephyr/zephyr.elf | grep my_function</span><br></pre></td></tr></table></figure></li><li><p>尝试使用硬件断点:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb) hbreak my_function</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-3-无法查看变量值"><a href="#5-3-无法查看变量值" class="headerlink" title="5.3 无法查看变量值"></a>5.3 无法查看变量值</h3><p><strong>问题</strong>: 在调试时无法查看变量值。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查优化级别（同上）。</p></li><li><p>使用 volatile 关键字:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> my_var = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>检查变量作用域:</p><ul><li>确保在正确的作用域中查看变量</li><li>考虑将局部变量提升为全局或静态变量</li></ul></li><li><p>使用 GDB 打印命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) print my_var</span><br><span class="line">(gdb) print/x my_var  # 以十六进制显示</span><br><span class="line">(gdb) print *my_struct  # 显示结构体内容</span><br></pre></td></tr></table></figure></li><li><p>添加观察点:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb) watch my_var</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-性能问题"><a href="#6-性能问题" class="headerlink" title="6. 性能问题"></a>6. 性能问题</h2><h3 id="6-1-系统响应慢"><a href="#6-1-系统响应慢" class="headerlink" title="6.1 系统响应慢"></a>6.1 系统响应慢</h3><p><strong>问题</strong>: 系统响应时间长，实时性差。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查线程优先级:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确保实时关键线程具有高优先级（低数值）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_PRIORITY 0  <span class="comment">// 最高优先级</span></span></span><br></pre></td></tr></table></figure></li><li><p>减少中断禁用时间:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小化关键区域</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key = irq_lock();</span><br><span class="line"><span class="comment">// 尽量减少这里的代码</span></span><br><span class="line">irq_unlock(key);</span><br></pre></td></tr></table></figure></li><li><p>使用性能分析工具:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_TRACING=y</span><br><span class="line">CONFIG_SEGGER_SYSTEMVIEW=y</span><br></pre></td></tr></table></figure></li><li><p>优化内存访问:</p><ul><li>使用对齐的内存访问</li><li>减少缓存未命中</li><li>考虑使用 DMA</li></ul></li></ol><h3 id="6-2-功耗过高"><a href="#6-2-功耗过高" class="headerlink" title="6.2 功耗过高"></a>6.2 功耗过高</h3><p><strong>问题</strong>: 设备功耗高于预期。</p><p><strong>解决方案</strong>:</p><ol><li><p>启用电源管理:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_PM=y</span><br></pre></td></tr></table></figure></li><li><p>实现设备电源管理:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_pm_control</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                              <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">// 恢复设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">// 挂起设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PM_DEVICE_DT_DEFINE(DT_NODELABEL(my_device), my_device_pm_control);</span><br></pre></td></tr></table></figure></li><li><p>使用低功耗模式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当没有工作要做时</span></span><br><span class="line">pm_system_suspend(k_ticks_to_ms_floor64(</span><br><span class="line">                 k_ticks_to_ns_floor64(k_uptime_ticks())));</span><br></pre></td></tr></table></figure></li><li><p>禁用未使用的外设:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在不需要时禁用外设</span></span><br><span class="line">pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-3-内存使用过多"><a href="#6-3-内存使用过多" class="headerlink" title="6.3 内存使用过多"></a>6.3 内存使用过多</h3><p><strong>问题</strong>: 系统内存使用量高。</p><p><strong>解决方案</strong>:</p><ol><li><p>减少静态分配:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_MAIN_STACK_SIZE=1024  # 减小主线程栈</span><br><span class="line">CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=1024  # 减小工作队列栈</span><br></pre></td></tr></table></figure></li><li><p>优化缓冲区大小:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用适当大小的缓冲区</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 64  <span class="comment">// 而不是 1024</span></span></span><br></pre></td></tr></table></figure></li><li><p>使用内存池而不是堆:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义内存池</span></span><br><span class="line">K_MEM_POOL_DEFINE(my_pool, <span class="number">16</span>, <span class="number">64</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用内存池</span></span><br><span class="line"><span class="type">void</span> *ptr = k_mem_pool_alloc(&amp;my_pool, <span class="number">64</span>, K_NO_WAIT);</span><br></pre></td></tr></table></figure></li><li><p>共享缓冲区:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用共享缓冲区而不是每个操作都分配新的</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> shared_buffer[<span class="number">256</span>];</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-配置问题"><a href="#7-配置问题" class="headerlink" title="7. 配置问题"></a>7. 配置问题</h2><h3 id="7-1-Kconfig-选项冲突"><a href="#7-1-Kconfig-选项冲突" class="headerlink" title="7.1 Kconfig 选项冲突"></a>7.1 Kconfig 选项冲突</h3><p><strong>问题</strong>: 配置选项之间存在冲突。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查依赖关系:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -t guiconfig</span><br><span class="line"><span class="comment"># 使用图形界面检查选项依赖</span></span><br></pre></td></tr></table></figure></li><li><p>查看 Kconfig 文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep -r <span class="string">&quot;CONFIG_MY_OPTION&quot;</span> zephyr/</span><br><span class="line"><span class="comment"># 找到定义该选项的文件</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>depends on</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config MY_OPTION</span><br><span class="line">    bool &quot;My option&quot;</span><br><span class="line">    depends on !CONFLICTING_OPTION</span><br></pre></td></tr></table></figure></li><li><p>检查默认值:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config MY_OPTION</span><br><span class="line">    bool &quot;My option&quot;</span><br><span class="line">    default y if SOME_CONDITION</span><br><span class="line">    default n</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-2-设备树覆盖问题"><a href="#7-2-设备树覆盖问题" class="headerlink" title="7.2 设备树覆盖问题"></a>7.2 设备树覆盖问题</h3><p><strong>问题</strong>: 设备树覆盖不生效。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查覆盖文件位置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应该位于</span></span><br><span class="line">boards/&lt;board_name&gt;.overlay</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">app/boards/&lt;board_name&gt;.overlay</span><br></pre></td></tr></table></figure></li><li><p>检查节点路径:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确保使用正确的路径</span></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 修改 i2c0 节点</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或使用绝对路径</span></span><br><span class="line"><span class="keyword">/soc/</span><span class="title class_">i2c@40003000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 修改 i2c 节点</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>检查兼容性字符串:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">my_device:</span> <span class="title class_">my-device@50</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>检查生成的设备树:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -t devicetree_legacy</span><br><span class="line"><span class="comment"># 查看 build/zephyr/zephyr.dts</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-3-链接器错误"><a href="#7-3-链接器错误" class="headerlink" title="7.3 链接器错误"></a>7.3 链接器错误</h3><p><strong>问题</strong>: 链接时出现 “section overflow” 或 “region overflow” 错误。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查内存使用情况:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -t ram_report</span><br><span class="line">west build -t rom_report</span><br></pre></td></tr></table></figure></li><li><p>增加内存区域大小:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_SRAM_SIZE=&lt;size&gt;</span><br><span class="line">CONFIG_FLASH_SIZE=&lt;size&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建自定义链接器脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 CMakeLists.txt 中</span><br><span class="line">zephyr_linker_sources(RAM_SECTIONS custom_sections.ld)</span><br></pre></td></tr></table></figure></li><li><p>优化代码大小:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中</span><br><span class="line">CONFIG_SIZE_OPTIMIZATIONS=y</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-工具链问题"><a href="#8-工具链问题" class="headerlink" title="8. 工具链问题"></a>8. 工具链问题</h2><h3 id="8-1-工具链版本不兼容"><a href="#8-1-工具链版本不兼容" class="headerlink" title="8.1 工具链版本不兼容"></a>8.1 工具链版本不兼容</h3><p><strong>问题</strong>: 工具链版本与 Zephyr 不兼容。</p><p><strong>解决方案</strong>:</p><ol><li><p>检查推荐的工具链版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west manifest --resolve</span><br><span class="line"><span class="comment"># 查看 manifest 文件中的工具链版本</span></span><br></pre></td></tr></table></figure></li><li><p>安装正确版本的 SDK:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载特定版本的 SDK</span></span><br><span class="line">wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.13.2/zephyr-sdk-0.13.2-linux-x86_64-setup.run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 SDK</span></span><br><span class="line"><span class="built_in">chmod</span> +x zephyr-sdk-0.13.2-linux-x86_64-setup.run</span><br><span class="line">./zephyr-sdk-0.13.2-linux-x86_64-setup.run</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZEPHYR_TOOLCHAIN_VARIANT=zephyr</span><br><span class="line"><span class="built_in">export</span> ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdk-0.13.2</span><br></pre></td></tr></table></figure></li><li><p>使用 Docker 容器:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方 Docker 镜像</span></span><br><span class="line">docker pull zephyrprojectrtos/zephyr-build</span><br><span class="line">docker run -it -v /path/to/project:/workdir zephyrprojectrtos/zephyr-build</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-2-West-命令失败"><a href="#8-2-West-命令失败" class="headerlink" title="8.2 West 命令失败"></a>8.2 West 命令失败</h3><p><strong>问题</strong>: West 命令执行失败。</p><p><strong>解决方案</strong>:</p><ol><li><p>更新 West:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user -U west</span><br></pre></td></tr></table></figure></li><li><p>检查 West 配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west config -l</span><br></pre></td></tr></table></figure></li><li><p>重新初始化 West 工作区:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west init -m https://github.com/zephyrproject-rtos/zephyr --mr main</span><br><span class="line">west update</span><br></pre></td></tr></table></figure></li><li><p>清理构建目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf build</span><br><span class="line">west build -p auto -b &lt;board_name&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-3-Python-依赖问题"><a href="#8-3-Python-依赖问题" class="headerlink" title="8.3 Python 依赖问题"></a>8.3 Python 依赖问题</h3><p><strong>问题</strong>: 缺少 Python 依赖。</p><p><strong>解决方案</strong>:</p><ol><li><p>安装 Zephyr Python 依赖:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user -r zephyr/scripts/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>创建虚拟环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv zephyr-venv</span><br><span class="line"><span class="built_in">source</span> zephyr-venv/bin/activate</span><br><span class="line">pip install -r zephyr/scripts/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>检查 Python 版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br><span class="line"><span class="comment"># 应该是 3.6 或更高版本</span></span><br></pre></td></tr></table></figure></li><li><p>解决特定依赖问题:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如，安装 pyelftools</span></span><br><span class="line">pip3 install --user pyelftools</span><br></pre></td></tr></table></figure></li></ol><p>这些是 Zephyr RTOS 开发中的一些常见问题和解决方案。如果您遇到其他问题，可以查阅 <a href="https://docs.zephyrproject.org/">Zephyr 官方文档</a>、<a href="https://github.com/zephyrproject-rtos/zephyr/issues">GitHub 问题跟踪器</a> 或 <a href="https://lists.zephyrproject.org/g/devel">Zephyr 开发者邮件列表</a>。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 驱动系统指南</title>
      <link href="/2025/03/21/nodic/zephyr/drivers/README/"/>
      <url>/2025/03/21/nodic/zephyr/drivers/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-设备驱动开发指南"><a href="#Zephyr-设备驱动开发指南" class="headerlink" title="Zephyr 设备驱动开发指南"></a>Zephyr 设备驱动开发指南</h1><h2 id="1-驱动开发基础"><a href="#1-驱动开发基础" class="headerlink" title="1. 驱动开发基础"></a>1. 驱动开发基础</h2><h3 id="1-1-驱动框架配置-prj-conf"><a href="#1-1-驱动框架配置-prj-conf" class="headerlink" title="1.1 驱动框架配置 (prj.conf)"></a>1.1 驱动框架配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 基础驱动支持</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_GPIO=y</span><br><span class="line">CONFIG_I2C=y</span><br><span class="line">CONFIG_SPI=y</span><br><span class="line">CONFIG_PINMUX=y</span><br><span class="line">CONFIG_PINCTRL=y</span><br><span class="line"></span><br><span class="line"># 设备树支持</span><br><span class="line">CONFIG_DTS=y</span><br><span class="line">CONFIG_HAS_DTS=y</span><br><span class="line"></span><br><span class="line"># 驱动调试支持</span><br><span class="line">CONFIG_DEVICE_SHELL=y</span><br><span class="line">CONFIG_DEVICE_POWER_MANAGEMENT=y</span><br></pre></td></tr></table></figure><h3 id="1-2-基本驱动结构"><a href="#1-2-基本驱动结构" class="headerlink" title="1.2 基本驱动结构"></a>1.2 基本驱动结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">gpio_dev</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> pin;</span><br><span class="line">    <span class="type">gpio_flags_t</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动数据结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> &#123;</span></span><br><span class="line">    <span class="type">bool</span> initialized;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API函数原型 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*my_driver_api_configure)</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                     <span class="type">uint32_t</span> config)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*my_driver_api_write)</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                 <span class="type">uint32_t</span> value)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*my_driver_api_read)</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                <span class="type">uint32_t</span> *value)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> &#123;</span></span><br><span class="line">    my_driver_api_configure configure;</span><br><span class="line">    my_driver_api_write write;</span><br><span class="line">    my_driver_api_read read;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动初始化函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查依赖设备 */</span></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(config-&gt;gpio_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化互斥锁 */</span></span><br><span class="line">    k_mutex_init(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置GPIO */</span></span><br><span class="line">    ret = gpio_pin_configure(config-&gt;gpio_dev,</span><br><span class="line">                           config-&gt;pin,</span><br><span class="line">                           config-&gt;flags);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data-&gt;initialized = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API实现 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_configure</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="type">uint32_t</span> config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取锁 */</span></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 实现配置逻辑 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放锁 */</span></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_set(config-&gt;gpio_dev,</span><br><span class="line">                      config-&gt;pin,</span><br><span class="line">                      value);</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_read</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                         <span class="type">uint32_t</span> *value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_get(config-&gt;gpio_dev,</span><br><span class="line">                      config-&gt;pin);</span><br><span class="line">    <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        *value = ret;</span><br><span class="line">        ret = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API结构体实例 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> <span class="title">my_driver_api_funcs</span> =</span> &#123;</span><br><span class="line">    .configure = my_driver_configure,</span><br><span class="line">    .write = my_driver_write,</span><br><span class="line">    .read = my_driver_read,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动实例定义 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DRIVER_INIT(inst)                                              \</span></span><br><span class="line"><span class="meta">    static const struct my_driver_config my_driver_config_##inst = &#123;      \</span></span><br><span class="line"><span class="meta">        .gpio_dev = DEVICE_DT_GET(DT_INST_GPIO_CTLR(inst, gpios)),      \</span></span><br><span class="line"><span class="meta">        .pin = DT_INST_GPIO_PIN(inst, gpios),                           \</span></span><br><span class="line"><span class="meta">        .flags = DT_INST_GPIO_FLAGS(inst, gpios),                       \</span></span><br><span class="line"><span class="meta">    &#125;;                                                                   \</span></span><br><span class="line"><span class="meta">                                                                        \</span></span><br><span class="line"><span class="meta">    static struct my_driver_data my_driver_data_##inst;                 \</span></span><br><span class="line"><span class="meta">                                                                        \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(inst,                                         \</span></span><br><span class="line"><span class="meta">                         my_driver_init,                                \</span></span><br><span class="line"><span class="meta">                         NULL,                                          \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_data_##inst,                        \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_config_##inst,                      \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                                   \</span></span><br><span class="line"><span class="meta">                         CONFIG_MY_DRIVER_INIT_PRIORITY,               \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_api_funcs);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为每个设备树实例创建驱动实例 */</span></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_DRIVER_INIT)</span><br></pre></td></tr></table></figure><h3 id="1-3-设备树绑定"><a href="#1-3-设备树绑定" class="headerlink" title="1.3 设备树绑定"></a>1.3 设备树绑定</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dts/bindings/my-driver.yaml</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">Driver</span> <span class="string">Device</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compatible:</span> <span class="string">&quot;vendor,my-driver&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">include:</span> <span class="string">base.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">  <span class="attr">gpios:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">phandle-array</span></span><br><span class="line">    <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">GPIO</span> <span class="string">for</span> <span class="string">control</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">label:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Human</span> <span class="string">readable</span> <span class="string">string</span> <span class="string">describing</span> <span class="string">the</span> <span class="string">device</span></span><br></pre></td></tr></table></figure><h2 id="2-GPIO驱动开发"><a href="#2-GPIO驱动开发" class="headerlink" title="2. GPIO驱动开发"></a>2. GPIO驱动开发</h2><h3 id="2-1-GPIO配置"><a href="#2-1-GPIO配置" class="headerlink" title="2.1 GPIO配置"></a>2.1 GPIO配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO设备获取 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led</span> =</span> GPIO_DT_SPEC_GET(DT_ALIAS(led0), gpios);</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">button</span> =</span> GPIO_DT_SPEC_GET(DT_ALIAS(sw0), gpios);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">gpio_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查设备就绪 */</span></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(led.port)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(button.port)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置GPIO */</span></span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;led, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;button, GPIO_INPUT);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* GPIO操作 */</span></span><br><span class="line">    gpio_pin_toggle_dt(&amp;led);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> val = gpio_pin_get_dt(&amp;button);</span><br><span class="line">    <span class="keyword">if</span> (val &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Button state: %d\n&quot;</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-GPIO中断"><a href="#2-2-GPIO中断" class="headerlink" title="2.2 GPIO中断"></a>2.2 GPIO中断</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中断回调数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">button_cb_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中断回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">button_pressed_cb</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                      <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">                      <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Button pressed! pins: %x\n&quot;</span>, pins);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">gpio_interrupt_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">button</span> =</span> GPIO_DT_SPEC_GET(DT_ALIAS(sw0), gpios);</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(button.port)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置GPIO为输入并启用中断 */</span></span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;button,</span><br><span class="line">                               GPIO_INPUT |</span><br><span class="line">                               GPIO_INT_DEBOUNCE |</span><br><span class="line">                               GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化回调结构体 */</span></span><br><span class="line">    gpio_init_callback(&amp;button_cb_data,</span><br><span class="line">                      button_pressed_cb,</span><br><span class="line">                      BIT(button.pin));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加回调 */</span></span><br><span class="line">    ret = gpio_add_callback(button.port, &amp;button_cb_data);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    ret = gpio_pin_interrupt_configure_dt(&amp;button,</span><br><span class="line">                                        GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-I2C驱动开发"><a href="#3-I2C驱动开发" class="headerlink" title="3. I2C驱动开发"></a>3. I2C驱动开发</h2><h3 id="3-1-I2C配置"><a href="#3-1-I2C配置" class="headerlink" title="3.1 I2C配置"></a>3.1 I2C配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_ADDR 0x50</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">i2c_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">i2c_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2c0));</span><br><span class="line">    <span class="type">uint8_t</span> data[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(i2c_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写数据 */</span></span><br><span class="line">    data[<span class="number">0</span>] = <span class="number">0x00</span>;  <span class="comment">/* 寄存器地址 */</span></span><br><span class="line">    data[<span class="number">1</span>] = <span class="number">0x42</span>;  <span class="comment">/* 数据 */</span></span><br><span class="line">    ret = i2c_write(i2c_dev, data, <span class="keyword">sizeof</span>(data), I2C_ADDR);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读数据 */</span></span><br><span class="line">    <span class="type">uint8_t</span> reg = <span class="number">0x00</span>;</span><br><span class="line">    ret = i2c_write_read(i2c_dev,</span><br><span class="line">                        I2C_ADDR,</span><br><span class="line">                        &amp;reg, <span class="number">1</span>,</span><br><span class="line">                        data, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Read value: 0x%02x\n&quot;</span>, data[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-I2C设备驱动"><a href="#3-2-I2C设备驱动" class="headerlink" title="3.2 I2C设备驱动"></a>3.2 I2C设备驱动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_config</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2c_dev</span>;</span></span><br><span class="line">    <span class="type">uint16_t</span> addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备数据结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_i2c_read_reg</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">uint8_t</span> reg,</span></span><br><span class="line"><span class="params">                          <span class="type">uint8_t</span> *val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = i2c_write_read(config-&gt;i2c_dev,</span><br><span class="line">                        config-&gt;addr,</span><br><span class="line">                        &amp;reg, <span class="number">1</span>,</span><br><span class="line">                        val, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_i2c_write_reg</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                           <span class="type">uint8_t</span> reg,</span></span><br><span class="line"><span class="params">                           <span class="type">uint8_t</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">uint8_t</span> buf[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    buf[<span class="number">0</span>] = reg;</span><br><span class="line">    buf[<span class="number">1</span>] = val;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = i2c_write(config-&gt;i2c_dev,</span><br><span class="line">                    buf, <span class="keyword">sizeof</span>(buf),</span><br><span class="line">                    config-&gt;addr);</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_i2c_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(config-&gt;i2c_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_mutex_init(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*read_reg)(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span><br><span class="line">                    <span class="type">uint8_t</span> reg,</span><br><span class="line">                    <span class="type">uint8_t</span> *val);</span><br><span class="line">    <span class="type">int</span> (*write_reg)(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span><br><span class="line">                     <span class="type">uint8_t</span> reg,</span><br><span class="line">                     <span class="type">uint8_t</span> val);</span><br><span class="line">&#125; my_i2c_api = &#123;</span><br><span class="line">    .read_reg = my_i2c_read_reg,</span><br><span class="line">    .write_reg = my_i2c_write_reg,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备定义宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_I2C_INIT(inst)                                              \</span></span><br><span class="line"><span class="meta">    static const struct my_i2c_config my_i2c_config_##inst = &#123;        \</span></span><br><span class="line"><span class="meta">        .i2c_dev = DEVICE_DT_GET(DT_INST_BUS(inst)),                 \</span></span><br><span class="line"><span class="meta">        .addr = DT_INST_REG_ADDR(inst),                              \</span></span><br><span class="line"><span class="meta">    &#125;;                                                                \</span></span><br><span class="line"><span class="meta">                                                                      \</span></span><br><span class="line"><span class="meta">    static struct my_i2c_data my_i2c_data_##inst;                    \</span></span><br><span class="line"><span class="meta">                                                                      \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(inst,                                       \</span></span><br><span class="line"><span class="meta">                         my_i2c_init,                                 \</span></span><br><span class="line"><span class="meta">                         NULL,                                        \</span></span><br><span class="line"><span class="meta">                         &amp;my_i2c_data_##inst,                        \</span></span><br><span class="line"><span class="meta">                         &amp;my_i2c_config_##inst,                      \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                                 \</span></span><br><span class="line"><span class="meta">                         CONFIG_I2C_INIT_PRIORITY,                   \</span></span><br><span class="line"><span class="meta">                         &amp;my_i2c_api);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为每个设备树实例创建驱动实例 */</span></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_I2C_INIT)</span><br></pre></td></tr></table></figure><h2 id="4-SPI驱动开发"><a href="#4-SPI驱动开发" class="headerlink" title="4. SPI驱动开发"></a>4. SPI驱动开发</h2><h3 id="4-1-SPI配置"><a href="#4-1-SPI配置" class="headerlink" title="4.1 SPI配置"></a>4.1 SPI配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">spi_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">spi</span> =</span> DEVICE_DT_GET(DT_NODELABEL(spi0));</span><br><span class="line">    <span class="type">uint8_t</span> tx_buffer[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_buffer[<span class="keyword">sizeof</span>(tx_buffer)];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(spi)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* SPI配置 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">spi_cfg</span> =</span> &#123;</span><br><span class="line">        .operation = SPI_WORD_SET(<span class="number">8</span>) | SPI_TRANSFER_MSB |</span><br><span class="line">                    SPI_MODE_CPOL | SPI_MODE_CPHA,</span><br><span class="line">        .frequency = <span class="number">1000000</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">tx_buf</span> =</span> &#123;</span><br><span class="line">        .buf = tx_buffer,</span><br><span class="line">        .len = <span class="keyword">sizeof</span>(tx_buffer)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">rx_buf</span> =</span> &#123;</span><br><span class="line">        .buf = rx_buffer,</span><br><span class="line">        .len = <span class="keyword">sizeof</span>(rx_buffer)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">tx</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;tx_buf,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">rx</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;rx_buf,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行传输 */</span></span><br><span class="line">    ret = spi_transceive(spi, &amp;spi_cfg, &amp;tx, &amp;rx);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-SPI设备驱动"><a href="#4-2-SPI设备驱动" class="headerlink" title="4.2 SPI设备驱动"></a>4.2 SPI设备驱动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_spi_config</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">spi_dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">spi_cfg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_cs_control</span> <span class="title">cs_ctrl</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备数据结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_spi_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_spi_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="type">uint8_t</span> *tx_buf,</span></span><br><span class="line"><span class="params">                          <span class="type">uint8_t</span> *rx_buf,</span></span><br><span class="line"><span class="params">                          <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">tx</span> =</span> &#123;</span><br><span class="line">        .buf = (<span class="type">void</span> *)tx_buf,</span><br><span class="line">        .len = len</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">rx</span> =</span> &#123;</span><br><span class="line">        .buf = rx_buf,</span><br><span class="line">        .len = len</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">tx_bufs</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;tx,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">rx_bufs</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;rx,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = spi_transceive(config-&gt;spi_dev,</span><br><span class="line">                        &amp;config-&gt;spi_cfg,</span><br><span class="line">                        &amp;tx_bufs,</span><br><span class="line">                        &amp;rx_bufs);</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_spi_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(config-&gt;spi_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_mutex_init(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*transfer)(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span><br><span class="line">                   <span class="type">const</span> <span class="type">uint8_t</span> *tx_buf,</span><br><span class="line">                   <span class="type">uint8_t</span> *rx_buf,</span><br><span class="line">                   <span class="type">size_t</span> len);</span><br><span class="line">&#125; my_spi_api = &#123;</span><br><span class="line">    .transfer = my_spi_transfer,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备定义宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_SPI_INIT(inst)                                              \</span></span><br><span class="line"><span class="meta">    static const struct my_spi_config my_spi_config_##inst = &#123;        \</span></span><br><span class="line"><span class="meta">        .spi_dev = DEVICE_DT_GET(DT_INST_BUS(inst)),                 \</span></span><br><span class="line"><span class="meta">        .spi_cfg = &#123;                                                  \</span></span><br><span class="line"><span class="meta">            .operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB |        \</span></span><br><span class="line"><span class="meta">                        SPI_MODE_CPOL | SPI_MODE_CPHA,               \</span></span><br><span class="line"><span class="meta">            .frequency = DT_INST_PROP(inst, spi_max_frequency),      \</span></span><br><span class="line"><span class="meta">        &#125;,                                                           \</span></span><br><span class="line"><span class="meta">        .cs_ctrl = SPI_CS_CONTROL_INIT(DT_INST_SPI_DEV(inst),       \</span></span><br><span class="line"><span class="meta">                                      DT_INST_SPI_CS_GPIOS(inst)),   \</span></span><br><span class="line"><span class="meta">    &#125;;                                                               \</span></span><br><span class="line"><span class="meta">                                                                     \</span></span><br><span class="line"><span class="meta">    static struct my_spi_data my_spi_data_##inst;                   \</span></span><br><span class="line"><span class="meta">                                                                     \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(inst,                                      \</span></span><br><span class="line"><span class="meta">                         my_spi_init,                                \</span></span><br><span class="line"><span class="meta">                         NULL,                                       \</span></span><br><span class="line"><span class="meta">                         &amp;my_spi_data_##inst,                       \</span></span><br><span class="line"><span class="meta">                         &amp;my_spi_config_##inst,                     \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                                \</span></span><br><span class="line"><span class="meta">                         CONFIG_SPI_INIT_PRIORITY,                  \</span></span><br><span class="line"><span class="meta">                         &amp;my_spi_api);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为每个设备树实例创建驱动实例 */</span></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_SPI_INIT)</span><br></pre></td></tr></table></figure><h2 id="5-驱动测试"><a href="#5-驱动测试" class="headerlink" title="5. 驱动测试"></a>5. 驱动测试</h2><h3 id="5-1-单元测试"><a href="#5-1-单元测试" class="headerlink" title="5.1 单元测试"></a>5.1 单元测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试夹具设置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">gpio_setup</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(gpio0));</span><br><span class="line">    zassert_true(device_is_ready(dev), <span class="string">&quot;GPIO device not ready&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span> *)dev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO测试用例 */</span></span><br><span class="line">ZTEST_SUITE(gpio_test, <span class="literal">NULL</span>, gpio_setup, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">ZTEST(gpio_test, test_gpio_configure)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(gpio0));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_configure(dev, <span class="number">0</span>, GPIO_OUTPUT);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;Failed to configure GPIO pin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_set(dev, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;Failed to set GPIO pin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_get(dev, <span class="number">0</span>);</span><br><span class="line">    zassert_equal(ret, <span class="number">1</span>, <span class="string">&quot;Unexpected GPIO pin state&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-集成测试"><a href="#5-2-集成测试" class="headerlink" title="5.2 集成测试"></a>5.2 集成测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* I2C和SPI组合测试 */</span></span><br><span class="line">ZTEST(driver_test, test_i2c_spi_transfer)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2c_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2c0));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">spi_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(spi0));</span><br><span class="line">    <span class="type">uint8_t</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* I2C测试 */</span></span><br><span class="line">    ret = i2c_reg_read_byte(i2c_dev, <span class="number">0x50</span>, <span class="number">0x00</span>, &amp;data);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;I2C read failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* SPI测试 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">spi_cfg</span> =</span> &#123;</span><br><span class="line">        .operation = SPI_WORD_SET(<span class="number">8</span>),</span><br><span class="line">        .frequency = <span class="number">1000000</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ret = spi_write(spi_dev, &amp;spi_cfg, &amp;data, <span class="number">1</span>);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;SPI write failed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-驱动Shell命令"><a href="#6-驱动Shell命令" class="headerlink" title="6. 驱动Shell命令"></a>6. 驱动Shell命令</h2><h3 id="6-1-Shell命令实现"><a href="#6-1-Shell命令实现" class="headerlink" title="6.1 Shell命令实现"></a>6.1 Shell命令实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO shell命令 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_gpio_get</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                       <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> pin;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Wrong parameters count&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dev = device_get_binding(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!dev) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Device not found: %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pin = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">    ret = gpio_pin_get(dev, pin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Failed to get pin state&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shell_print(shell, <span class="string">&quot;Pin %d state: %d&quot;</span>, pin, ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Shell命令注册 */</span></span><br><span class="line">SHELL_STATIC_SUBCMD_SET_CREATE(gpio_cmds,</span><br><span class="line">    SHELL_CMD(get, <span class="literal">NULL</span>, <span class="string">&quot;Get GPIO pin state&quot;</span>,</span><br><span class="line">              cmd_gpio_get),</span><br><span class="line">    SHELL_SUBCMD_SET_END</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHELL_CMD_REGISTER(gpio, &amp;gpio_cmds,</span><br><span class="line">                  <span class="string">&quot;GPIO commands&quot;</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="6-2-Shell命令配置"><a href="#6-2-Shell命令配置" class="headerlink" title="6.2 Shell命令配置"></a>6.2 Shell命令配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Shell配置 (prj.conf)</span><br><span class="line">CONFIG_SHELL=y</span><br><span class="line">CONFIG_SHELL_BACKEND_SERIAL=y</span><br><span class="line">CONFIG_SHELL_PROMPT_UART=&quot;gpio:~$ &quot;</span><br><span class="line"></span><br><span class="line"># GPIO Shell配置</span><br><span class="line">CONFIG_GPIO_SHELL=y</span><br></pre></td></tr></table></figure><h2 id="7-电源管理"><a href="#7-电源管理" class="headerlink" title="7. 电源管理"></a>7. 电源管理</h2><h3 id="7-1-设备电源管理"><a href="#7-1-设备电源管理" class="headerlink" title="7.1 设备电源管理"></a>7.1 设备电源管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电源管理回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_pm_action</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">/* 恢复设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">/* 挂起设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_OFF:</span><br><span class="line">        <span class="comment">/* 关闭设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_ON:</span><br><span class="line">        <span class="comment">/* 打开设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备定义 */</span></span><br><span class="line">PM_DEVICE_DT_INST_DEFINE(<span class="number">0</span>, my_driver_pm_action);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用电源管理 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">power_management_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_dev));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 挂起设备 */</span></span><br><span class="line">    ret = pm_device_action_run(dev,</span><br><span class="line">                              PM_DEVICE_ACTION_SUSPEND);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to suspend device\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 恢复设备 */</span></span><br><span class="line">    ret = pm_device_action_run(dev,</span><br><span class="line">                              PM_DEVICE_ACTION_RESUME);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to resume device\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-电源状态配置"><a href="#7-2-电源状态配置" class="headerlink" title="7.2 电源状态配置"></a>7.2 电源状态配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 电源管理配置 (prj.conf)</span><br><span class="line">CONFIG_PM=y</span><br><span class="line">CONFIG_PM_DEVICE=y</span><br><span class="line">CONFIG_PM_DEVICE_RUNTIME=y</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 文件系统指南</title>
      <link href="/2025/03/21/nodic/zephyr/filesystem/README/"/>
      <url>/2025/03/21/nodic/zephyr/filesystem/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-文件系统指南"><a href="#Zephyr-文件系统指南" class="headerlink" title="Zephyr 文件系统指南"></a>Zephyr 文件系统指南</h1><h2 id="1-文件系统概述"><a href="#1-文件系统概述" class="headerlink" title="1. 文件系统概述"></a>1. 文件系统概述</h2><p>Zephyr RTOS 支持多种文件系统，包括但不限于：</p><ul><li>LittleFS：适用于嵌入式系统的轻量级文件系统</li><li>FAT：广泛兼容的文件系统</li><li>NFFS：专为闪存设计的文件系统</li></ul><h2 id="2-基础配置"><a href="#2-基础配置" class="headerlink" title="2. 基础配置"></a>2. 基础配置</h2><h3 id="2-1-文件系统配置-prj-conf"><a href="#2-1-文件系统配置-prj-conf" class="headerlink" title="2.1 文件系统配置 (prj.conf)"></a>2.1 文件系统配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 文件系统支持</span><br><span class="line">CONFIG_FILE_SYSTEM=y</span><br><span class="line"></span><br><span class="line"># LittleFS 支持</span><br><span class="line">CONFIG_FILE_SYSTEM_LITTLEFS=y</span><br><span class="line"></span><br><span class="line"># FAT 文件系统支持（可选）</span><br><span class="line">CONFIG_FAT_FILESYSTEM_ELM=y</span><br><span class="line"></span><br><span class="line"># Flash 驱动配置</span><br><span class="line">CONFIG_FLASH=y</span><br><span class="line">CONFIG_FLASH_MAP=y</span><br><span class="line">CONFIG_FLASH_PAGE_LAYOUT=y</span><br><span class="line"></span><br><span class="line"># 文件系统 Shell 命令（可选，用于调试）</span><br><span class="line">CONFIG_FILE_SYSTEM_SHELL=y</span><br></pre></td></tr></table></figure><h3 id="2-2-分区配置-boards-xxx-overlay"><a href="#2-2-分区配置-boards-xxx-overlay" class="headerlink" title="2.2 分区配置 (boards&#x2F;xxx.overlay)"></a>2.2 分区配置 (boards&#x2F;xxx.overlay)</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">fstab</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,fstab&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        lfs1:</span> <span class="title class_">lfs1</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,fstab,littlefs&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">mount-point</span> <span class="operator">=</span> <span class="string">&quot;/lfs1&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">partition</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;lfs1_part</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">read-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">prog-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">lookahead-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">32</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">block-cycles</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">512</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;flash0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">partitions</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;fixed-partitions&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">        <span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">        lfs1_part:</span> <span class="title class_">partition@70000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;storage&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x70000</span> <span class="number">0x10000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="3-基本文件操作"><a href="#3-基本文件操作" class="headerlink" title="3. 基本文件操作"></a>3. 基本文件操作</h2><h3 id="3-1-文件读写"><a href="#3-1-文件读写" class="headerlink" title="3.1 文件读写"></a>3.1 文件读写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">file_operations_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    <span class="type">ssize_t</span> bytes_written, bytes_read;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化文件对象 */</span></span><br><span class="line">    fs_file_t_init(&amp;file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写文件 */</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs1/test.txt&quot;</span>, FS_O_CREATE | FS_O_WRITE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to open file for writing: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bytes_written = fs_write(&amp;file, <span class="string">&quot;Hello, Zephyr!&quot;</span>, <span class="number">14</span>);</span><br><span class="line">    <span class="keyword">if</span> (bytes_written &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to write file: %d\n&quot;</span>, bytes_written);</span><br><span class="line">        fs_close(&amp;file);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读文件 */</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs1/test.txt&quot;</span>, FS_O_READ);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to open file for reading: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bytes_read = fs_read(&amp;file, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">if</span> (bytes_read &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to read file: %d\n&quot;</span>, bytes_read);</span><br><span class="line">        fs_close(&amp;file);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buf[bytes_read] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    printk(<span class="string">&quot;Read from file: %s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-目录操作"><a href="#3-2-目录操作" class="headerlink" title="3.2 目录操作"></a>3.2 目录操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">directory_operations_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建目录 */</span></span><br><span class="line">    ret = fs_mkdir(<span class="string">&quot;/lfs1/mydir&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create directory: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 列出目录内容 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_dir_t</span> <span class="title">dir</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_dirent</span> <span class="title">entry</span>;</span></span><br><span class="line"></span><br><span class="line">    fs_dir_t_init(&amp;dir);</span><br><span class="line">    ret = fs_opendir(&amp;dir, <span class="string">&quot;/lfs1&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to open directory: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        ret = fs_readdir(&amp;dir, &amp;entry);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to read directory: %d\n&quot;</span>, ret);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (entry.name[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printk(<span class="string">&quot;Found file: %s\n&quot;</span>, entry.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs_closedir(&amp;dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-高级文件系统操作"><a href="#4-高级文件系统操作" class="headerlink" title="4. 高级文件系统操作"></a>4. 高级文件系统操作</h2><h3 id="4-1-文件系统挂载"><a href="#4-1-文件系统挂载" class="headerlink" title="4.1 文件系统挂载"></a>4.1 文件系统挂载</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/littlefs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义文件系统配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_mount_t</span> <span class="title">lfs_storage_mnt</span> =</span> &#123;</span><br><span class="line">    .type = FS_LITTLEFS,</span><br><span class="line">    .mnt_point = <span class="string">&quot;/lfs1&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mount_filesystem</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 挂载文件系统 */</span></span><br><span class="line">    ret = fs_mount(&amp;lfs_storage_mnt);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to mount filesystem: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;LittleFS mounted at %s\n&quot;</span>, lfs_storage_mnt.mnt_point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-文件系统信息"><a href="#4-2-文件系统信息" class="headerlink" title="4.2 文件系统信息"></a>4.2 文件系统信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">filesystem_info</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_statvfs</span> <span class="title">stats</span>;</span></span><br><span class="line"></span><br><span class="line">    ret = fs_statvfs(<span class="string">&quot;/lfs1&quot;</span>, &amp;stats);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to get filesystem stats: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Filesystem info for /lfs1:\n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;Total blocks: %lu\n&quot;</span>, stats.f_blocks);</span><br><span class="line">    printk(<span class="string">&quot;Free blocks: %lu\n&quot;</span>, stats.f_bfree);</span><br><span class="line">    printk(<span class="string">&quot;Block size: %lu\n&quot;</span>, stats.f_bsize);</span><br><span class="line">    printk(<span class="string">&quot;Max name length: %lu\n&quot;</span>, stats.f_namemax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-文件系统测试"><a href="#5-文件系统测试" class="headerlink" title="5. 文件系统测试"></a>5. 文件系统测试</h2><h3 id="5-1-基本功能测试"><a href="#5-1-基本功能测试" class="headerlink" title="5.1 基本功能测试"></a>5.1 基本功能测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">ZTEST(filesystem_tests, test_file_operations)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">char</span> write_buf[] = <span class="string">&quot;Test data&quot;</span>;</span><br><span class="line">    <span class="type">char</span> read_buf[<span class="number">20</span>];</span><br><span class="line">    <span class="type">ssize_t</span> bytes_written, bytes_read;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    fs_file_t_init(&amp;file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写测试 */</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs1/test.txt&quot;</span>, FS_O_CREATE | FS_O_WRITE);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;Failed to open file for writing&quot;</span>);</span><br><span class="line"></span><br><span class="line">    bytes_written = fs_write(&amp;file, write_buf, <span class="keyword">sizeof</span>(write_buf));</span><br><span class="line">    zassert_equal(bytes_written, <span class="keyword">sizeof</span>(write_buf), <span class="string">&quot;Failed to write file&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读测试 */</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs1/test.txt&quot;</span>, FS_O_READ);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;Failed to open file for reading&quot;</span>);</span><br><span class="line"></span><br><span class="line">    bytes_read = fs_read(&amp;file, read_buf, <span class="keyword">sizeof</span>(read_buf));</span><br><span class="line">    zassert_equal(bytes_read, <span class="keyword">sizeof</span>(write_buf), <span class="string">&quot;Failed to read file&quot;</span>);</span><br><span class="line"></span><br><span class="line">    zassert_mem_equal(write_buf, read_buf, <span class="keyword">sizeof</span>(write_buf), <span class="string">&quot;Read data does not match written data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZTEST_SUITE(filesystem_tests, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h2 id="6-最佳实践"><a href="#6-最佳实践" class="headerlink" title="6. 最佳实践"></a>6. 最佳实践</h2><ol><li><p>错误处理：始终检查文件操作的返回值，并适当处理错误。</p></li><li><p>资源管理：使用完文件或目录后，务必关闭它们以释放资源。</p></li><li><p>缓冲区管理：在读写操作中使用适当大小的缓冲区，避免缓冲区溢出。</p></li><li><p>文件系统一致性：考虑使用日志或事务来确保文件系统操作的原子性，特别是在写入关键数据时。</p></li><li><p>性能优化：对于频繁访问的小文件，考虑使用内存文件系统或缓存机制。</p></li><li><p>安全性：在处理用户输入的文件路径时，进行适当的验证和清理，防止路径遍历攻击。</p></li><li><p>电源管理：在进行文件操作时，确保系统不会意外进入低功耗模式。</p></li><li><p>文件系统选择：根据应用需求（如读写性能、磨损均衡、掉电保护等）选择合适的文件系统。</p></li><li><p>分区管理：合理规划存储空间，为不同用途（如配置、日志、用户数据）分配独立的分区。</p></li><li><p>定期维护：实现文件系统检查和修复机制，以应对意外断电等情况导致的文件系统不一致。</p></li></ol><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 错误处理指南</title>
      <link href="/2025/03/21/nodic/zephyr/error_handling/README/"/>
      <url>/2025/03/21/nodic/zephyr/error_handling/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-错误处理指南"><a href="#Zephyr-错误处理指南" class="headerlink" title="Zephyr 错误处理指南"></a>Zephyr 错误处理指南</h1><h2 id="1-错误码系统"><a href="#1-错误码系统" class="headerlink" title="1. 错误码系统"></a>1. 错误码系统</h2><h3 id="1-1-标准错误码"><a href="#1-1-标准错误码" class="headerlink" title="1.1 标准错误码"></a>1.1 标准错误码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 常见错误码 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPERM           1  <span class="comment">/* Operation not permitted */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOENT          2  <span class="comment">/* No such file or directory */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ESRCH           3  <span class="comment">/* No such process */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EINTR           4  <span class="comment">/* Interrupted system call */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EIO             5  <span class="comment">/* I/O error */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENXIO           6  <span class="comment">/* No such device or address */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E2BIG           7  <span class="comment">/* Argument list too long */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOEXEC         8  <span class="comment">/* Exec format error */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EBADF           9  <span class="comment">/* Bad file number */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ECHILD         10  <span class="comment">/* No child processes */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EAGAIN         11  <span class="comment">/* Try again */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOMEM         12  <span class="comment">/* Out of memory */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EACCES         13  <span class="comment">/* Permission denied */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFAULT         14  <span class="comment">/* Bad address */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EBUSY          16  <span class="comment">/* Device or resource busy */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EEXIST         17  <span class="comment">/* File exists */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXDEV          18  <span class="comment">/* Cross-device link */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENODEV         19  <span class="comment">/* No such device */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOTDIR        20  <span class="comment">/* Not a directory */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EISDIR         21  <span class="comment">/* Is a directory */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EINVAL         22  <span class="comment">/* Invalid argument */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENFILE         23  <span class="comment">/* File table overflow */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EMFILE         24  <span class="comment">/* Too many open files */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOSPC         28  <span class="comment">/* No space left on device */</span></span></span><br></pre></td></tr></table></figure><h3 id="1-2-错误码使用示例"><a href="#1-2-错误码使用示例" class="headerlink" title="1.2 错误码使用示例"></a>1.2 错误码使用示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_operation_example</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化文件对象 */</span></span><br><span class="line">    fs_file_t_init(&amp;file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    ret = fs_open(&amp;file, filename, FS_O_READ);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ret == -ENOENT) &#123;</span><br><span class="line">            printk(<span class="string">&quot;File not found: %s\n&quot;</span>, filename);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == -EACCES) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Permission denied: %s\n&quot;</span>, filename);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to open file: %d\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 关闭文件 */</span></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-断言机制"><a href="#2-断言机制" class="headerlink" title="2. 断言机制"></a>2. 断言机制</h2><h3 id="2-1-基本断言"><a href="#2-1-基本断言" class="headerlink" title="2.1 基本断言"></a>2.1 基本断言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/__assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_example</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 参数检查 */</span></span><br><span class="line">    __ASSERT(ptr != <span class="literal">NULL</span>, <span class="string">&quot;Null pointer&quot;</span>);</span><br><span class="line">    __ASSERT(size &gt; <span class="number">0</span>, <span class="string">&quot;Invalid size&quot;</span>);</span><br><span class="line">    __ASSERT(size &lt;= <span class="number">1024</span>, <span class="string">&quot;Size too large&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 状态检查 */</span></span><br><span class="line">    __ASSERT(k_is_in_isr() == <span class="literal">false</span>,</span><br><span class="line">             <span class="string">&quot;Cannot be called from ISR&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 复杂条件检查 */</span></span><br><span class="line">    __ASSERT((size &amp; (size - <span class="number">1</span>)) == <span class="number">0</span>,</span><br><span class="line">             <span class="string">&quot;Size must be power of 2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-条件编译断言"><a href="#2-2-条件编译断言" class="headerlink" title="2.2 条件编译断言"></a>2.2 条件编译断言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/__assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 仅在调试模式启用的断言 */</span></span><br><span class="line">__ASSERT_NO_MSG(condition);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带消息的条件编译断言 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG</span></span><br><span class="line">    __ASSERT(condition, <span class="string">&quot;Error message&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 永久断言（不受配置影响） */</span></span><br><span class="line">__ASSERT_ALWAYS(condition, <span class="string">&quot;Critical error&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3. 异常处理"></a>3. 异常处理</h2><h3 id="3-1-故障处理"><a href="#3-1-故障处理" class="headerlink" title="3.1 故障处理"></a>3.1 故障处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 故障处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">k_sys_fatal_error_handler</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> reason,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="type">z_arch_esf_t</span> *esf)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Fatal system error! Reason: %u\n&quot;</span>, reason);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印错误信息 */</span></span><br><span class="line">    <span class="keyword">switch</span> (reason) &#123;</span><br><span class="line">    <span class="keyword">case</span> K_ERR_CPU_EXCEPTION:</span><br><span class="line">        printk(<span class="string">&quot;CPU Exception\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> K_ERR_SPURIOUS_IRQ:</span><br><span class="line">        printk(<span class="string">&quot;Spurious interrupt\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> K_ERR_STACK_CHK_FAIL:</span><br><span class="line">        printk(<span class="string">&quot;Stack overflow\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        printk(<span class="string">&quot;Unknown error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 系统重置 */</span></span><br><span class="line">    sys_reboot(SYS_REBOOT_COLD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-内存保护错误"><a href="#3-2-内存保护错误" class="headerlink" title="3.2 内存保护错误"></a>3.2 内存保护错误</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memory_protection_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使用try-catch风格的错误处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (k_mem_domain_add_thread(domain, k_current_get()) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 处理内存域添加失败 */</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 访问保护内存 */</span></span><br><span class="line">    <span class="keyword">if</span> (k_mem_paging_is_enabled()) &#123;</span><br><span class="line">        <span class="comment">/* 处理页面错误 */</span></span><br><span class="line">        k_mem_paging_stats_get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-错误恢复"><a href="#4-错误恢复" class="headerlink" title="4. 错误恢复"></a>4. 错误恢复</h2><h3 id="4-1-优雅降级"><a href="#4-1-优雅降级" class="headerlink" title="4.1 优雅降级"></a>4.1 优雅降级</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">graceful_degradation</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> retry_count = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (retry_count--) &#123;</span><br><span class="line">        ret = perform_operation();</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 操作成功 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == -EAGAIN) &#123;</span><br><span class="line">            <span class="comment">/* 临时错误，重试 */</span></span><br><span class="line">            k_msleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 严重错误，降级处理 */</span></span><br><span class="line">            handle_fallback();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-系统重启"><a href="#4-2-系统重启" class="headerlink" title="4.2 系统重启"></a>4.2 系统重启</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/reboot.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">system_recovery</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 保存关键数据 */</span></span><br><span class="line">    save_critical_data();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 根据错误类型选择重启方式 */</span></span><br><span class="line">    <span class="keyword">if</span> (is_hardware_error()) &#123;</span><br><span class="line">        <span class="comment">/* 冷重启 */</span></span><br><span class="line">        sys_reboot(SYS_REBOOT_COLD);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 热重启 */</span></span><br><span class="line">        sys_reboot(SYS_REBOOT_WARM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-日志记录"><a href="#5-日志记录" class="headerlink" title="5. 日志记录"></a>5. 日志记录</h2><h3 id="5-1-错误日志"><a href="#5-1-错误日志" class="headerlink" title="5.1 错误日志"></a>5.1 错误日志</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(error_log, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error_logging_example</span><span class="params">(<span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 不同级别的日志 */</span></span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOG_ERR(<span class="string">&quot;Operation failed: %d&quot;</span>, status);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOG_WRN(<span class="string">&quot;Operation completed with warnings&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LOG_INF(<span class="string">&quot;Operation successful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 带hex dump的日志 */</span></span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line">    LOG_HEXDUMP_ERR(data, <span class="keyword">sizeof</span>(data), <span class="string">&quot;Error data:&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-错误追踪"><a href="#5-2-错误追踪" class="headerlink" title="5.2 错误追踪"></a>5.2 错误追踪</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/debug/stack.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error_trace_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 打印调用栈 */</span></span><br><span class="line">    k_thread_stack_print_debug(k_current_get());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录错误现场 */</span></span><br><span class="line">    LOG_ERR(<span class="string">&quot;Error context:&quot;</span>);</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Thread ID: %p&quot;</span>, k_current_get());</span><br><span class="line">    LOG_ERR(<span class="string">&quot;CPU: %d&quot;</span>, arch_curr_cpu()-&gt;id);</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Priority: %d&quot;</span>, k_thread_priority_get(k_current_get()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-错误注入"><a href="#6-错误注入" class="headerlink" title="6. 错误注入"></a>6. 错误注入</h2><h3 id="6-1-故障注入"><a href="#6-1-故障注入" class="headerlink" title="6.1 故障注入"></a>6.1 故障注入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 故障注入配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fault_inject_config</span> &#123;</span></span><br><span class="line">    <span class="type">bool</span> enabled;</span><br><span class="line">    <span class="type">int</span> error_rate;    <span class="comment">/* 错误率（百分比） */</span></span><br><span class="line">    <span class="type">int</span> error_type;    <span class="comment">/* 错误类型 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 故障注入函数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">inject_fault</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> fault_inject_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (config-&gt;enabled) &#123;</span><br><span class="line">        <span class="comment">/* 根据错误率决定是否注入错误 */</span></span><br><span class="line">        <span class="keyword">if</span> (sys_rand32_get() % <span class="number">100</span> &lt; config-&gt;error_rate) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (config-&gt;error_type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> -EIO;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> -EINVAL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-测试用例"><a href="#6-2-测试用例" class="headerlink" title="6.2 测试用例"></a>6.2 测试用例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">ZTEST_SUITE(error_handling_tests, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试错误处理 */</span></span><br><span class="line">ZTEST(error_handling_tests, test_error_handling)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fault_inject_config</span> <span class="title">config</span> =</span> &#123;</span><br><span class="line">        .enabled = <span class="literal">true</span>,</span><br><span class="line">        .error_rate = <span class="number">100</span>,  <span class="comment">/* 总是注入错误 */</span></span><br><span class="line">        .error_type = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证错误处理 */</span></span><br><span class="line">    <span class="type">int</span> ret = inject_fault(&amp;config);</span><br><span class="line">    zassert_equal(ret, -ENOMEM,</span><br><span class="line">                 <span class="string">&quot;Expected ENOMEM error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-错误处理最佳实践"><a href="#7-错误处理最佳实践" class="headerlink" title="7. 错误处理最佳实践"></a>7. 错误处理最佳实践</h2><h3 id="7-1-错误传播"><a href="#7-1-错误传播" class="headerlink" title="7.1 错误传播"></a>7.1 错误传播</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 错误传播示例 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">process_data</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数验证 */</span></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span> || len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理数据 */</span></span><br><span class="line">    ret = validate_data(data, len);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 传播错误，保持原始错误码 */</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = transform_data(data, len);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 可以添加额外的错误信息 */</span></span><br><span class="line">        LOG_ERR(<span class="string">&quot;Data transformation failed: %d&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-清理处理"><a href="#7-2-清理处理" class="headerlink" title="7.2 清理处理"></a>7.2 清理处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 资源清理示例 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">resource_management</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *resource1 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">void</span> *resource2 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 分配第一个资源 */</span></span><br><span class="line">    resource1 = allocate_resource1();</span><br><span class="line">    <span class="keyword">if</span> (resource1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ret = -ENOMEM;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 分配第二个资源 */</span></span><br><span class="line">    resource2 = allocate_resource2();</span><br><span class="line">    <span class="keyword">if</span> (resource2 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ret = -ENOMEM;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用资源 */</span></span><br><span class="line">    ret = use_resources(resource1, resource2);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功路径 */</span></span><br><span class="line">    free_resource2(resource2);</span><br><span class="line">    free_resource1(resource1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">    <span class="comment">/* 错误路径，清理资源 */</span></span><br><span class="line">    <span class="keyword">if</span> (resource2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        free_resource2(resource2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resource1 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        free_resource1(resource1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 网络协议栈指南</title>
      <link href="/2025/03/21/nodic/zephyr/networking/README/"/>
      <url>/2025/03/21/nodic/zephyr/networking/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-网络协议栈指南"><a href="#Zephyr-网络协议栈指南" class="headerlink" title="Zephyr 网络协议栈指南"></a>Zephyr 网络协议栈指南</h1><h2 id="1-网络架构"><a href="#1-网络架构" class="headerlink" title="1. 网络架构"></a>1. 网络架构</h2><h3 id="1-1-协议栈结构"><a href="#1-1-协议栈结构" class="headerlink" title="1.1 协议栈结构"></a>1.1 协议栈结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[应用层] --&gt; B[Socket API]</span><br><span class="line">    B --&gt; C[网络协议]</span><br><span class="line">    C --&gt; D[网络设备驱动]</span><br><span class="line">    D --&gt; E[硬件]</span><br><span class="line">    </span><br><span class="line">    subgraph &quot;网络协议&quot;</span><br><span class="line">        F[TCP/UDP] --&gt; G[IP]</span><br><span class="line">        G --&gt; H[L2]</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="1-2-支持的协议"><a href="#1-2-支持的协议" class="headerlink" title="1.2 支持的协议"></a>1.2 支持的协议</h3><ul><li>IPv4&#x2F;IPv6</li><li>TCP&#x2F;UDP</li><li>MQTT</li><li>CoAP</li><li>HTTP</li><li>WebSocket</li><li>DTLS</li><li>6LoWPAN</li><li>Bluetooth</li></ul><h2 id="2-网络配置"><a href="#2-网络配置" class="headerlink" title="2. 网络配置"></a>2. 网络配置</h2><h3 id="2-1-基本配置"><a href="#2-1-基本配置" class="headerlink" title="2.1 基本配置"></a>2.1 基本配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 网络功能配置</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_IPV6=y</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line">CONFIG_NET_UDP=y</span><br><span class="line"></span><br><span class="line"># 网络缓冲区配置</span><br><span class="line">CONFIG_NET_BUF_RX_COUNT=16</span><br><span class="line">CONFIG_NET_BUF_TX_COUNT=16</span><br><span class="line">CONFIG_NET_BUF_DATA_SIZE=128</span><br><span class="line"></span><br><span class="line"># 网络接口配置</span><br><span class="line">CONFIG_NET_IF_UNICAST_IPV4_ADDR_COUNT=1</span><br><span class="line">CONFIG_NET_IF_MCAST_IPV4_ADDR_COUNT=1</span><br><span class="line">CONFIG_NET_IF_UNICAST_IPV6_ADDR_COUNT=1</span><br><span class="line">CONFIG_NET_IF_MCAST_IPV6_ADDR_COUNT=1</span><br></pre></td></tr></table></figure><h3 id="2-2-网络接口配置"><a href="#2-2-网络接口配置" class="headerlink" title="2.2 网络接口配置"></a>2.2 网络接口配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_if.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">network_setup</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">addr</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 获取默认网络接口 */</span></span><br><span class="line">    iface = net_if_get_default();</span><br><span class="line">    <span class="keyword">if</span> (!iface) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置IPv4地址 */</span></span><br><span class="line">    net_addr_pton(AF_INET, <span class="string">&quot;192.168.1.100&quot;</span>, &amp;addr);</span><br><span class="line">    net_if_ipv4_addr_add(iface, &amp;addr, NET_ADDR_MANUAL, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Socket-编程"><a href="#3-Socket-编程" class="headerlink" title="3. Socket 编程"></a>3. Socket 编程</h2><h3 id="3-1-TCP服务器"><a href="#3-1-TCP服务器" class="headerlink" title="3.1 TCP服务器"></a>3.1 TCP服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BACKLOG 5</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tcp_server</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> serv_sock, client_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="type">char</span> rx_buf[<span class="number">128</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 创建socket */</span></span><br><span class="line">    serv_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    server_addr.sin_port = htons(PORT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    <span class="keyword">if</span> (bind(serv_sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">             <span class="keyword">sizeof</span>(server_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(serv_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 监听连接 */</span></span><br><span class="line">    <span class="keyword">if</span> (listen(serv_sock, BACKLOG) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(serv_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 接受连接 */</span></span><br><span class="line">        client_sock = accept(serv_sock,</span><br><span class="line">                           (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">                           &amp;client_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (client_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 处理数据 */</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> received = recv(client_sock, rx_buf,</span><br><span class="line">                              <span class="keyword">sizeof</span>(rx_buf), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (received &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            send(client_sock, rx_buf, received, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        close(client_sock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-UDP通信"><a href="#3-2-UDP通信" class="headerlink" title="3.2 UDP通信"></a>3.2 UDP通信</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">udp_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> rx_buf[<span class="number">128</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 创建UDP socket */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    server_addr.sin_port = htons(<span class="number">8080</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">             <span class="keyword">sizeof</span>(server_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 接收数据 */</span></span><br><span class="line">        <span class="type">int</span> received = recvfrom(sock, rx_buf, <span class="keyword">sizeof</span>(rx_buf), <span class="number">0</span>,</span><br><span class="line">                              (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">                              &amp;client_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (received &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 发送响应 */</span></span><br><span class="line">        sendto(sock, rx_buf, received, <span class="number">0</span>,</span><br><span class="line">               (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">               client_addr_len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-HTTP客户端"><a href="#4-HTTP客户端" class="headerlink" title="4. HTTP客户端"></a>4. HTTP客户端</h2><h3 id="4-1-HTTP-GET请求"><a href="#4-1-HTTP-GET请求" class="headerlink" title="4.1 HTTP GET请求"></a>4.1 HTTP GET请求</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/http/client.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HTTP_PORT 80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RECV_BUFFER_SIZE 512</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">http_get_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">http_client_req</span> <span class="title">req</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">http_client_resp</span> <span class="title">rsp</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> recv_buf[RECV_BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置HTTP请求 */</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;req, <span class="number">0</span>, <span class="keyword">sizeof</span>(req));</span><br><span class="line">    <span class="built_in">memset</span>(&amp;rsp, <span class="number">0</span>, <span class="keyword">sizeof</span>(rsp));</span><br><span class="line">    </span><br><span class="line">    req.method = HTTP_GET;</span><br><span class="line">    req.url = <span class="string">&quot;http://example.com/api/data&quot;</span>;</span><br><span class="line">    req.host = <span class="string">&quot;example.com&quot;</span>;</span><br><span class="line">    req.protocol = <span class="string">&quot;HTTP/1.1&quot;</span>;</span><br><span class="line">    req.response = recv_buf;</span><br><span class="line">    req.response_size = <span class="keyword">sizeof</span>(recv_buf);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 发送请求 */</span></span><br><span class="line">    ret = http_client_req(&amp;req, &amp;rsp);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 处理响应 */</span></span><br><span class="line">    <span class="keyword">if</span> (rsp.http_status_code == <span class="number">200</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Response: %s\n&quot;</span>, rsp.body_start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-MQTT客户端"><a href="#5-MQTT客户端" class="headerlink" title="5. MQTT客户端"></a>5. MQTT客户端</h2><h3 id="5-1-MQTT连接和发布"><a href="#5-1-MQTT连接和发布" class="headerlink" title="5.1 MQTT连接和发布"></a>5.1 MQTT连接和发布</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/mqtt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* MQTT配置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MQTT_CLIENTID <span class="string">&quot;zephyr_client&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MQTT_BROKER_ADDR <span class="string">&quot;broker.example.com&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MQTT_BROKER_PORT 1883</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* MQTT回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mqtt_evt_handler</span><span class="params">(<span class="keyword">struct</span> mqtt_client *client,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> <span class="keyword">struct</span> mqtt_evt *evt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (evt-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> MQTT_EVT_CONNACK:</span><br><span class="line">        <span class="keyword">if</span> (evt-&gt;result == <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;MQTT connected\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> MQTT_EVT_PUBLISH:</span><br><span class="line">        printk(<span class="string">&quot;MQTT message received\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mqtt_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mqtt_client</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">broker</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置MQTT客户端 */</span></span><br><span class="line">    mqtt_client_init(&amp;client);</span><br><span class="line">    </span><br><span class="line">    broker.sin_family = AF_INET;</span><br><span class="line">    broker.sin_port = htons(MQTT_BROKER_PORT);</span><br><span class="line">    net_addr_pton(AF_INET, MQTT_BROKER_ADDR,</span><br><span class="line">                  &amp;broker.sin_addr);</span><br><span class="line">    </span><br><span class="line">    client.broker = &amp;broker;</span><br><span class="line">    client.evt_cb = mqtt_evt_handler;</span><br><span class="line">    client.client_id.utf8 = MQTT_CLIENTID;</span><br><span class="line">    client.client_id.size = <span class="built_in">strlen</span>(MQTT_CLIENTID);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 连接到MQTT服务器 */</span></span><br><span class="line">    mqtt_connect(&amp;client);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 发布消息 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mqtt_publish_param</span> <span class="title">param</span>;</span></span><br><span class="line">    param.message.topic.topic.utf8 = <span class="string">&quot;test/topic&quot;</span>;</span><br><span class="line">    param.message.topic.topic.size = <span class="built_in">strlen</span>(<span class="string">&quot;test/topic&quot;</span>);</span><br><span class="line">    param.message.payload.data = <span class="string">&quot;Hello MQTT&quot;</span>;</span><br><span class="line">    param.message.payload.len = <span class="built_in">strlen</span>(<span class="string">&quot;Hello MQTT&quot;</span>);</span><br><span class="line">    param.message_id = <span class="number">1</span>;</span><br><span class="line">    param.dup_flag = <span class="number">0</span>;</span><br><span class="line">    param.retain_flag = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    mqtt_publish(&amp;client, &amp;param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-网络诊断工具"><a href="#6-网络诊断工具" class="headerlink" title="6. 网络诊断工具"></a>6. 网络诊断工具</h2><h3 id="6-1-Ping"><a href="#6-1-Ping" class="headerlink" title="6.1 Ping"></a>6.1 Ping</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/ping.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ping_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置目标地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    net_addr_pton(AF_INET, <span class="string">&quot;8.8.8.8&quot;</span>, &amp;addr.sin_addr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 发送ping */</span></span><br><span class="line">    ret = net_ping((<span class="keyword">struct</span> sockaddr *)&amp;addr,</span><br><span class="line">                   <span class="keyword">sizeof</span>(addr), <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Ping successful\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-网络状态监控"><a href="#6-2-网络状态监控" class="headerlink" title="6.2 网络状态监控"></a>6.2 网络状态监控</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_stats.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_network_stats</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">    net_mgmt(NET_REQUEST_STATS_GET_ALL, <span class="literal">NULL</span>, &amp;stats,</span><br><span class="line">             <span class="keyword">sizeof</span>(stats));</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;IPv4 packets received: %d\n&quot;</span>,</span><br><span class="line">           stats.ipv4.recv);</span><br><span class="line">    printk(<span class="string">&quot;IPv4 packets sent: %d\n&quot;</span>,</span><br><span class="line">           stats.ipv4.sent);</span><br><span class="line">    printk(<span class="string">&quot;TCP bytes received: %d\n&quot;</span>,</span><br><span class="line">           stats.tcp.bytes.received);</span><br><span class="line">    printk(<span class="string">&quot;TCP bytes sent: %d\n&quot;</span>,</span><br><span class="line">           stats.tcp.bytes.sent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-网络安全"><a href="#7-网络安全" class="headerlink" title="7. 网络安全"></a>7. 网络安全</h2><h3 id="7-1-TLS配置"><a href="#7-1-TLS配置" class="headerlink" title="7.1 TLS配置"></a>7.1 TLS配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/tls_credentials.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tls_setup</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 加载证书 */</span></span><br><span class="line">    ret = tls_credential_add(CA_CERTIFICATE_TAG,</span><br><span class="line">                            TLS_CREDENTIAL_CA_CERTIFICATE,</span><br><span class="line">                            ca_certificate,</span><br><span class="line">                            <span class="keyword">sizeof</span>(ca_certificate));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to add CA certificate\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置TLS */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tls_credential_t</span> <span class="title">tls_creds</span> =</span> &#123;</span><br><span class="line">        .type = TLS_CREDENTIAL_NONE,</span><br><span class="line">        .tag = CA_CERTIFICATE_TAG,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用TLS创建安全socket */</span></span><br><span class="line">    <span class="type">int</span> sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置TLS选项 */</span></span><br><span class="line">    setsockopt(sock, SOL_TLS, TLS_SEC_TAG_LIST,</span><br><span class="line">               &amp;tls_creds, <span class="keyword">sizeof</span>(tls_creds));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-DTLS示例"><a href="#7-2-DTLS示例" class="headerlink" title="7.2 DTLS示例"></a>7.2 DTLS示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/tls_credentials.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dtls_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 创建DTLS socket */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_DTLS_1_2);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置DTLS */</span></span><br><span class="line">    <span class="type">sec_tag_t</span> sec_tag_list[] = &#123;</span><br><span class="line">        CA_CERTIFICATE_TAG,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    setsockopt(sock, SOL_TLS, TLS_SEC_TAG_LIST,</span><br><span class="line">               sec_tag_list, <span class="keyword">sizeof</span>(sec_tag_list));</span><br><span class="line">               </span><br><span class="line">    <span class="comment">/* 配置地址并连接 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">5684</span>);</span><br><span class="line">    net_addr_pton(AF_INET, <span class="string">&quot;192.168.1.100&quot;</span>, &amp;addr.sin_addr);</span><br><span class="line">    </span><br><span class="line">    connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 内存管理指南</title>
      <link href="/2025/03/21/nodic/zephyr/memory/README/"/>
      <url>/2025/03/21/nodic/zephyr/memory/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-内存管理指南"><a href="#Zephyr-内存管理指南" class="headerlink" title="Zephyr 内存管理指南"></a>Zephyr 内存管理指南</h1><h2 id="1-内存管理配置"><a href="#1-内存管理配置" class="headerlink" title="1. 内存管理配置"></a>1. 内存管理配置</h2><h3 id="1-1-内存配置-prj-conf"><a href="#1-1-内存配置-prj-conf" class="headerlink" title="1.1 内存配置 (prj.conf)"></a>1.1 内存配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 堆内存配置</span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=16384</span><br><span class="line">CONFIG_HEAP_MEM_POOL_MIN_SIZE=64</span><br><span class="line"></span><br><span class="line"># 系统内存池配置</span><br><span class="line">CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=2048</span><br><span class="line">CONFIG_MAIN_STACK_SIZE=2048</span><br><span class="line"></span><br><span class="line"># 内存调试配置</span><br><span class="line">CONFIG_DEBUG_OPTIMIZATIONS=y</span><br><span class="line">CONFIG_DEBUG_INFO=y</span><br><span class="line">CONFIG_STACK_USAGE=y</span><br><span class="line">CONFIG_STACK_SENTINEL=y</span><br><span class="line">CONFIG_HEAP_MEMORY_INFO=y</span><br></pre></td></tr></table></figure><h3 id="1-2-内存分区示例-boards-xxx-overlay"><a href="#1-2-内存分区示例-boards-xxx-overlay" class="headerlink" title="1.2 内存分区示例 (boards&#x2F;xxx.overlay)"></a>1.2 内存分区示例 (boards&#x2F;xxx.overlay)</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">soc</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">        sram0:</span> <span class="title class_">memory@20000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;mmio-sram&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x20000000</span> <span class="number">0x40000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,sram</span> <span class="operator">=</span> <span class="variable">&amp;sram0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="2-静态内存分配"><a href="#2-静态内存分配" class="headerlink" title="2. 静态内存分配"></a>2. 静态内存分配</h2><h3 id="2-1-静态缓冲区"><a href="#2-1-静态缓冲区" class="headerlink" title="2.1 静态缓冲区"></a>2.1 静态缓冲区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 静态数组 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> static_buffer[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 静态结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">data_struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> value;</span><br><span class="line">    <span class="type">uint8_t</span> buffer[<span class="number">64</span>];</span><br><span class="line">&#125; static_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对齐的静态缓冲区 */</span></span><br><span class="line">K_ALIGNED(<span class="number">32</span>) <span class="type">static</span> <span class="type">uint8_t</span> aligned_buffer[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使用静态缓冲区 */</span></span><br><span class="line">    <span class="built_in">memset</span>(static_buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(static_buffer));</span><br><span class="line">    static_data.value = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-线程栈"><a href="#2-2-线程栈" class="headerlink" title="2.2 线程栈"></a>2.2 线程栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程栈 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(thread_stack, STACK_SIZE);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 线程代码 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 创建线程 */</span></span><br><span class="line">    k_thread_create(&amp;thread_data, thread_stack,</span><br><span class="line">                    STACK_SIZE,</span><br><span class="line">                    thread_entry,</span><br><span class="line">                    <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    K_PRIO_PREEMPT(<span class="number">10</span>), <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-动态内存分配"><a href="#3-动态内存分配" class="headerlink" title="3. 动态内存分配"></a>3. 动态内存分配</h2><h3 id="3-1-堆内存管理"><a href="#3-1-堆内存管理" class="headerlink" title="3.1 堆内存管理"></a>3.1 堆内存管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 分配内存 */</span></span><br><span class="line">    <span class="type">void</span> *ptr = k_malloc(<span class="number">256</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to allocate memory\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用内存 */</span></span><br><span class="line">    <span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 重新调整大小 */</span></span><br><span class="line">    <span class="type">void</span> *new_ptr = k_realloc(ptr, <span class="number">512</span>);</span><br><span class="line">    <span class="keyword">if</span> (new_ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to reallocate memory\n&quot;</span>);</span><br><span class="line">        k_free(ptr);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ptr = new_ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放内存 */</span></span><br><span class="line">    k_free(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-内存池"><a href="#3-2-内存池" class="headerlink" title="3.2 内存池"></a>3.2 内存池</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义内存池 */</span></span><br><span class="line">K_MEM_POOL_DEFINE(my_pool,    <span class="comment">/* 名称 */</span></span><br><span class="line">                  <span class="number">32</span>,         <span class="comment">/* 最小块大小 */</span></span><br><span class="line">                  <span class="number">256</span>,        <span class="comment">/* 最大块大小 */</span></span><br><span class="line">                  <span class="number">8</span>,          <span class="comment">/* 最大块数量 */</span></span><br><span class="line">                  <span class="number">4</span>);         <span class="comment">/* 对齐大小 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memory_pool_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_mem_block</span> <span class="title">block</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 分配内存块 */</span></span><br><span class="line">    ret = k_mem_pool_alloc(&amp;my_pool, &amp;block, <span class="number">128</span>, K_NO_WAIT);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to allocate memory block\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用内存块 */</span></span><br><span class="line">    <span class="built_in">memset</span>(block.data, <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放内存块 */</span></span><br><span class="line">    k_mem_pool_free(&amp;block);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-共享内存"><a href="#4-共享内存" class="headerlink" title="4. 共享内存"></a>4. 共享内存</h2><h3 id="4-1-共享内存区域"><a href="#4-1-共享内存区域" class="headerlink" title="4.1 共享内存区域"></a>4.1 共享内存区域</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/mem_manage.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义共享内存区域 */</span></span><br><span class="line">K_APPMEM_PARTITION_DEFINE(shared_mem_partition);</span><br><span class="line">K_APP_DMEM(shared_mem_partition) <span class="type">uint8_t</span> shared_data[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shared_memory_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置内存保护 */</span></span><br><span class="line">    k_mem_domain_init();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用共享内存 */</span></span><br><span class="line">    <span class="built_in">memset</span>(shared_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(shared_data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-内存映射"><a href="#4-2-内存映射" class="headerlink" title="4.2 内存映射"></a>4.2 内存映射</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/mmap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmap_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *addr;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 映射内存区域 */</span></span><br><span class="line">    ret = k_mem_map(&amp;addr, <span class="number">4096</span>, K_MEM_PERM_RW);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Memory mapping failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用映射的内存 */</span></span><br><span class="line">    <span class="built_in">memset</span>(addr, <span class="number">0</span>, <span class="number">4096</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 取消映射 */</span></span><br><span class="line">    k_mem_unmap(addr, <span class="number">4096</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-内存保护"><a href="#5-内存保护" class="headerlink" title="5. 内存保护"></a>5. 内存保护</h2><h3 id="5-1-用户空间内存"><a href="#5-1-用户空间内存" class="headerlink" title="5.1 用户空间内存"></a>5.1 用户空间内存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/app_memory/app_memdomain.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义用户空间内存分区 */</span></span><br><span class="line">K_APPMEM_PARTITION_DEFINE(app_partition);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在分区中定义数据 */</span></span><br><span class="line">K_APP_DMEM(app_partition) <span class="type">uint8_t</span> app_data[<span class="number">256</span>];</span><br><span class="line">K_APP_BMEM(app_partition) <span class="type">static</span> <span class="keyword">volatile</span> <span class="type">int</span> app_flag;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memory_protection_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置内存域 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_mem_domain</span> <span class="title">app_domain</span>;</span></span><br><span class="line">    k_mem_domain_init(&amp;app_domain, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 添加内存分区 */</span></span><br><span class="line">    k_mem_domain_add_partition(&amp;app_domain, &amp;app_partition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-栈保护"><a href="#5-2-栈保护" class="headerlink" title="5.2 栈保护"></a>5.2 栈保护</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 启用栈保护的线程栈 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(protected_stack, STACK_SIZE);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">protected_thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">protected_thread</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">uint8_t</span> buffer[<span class="number">256</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用栈内存 */</span></span><br><span class="line">    <span class="built_in">memset</span>((<span class="type">void</span> *)buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 创建启用栈保护的线程 */</span></span><br><span class="line">    k_thread_create(&amp;protected_thread_data,</span><br><span class="line">                    protected_stack,</span><br><span class="line">                    STACK_SIZE,</span><br><span class="line">                    protected_thread,</span><br><span class="line">                    <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    K_PRIO_PREEMPT(<span class="number">10</span>),</span><br><span class="line">                    K_INHERIT_PERMS,</span><br><span class="line">                    K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-内存调试"><a href="#6-内存调试" class="headerlink" title="6. 内存调试"></a>6. 内存调试</h2><h3 id="6-1-内存使用统计"><a href="#6-1-内存使用统计" class="headerlink" title="6.1 内存使用统计"></a>6.1 内存使用统计</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/debug/heap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memory_stats</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_heap_stats</span> <span class="title">stats</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取堆统计信息 */</span></span><br><span class="line">    k_heap_stats_get(&amp;stats);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Heap Statistics:\n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;Total bytes: %zu\n&quot;</span>, stats.total_bytes);</span><br><span class="line">    printk(<span class="string">&quot;Used bytes: %zu\n&quot;</span>, stats.used_bytes);</span><br><span class="line">    printk(<span class="string">&quot;Free bytes: %zu\n&quot;</span>, stats.free_bytes);</span><br><span class="line">    printk(<span class="string">&quot;Allocated blocks: %zu\n&quot;</span>, stats.allocated_blocks);</span><br><span class="line">    printk(<span class="string">&quot;Free blocks: %zu\n&quot;</span>, stats.free_blocks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-内存泄漏检测"><a href="#6-2-内存泄漏检测" class="headerlink" title="6.2 内存泄漏检测"></a>6.2 内存泄漏检测</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/debug/heap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">leak_detection</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr1, *ptr2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 分配内存 */</span></span><br><span class="line">    ptr1 = k_malloc(<span class="number">100</span>);</span><br><span class="line">    ptr2 = k_malloc(<span class="number">200</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 打印堆内存状态 */</span></span><br><span class="line">    k_heap_dump(<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 释放部分内存（模拟泄漏） */</span></span><br><span class="line">    k_free(ptr1);</span><br><span class="line">    <span class="comment">// k_free(ptr2); // 故意不释放以模拟泄漏</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 再次打印堆状态以检测泄漏 */</span></span><br><span class="line">    k_heap_dump(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-最佳实践"><a href="#7-最佳实践" class="headerlink" title="7. 最佳实践"></a>7. 最佳实践</h2><h3 id="7-1-内存分配策略"><a href="#7-1-内存分配策略" class="headerlink" title="7.1 内存分配策略"></a>7.1 内存分配策略</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用静态分配的缓冲池 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> POOL_SIZE 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE 256</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> buffer_pool[POOL_SIZE][BLOCK_SIZE];</span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> buffer_used[POOL_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从池中分配缓冲区 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> *<span class="title function_">alloc_buffer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; POOL_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!buffer_used[i]) &#123;</span><br><span class="line">            buffer_used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> buffer_pool[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放缓冲区 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">free_buffer</span><span class="params">(<span class="type">uint8_t</span> *buffer)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; POOL_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buffer == buffer_pool[i]) &#123;</span><br><span class="line">            buffer_used[i] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memory_strategy_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使用预分配的缓冲区 */</span></span><br><span class="line">    <span class="type">uint8_t</span> *buf = alloc_buffer();</span><br><span class="line">    <span class="keyword">if</span> (buf != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* 使用缓冲区 */</span></span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, BLOCK_SIZE);</span><br><span class="line">        <span class="comment">/* 完成后释放 */</span></span><br><span class="line">        free_buffer(buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-错误处理"><a href="#7-2-错误处理" class="headerlink" title="7.2 错误处理"></a>7.2 错误处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error_handling_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 分配内存 */</span></span><br><span class="line">    ptr = k_malloc(<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* 处理内存分配失败 */</span></span><br><span class="line">        printk(<span class="string">&quot;Memory allocation failed\n&quot;</span>);</span><br><span class="line">        <span class="comment">/* 尝试恢复策略 */</span></span><br><span class="line">        k_mem_pool_defrag(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用try-catch风格的错误处理 */</span></span><br><span class="line">    ret = some_operation(ptr);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功处理 */</span></span><br><span class="line">    printk(<span class="string">&quot;Operation successful\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line">    k_free(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-内存对齐"><a href="#7-3-内存对齐" class="headerlink" title="7.3 内存对齐"></a>7.3 内存对齐</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对齐结构体 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> value;</span><br><span class="line">    <span class="type">uint8_t</span> data[<span class="number">32</span>];</span><br><span class="line">&#125; __aligned(<span class="number">32</span>) <span class="type">aligned_struct_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">alignment_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 静态分配对齐的内存 */</span></span><br><span class="line">    <span class="type">static</span> <span class="type">aligned_struct_t</span> aligned_data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 动态分配对齐的内存 */</span></span><br><span class="line">    <span class="type">aligned_struct_t</span> *ptr = k_aligned_alloc(<span class="number">32</span>, <span class="keyword">sizeof</span>(<span class="type">aligned_struct_t</span>));</span><br><span class="line">    <span class="keyword">if</span> (ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* 使用对齐的内存 */</span></span><br><span class="line">        ptr-&gt;value = <span class="number">42</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ptr-&gt;data, <span class="number">0</span>, <span class="keyword">sizeof</span>(ptr-&gt;data));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 释放内存 */</span></span><br><span class="line">        k_free(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tcp_ip</title>
      <link href="/2025/03/21/nodic/zephyr/networking/tcp_ip/"/>
      <url>/2025/03/21/nodic/zephyr/networking/tcp_ip/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-TCP-IP-网络协议栈指南"><a href="#Zephyr-TCP-IP-网络协议栈指南" class="headerlink" title="Zephyr TCP&#x2F;IP 网络协议栈指南"></a>Zephyr TCP&#x2F;IP 网络协议栈指南</h1><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1. 基础配置"></a>1. 基础配置</h2><h3 id="1-1-网络配置-prj-conf"><a href="#1-1-网络配置-prj-conf" class="headerlink" title="1.1 网络配置 (prj.conf)"></a>1.1 网络配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 基础网络支持</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_IPV6=y</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line">CONFIG_NET_UDP=y</span><br><span class="line"></span><br><span class="line"># 网络缓冲区配置</span><br><span class="line">CONFIG_NET_PKT_RX_COUNT=16</span><br><span class="line">CONFIG_NET_PKT_TX_COUNT=16</span><br><span class="line">CONFIG_NET_BUF_RX_COUNT=64</span><br><span class="line">CONFIG_NET_BUF_TX_COUNT=64</span><br><span class="line">CONFIG_NET_BUF_DATA_SIZE=128</span><br><span class="line"></span><br><span class="line"># DHCP客户端</span><br><span class="line">CONFIG_NET_DHCPV4=y</span><br><span class="line"></span><br><span class="line"># DNS解析</span><br><span class="line">CONFIG_DNS_RESOLVER=y</span><br><span class="line">CONFIG_DNS_SERVER_IP_ADDRESSES=y</span><br><span class="line">CONFIG_DNS_SERVER1=&quot;8.8.8.8&quot;</span><br><span class="line"></span><br><span class="line"># 网络日志</span><br><span class="line">CONFIG_NET_LOG=y</span><br><span class="line">CONFIG_NET_LOG_LEVEL_DBG=y</span><br></pre></td></tr></table></figure><h3 id="1-2-网络接口配置"><a href="#1-2-网络接口配置" class="headerlink" title="1.2 网络接口配置"></a>1.2 网络接口配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_core.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_context.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_mgmt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">net_iface_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 获取默认网络接口 */</span></span><br><span class="line">    iface = net_if_get_default();</span><br><span class="line">    <span class="keyword">if</span> (!iface) &#123;</span><br><span class="line">        printk(<span class="string">&quot;No network interface available\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置IPv4地址 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">addr4</span>;</span></span><br><span class="line">    net_addr_pton(AF_INET, <span class="string">&quot;192.168.1.100&quot;</span>, &amp;addr4);</span><br><span class="line">    net_if_ipv4_addr_add(iface, &amp;addr4, NET_ADDR_MANUAL, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置IPv6地址 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> <span class="title">addr6</span>;</span></span><br><span class="line">    net_addr_pton(AF_INET6, <span class="string">&quot;2001:db8::1&quot;</span>, &amp;addr6);</span><br><span class="line">    net_if_ipv6_addr_add(iface, &amp;addr6, NET_ADDR_MANUAL, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-TCP通信"><a href="#2-TCP通信" class="headerlink" title="2. TCP通信"></a>2. TCP通信</h2><h3 id="2-1-TCP服务器"><a href="#2-1-TCP服务器" class="headerlink" title="2.1 TCP服务器"></a>2.1 TCP服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TCP_PORT 4242</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tcp_server_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> serv_sock, client_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="type">char</span> rx_buf[BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建socket */</span></span><br><span class="line">    serv_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(TCP_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    ret = bind(serv_sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">               <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind: %d\n&quot;</span>, errno);</span><br><span class="line">        close(serv_sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 监听连接 */</span></span><br><span class="line">    ret = listen(serv_sock, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to listen: %d\n&quot;</span>, errno);</span><br><span class="line">        close(serv_sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 接受连接 */</span></span><br><span class="line">        client_sock = accept(serv_sock,</span><br><span class="line">                           (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">                           &amp;client_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (client_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Accept failed: %d\n&quot;</span>, errno);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 处理连接 */</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            ret = recv(client_sock, rx_buf, <span class="keyword">sizeof</span>(rx_buf), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                printk(<span class="string">&quot;Receive failed: %d\n&quot;</span>, errno);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">                printk(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 发送响应 */</span></span><br><span class="line">            ret = send(client_sock, rx_buf, ret, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                printk(<span class="string">&quot;Send failed: %d\n&quot;</span>, errno);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        close(client_sock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-TCP客户端"><a href="#2-2-TCP客户端" class="headerlink" title="2.2 TCP客户端"></a>2.2 TCP客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 4242</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tcp_client_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> tx_buf[] = <span class="string">&quot;Hello, Server!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> rx_buf[BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建socket */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_port = htons(SERVER_PORT);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;192.168.1.100&quot;</span>, &amp;server_addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接服务器 */</span></span><br><span class="line">    ret = connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">                 <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to connect: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    ret = send(sock, tx_buf, <span class="built_in">strlen</span>(tx_buf), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to send data: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 接收响应 */</span></span><br><span class="line">    ret = recv(sock, rx_buf, <span class="keyword">sizeof</span>(rx_buf), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to receive: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rx_buf[ret] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    printk(<span class="string">&quot;Received: %s\n&quot;</span>, rx_buf);</span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-UDP通信"><a href="#3-UDP通信" class="headerlink" title="3. UDP通信"></a>3. UDP通信</h2><h3 id="3-1-UDP服务器"><a href="#3-1-UDP服务器" class="headerlink" title="3.1 UDP服务器"></a>3.1 UDP服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UDP_PORT 5678</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">udp_server_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="type">char</span> rx_buf[BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建socket */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(UDP_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    ret = bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">               <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 接收数据 */</span></span><br><span class="line">        ret = recvfrom(sock, rx_buf, <span class="keyword">sizeof</span>(rx_buf), <span class="number">0</span>,</span><br><span class="line">                      (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">                      &amp;client_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to receive: %d\n&quot;</span>, errno);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 发送响应 */</span></span><br><span class="line">        ret = sendto(sock, rx_buf, ret, <span class="number">0</span>,</span><br><span class="line">                    (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">                    client_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to send: %d\n&quot;</span>, errno);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-UDP客户端"><a href="#3-2-UDP客户端" class="headerlink" title="3.2 UDP客户端"></a>3.2 UDP客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_PORT 5678</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">udp_client_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> tx_buf[] = <span class="string">&quot;Hello, UDP Server!&quot;</span>;</span><br><span class="line">    <span class="type">char</span> rx_buf[BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建socket */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_port = htons(SERVER_PORT);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;192.168.1.100&quot;</span>, &amp;server_addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    ret = sendto(sock, tx_buf, <span class="built_in">strlen</span>(tx_buf), <span class="number">0</span>,</span><br><span class="line">                (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">                <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to send data: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 接收响应 */</span></span><br><span class="line">    ret = recv(sock, rx_buf, <span class="keyword">sizeof</span>(rx_buf), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to receive: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rx_buf[ret] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    printk(<span class="string">&quot;Received: %s\n&quot;</span>, rx_buf);</span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-网络管理"><a href="#4-网络管理" class="headerlink" title="4. 网络管理"></a>4. 网络管理</h2><h3 id="4-1-网络事件监听"><a href="#4-1-网络事件监听" class="headerlink" title="4.1 网络事件监听"></a>4.1 网络事件监听</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_mgmt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_event.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">net_mgmt_event_callback</span> <span class="title">mgmt_cb</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 网络事件处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">net_event_handler</span><span class="params">(<span class="keyword">struct</span> net_mgmt_event_callback *cb,</span></span><br><span class="line"><span class="params">                            <span class="type">uint32_t</span> mgmt_event,</span></span><br><span class="line"><span class="params">                            <span class="keyword">struct</span> net_if *iface)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (mgmt_event) &#123;</span><br><span class="line">    <span class="keyword">case</span> NET_EVENT_IPV4_ADDR_ADD:</span><br><span class="line">        printk(<span class="string">&quot;IPv4 address added\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> NET_EVENT_IPV4_ADDR_DEL:</span><br><span class="line">        printk(<span class="string">&quot;IPv4 address removed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> NET_EVENT_IPV6_ADDR_ADD:</span><br><span class="line">        printk(<span class="string">&quot;IPv6 address added\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> NET_EVENT_IPV6_ADDR_DEL:</span><br><span class="line">        printk(<span class="string">&quot;IPv6 address removed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">net_mgmt_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 注册网络事件回调 */</span></span><br><span class="line">    net_mgmt_init_event_callback(&amp;mgmt_cb,</span><br><span class="line">                               net_event_handler,</span><br><span class="line">                               NET_EVENT_IPV4_ADDR_ADD |</span><br><span class="line">                               NET_EVENT_IPV4_ADDR_DEL |</span><br><span class="line">                               NET_EVENT_IPV6_ADDR_ADD |</span><br><span class="line">                               NET_EVENT_IPV6_ADDR_DEL);</span><br><span class="line"></span><br><span class="line">    net_mgmt_add_event_callback(&amp;mgmt_cb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-DHCP客户端"><a href="#4-2-DHCP客户端" class="headerlink" title="4.2 DHCP客户端"></a>4.2 DHCP客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_mgmt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/dhcpv4.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">net_mgmt_event_callback</span> <span class="title">dhcp_cb</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DHCP事件处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dhcp_handler</span><span class="params">(<span class="keyword">struct</span> net_mgmt_event_callback *cb,</span></span><br><span class="line"><span class="params">                        <span class="type">uint32_t</span> mgmt_event,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> net_if *iface)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (mgmt_event) &#123;</span><br><span class="line">    <span class="keyword">case</span> NET_EVENT_IPV4_DHCP_BOUND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> addr_str[NET_IPV4_ADDR_LEN];</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">net_if_dhcpv4</span> *<span class="title">dhcpv4</span> =</span> iface-&gt;config.dhcpv4;</span><br><span class="line">            </span><br><span class="line">            net_addr_ntop(AF_INET,</span><br><span class="line">                         &amp;dhcpv4-&gt;requested_ip,</span><br><span class="line">                         addr_str,</span><br><span class="line">                         <span class="keyword">sizeof</span>(addr_str));</span><br><span class="line">            printk(<span class="string">&quot;DHCP bound to address: %s\n&quot;</span>, addr_str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> NET_EVENT_IPV4_DHCP_STOP:</span><br><span class="line">        printk(<span class="string">&quot;DHCP stopped\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dhcp_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span> =</span> net_if_get_default();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注册DHCP事件回调 */</span></span><br><span class="line">    net_mgmt_init_event_callback(&amp;dhcp_cb,</span><br><span class="line">                               dhcp_handler,</span><br><span class="line">                               NET_EVENT_IPV4_DHCP_BOUND |</span><br><span class="line">                               NET_EVENT_IPV4_DHCP_STOP);</span><br><span class="line"></span><br><span class="line">    net_mgmt_add_event_callback(&amp;dhcp_cb);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动DHCP客户端 */</span></span><br><span class="line">    net_dhcpv4_start(iface);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-DNS解析"><a href="#5-DNS解析" class="headerlink" title="5. DNS解析"></a>5. DNS解析</h2><h3 id="5-1-DNS客户端"><a href="#5-1-DNS客户端" class="headerlink" title="5.1 DNS客户端"></a>5.1 DNS客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/dns_resolve.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DNS_TIMEOUT K_MSEC(2000)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dns_resolve_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> ip_addr[NET_IPV4_ADDR_LEN];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解析域名 */</span></span><br><span class="line">    ret = dns_resolve_name(DNS_RESOLVE_DEFAULT_CTX,</span><br><span class="line">                          <span class="string">&quot;example.com&quot;</span>,</span><br><span class="line">                          DNS_QUERY_TYPE_A,</span><br><span class="line">                          DNS_TIMEOUT,</span><br><span class="line">                          ip_addr,</span><br><span class="line">                          <span class="keyword">sizeof</span>(ip_addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to resolve name: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印解析结果 */</span></span><br><span class="line">    printk(<span class="string">&quot;Resolved IP: %d.%d.%d.%d\n&quot;</span>,</span><br><span class="line">           ip_addr[<span class="number">0</span>], ip_addr[<span class="number">1</span>],</span><br><span class="line">           ip_addr[<span class="number">2</span>], ip_addr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-网络安全"><a href="#6-网络安全" class="headerlink" title="6. 网络安全"></a>6. 网络安全</h2><h3 id="6-1-TLS配置"><a href="#6-1-TLS配置" class="headerlink" title="6.1 TLS配置"></a>6.1 TLS配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># TLS配置 (prj.conf)</span><br><span class="line">CONFIG_MBEDTLS=y</span><br><span class="line">CONFIG_MBEDTLS_BUILTIN=y</span><br><span class="line">CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN=1500</span><br><span class="line">CONFIG_MBEDTLS_ENABLE_HEAP=y</span><br><span class="line">CONFIG_MBEDTLS_HEAP_SIZE=10240</span><br></pre></td></tr></table></figure><h3 id="6-2-TLS客户端"><a href="#6-2-TLS客户端" class="headerlink" title="6.2 TLS客户端"></a>6.2 TLS客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/tls_credentials.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TLS_PSK_ID <span class="string">&quot;Client_identity&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TLS_PSK_KEY <span class="string">&quot;123456&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tls_client_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock, ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 加载TLS证书 */</span></span><br><span class="line">    ret = tls_credential_add(<span class="number">1</span>, TLS_CREDENTIAL_PSK_ID,</span><br><span class="line">                           TLS_PSK_ID, <span class="built_in">strlen</span>(TLS_PSK_ID));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to add PSK ID: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = tls_credential_add(<span class="number">1</span>, TLS_CREDENTIAL_PSK,</span><br><span class="line">                           TLS_PSK_KEY, <span class="built_in">strlen</span>(TLS_PSK_KEY));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to add PSK: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建TLS socket */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置TLS选项 */</span></span><br><span class="line">    <span class="type">sec_tag_t</span> sec_tag_list[] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    ret = setsockopt(sock, SOL_TLS, TLS_SEC_TAG_LIST,</span><br><span class="line">                     sec_tag_list, <span class="keyword">sizeof</span>(sec_tag_list));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set TLS_SEC_TAG_LIST: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接服务器 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">443</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;192.168.1.100&quot;</span>, &amp;addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    ret = connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to connect: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用安全连接 */</span></span><br><span class="line">    <span class="comment">// ... 发送和接收数据 ...</span></span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 电源管理系统指南</title>
      <link href="/2025/03/21/nodic/zephyr/power/README/"/>
      <url>/2025/03/21/nodic/zephyr/power/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-电源管理系统指南"><a href="#Zephyr-电源管理系统指南" class="headerlink" title="Zephyr 电源管理系统指南"></a>Zephyr 电源管理系统指南</h1><h2 id="1-电源管理配置"><a href="#1-电源管理配置" class="headerlink" title="1. 电源管理配置"></a>1. 电源管理配置</h2><h3 id="1-1-基础配置-prj-conf"><a href="#1-1-基础配置-prj-conf" class="headerlink" title="1.1 基础配置 (prj.conf)"></a>1.1 基础配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 电源管理基础配置</span><br><span class="line">CONFIG_PM=y</span><br><span class="line">CONFIG_PM_DEVICE=y</span><br><span class="line">CONFIG_PM_DEVICE_RUNTIME=y</span><br><span class="line"></span><br><span class="line"># 设备电源状态支持</span><br><span class="line">CONFIG_PM_DEVICE_POWER_STATE=y</span><br><span class="line">CONFIG_PM_DEVICE_RUNTIME_AUTO=y</span><br><span class="line"></span><br><span class="line"># 系统电源状态支持</span><br><span class="line">CONFIG_SYS_POWER_MANAGEMENT=y</span><br><span class="line">CONFIG_SYS_PM_STATE_LOCK=y</span><br><span class="line">CONFIG_SYS_PM_DIRECT_FORCE_MODE=y</span><br><span class="line"></span><br><span class="line"># 调试支持</span><br><span class="line">CONFIG_PM_DEBUG=y</span><br></pre></td></tr></table></figure><h3 id="1-2-设备树配置"><a href="#1-2-设备树配置" class="headerlink" title="1.2 设备树配置"></a>1.2 设备树配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,power-manager</span> <span class="operator">=</span> <span class="variable">&amp;power_manager</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    power_manager:</span> <span class="title class_">power_manager</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,power-manager&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="2-设备电源管理"><a href="#2-设备电源管理" class="headerlink" title="2. 设备电源管理"></a>2. 设备电源管理</h2><h3 id="2-1-设备电源状态"><a href="#2-1-设备电源状态" class="headerlink" title="2.1 设备电源状态"></a>2.1 设备电源状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备电源管理回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_pm_action</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">/* 恢复设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">/* 挂起设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_ON:</span><br><span class="line">        <span class="comment">/* 开启设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_OFF:</span><br><span class="line">        <span class="comment">/* 关闭设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备定义 */</span></span><br><span class="line">PM_DEVICE_DT_DEFINE(DT_NODELABEL(my_device), my_device_pm_action);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">device_pm_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_device));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启用运行时电源管理 */</span></span><br><span class="line">    ret = pm_device_runtime_enable(dev);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取设备 */</span></span><br><span class="line">    ret = pm_device_runtime_get(dev);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用设备 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放设备 */</span></span><br><span class="line">    ret = pm_device_runtime_put(dev);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-电源状态约束"><a href="#2-2-电源状态约束" class="headerlink" title="2.2 电源状态约束"></a>2.2 电源状态约束</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电源状态约束定义 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">pm_device_constraint</span> <span class="title">constraint</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">power_constraint_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_device));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置电源约束 */</span></span><br><span class="line">    ret = pm_device_runtime_constraint_set(dev, PM_DEVICE_ACTIVE_STATE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行需要保持设备活动的操作 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放约束 */</span></span><br><span class="line">    ret = pm_device_runtime_constraint_release(dev);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-系统电源管理"><a href="#3-系统电源管理" class="headerlink" title="3. 系统电源管理"></a>3. 系统电源管理</h2><h3 id="3-1-系统电源状态"><a href="#3-1-系统电源状态" class="headerlink" title="3.1 系统电源状态"></a>3.1 系统电源状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">system_power_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 强制进入特定电源状态 */</span></span><br><span class="line">    pm_state_force(<span class="number">0u</span>, &amp;(<span class="keyword">struct</span> pm_state_info)&#123;</span><br><span class="line">        .state = PM_STATE_RUNTIME_IDLE</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 阻止进入低功耗状态 */</span></span><br><span class="line">    pm_system_suspend_state_disable();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 允许进入低功耗状态 */</span></span><br><span class="line">    pm_system_suspend_state_enable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-电源管理回调"><a href="#3-2-电源管理回调" class="headerlink" title="3.2 电源管理回调"></a>3.2 电源管理回调</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入低功耗状态前回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">pm_policy_pre_entry</span><span class="params">(<span class="keyword">enum</span> pm_state state, <span class="type">uint8_t</span> substate_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 准备进入低功耗状态 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 退出低功耗状态后回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pm_policy_post_exit</span><span class="params">(<span class="keyword">enum</span> pm_state state, <span class="type">uint8_t</span> substate_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 从低功耗状态恢复 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册回调 */</span></span><br><span class="line">PM_STATE_INFO_DT_DEFINE(DT_NODELABEL(cpu0), pm_policy_pre_entry, pm_policy_post_exit);</span><br></pre></td></tr></table></figure><h2 id="4-电源域管理"><a href="#4-电源域管理" class="headerlink" title="4. 电源域管理"></a>4. 电源域管理</h2><h3 id="4-1-电源域配置"><a href="#4-1-电源域配置" class="headerlink" title="4.1 电源域配置"></a>4.1 电源域配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">power-domains</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;power-domain-map&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="meta">#power-domain-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">        pd_core:</span> <span class="title class_">pd_core</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="meta">#power-domain-cells = &lt;0&gt;;</span></span><br><span class="line">            <span class="attr">power-domains</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;pm</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">domain-name</span> <span class="operator">=</span> <span class="string">&quot;core&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-电源域控制"><a href="#4-2-电源域控制" class="headerlink" title="4.2 电源域控制"></a>4.2 电源域控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">power_domain_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">pd_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(pd_core));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(pd_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开启电源域 */</span></span><br><span class="line">    ret = pm_device_action_run(pd_dev, PM_DEVICE_ACTION_TURN_ON);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 关闭电源域 */</span></span><br><span class="line">    ret = pm_device_action_run(pd_dev, PM_DEVICE_ACTION_TURN_OFF);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-电源监控"><a href="#5-电源监控" class="headerlink" title="5. 电源监控"></a>5. 电源监控</h2><h3 id="5-1-电池监控"><a href="#5-1-电池监控" class="headerlink" title="5.1 电池监控"></a>5.1 电池监控</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">battery_monitor_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(battery));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">voltage</span>, <span class="title">current</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取电池电压 */</span></span><br><span class="line">    ret = sensor_sample_fetch(dev);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = sensor_channel_get(dev, SENSOR_CHAN_VOLTAGE, &amp;voltage);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取电池电流 */</span></span><br><span class="line">    ret = sensor_channel_get(dev, SENSOR_CHAN_CURRENT, &amp;current);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Battery: %d.%02d V, %d.%02d mA\n&quot;</span>,</span><br><span class="line">           voltage.val1, voltage.val2,</span><br><span class="line">           current.val1, current.val2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-功耗分析"><a href="#5-2-功耗分析" class="headerlink" title="5.2 功耗分析"></a>5.2 功耗分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/counter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 功耗统计结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power_stats</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> active_time;</span><br><span class="line">    <span class="type">uint32_t</span> sleep_time;</span><br><span class="line">    <span class="type">uint32_t</span> deep_sleep_time;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">power_stats</span> <span class="title">stats</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">power_analysis_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">counter_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(timer0));</span><br><span class="line">    <span class="type">uint32_t</span> start_time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(counter_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录开始时间 */</span></span><br><span class="line">    start_time = counter_get_value(counter_dev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行操作 */</span></span><br><span class="line">    k_msleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 更新统计信息 */</span></span><br><span class="line">    stats.active_time += counter_get_value(counter_dev) - start_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印统计信息 */</span></span><br><span class="line">    printk(<span class="string">&quot;Power Statistics:\n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;Active Time: %u ms\n&quot;</span>, stats.active_time);</span><br><span class="line">    printk(<span class="string">&quot;Sleep Time: %u ms\n&quot;</span>, stats.sleep_time);</span><br><span class="line">    printk(<span class="string">&quot;Deep Sleep Time: %u ms\n&quot;</span>, stats.deep_sleep_time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-低功耗优化"><a href="#6-低功耗优化" class="headerlink" title="6. 低功耗优化"></a>6. 低功耗优化</h2><h3 id="6-1-设备优化"><a href="#6-1-设备优化" class="headerlink" title="6.1 设备优化"></a>6.1 设备优化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">device_optimization</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">devs</span>[] =</span> &#123;</span><br><span class="line">        DEVICE_DT_GET(DT_NODELABEL(uart0)),</span><br><span class="line">        DEVICE_DT_GET(DT_NODELABEL(i2c0)),</span><br><span class="line">        DEVICE_DT_GET(DT_NODELABEL(spi0)),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 禁用不需要的设备 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE(devs); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (device_is_ready(devs[i])) &#123;</span><br><span class="line">            pm_device_action_run(devs[i], PM_DEVICE_ACTION_TURN_OFF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置GPIO唤醒源 */</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">gpio_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(gpio0));</span><br><span class="line">    <span class="keyword">if</span> (device_is_ready(gpio_dev)) &#123;</span><br><span class="line">        gpio_pin_configure(gpio_dev, <span class="number">0</span>,</span><br><span class="line">                         GPIO_INPUT | GPIO_INT_EDGE_RISING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-系统优化"><a href="#6-2-系统优化" class="headerlink" title="6.2 系统优化"></a>6.2 系统优化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 系统空闲回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pm_system_idle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 检查是否可以进入低功耗状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (pm_system_is_off()) &#123;</span><br><span class="line">        <span class="comment">/* 准备进入深度睡眠 */</span></span><br><span class="line">        pm_state_force(<span class="number">0u</span>, &amp;(<span class="keyword">struct</span> pm_state_info)&#123;</span><br><span class="line">            .state = PM_STATE_SOFT_OFF</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 进入轻度睡眠 */</span></span><br><span class="line">        pm_state_force(<span class="number">0u</span>, &amp;(<span class="keyword">struct</span> pm_state_info)&#123;</span><br><span class="line">            .state = PM_STATE_RUNTIME_IDLE</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置空闲钩子 */</span></span><br><span class="line">SYS_PM_IDLE_HOOK_DEFINE(pm_system_idle);</span><br></pre></td></tr></table></figure><h2 id="7-电源管理调试"><a href="#7-电源管理调试" class="headerlink" title="7. 电源管理调试"></a>7. 电源管理调试</h2><h3 id="7-1-状态跟踪"><a href="#7-1-状态跟踪" class="headerlink" title="7.1 状态跟踪"></a>7.1 状态跟踪</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">LOG_MODULE_REGISTER(power_debug, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">power_debug_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 记录电源状态变化 */</span></span><br><span class="line">    LOG_INF(<span class="string">&quot;Power state change:&quot;</span>);</span><br><span class="line">    LOG_INF(<span class="string">&quot;CPU: %d&quot;</span>, pm_device_state_get(PM_CPU_DEV));</span><br><span class="line">    LOG_INF(<span class="string">&quot;System: %d&quot;</span>, pm_device_state_get(PM_SYSTEM_DEV));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录设备状态 */</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_device));</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">pm_device_state</span> <span class="title">state</span>;</span></span><br><span class="line">    </span><br><span class="line">    ret = pm_device_state_get(dev, &amp;state);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">        LOG_INF(<span class="string">&quot;Device state: %d&quot;</span>, state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-功耗测量"><a href="#7-2-功耗测量" class="headerlink" title="7.2 功耗测量"></a>7.2 功耗测量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/adc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_RESOLUTION 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_CHANNEL 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">power_measurement</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">adc_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(adc0));</span><br><span class="line">    <span class="type">int16_t</span> buf;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">adc_sequence</span> <span class="title">sequence</span> =</span> &#123;</span><br><span class="line">        .buffer = &amp;buf,</span><br><span class="line">        .buffer_size = <span class="keyword">sizeof</span>(buf),</span><br><span class="line">        .resolution = ADC_RESOLUTION,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(adc_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置ADC通道 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">adc_channel_cfg</span> <span class="title">channel_cfg</span> =</span> &#123;</span><br><span class="line">        .gain = ADC_GAIN_1,</span><br><span class="line">        .reference = ADC_REF_INTERNAL,</span><br><span class="line">        .acquisition_time = ADC_ACQ_TIME_DEFAULT,</span><br><span class="line">        .channel_id = ADC_CHANNEL,</span><br><span class="line">    &#125;;</span><br><span class="line">    adc_channel_setup(adc_dev, &amp;channel_cfg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取电流值 */</span></span><br><span class="line">    adc_sequence_init_dt(&amp;sequence);</span><br><span class="line">    <span class="keyword">if</span> (adc_read(adc_dev, &amp;sequence) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 转换为实际电流值 */</span></span><br><span class="line">        <span class="type">int32_t</span> current_ua = buf * (<span class="number">3300000</span> / ((<span class="number">1</span> &lt;&lt; ADC_RESOLUTION) - <span class="number">1</span>));</span><br><span class="line">        printk(<span class="string">&quot;Current consumption: %d uA\n&quot;</span>, current_ua);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 安全子系统指南</title>
      <link href="/2025/03/21/nodic/zephyr/security/README/"/>
      <url>/2025/03/21/nodic/zephyr/security/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-安全子系统指南"><a href="#Zephyr-安全子系统指南" class="headerlink" title="Zephyr 安全子系统指南"></a>Zephyr 安全子系统指南</h1><h2 id="1-安全子系统概述"><a href="#1-安全子系统概述" class="headerlink" title="1. 安全子系统概述"></a>1. 安全子系统概述</h2><p>Zephyr RTOS 提供了多层次的安全机制，包括：</p><ul><li>内存保护</li><li>线程隔离</li><li>加密服务</li><li>安全启动</li><li>访问控制</li></ul><h2 id="2-内存保护"><a href="#2-内存保护" class="headerlink" title="2. 内存保护"></a>2. 内存保护</h2><h3 id="2-1-配置-prj-conf"><a href="#2-1-配置-prj-conf" class="headerlink" title="2.1 配置 (prj.conf)"></a>2.1 配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 内存保护配置</span><br><span class="line">CONFIG_USERSPACE=y</span><br><span class="line">CONFIG_MPU_STACK_GUARD=y</span><br><span class="line">CONFIG_THREAD_STACK_INFO=y</span><br><span class="line">CONFIG_THREAD_CUSTOM_DATA=y</span><br></pre></td></tr></table></figure><h3 id="2-2-用户空间线程"><a href="#2-2-用户空间线程" class="headerlink" title="2.2 用户空间线程"></a>2.2 用户空间线程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/libc-hooks.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_PRIORITY 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用户线程函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">user_thread_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 用户空间操作 */</span></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">K_THREAD_DEFINE(user_thread, STACK_SIZE,</span><br><span class="line">                user_thread_entry, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                THREAD_PRIORITY, K_USER, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="3-线程隔离"><a href="#3-线程隔离" class="headerlink" title="3. 线程隔离"></a>3. 线程隔离</h2><h3 id="3-1-内存域"><a href="#3-1-内存域" class="headerlink" title="3.1 内存域"></a>3.1 内存域</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义内存分区 */</span></span><br><span class="line">K_APPMEM_PARTITION_DEFINE(app_partition);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在分区中定义数据 */</span></span><br><span class="line">K_APP_DMEM(app_partition) <span class="type">int</span> shared_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义内存域 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_mem_domain</span> <span class="title">app_domain</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memory_domain_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化内存域 */</span></span><br><span class="line">    k_mem_domain_init(&amp;app_domain, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加内存分区到域 */</span></span><br><span class="line">    k_mem_domain_add_partition(&amp;app_domain, &amp;app_partition);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将线程分配到内存域 */</span></span><br><span class="line">    k_mem_domain_add_thread(&amp;app_domain, k_current_get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-加密服务"><a href="#4-加密服务" class="headerlink" title="4. 加密服务"></a>4. 加密服务</h2><h3 id="4-1-配置-prj-conf"><a href="#4-1-配置-prj-conf" class="headerlink" title="4.1 配置 (prj.conf)"></a>4.1 配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_MBEDTLS=y</span><br><span class="line">CONFIG_MBEDTLS_BUILTIN=y</span><br><span class="line">CONFIG_MBEDTLS_CFG_FILE=&quot;config-tls-generic.h&quot;</span><br></pre></td></tr></table></figure><h3 id="4-2-AES-加密示例"><a href="#4-2-AES-加密示例" class="headerlink" title="4.2 AES 加密示例"></a>4.2 AES 加密示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/crypto/crypto.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">aes_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> device_get_binding(CONFIG_CRYPTO_MBEDTLS_SHIM_DRV_NAME);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cipher_ctx</span> <span class="title">ctx</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cipher_pkt</span> <span class="title">encrypt</span>, <span class="title">decrypt</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> key[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> iv[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> plaintext[<span class="number">64</span>] = <span class="string">&quot;Zephyr Crypto Test&quot;</span>;</span><br><span class="line">    <span class="type">uint8_t</span> ciphertext[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> decrypted[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化上下文 */</span></span><br><span class="line">    ret = cipher_begin_session(dev, &amp;ctx, CRYPTO_CIPHER_ALGO_AES,</span><br><span class="line">                               CRYPTO_CIPHER_MODE_CBC,</span><br><span class="line">                               CRYPTO_CIPHER_OP_ENCRYPT);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to initialize cipher session: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置密钥和 IV */</span></span><br><span class="line">    cipher_ctx_set_key(&amp;ctx, key, <span class="keyword">sizeof</span>(key));</span><br><span class="line">    cipher_ctx_set_iv(&amp;ctx, iv, <span class="keyword">sizeof</span>(iv));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 加密 */</span></span><br><span class="line">    encrypt.in_buf = plaintext;</span><br><span class="line">    encrypt.in_len = <span class="keyword">sizeof</span>(plaintext);</span><br><span class="line">    encrypt.out_buf = ciphertext;</span><br><span class="line">    encrypt.out_len = <span class="keyword">sizeof</span>(ciphertext);</span><br><span class="line"></span><br><span class="line">    ret = cipher_block_op(&amp;ctx, &amp;encrypt);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Encryption failed: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 解密 */</span></span><br><span class="line">    cipher_ctx_set_op(&amp;ctx, CRYPTO_CIPHER_OP_DECRYPT);</span><br><span class="line">    decrypt.in_buf = ciphertext;</span><br><span class="line">    decrypt.in_len = <span class="keyword">sizeof</span>(ciphertext);</span><br><span class="line">    decrypt.out_buf = decrypted;</span><br><span class="line">    decrypt.out_len = <span class="keyword">sizeof</span>(decrypted);</span><br><span class="line"></span><br><span class="line">    ret = cipher_block_op(&amp;ctx, &amp;decrypt);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Decryption failed: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Decrypted text: %s\n&quot;</span>, decrypted);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    cipher_free_session(dev, &amp;ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-安全启动"><a href="#5-安全启动" class="headerlink" title="5. 安全启动"></a>5. 安全启动</h2><h3 id="5-1-配置-prj-conf"><a href="#5-1-配置-prj-conf" class="headerlink" title="5.1 配置 (prj.conf)"></a>5.1 配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_BOOTLOADER_MCUBOOT=y</span><br><span class="line">CONFIG_MCUBOOT_SIGNATURE_KEY_FILE=&quot;bootloader/mcuboot/root-rsa-2048.pem&quot;</span><br></pre></td></tr></table></figure><h3 id="5-2-镜像签名"><a href="#5-2-镜像签名" class="headerlink" title="5.2 镜像签名"></a>5.2 镜像签名</h3><p>使用 MCUboot 的 imgtool 进行镜像签名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgtool sign --key root-rsa-2048.pem --align 8 --version 1.0.0 --header-size 0x200 --slot-size 0x60000 --pad-header zephyr.bin signed_zephyr.bin</span><br></pre></td></tr></table></figure><h2 id="6-访问控制"><a href="#6-访问控制" class="headerlink" title="6. 访问控制"></a>6. 访问控制</h2><h3 id="6-1-内核对象权限"><a href="#6-1-内核对象权限" class="headerlink" title="6.1 内核对象权限"></a>6.1 内核对象权限</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义内核对象 */</span></span><br><span class="line">K_SEM_DEFINE(my_semaphore, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置对象权限 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_object_permission</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 允许用户线程访问信号量 */</span></span><br><span class="line">    k_object_access_grant(&amp;my_semaphore, k_current_get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-安全通信"><a href="#7-安全通信" class="headerlink" title="7. 安全通信"></a>7. 安全通信</h2><h3 id="7-1-TLS-配置-prj-conf"><a href="#7-1-TLS-配置-prj-conf" class="headerlink" title="7.1 TLS 配置 (prj.conf)"></a>7.1 TLS 配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_NET_SOCKETS_SOCKOPT_TLS=y</span><br><span class="line">CONFIG_NET_SOCKETS_TLS_MAX_CONTEXTS=4</span><br></pre></td></tr></table></figure><h3 id="7-2-TLS-客户端示例"><a href="#7-2-TLS-客户端示例" class="headerlink" title="7.2 TLS 客户端示例"></a>7.2 TLS 客户端示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/tls_credentials.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TLS_PSK_KEY <span class="string">&quot;secretPSK&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TLS_PSK_ID <span class="string">&quot;Client_identity&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tls_client_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock, ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加 PSK 到系统 */</span></span><br><span class="line">    ret = tls_credential_add(<span class="number">1</span>, TLS_CREDENTIAL_PSK,</span><br><span class="line">                             TLS_PSK_KEY, <span class="keyword">sizeof</span>(TLS_PSK_KEY) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to add PSK: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = tls_credential_add(<span class="number">1</span>, TLS_CREDENTIAL_PSK_ID,</span><br><span class="line">                             TLS_PSK_ID, <span class="keyword">sizeof</span>(TLS_PSK_ID) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to add PSK ID: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建 TLS socket */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TLS_1_2);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置 TLS 选项 */</span></span><br><span class="line">    <span class="type">sec_tag_t</span> sec_tag_list[] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    ret = setsockopt(sock, SOL_TLS, TLS_SEC_TAG_LIST,</span><br><span class="line">                     sec_tag_list, <span class="keyword">sizeof</span>(sec_tag_list));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set TLS_SEC_TAG_LIST: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接服务器 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">4433</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;192.0.2.1&quot;</span>, &amp;addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    ret = connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to connect: %d\n&quot;</span>, errno);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用安全连接 */</span></span><br><span class="line">    <span class="comment">// ... 发送和接收数据 ...</span></span><br><span class="line"></span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-安全最佳实践"><a href="#8-安全最佳实践" class="headerlink" title="8. 安全最佳实践"></a>8. 安全最佳实践</h2><ol><li><p>定期更新：保持 Zephyr RTOS 和所有依赖库的最新版本，以获取最新的安全补丁。</p></li><li><p>最小权限原则：为每个线程和组件分配最小必要的权限。</p></li><li><p>安全配置：仔细审查和配置所有安全相关的选项，避免使用默认或不安全的设置。</p></li><li><p>输入验证：对所有外部输入进行严格的验证和清理，防止缓冲区溢出和注入攻击。</p></li><li><p>加密存储：敏感数据应使用强加密算法进行加密存储。</p></li><li><p>安全通信：使用 TLS 或其他加密协议确保网络通信的安全。</p></li><li><p>物理安全：考虑设备的物理安全，防止未经授权的访问和篡改。</p></li><li><p>安全启动链：实施和维护安全的启动过程，确保只有经过验证的固件才能运行。</p></li><li><p>日志和监控：实现全面的日志记录和监控机制，以便及时发现和响应安全事件。</p></li><li><p>定期安全审计：定期进行安全评估和渗透测试，以识别和修复潜在的漏洞。</p></li></ol><pre><code></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr Shell 命令系统指南</title>
      <link href="/2025/03/21/nodic/zephyr/shell/README/"/>
      <url>/2025/03/21/nodic/zephyr/shell/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-Shell-命令系统指南"><a href="#Zephyr-Shell-命令系统指南" class="headerlink" title="Zephyr Shell 命令系统指南"></a>Zephyr Shell 命令系统指南</h1><h2 id="1-Shell系统架构"><a href="#1-Shell系统架构" class="headerlink" title="1. Shell系统架构"></a>1. Shell系统架构</h2><h3 id="1-1-整体架构"><a href="#1-1-整体架构" class="headerlink" title="1.1 整体架构"></a>1.1 整体架构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[用户输入] --&gt; B[Shell核心]</span><br><span class="line">    B --&gt; C[命令处理器]</span><br><span class="line">    C --&gt; D[命令实现]</span><br><span class="line">    D --&gt; E[系统功能]</span><br><span class="line">    </span><br><span class="line">    subgraph &quot;Shell组件&quot;</span><br><span class="line">        F[命令注册]</span><br><span class="line">        G[参数解析]</span><br><span class="line">        H[历史记录]</span><br><span class="line">        I[自动完成]</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="1-2-基本配置"><a href="#1-2-基本配置" class="headerlink" title="1.2 基本配置"></a>1.2 基本配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Shell基本支持</span><br><span class="line">CONFIG_SHELL=y</span><br><span class="line"></span><br><span class="line"># 历史记录支持</span><br><span class="line">CONFIG_SHELL_HISTORY=y</span><br><span class="line"></span><br><span class="line"># 通配符支持</span><br><span class="line">CONFIG_SHELL_WILDCARD=y</span><br><span class="line"></span><br><span class="line"># 命令日志</span><br><span class="line">CONFIG_SHELL_LOGGING=y</span><br><span class="line"></span><br><span class="line"># 彩色输出</span><br><span class="line">CONFIG_SHELL_VT100_COLORS=y</span><br></pre></td></tr></table></figure><h2 id="2-命令实现"><a href="#2-命令实现" class="headerlink" title="2. 命令实现"></a>2. 命令实现</h2><h3 id="2-1-基本命令"><a href="#2-1-基本命令" class="headerlink" title="2.1 基本命令"></a>2.1 基本命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 简单命令 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_hello</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                    <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    shell_print(shell, <span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册命令 */</span></span><br><span class="line">SHELL_CMD_REGISTER(hello, <span class="literal">NULL</span>,</span><br><span class="line">                  <span class="string">&quot;Print Hello World&quot;</span>,</span><br><span class="line">                  cmd_hello);</span><br></pre></td></tr></table></figure><h3 id="2-2-子命令"><a href="#2-2-子命令" class="headerlink" title="2.2 子命令"></a>2.2 子命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子命令处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_demo_sub1</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                        <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    shell_print(shell, <span class="string">&quot;Subcommand 1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_demo_sub2</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                        <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    shell_print(shell, <span class="string">&quot;Subcommand 2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子命令结构 */</span></span><br><span class="line">SHELL_STATIC_SUBCMD_SET_CREATE(sub_demo,</span><br><span class="line">    SHELL_CMD(sub1, <span class="literal">NULL</span>, <span class="string">&quot;Subcommand 1&quot;</span>, cmd_demo_sub1),</span><br><span class="line">    SHELL_CMD(sub2, <span class="literal">NULL</span>, <span class="string">&quot;Subcommand 2&quot;</span>, cmd_demo_sub2),</span><br><span class="line">    SHELL_SUBCMD_SET_END</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册主命令 */</span></span><br><span class="line">SHELL_CMD_REGISTER(demo, &amp;sub_demo,</span><br><span class="line">                  <span class="string">&quot;Demo commands&quot;</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h2 id="3-参数处理"><a href="#3-参数处理" class="headerlink" title="3. 参数处理"></a>3. 参数处理</h2><h3 id="3-1-参数解析"><a href="#3-1-参数解析" class="headerlink" title="3.1 参数解析"></a>3.1 参数解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带参数的命令 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_params</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                     <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Missing parameters!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    shell_print(shell, <span class="string">&quot;Parameter 1: %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        shell_print(shell, <span class="string">&quot;Parameter 2: %s&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册命令 */</span></span><br><span class="line">SHELL_CMD_REGISTER(params, <span class="literal">NULL</span>,</span><br><span class="line">                  <span class="string">&quot;Command with parameters&quot;</span>,</span><br><span class="line">                  cmd_params);</span><br></pre></td></tr></table></figure><h3 id="3-2-参数验证"><a href="#3-2-参数验证" class="headerlink" title="3.2 参数验证"></a>3.2 参数验证</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_number</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                     <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> number;</span><br><span class="line">    <span class="type">char</span> *endptr;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Exactly one parameter required!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 转换并验证数字参数 */</span></span><br><span class="line">    number = strtol(argv[<span class="number">1</span>], &amp;endptr, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (*endptr != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Invalid number format!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    shell_print(shell, <span class="string">&quot;Number: %ld&quot;</span>, number);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-输出格式化"><a href="#4-输出格式化" class="headerlink" title="4. 输出格式化"></a>4. 输出格式化</h2><h3 id="4-1-基本输出"><a href="#4-1-基本输出" class="headerlink" title="4.1 基本输出"></a>4.1 基本输出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shell_output_example</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 普通输出 */</span></span><br><span class="line">    shell_print(shell, <span class="string">&quot;Normal message&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 警告输出 */</span></span><br><span class="line">    shell_warn(shell, <span class="string">&quot;Warning message&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 错误输出 */</span></span><br><span class="line">    shell_error(shell, <span class="string">&quot;Error message&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 格式化输出 */</span></span><br><span class="line">    shell_print(shell, <span class="string">&quot;Value: %d&quot;</span>, <span class="number">42</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 多行输出 */</span></span><br><span class="line">    shell_print(shell, <span class="string">&quot;Line 1\n&quot;</span></span><br><span class="line">                      <span class="string">&quot;Line 2\n&quot;</span></span><br><span class="line">                      <span class="string">&quot;Line 3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-表格输出"><a href="#4-2-表格输出" class="headerlink" title="4.2 表格输出"></a>4.2 表格输出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_table</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell)</span></span><br><span class="line">&#123;</span><br><span class="line">    shell_print(shell, <span class="string">&quot;| %-10s | %-8s | %-8s |&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Value&quot;</span>, <span class="string">&quot;Unit&quot;</span>);</span><br><span class="line">    shell_print(shell, <span class="string">&quot;|------------|----------|----------|&quot;</span>);</span><br><span class="line">    shell_print(shell, <span class="string">&quot;| %-10s | %8d | %-8s |&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Temperature&quot;</span>, <span class="number">25</span>, <span class="string">&quot;°C&quot;</span>);</span><br><span class="line">    shell_print(shell, <span class="string">&quot;| %-10s | %8d | %-8s |&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Pressure&quot;</span>, <span class="number">1013</span>, <span class="string">&quot;hPa&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-动态命令"><a href="#5-动态命令" class="headerlink" title="5. 动态命令"></a>5. 动态命令</h2><h3 id="5-1-运行时注册"><a href="#5-1-运行时注册" class="headerlink" title="5.1 运行时注册"></a>5.1 运行时注册</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态命令结构 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">shell_static_entry</span> <span class="title">dynamic_cmd</span> =</span> &#123;</span><br><span class="line">    .syntax = <span class="string">&quot;dynamic&quot;</span>,</span><br><span class="line">    .help = <span class="string">&quot;Dynamic command&quot;</span>,</span><br><span class="line">    .handler = <span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册动态命令 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">register_dynamic_command</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    dynamic_cmd.handler = cmd_handler;</span><br><span class="line">    shell_cmd_register(&amp;dynamic_cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注销动态命令 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unregister_dynamic_command</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    shell_cmd_unregister(&amp;dynamic_cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-动态子命令"><a href="#5-2-动态子命令" class="headerlink" title="5.2 动态子命令"></a>5.2 动态子命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态子命令数组 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">shell_static_entry</span> *<span class="title">dynamic_sub_commands</span>[10];</span></span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> dynamic_cmd_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加动态子命令 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_dynamic_subcommand</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name,</span></span><br><span class="line"><span class="params">                           <span class="type">shell_cmd_handler_t</span> handler)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (dynamic_cmd_count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">shell_static_entry</span> *<span class="title">entry</span> =</span></span><br><span class="line">        k_malloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> shell_static_entry));</span><br><span class="line">        </span><br><span class="line">    entry-&gt;syntax = name;</span><br><span class="line">    entry-&gt;handler = handler;</span><br><span class="line">    entry-&gt;help = <span class="string">&quot;Dynamic subcommand&quot;</span>;</span><br><span class="line">    entry-&gt;subcmd = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    dynamic_sub_commands[dynamic_cmd_count++] = entry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-自定义Shell后端"><a href="#6-自定义Shell后端" class="headerlink" title="6. 自定义Shell后端"></a>6. 自定义Shell后端</h2><h3 id="6-1-基本实现"><a href="#6-1-基本实现" class="headerlink" title="6.1 基本实现"></a>6.1 基本实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Shell传输接口 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">custom_transport_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell_transport *transport)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化自定义传输 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">custom_transport_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell_transport *transport,</span></span><br><span class="line"><span class="params">                                <span class="type">const</span> <span class="type">void</span> *data, <span class="type">size_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 实现写数据 */</span></span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">custom_transport_read</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell_transport *transport,</span></span><br><span class="line"><span class="params">                               <span class="type">void</span> *data, <span class="type">size_t</span> length, <span class="type">size_t</span> *cnt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 实现读数据 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 传输接口结构 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">shell_transport_api</span> <span class="title">custom_transport_api</span> =</span> &#123;</span><br><span class="line">    .init = custom_transport_init,</span><br><span class="line">    .write = custom_transport_write,</span><br><span class="line">    .read = custom_transport_read</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Shell传输实例 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">shell_transport</span> <span class="title">custom_transport</span> =</span> &#123;</span><br><span class="line">    .api = &amp;custom_transport_api,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Shell实例 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">shell_custom</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">shell</span> <span class="title">shell</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">shell_transport</span> <span class="title">transport</span>;</span></span><br><span class="line">&#125; shell_custom_instance = &#123;</span><br><span class="line">    .transport = custom_transport</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-2-注册自定义Shell"><a href="#6-2-注册自定义Shell" class="headerlink" title="6.2 注册自定义Shell"></a>6.2 注册自定义Shell</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_custom_shell</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">shell_backend_config_flags</span> <span class="title">cfg_flags</span> =</span> &#123;</span><br><span class="line">        .insert_mode = <span class="number">0</span>,</span><br><span class="line">        .echo = <span class="number">1</span>,</span><br><span class="line">        .obscure = <span class="number">0</span>,</span><br><span class="line">        .mode_echo = <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    shell_init(&amp;shell_custom_instance.shell,</span><br><span class="line">               &amp;custom_transport,</span><br><span class="line">               &amp;cfg_flags,</span><br><span class="line">               <span class="literal">true</span>,</span><br><span class="line">               <span class="literal">true</span>,</span><br><span class="line">               SHELL_LOG_LEVEL_INF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-高级功能"><a href="#7-高级功能" class="headerlink" title="7. 高级功能"></a>7. 高级功能</h2><h3 id="7-1-命令别名"><a href="#7-1-命令别名" class="headerlink" title="7.1 命令别名"></a>7.1 命令别名</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建命令别名 */</span></span><br><span class="line">SHELL_CMD_ARG_REGISTER(ls, <span class="literal">NULL</span>,</span><br><span class="line">                      <span class="string">&quot;List files (alias for dir)&quot;</span>,</span><br><span class="line">                      cmd_dir, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="7-2-命令组"><a href="#7-2-命令组" class="headerlink" title="7.2 命令组"></a>7.2 命令组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建命令组 */</span></span><br><span class="line">SHELL_STATIC_SUBCMD_SET_CREATE(utils_cmds,</span><br><span class="line">    SHELL_CMD(version, <span class="literal">NULL</span>, <span class="string">&quot;Show version&quot;</span>, cmd_version),</span><br><span class="line">    SHELL_CMD(info, <span class="literal">NULL</span>, <span class="string">&quot;Show system info&quot;</span>, cmd_info),</span><br><span class="line">    SHELL_CMD(stats, <span class="literal">NULL</span>, <span class="string">&quot;Show statistics&quot;</span>, cmd_stats),</span><br><span class="line">    SHELL_SUBCMD_SET_END</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHELL_CMD_REGISTER(utils, &amp;utils_cmds,</span><br><span class="line">                  <span class="string">&quot;Utility commands&quot;</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h2 id="8-实际应用示例"><a href="#8-实际应用示例" class="headerlink" title="8. 实际应用示例"></a>8. 实际应用示例</h2><h3 id="8-1-系统监控命令"><a href="#8-1-系统监控命令" class="headerlink" title="8.1 系统监控命令"></a>8.1 系统监控命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 系统信息命令 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_sysinfo</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                      <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    shell_print(shell, <span class="string">&quot;System Information:&quot;</span>);</span><br><span class="line">    shell_print(shell, <span class="string">&quot;Uptime: %lld ms&quot;</span>,</span><br><span class="line">                k_uptime_get());</span><br><span class="line">    shell_print(shell, <span class="string">&quot;Active threads: %d&quot;</span>,</span><br><span class="line">                k_thread_count_get());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 内存信息命令 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_meminfo</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                      <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    shell_print(shell, <span class="string">&quot;Memory Information:&quot;</span>);</span><br><span class="line">    <span class="comment">/* 添加内存统计信息 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册系统监控命令 */</span></span><br><span class="line">SHELL_STATIC_SUBCMD_SET_CREATE(monitor_cmds,</span><br><span class="line">    SHELL_CMD(sysinfo, <span class="literal">NULL</span>,</span><br><span class="line">              <span class="string">&quot;Show system information&quot;</span>,</span><br><span class="line">              cmd_sysinfo),</span><br><span class="line">    SHELL_CMD(meminfo, <span class="literal">NULL</span>,</span><br><span class="line">              <span class="string">&quot;Show memory information&quot;</span>,</span><br><span class="line">              cmd_meminfo),</span><br><span class="line">    SHELL_SUBCMD_SET_END</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHELL_CMD_REGISTER(monitor, &amp;monitor_cmds,</span><br><span class="line">                  <span class="string">&quot;System monitoring commands&quot;</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="8-2-设备控制命令"><a href="#8-2-设备控制命令" class="headerlink" title="8.2 设备控制命令"></a>8.2 设备控制命令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LED控制命令 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_led_control</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                          <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="type">int</span> pin;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Usage: led &lt;pin&gt; &lt;0|1&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    pin = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    value = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">    dev = device_get_binding(<span class="string">&quot;GPIO_0&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!dev) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;GPIO device not found&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    gpio_pin_configure(dev, pin, GPIO_OUTPUT);</span><br><span class="line">    gpio_pin_set(dev, pin, value);</span><br><span class="line">    </span><br><span class="line">    shell_print(shell, <span class="string">&quot;LED %d set to %d&quot;</span>, pin, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册设备控制命令 */</span></span><br><span class="line">SHELL_CMD_REGISTER(led, <span class="literal">NULL</span>,</span><br><span class="line">                  <span class="string">&quot;LED control command&quot;</span>,</span><br><span class="line">                  cmd_led_control);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 测试框架指南</title>
      <link href="/2025/03/21/nodic/zephyr/testing/README/"/>
      <url>/2025/03/21/nodic/zephyr/testing/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-系统测试指南"><a href="#Zephyr-系统测试指南" class="headerlink" title="Zephyr 系统测试指南"></a>Zephyr 系统测试指南</h1><h2 id="1-测试框架概述"><a href="#1-测试框架概述" class="headerlink" title="1. 测试框架概述"></a>1. 测试框架概述</h2><h3 id="1-1-测试架构"><a href="#1-1-测试架构" class="headerlink" title="1.1 测试架构"></a>1.1 测试架构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[测试用例] --&gt; B[测试框架]</span><br><span class="line">    B --&gt; C[测试运行器]</span><br><span class="line">    C --&gt; D[测试报告]</span><br><span class="line">    </span><br><span class="line">    subgraph &quot;测试类型&quot;</span><br><span class="line">        E[单元测试]</span><br><span class="line">        F[集成测试]</span><br><span class="line">        G[系统测试]</span><br><span class="line">        H[性能测试]</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="1-2-测试配置"><a href="#1-2-测试配置" class="headerlink" title="1.2 测试配置"></a>1.2 测试配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 测试支持</span><br><span class="line">CONFIG_ZTEST=y</span><br><span class="line">CONFIG_ZTEST_NEW_API=y</span><br><span class="line"></span><br><span class="line"># 断言支持</span><br><span class="line">CONFIG_ASSERT=y</span><br><span class="line"></span><br><span class="line"># 覆盖率支持</span><br><span class="line">CONFIG_COVERAGE=y</span><br><span class="line">CONFIG_COVERAGE_GCOV=y</span><br></pre></td></tr></table></figure><h2 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2. 单元测试"></a>2. 单元测试</h2><h3 id="2-1-基本测试用例"><a href="#2-1-基本测试用例" class="headerlink" title="2.1 基本测试用例"></a>2.1 基本测试用例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试套件 */</span></span><br><span class="line">ZTEST_SUITE(basic_tests, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试用例 */</span></span><br><span class="line">ZTEST(basic_tests, test_assert)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    zassert_true(a &lt; b, <span class="string">&quot;a should be less than b&quot;</span>);</span><br><span class="line">    zassert_equal(a + <span class="number">1</span>, b, <span class="string">&quot;a + 1 should equal b&quot;</span>);</span><br><span class="line">    zassert_not_null(&amp;a, <span class="string">&quot;a should not be null&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试功能 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">add_numbers</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZTEST(basic_tests, test_add)</span><br><span class="line">&#123;</span><br><span class="line">    zassert_equal(add_numbers(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>,</span><br><span class="line">                 <span class="string">&quot;2 + 3 should equal 5&quot;</span>);</span><br><span class="line">    zassert_equal(add_numbers(<span class="number">-1</span>, <span class="number">1</span>), <span class="number">0</span>,</span><br><span class="line">                 <span class="string">&quot;-1 + 1 should equal 0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-测试夹具"><a href="#2-2-测试夹具" class="headerlink" title="2.2 测试夹具"></a>2.2 测试夹具</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试夹具结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test_fixture</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> test_value;</span><br><span class="line">    <span class="type">void</span> *resource;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夹具设置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">setup_fixture</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">test_fixture</span> *<span class="title">fixture</span>;</span></span><br><span class="line">    </span><br><span class="line">    fixture = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> test_fixture));</span><br><span class="line">    fixture-&gt;test_value = <span class="number">42</span>;</span><br><span class="line">    fixture-&gt;resource = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fixture;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夹具清理 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">teardown_fixture</span><span class="params">(<span class="type">void</span> *f)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">test_fixture</span> *<span class="title">fixture</span> =</span> f;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(fixture-&gt;resource);</span><br><span class="line">    <span class="built_in">free</span>(fixture);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用夹具的测试套件 */</span></span><br><span class="line">ZTEST_SUITE(fixture_tests, <span class="literal">NULL</span>, setup_fixture,</span><br><span class="line">            <span class="literal">NULL</span>, <span class="literal">NULL</span>, teardown_fixture);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试用例 */</span></span><br><span class="line">ZTEST_F(fixture_tests, test_fixture)</span><br><span class="line">&#123;</span><br><span class="line">    zassert_equal(fixture-&gt;test_value, <span class="number">42</span>,</span><br><span class="line">                 <span class="string">&quot;Fixture value should be 42&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-集成测试"><a href="#3-集成测试" class="headerlink" title="3. 集成测试"></a>3. 集成测试</h2><h3 id="3-1-设备驱动测试"><a href="#3-1-设备驱动测试" class="headerlink" title="3.1 设备驱动测试"></a>3.1 设备驱动测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO驱动测试 */</span></span><br><span class="line">ZTEST(gpio_tests, test_gpio_config)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    </span><br><span class="line">    dev = device_get_binding(<span class="string">&quot;GPIO_0&quot;</span>);</span><br><span class="line">    zassert_not_null(dev, <span class="string">&quot;GPIO device not found&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    ret = gpio_pin_configure(dev, <span class="number">10</span>, GPIO_OUTPUT);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;GPIO config failed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I2C驱动测试 */</span></span><br><span class="line">ZTEST(i2c_tests, test_i2c_transfer)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> data[<span class="number">2</span>] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    </span><br><span class="line">    dev = device_get_binding(<span class="string">&quot;I2C_0&quot;</span>);</span><br><span class="line">    zassert_not_null(dev, <span class="string">&quot;I2C device not found&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    ret = i2c_write(dev, data, <span class="keyword">sizeof</span>(data), <span class="number">0x50</span>);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;I2C write failed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-协议栈测试"><a href="#3-2-协议栈测试" class="headerlink" title="3.2 协议栈测试"></a>3.2 协议栈测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 网络协议测试 */</span></span><br><span class="line">ZTEST(network_tests, test_socket_creation)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    </span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    zassert_true(sock &gt;= <span class="number">0</span>, <span class="string">&quot;Socket creation failed&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 蓝牙协议测试 */</span></span><br><span class="line">ZTEST(bluetooth_tests, test_bt_enable)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line">    </span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    zassert_equal(err, <span class="number">0</span>, <span class="string">&quot;Bluetooth enable failed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-系统测试"><a href="#4-系统测试" class="headerlink" title="4. 系统测试"></a>4. 系统测试</h2><h3 id="4-1-系统功能测试"><a href="#4-1-系统功能测试" class="headerlink" title="4.1 系统功能测试"></a>4.1 系统功能测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程测试 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    k_sem_give((<span class="keyword">struct</span> k_sem *)p1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZTEST(thread_tests, test_thread_create)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">sem</span>;</span></span><br><span class="line">    <span class="type">k_tid_t</span> tid;</span><br><span class="line">    </span><br><span class="line">    k_sem_init(&amp;sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    tid = k_thread_create(&amp;thread, stack_area,</span><br><span class="line">                         K_THREAD_STACK_SIZEOF(stack_area),</span><br><span class="line">                         thread_entry, &amp;sem, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                         K_PRIO_PREEMPT(<span class="number">0</span>), <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line">    </span><br><span class="line">    zassert_not_null(tid, <span class="string">&quot;Thread creation failed&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 等待线程完成 */</span></span><br><span class="line">    k_sem_take(&amp;sem, K_FOREVER);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器测试 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">timer_handler</span><span class="params">(<span class="keyword">struct</span> k_timer *timer)</span></span><br><span class="line">&#123;</span><br><span class="line">    k_sem_give((<span class="keyword">struct</span> k_sem *)timer-&gt;user_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZTEST(timer_tests, test_timer)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_timer</span> <span class="title">timer</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">sem</span>;</span></span><br><span class="line">    </span><br><span class="line">    k_sem_init(&amp;sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    k_timer_init(&amp;timer, timer_handler, <span class="literal">NULL</span>);</span><br><span class="line">    timer.user_data = &amp;sem;</span><br><span class="line">    </span><br><span class="line">    k_timer_start(&amp;timer, K_MSEC(<span class="number">100</span>), K_NO_WAIT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 验证定时器触发 */</span></span><br><span class="line">    zassert_equal(k_sem_take(&amp;sem, K_MSEC(<span class="number">200</span>)), <span class="number">0</span>,</span><br><span class="line">                 <span class="string">&quot;Timer didn&#x27;t trigger&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-性能测试"><a href="#4-2-性能测试" class="headerlink" title="4.2 性能测试"></a>4.2 性能测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/timing/timing.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">ZTEST(performance_tests, test_operation_timing)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> start_time, end_time;</span><br><span class="line">    <span class="type">uint32_t</span> cycles, ns;</span><br><span class="line">    </span><br><span class="line">    timing_start();</span><br><span class="line">    start_time = timing_counter_get();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 执行要测试的操作 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="comment">/* 测试代码 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    end_time = timing_counter_get();</span><br><span class="line">    cycles = timing_cycles_get(&amp;start_time, &amp;end_time);</span><br><span class="line">    ns = timing_cycles_to_ns(cycles);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 验证性能要求 */</span></span><br><span class="line">    zassert_true(ns &lt; <span class="number">1000000</span>,</span><br><span class="line">                 <span class="string">&quot;Operation took too long&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-覆盖率测试"><a href="#5-覆盖率测试" class="headerlink" title="5. 覆盖率测试"></a>5. 覆盖率测试</h2><h3 id="5-1-配置覆盖率"><a href="#5-1-配置覆盖率" class="headerlink" title="5.1 配置覆盖率"></a>5.1 配置覆盖率</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_COVERAGE=y</span><br><span class="line">CONFIG_COVERAGE_GCOV=y</span><br></pre></td></tr></table></figure><h3 id="5-2-生成覆盖率报告"><a href="#5-2-生成覆盖率报告" class="headerlink" title="5.2 生成覆盖率报告"></a>5.2 生成覆盖率报告</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译带覆盖率的测试</span></span><br><span class="line">west build -b qemu_x86 tests/kernel/threads/thread_apis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">west build -t run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成覆盖率报告</span></span><br><span class="line">gcovr -r . --html -o coverage.html</span><br></pre></td></tr></table></figure><h2 id="6-自动化测试"><a href="#6-自动化测试" class="headerlink" title="6. 自动化测试"></a>6. 自动化测试</h2><h3 id="6-1-测试脚本"><a href="#6-1-测试脚本" class="headerlink" title="6.1 测试脚本"></a>6.1 测试脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_test</span>(<span class="params">test_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;运行指定的测试&quot;&quot;&quot;</span></span><br><span class="line">    cmd = [<span class="string">&#x27;west&#x27;</span>, <span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;-b&#x27;</span>, <span class="string">&#x27;qemu_x86&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;tests/&#x27;</span> + test_name]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 编译测试</span></span><br><span class="line">    result = subprocess.run(cmd)</span><br><span class="line">    <span class="keyword">if</span> result.returncode != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Test <span class="subst">&#123;test_name&#125;</span> build failed&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 运行测试</span></span><br><span class="line">    cmd = [<span class="string">&#x27;west&#x27;</span>, <span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;run&#x27;</span>]</span><br><span class="line">    result = subprocess.run(cmd)</span><br><span class="line">    <span class="keyword">return</span> result.returncode == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tests = [</span><br><span class="line">        <span class="string">&#x27;kernel/threads/thread_apis&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;kernel/semaphore&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;kernel/timer&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    failed_tests = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> test <span class="keyword">in</span> tests:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> run_test(test):</span><br><span class="line">            failed_tests.append(test)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> failed_tests:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed tests:&quot;</span>, failed_tests)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All tests passed!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="6-2-CI-CD集成"><a href="#6-2-CI-CD集成" class="headerlink" title="6.2 CI&#x2F;CD集成"></a>6.2 CI&#x2F;CD集成</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/tests.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Zephyr</span> <span class="string">Tests</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Python</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-python@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">python-version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        pip install west</span></span><br><span class="line"><span class="string">        west init -m https://github.com/zephyrproject-rtos/zephyr</span></span><br><span class="line"><span class="string">        west update</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        ./scripts/run_tests.py</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">coverage</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">coverage-report</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">coverage.html</span></span><br></pre></td></tr></table></figure><h2 id="7-测试最佳实践"><a href="#7-测试最佳实践" class="headerlink" title="7. 测试最佳实践"></a>7. 测试最佳实践</h2><h3 id="7-1-测试组织"><a href="#7-1-测试组织" class="headerlink" title="7.1 测试组织"></a>7.1 测试组织</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 按功能组织测试 */</span></span><br><span class="line">ZTEST_SUITE(kernel_tests, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">ZTEST_SUITE(driver_tests, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">ZTEST_SUITE(network_tests, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试用例命名约定 */</span></span><br><span class="line">ZTEST(kernel_tests, test_thread_creation)</span><br><span class="line">ZTEST(kernel_tests, test_thread_priority)</span><br><span class="line">ZTEST(kernel_tests, test_thread_scheduling)</span><br></pre></td></tr></table></figure><h3 id="7-2-测试文档"><a href="#7-2-测试文档" class="headerlink" title="7.2 测试文档"></a>7.2 测试文档</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 测试线程创建功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 测试目标:</span></span><br><span class="line"><span class="comment"> * - 验证线程创建是否成功</span></span><br><span class="line"><span class="comment"> * - 验证线程优先级设置</span></span><br><span class="line"><span class="comment"> * - 验证线程栈大小配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 测试步骤:</span></span><br><span class="line"><span class="comment"> * 1. 创建新线程</span></span><br><span class="line"><span class="comment"> * 2. 验证线程ID</span></span><br><span class="line"><span class="comment"> * 3. 检查线程状态</span></span><br><span class="line"><span class="comment"> * 4. 等待线程完成</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 预期结果:</span></span><br><span class="line"><span class="comment"> * - 线程创建成功</span></span><br><span class="line"><span class="comment"> * - 线程正常执行</span></span><br><span class="line"><span class="comment"> * - 线程正常退出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ZTEST(thread_tests, test_thread_create)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 测试实现 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-调试测试失败"><a href="#8-调试测试失败" class="headerlink" title="8. 调试测试失败"></a>8. 调试测试失败</h2><h3 id="8-1-测试调试工具"><a href="#8-1-测试调试工具" class="headerlink" title="8.1 测试调试工具"></a>8.1 测试调试工具</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试辅助宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_CHECK(condition, fmt, ...) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (!(condition)) &#123; \</span></span><br><span class="line"><span class="meta">            ztest_test_fail(); \</span></span><br><span class="line"><span class="meta">            printk(<span class="string">&quot;Check failed: &quot;</span> fmt <span class="string">&quot;\n&quot;</span>, ##__VA_ARGS__); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带调试信息的测试 */</span></span><br><span class="line">ZTEST(debug_tests, test_with_debug)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value = calculate_something();</span><br><span class="line">    </span><br><span class="line">    TEST_CHECK(value == expected_value,</span><br><span class="line">              <span class="string">&quot;Value %d != expected %d&quot;</span>,</span><br><span class="line">              value, expected_value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-测试日志分析"><a href="#8-2-测试日志分析" class="headerlink" title="8.2 测试日志分析"></a>8.2 测试日志分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">LOG_MODULE_REGISTER(test_log, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line">ZTEST(log_tests, test_with_logging)</span><br><span class="line">&#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Starting test&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 测试步骤 */</span></span><br><span class="line">    <span class="type">int</span> result = perform_operation();</span><br><span class="line">    LOG_DBG(<span class="string">&quot;Operation result: %d&quot;</span>, result);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 验证结果 */</span></span><br><span class="line">    zassert_equal(result, expected_result,</span><br><span class="line">                 <span class="string">&quot;Operation failed&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    LOG_INF(<span class="string">&quot;Test completed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 定时系统指南</title>
      <link href="/2025/03/21/nodic/zephyr/timing/README/"/>
      <url>/2025/03/21/nodic/zephyr/timing/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-时间管理指南"><a href="#Zephyr-时间管理指南" class="headerlink" title="Zephyr 时间管理指南"></a>Zephyr 时间管理指南</h1><h2 id="1-时间管理配置"><a href="#1-时间管理配置" class="headerlink" title="1. 时间管理配置"></a>1. 时间管理配置</h2><h3 id="1-1-基础配置-prj-conf"><a href="#1-1-基础配置-prj-conf" class="headerlink" title="1.1 基础配置 (prj.conf)"></a>1.1 基础配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 系统时钟配置</span><br><span class="line">CONFIG_SYS_CLOCK_TICKS_PER_SEC=1000</span><br><span class="line">CONFIG_TICKLESS_KERNEL=y</span><br><span class="line"></span><br><span class="line"># 定时器配置</span><br><span class="line">CONFIG_TIMER_HAS_64BIT_CYCLE_COUNTER=y</span><br><span class="line">CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME=y</span><br><span class="line"></span><br><span class="line"># RTC配置（如果使用）</span><br><span class="line">CONFIG_COUNTER=y</span><br><span class="line">CONFIG_COUNTER_RTC0=y</span><br><span class="line"></span><br><span class="line"># 时间测量配置</span><br><span class="line">CONFIG_TIMING_FUNCTIONS=y</span><br></pre></td></tr></table></figure><h3 id="1-2-时钟源配置-boards-xxx-overlay"><a href="#1-2-时钟源配置-boards-xxx-overlay" class="headerlink" title="1.2 时钟源配置 (boards&#x2F;xxx.overlay)"></a>1.2 时钟源配置 (boards&#x2F;xxx.overlay)</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">soc</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">        timer0:</span> <span class="title class_">timer@40000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;nordic,nrf-timer&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">8</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="2-基本时间操作"><a href="#2-基本时间操作" class="headerlink" title="2. 基本时间操作"></a>2. 基本时间操作</h2><h3 id="2-1-延时函数"><a href="#2-1-延时函数" class="headerlink" title="2.1 延时函数"></a>2.1 延时函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 毫秒延时 */</span></span><br><span class="line">    k_msleep(<span class="number">1000</span>);    <span class="comment">// 延时1秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 微秒延时 */</span></span><br><span class="line">    k_usleep(<span class="number">1000</span>);    <span class="comment">// 延时1毫秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 纳秒延时 */</span></span><br><span class="line">    k_nsleep(<span class="number">1000</span>);    <span class="comment">// 延时1微秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 忙等待延时 */</span></span><br><span class="line">    k_busy_wait(<span class="number">1000</span>); <span class="comment">// 延时1微秒（不释放CPU）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 自定义时间单位延时 */</span></span><br><span class="line">    k_sleep(K_SECONDS(<span class="number">1</span>));     <span class="comment">// 1秒</span></span><br><span class="line">    k_sleep(K_MSEC(<span class="number">500</span>));      <span class="comment">// 500毫秒</span></span><br><span class="line">    k_sleep(K_MINUTES(<span class="number">1</span>));     <span class="comment">// 1分钟</span></span><br><span class="line">    k_sleep(K_HOURS(<span class="number">1</span>));       <span class="comment">// 1小时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-时间获取"><a href="#2-2-时间获取" class="headerlink" title="2.2 时间获取"></a>2.2 时间获取</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">time_get_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 获取系统启动后的时间 */</span></span><br><span class="line">    <span class="type">int64_t</span> uptime = k_uptime_get();</span><br><span class="line">    printk(<span class="string">&quot;System uptime: %lld ms\n&quot;</span>, uptime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取32位系统时间 */</span></span><br><span class="line">    <span class="type">uint32_t</span> uptime32 = k_uptime_get_32();</span><br><span class="line">    printk(<span class="string">&quot;System uptime (32-bit): %u ms\n&quot;</span>, uptime32);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取CPU cycles */</span></span><br><span class="line">    <span class="type">uint32_t</span> cycles = k_cycle_get_32();</span><br><span class="line">    printk(<span class="string">&quot;CPU cycles: %u\n&quot;</span>, cycles);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取64位CPU cycles */</span></span><br><span class="line">    <span class="type">uint64_t</span> cycles64 = k_cycle_get_64();</span><br><span class="line">    printk(<span class="string">&quot;CPU cycles (64-bit): %llu\n&quot;</span>, cycles64);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-定时器管理"><a href="#3-定时器管理" class="headerlink" title="3. 定时器管理"></a>3. 定时器管理</h2><h3 id="3-1-基本定时器"><a href="#3-1-基本定时器" class="headerlink" title="3.1 基本定时器"></a>3.1 基本定时器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义定时器 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_timer</span> <span class="title">my_timer</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_handler</span><span class="params">(<span class="keyword">struct</span> k_timer *timer)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Timer expired!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器停止回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_stop_handler</span><span class="params">(<span class="keyword">struct</span> k_timer *timer)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Timer stopped!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化定时器 */</span></span><br><span class="line">    k_timer_init(&amp;my_timer, timer_handler, timer_stop_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动定时器（2秒后触发，每1秒重复） */</span></span><br><span class="line">    k_timer_start(&amp;my_timer, K_SECONDS(<span class="number">2</span>), K_SECONDS(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待定时器触发 */</span></span><br><span class="line">    k_timer_status_sync(&amp;my_timer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取剩余时间 */</span></span><br><span class="line">    <span class="type">uint32_t</span> remaining = k_timer_remaining_get(&amp;my_timer);</span><br><span class="line">    printk(<span class="string">&quot;Remaining time: %u ms\n&quot;</span>, remaining);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 停止定时器 */</span></span><br><span class="line">    k_timer_stop(&amp;my_timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-高精度定时器"><a href="#3-2-高精度定时器" class="headerlink" title="3.2 高精度定时器"></a>3.2 高精度定时器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/timing/timing.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">high_precision_timer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> start_time, end_time;</span><br><span class="line">    <span class="type">uint32_t</span> cycles, ns;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化timing系统 */</span></span><br><span class="line">    timing_init();</span><br><span class="line">    timing_start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取开始时间 */</span></span><br><span class="line">    start_time = timing_counter_get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行需要测量的操作 */</span></span><br><span class="line">    k_busy_wait(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取结束时间 */</span></span><br><span class="line">    end_time = timing_counter_get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算时间差 */</span></span><br><span class="line">    cycles = timing_cycles_get(&amp;start_time, &amp;end_time);</span><br><span class="line">    ns = timing_cycles_to_ns(cycles);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Operation took %u cycles (%u ns)\n&quot;</span>, cycles, ns);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实时时钟-RTC"><a href="#4-实时时钟-RTC" class="headerlink" title="4. 实时时钟(RTC)"></a>4. 实时时钟(RTC)</h2><h3 id="4-1-RTC操作"><a href="#4-1-RTC操作" class="headerlink" title="4.1 RTC操作"></a>4.1 RTC操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/counter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rtc_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">rtc</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> now;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取RTC设备 */</span></span><br><span class="line">    rtc = DEVICE_DT_GET(DT_NODELABEL(rtc0));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(rtc)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;RTC device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取当前计数值 */</span></span><br><span class="line">    ret = counter_get_value(rtc, &amp;now);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to get counter value\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 转换为时间戳 */</span></span><br><span class="line">    <span class="type">time_t</span> timestamp = counter_ticks_to_us(rtc, now) / <span class="number">1000000</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">time_info</span> =</span> localtime(&amp;timestamp);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Current time: %02d:%02d:%02d\n&quot;</span>,</span><br><span class="line">           time_info-&gt;tm_hour,</span><br><span class="line">           time_info-&gt;tm_min,</span><br><span class="line">           time_info-&gt;tm_sec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-RTC闹钟"><a href="#4-2-RTC闹钟" class="headerlink" title="4.2 RTC闹钟"></a>4.2 RTC闹钟</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/counter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 闹钟回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">alarm_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                         <span class="type">uint8_t</span> chan_id,</span></span><br><span class="line"><span class="params">                         <span class="type">uint32_t</span> ticks,</span></span><br><span class="line"><span class="params">                         <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Alarm triggered!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rtc_alarm_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">rtc</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> now;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    rtc = DEVICE_DT_GET(DT_NODELABEL(rtc0));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(rtc)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取当前时间 */</span></span><br><span class="line">    ret = counter_get_value(rtc, &amp;now);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置闹钟 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">counter_alarm_cfg</span> <span class="title">alarm_cfg</span> =</span> &#123;</span><br><span class="line">        .callback = alarm_callback,</span><br><span class="line">        .flags = <span class="number">0</span>,</span><br><span class="line">        .ticks = now + counter_us_to_ticks(rtc, <span class="number">5000000</span>) <span class="comment">/* 5秒后触发 */</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ret = counter_set_channel_alarm(rtc, <span class="number">0</span>, &amp;alarm_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set alarm\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-周期性任务"><a href="#5-周期性任务" class="headerlink" title="5. 周期性任务"></a>5. 周期性任务</h2><h3 id="5-1-工作队列定时器"><a href="#5-1-工作队列定时器" class="headerlink" title="5.1 工作队列定时器"></a>5.1 工作队列定时器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义工作队列 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work_q</span> <span class="title">my_work_q</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="title function_">K_THREAD_STACK_DEFINE</span><span class="params">(my_work_q_stack, <span class="number">1024</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义延迟工作 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work_delayable</span> <span class="title">delayed_work</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 工作处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">work_handler</span><span class="params">(<span class="keyword">struct</span> k_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Periodic work executed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 重新调度下一次执行 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_work_delayable</span> *<span class="title">dwork</span> =</span> k_work_delayable_from_work(work);</span><br><span class="line">    k_work_schedule_for_queue(&amp;my_work_q, dwork, K_SECONDS(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">periodic_work_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化工作队列 */</span></span><br><span class="line">    k_work_queue_init(&amp;my_work_q);</span><br><span class="line">    k_work_queue_start(&amp;my_work_q, my_work_q_stack,</span><br><span class="line">                      K_THREAD_STACK_SIZEOF(my_work_q_stack),</span><br><span class="line">                      K_PRIO_PREEMPT(<span class="number">10</span>), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化延迟工作 */</span></span><br><span class="line">    k_work_init_delayable(&amp;delayed_work, work_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开始周期性任务 */</span></span><br><span class="line">    k_work_schedule_for_queue(&amp;my_work_q, &amp;delayed_work, K_NO_WAIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-定时器线程"><a href="#5-2-定时器线程" class="headerlink" title="5.2 定时器线程"></a>5.2 定时器线程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程栈 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line">K_THREAD_STACK_DEFINE(timer_stack, STACK_SIZE);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">timer_thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程入口函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_thread</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 执行周期性任务 */</span></span><br><span class="line">        printk(<span class="string">&quot;Timer thread running\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 精确延时 */</span></span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_thread_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 创建定时器线程 */</span></span><br><span class="line">    k_thread_create(&amp;timer_thread_data, timer_stack,</span><br><span class="line">                    STACK_SIZE,</span><br><span class="line">                    timer_thread,</span><br><span class="line">                    <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    K_PRIO_PREEMPT(<span class="number">10</span>), <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-时间同步"><a href="#6-时间同步" class="headerlink" title="6. 时间同步"></a>6. 时间同步</h2><h3 id="6-1-时间同步配置"><a href="#6-1-时间同步配置" class="headerlink" title="6.1 时间同步配置"></a>6.1 时间同步配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/sntp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">time_sync_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sntp_ctx</span> <span class="title">ctx</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">uint64_t</span> epoch_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置SNTP服务器地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">123</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;pool.ntp.org&quot;</span>, &amp;addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化SNTP */</span></span><br><span class="line">    ret = sntp_init(&amp;ctx);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取时间 */</span></span><br><span class="line">    ret = sntp_query(&amp;ctx, (<span class="keyword">struct</span> sockaddr *)&amp;addr,</span><br><span class="line">                     <span class="keyword">sizeof</span>(addr), &amp;epoch_time);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        sntp_close(&amp;ctx);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置系统时间 */</span></span><br><span class="line">    printk(<span class="string">&quot;Time synchronized: %llu\n&quot;</span>, epoch_time);</span><br><span class="line">    sntp_close(&amp;ctx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-时区管理"><a href="#6-2-时区管理" class="headerlink" title="6.2 时区管理"></a>6.2 时区管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timezone_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">time_t</span> now;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">time_info</span>;</span></span><br><span class="line">    <span class="type">char</span> time_str[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取当前时间戳 */</span></span><br><span class="line">    time(&amp;now);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 转换为本地时间 */</span></span><br><span class="line">    time_info = localtime(&amp;now);</span><br><span class="line">    strftime(time_str, <span class="keyword">sizeof</span>(time_str),</span><br><span class="line">             <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time_info);</span><br><span class="line">    printk(<span class="string">&quot;Local time: %s\n&quot;</span>, time_str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 转换为UTC时间 */</span></span><br><span class="line">    time_info = gmtime(&amp;now);</span><br><span class="line">    strftime(time_str, <span class="keyword">sizeof</span>(time_str),</span><br><span class="line">             <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time_info);</span><br><span class="line">    printk(<span class="string">&quot;UTC time: %s\n&quot;</span>, time_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-性能优化"><a href="#7-性能优化" class="headerlink" title="7. 性能优化"></a>7. 性能优化</h2><h3 id="7-1-时间测量优化"><a href="#7-1-时间测量优化" class="headerlink" title="7.1 时间测量优化"></a>7.1 时间测量优化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/timing/timing.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">optimized_timing</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> start, end;</span><br><span class="line">    <span class="type">uint32_t</span> min_time = UINT32_MAX;</span><br><span class="line">    <span class="type">uint32_t</span> max_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> total_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 预热CPU缓存 */</span></span><br><span class="line">    k_busy_wait(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 多次测量以获得统计数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        start = k_cycle_get_32();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 被测量的代码 */</span></span><br><span class="line">        k_busy_wait(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        end = k_cycle_get_32();</span><br><span class="line">        <span class="type">uint32_t</span> elapsed = end - start;</span><br><span class="line"></span><br><span class="line">        min_time = MIN(min_time, elapsed);</span><br><span class="line">        max_time = MAX(max_time, elapsed);</span><br><span class="line">        total_time += elapsed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Timing statistics:\n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;Min: %u cycles\n&quot;</span>, min_time);</span><br><span class="line">    printk(<span class="string">&quot;Max: %u cycles\n&quot;</span>, max_time);</span><br><span class="line">    printk(<span class="string">&quot;Avg: %u cycles\n&quot;</span>, total_time / count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-定时器优化"><a href="#7-2-定时器优化" class="headerlink" title="7.2 定时器优化"></a>7.2 定时器优化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用静态定义的定时器 */</span></span><br><span class="line">K_TIMER_DEFINE(static_timer, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器池 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMER_POOL_SIZE 4</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_timer</span> <span class="title">timer_pool</span>[<span class="title">TIMER_POOL_SIZE</span>];</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> timer_used[TIMER_POOL_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从池中获取定时器 */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> k_timer *<span class="title function_">get_timer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; TIMER_POOL_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timer_used[i]) &#123;</span><br><span class="line">            timer_used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> &amp;timer_pool[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放定时器回池 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">release_timer</span><span class="params">(<span class="keyword">struct</span> k_timer *timer)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; TIMER_POOL_SIZE; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer == &amp;timer_pool[i]) &#123;</span><br><span class="line">            timer_used[i] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_pool_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_timer</span> *<span class="title">timer</span> =</span> get_timer();</span><br><span class="line">    <span class="keyword">if</span> (timer != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* 使用定时器 */</span></span><br><span class="line">        k_timer_start(timer, K_SECONDS(<span class="number">1</span>), K_NO_WAIT);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 停止并释放定时器 */</span></span><br><span class="line">        k_timer_stop(timer);</span><br><span class="line">        release_timer(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 调度系统指南</title>
      <link href="/2025/03/21/nodic/zephyr/scheduling/README/"/>
      <url>/2025/03/21/nodic/zephyr/scheduling/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-任务调度指南"><a href="#Zephyr-任务调度指南" class="headerlink" title="Zephyr 任务调度指南"></a>Zephyr 任务调度指南</h1><h2 id="1-调度器配置"><a href="#1-调度器配置" class="headerlink" title="1. 调度器配置"></a>1. 调度器配置</h2><h3 id="1-1-基础配置-prj-conf"><a href="#1-1-基础配置-prj-conf" class="headerlink" title="1.1 基础配置 (prj.conf)"></a>1.1 基础配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 调度器配置</span><br><span class="line">CONFIG_MULTITHREADING=y</span><br><span class="line">CONFIG_NUM_PREEMPT_PRIORITIES=16</span><br><span class="line">CONFIG_NUM_COOP_PRIORITIES=16</span><br><span class="line">CONFIG_TIMESLICING=y</span><br><span class="line">CONFIG_TIMESLICE_SIZE=10</span><br><span class="line">CONFIG_TIMESLICE_PRIORITY=0</span><br><span class="line"></span><br><span class="line"># 线程配置</span><br><span class="line">CONFIG_MAIN_STACK_SIZE=2048</span><br><span class="line">CONFIG_IDLE_STACK_SIZE=512</span><br><span class="line">CONFIG_THREAD_STACK_INFO=y</span><br><span class="line">CONFIG_THREAD_MONITOR=y</span><br><span class="line">CONFIG_THREAD_NAME=y</span><br><span class="line"></span><br><span class="line"># 调度器调试</span><br><span class="line">CONFIG_SCHED_THREAD_USAGE=y</span><br><span class="line">CONFIG_THREAD_RUNTIME_STATS=y</span><br></pre></td></tr></table></figure><h3 id="1-2-线程优先级定义"><a href="#1-2-线程优先级定义" class="headerlink" title="1.2 线程优先级定义"></a>1.2 线程优先级定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 优先级定义 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_PRIORITY_HIGH    K_PRIO_PREEMPT(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_PRIORITY_NORMAL  K_PRIO_PREEMPT(8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_PRIORITY_LOW     K_PRIO_PREEMPT(14)</span></span><br></pre></td></tr></table></figure><h2 id="2-线程创建与管理"><a href="#2-线程创建与管理" class="headerlink" title="2. 线程创建与管理"></a>2. 线程创建与管理</h2><h3 id="2-1-基本线程创建"><a href="#2-1-基本线程创建" class="headerlink" title="2.1 基本线程创建"></a>2.1 基本线程创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程栈和数据结构 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line">K_THREAD_STACK_DEFINE(thread_stack, STACK_SIZE);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程入口函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Thread running\n&quot;</span>);</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">k_tid_t</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建线程 */</span></span><br><span class="line">    tid = k_thread_create(&amp;thread_data, thread_stack,</span><br><span class="line">                         STACK_SIZE,</span><br><span class="line">                         thread_entry,</span><br><span class="line">                         <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                         THREAD_PRIORITY_NORMAL,</span><br><span class="line">                         <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置线程名称 */</span></span><br><span class="line">    k_thread_name_set(tid, <span class="string">&quot;example_thread&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-线程生命周期管理"><a href="#2-2-线程生命周期管理" class="headerlink" title="2.2 线程生命周期管理"></a>2.2 线程生命周期管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_lifecycle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">k_tid_t</span> tid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 创建线程 */</span></span><br><span class="line">    tid = k_thread_create(...);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 挂起线程 */</span></span><br><span class="line">    k_thread_suspend(tid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 恢复线程 */</span></span><br><span class="line">    k_thread_resume(tid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 中止线程 */</span></span><br><span class="line">    k_thread_abort(tid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 等待线程结束 */</span></span><br><span class="line">    k_thread_join(&amp;thread_data, K_FOREVER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-调度策略"><a href="#3-调度策略" class="headerlink" title="3. 调度策略"></a>3. 调度策略</h2><h3 id="3-1-抢占式调度"><a href="#3-1-抢占式调度" class="headerlink" title="3.1 抢占式调度"></a>3.1 抢占式调度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高优先级线程 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">high_priority_thread</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 执行高优先级任务 */</span></span><br><span class="line">        k_msleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 低优先级线程 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">low_priority_thread</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 执行低优先级任务 */</span></span><br><span class="line">        k_msleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 创建高优先级线程 */</span></span><br><span class="line">    k_thread_create(..., high_priority_thread, ...,</span><br><span class="line">                   K_PRIO_PREEMPT(<span class="number">2</span>), <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 创建低优先级线程 */</span></span><br><span class="line">    k_thread_create(..., low_priority_thread, ...,</span><br><span class="line">                   K_PRIO_PREEMPT(<span class="number">8</span>), <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-时间片轮转"><a href="#3-2-时间片轮转" class="headerlink" title="3.2 时间片轮转"></a>3.2 时间片轮转</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义多个相同优先级的线程 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_function</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 执行任务 */</span></span><br><span class="line">        printk(<span class="string">&quot;Thread %p running\n&quot;</span>, k_current_get());</span><br><span class="line">        k_msleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 创建多个相同优先级的线程 */</span></span><br><span class="line">    k_thread_create(..., thread_function, ...,</span><br><span class="line">                   K_PRIO_PREEMPT(<span class="number">5</span>), <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line">    k_thread_create(..., thread_function, ...,</span><br><span class="line">                   K_PRIO_PREEMPT(<span class="number">5</span>), <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line">    k_thread_create(..., thread_function, ...,</span><br><span class="line">                   K_PRIO_PREEMPT(<span class="number">5</span>), <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-线程同步"><a href="#4-线程同步" class="headerlink" title="4. 线程同步"></a>4. 线程同步</h2><h3 id="4-1-互斥量"><a href="#4-1-互斥量" class="headerlink" title="4.1 互斥量"></a>4.1 互斥量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义互斥量 */</span></span><br><span class="line">K_MUTEX_DEFINE(my_mutex);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mutex_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 获取互斥量 */</span></span><br><span class="line">    <span class="keyword">if</span> (k_mutex_lock(&amp;my_mutex, K_MSEC(<span class="number">100</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 临界区代码 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 释放互斥量 */</span></span><br><span class="line">        k_mutex_unlock(&amp;my_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-信号量"><a href="#4-2-信号量" class="headerlink" title="4.2 信号量"></a>4.2 信号量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义信号量 */</span></span><br><span class="line">K_SEM_DEFINE(my_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">semaphore_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 等待信号量 */</span></span><br><span class="line">    <span class="keyword">if</span> (k_sem_take(&amp;my_sem, K_MSEC(<span class="number">100</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 获得信号量后的代码 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 释放信号量 */</span></span><br><span class="line">    k_sem_give(&amp;my_sem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-任务通信"><a href="#5-任务通信" class="headerlink" title="5. 任务通信"></a>5. 任务通信</h2><h3 id="5-1-消息队列"><a href="#5-1-消息队列" class="headerlink" title="5.1 消息队列"></a>5.1 消息队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义消息队列 */</span></span><br><span class="line">K_MSGQ_DEFINE(my_msgq, <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>), <span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">msgq_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> data = <span class="number">42</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 发送消息 */</span></span><br><span class="line">    k_msgq_put(&amp;my_msgq, &amp;data, K_NO_WAIT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 接收消息 */</span></span><br><span class="line">    <span class="type">uint32_t</span> received;</span><br><span class="line">    <span class="keyword">if</span> (k_msgq_get(&amp;my_msgq, &amp;received, K_FOREVER) == <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Received: %u\n&quot;</span>, received);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-管道"><a href="#5-2-管道" class="headerlink" title="5.2 管道"></a>5.2 管道</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义管道 */</span></span><br><span class="line">K_PIPE_DEFINE(my_pipe, <span class="number">64</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pipe_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> data[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="type">size_t</span> bytes_written;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 写入数据 */</span></span><br><span class="line">    k_pipe_put(&amp;my_pipe, data, <span class="keyword">sizeof</span>(data),</span><br><span class="line">               &amp;bytes_written, <span class="number">1</span>, K_NO_WAIT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 读取数据 */</span></span><br><span class="line">    <span class="type">uint8_t</span> buffer[<span class="number">64</span>];</span><br><span class="line">    <span class="type">size_t</span> bytes_read;</span><br><span class="line">    k_pipe_get(&amp;my_pipe, buffer, <span class="keyword">sizeof</span>(buffer),</span><br><span class="line">               &amp;bytes_read, <span class="number">1</span>, K_NO_WAIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-任务监控"><a href="#6-任务监控" class="headerlink" title="6. 任务监控"></a>6. 任务监控</h2><h3 id="6-1-线程统计"><a href="#6-1-线程统计" class="headerlink" title="6.1 线程统计"></a>6.1 线程统计</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/timing/timing.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_monitor</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">k_thread_runtime_stats_t</span> stats;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 获取线程运行时统计 */</span></span><br><span class="line">    k_thread_runtime_stats_all_get(&amp;stats);</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Total cycles: %llu\n&quot;</span>, stats.total_cycles);</span><br><span class="line">    printk(<span class="string">&quot;Execution cycles: %llu\n&quot;</span>, stats.execution_cycles);</span><br><span class="line">    printk(<span class="string">&quot;Idle cycles: %llu\n&quot;</span>, stats.idle_cycles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-调度器调试"><a href="#6-2-调度器调试" class="headerlink" title="6.2 调度器调试"></a>6.2 调度器调试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">scheduler_debug</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> *<span class="title">thread</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 遍历所有线程 */</span></span><br><span class="line">    <span class="keyword">for</span> (thread = _kernel.threads; thread; thread = thread-&gt;next_thread) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Thread %p: priority %d, state %d\n&quot;</span>,</span><br><span class="line">               thread, thread-&gt;base.prio,</span><br><span class="line">               thread-&gt;base.thread_state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-高级特性"><a href="#7-高级特性" class="headerlink" title="7. 高级特性"></a>7. 高级特性</h2><h3 id="7-1-工作队列"><a href="#7-1-工作队列" class="headerlink" title="7.1 工作队列"></a>7.1 工作队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义工作队列 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(my_stack_area, <span class="number">1024</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_work_q</span> <span class="title">my_work_q</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 工作项处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">work_handler</span><span class="params">(<span class="keyword">struct</span> k_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Work executed\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义工作项 */</span></span><br><span class="line">K_WORK_DEFINE(my_work, work_handler);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化工作队列 */</span></span><br><span class="line">    k_work_queue_init(&amp;my_work_q);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 启动工作队列 */</span></span><br><span class="line">    k_work_queue_start(&amp;my_work_q, my_stack_area,</span><br><span class="line">                      K_THREAD_STACK_SIZEOF(my_stack_area),</span><br><span class="line">                      K_PRIO_PREEMPT(<span class="number">10</span>), <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 提交工作 */</span></span><br><span class="line">    k_work_submit_to_queue(&amp;my_work_q, &amp;my_work);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-定时器线程"><a href="#7-2-定时器线程" class="headerlink" title="7.2 定时器线程"></a>7.2 定时器线程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器回调 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_handler</span><span class="params">(<span class="keyword">struct</span> k_timer *timer)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Timer expired\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_thread_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_timer</span> <span class="title">my_timer</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 初始化定时器 */</span></span><br><span class="line">    k_timer_init(&amp;my_timer, timer_handler, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 启动定时器 */</span></span><br><span class="line">    k_timer_start(&amp;my_timer, K_MSEC(<span class="number">1000</span>), K_MSEC(<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-空闲线程钩子"><a href="#7-3-空闲线程钩子" class="headerlink" title="7.3 空闲线程钩子"></a>7.3 空闲线程钩子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 空闲线程钩子函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">idle_hook</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 在系统空闲时执行 */</span></span><br><span class="line">    printk(<span class="string">&quot;System is idle\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 注册空闲钩子 */</span></span><br><span class="line">    k_idle_thread_set_callback(idle_hook);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 工具链指南</title>
      <link href="/2025/03/21/nodic/zephyr/toolchain/README/"/>
      <url>/2025/03/21/nodic/zephyr/toolchain/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-工具链"><a href="#Zephyr-工具链" class="headerlink" title="Zephyr 工具链"></a>Zephyr 工具链</h1><p>本章节详细介绍了 Zephyr RTOS 开发所需的工具链，包括安装配置、构建系统、调试工具以及开发环境设置等内容。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><p><a href="installation">工具链安装</a></p></li><li><p><a href="build_system">构建系统</a></p></li><li><p><a href="debugging">调试工具</a></p></li><li><p><a href="ide">开发环境</a></p><ul><li>常见问题解决</li></ul></li><li><p><a href="./build_system.md">构建系统</a></p><ul><li>CMake 构建流程</li><li>West 命令工具</li><li>构建配置选项</li><li>自定义构建</li></ul></li><li><p><a href="./debugging.md">调试工具</a></p><ul><li>GDB 调试</li><li>OpenOCD 配置</li><li>SEGGER J-Link</li><li>跟踪和分析</li></ul></li><li><p><a href="./ide.md">开发环境</a></p><ul><li>Visual Studio Code 配置</li><li>Eclipse 集成</li><li>SEGGER Embedded Studio</li><li>命令行工具</li></ul></li></ol><h2 id="工具链概述"><a href="#工具链概述" class="headerlink" title="工具链概述"></a>工具链概述</h2><p>Zephyr RTOS 开发需要以下核心工具：</p><ol><li><strong>Zephyr SDK</strong>：包含交叉编译器、调试器和工具</li><li><strong>West</strong>：Zephyr 的元工具，用于管理多仓库项目</li><li><strong>CMake</strong>：构建系统</li><li><strong>Ninja</strong>：构建工具</li><li><strong>Python</strong>：脚本和工具依赖</li></ol><h2 id="支持的操作系统"><a href="#支持的操作系统" class="headerlink" title="支持的操作系统"></a>支持的操作系统</h2><p>Zephyr 开发工具链支持以下操作系统：</p><ul><li><strong>Linux</strong>：Ubuntu, Fedora, Clear Linux OS</li><li><strong>macOS</strong>：10.15 Catalina 及更高版本</li><li><strong>Windows</strong>：Windows 10 及更高版本</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="Linux-环境设置"><a href="#Linux-环境设置" class="headerlink" title="Linux 环境设置"></a>Linux 环境设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="built_in">sudo</span> apt install --no-install-recommends git cmake ninja-build gperf \</span><br><span class="line">  ccache dfu-util device-tree-compiler wget \</span><br><span class="line">  python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \</span><br><span class="line">  make gcc gcc-multilib g++-multilib libsdl2-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 West</span></span><br><span class="line">pip3 install --user -U west</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=~/.local/bin:&quot;$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 Zephyr 源码</span></span><br><span class="line">west init ~/zephyrproject</span><br><span class="line"><span class="built_in">cd</span> ~/zephyrproject</span><br><span class="line">west update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 依赖</span></span><br><span class="line">pip3 install --user -r ~/zephyrproject/zephyr/scripts/requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Zephyr SDK</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br><span class="line">tar xvf zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> zephyr-sdk-0.16.1</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><h3 id="Windows-环境设置"><a href="#Windows-环境设置" class="headerlink" title="Windows 环境设置"></a>Windows 环境设置</h3><ol><li>安装 Git</li><li>安装 Python 3</li><li>安装 CMake</li><li>安装 West: <code>pip install west</code></li><li>获取 Zephyr 源码: <code>west init zephyrproject</code></li><li>安装 Zephyr SDK (Windows 版本)</li></ol><h3 id="macOS-环境设置"><a href="#macOS-环境设置" class="headerlink" title="macOS 环境设置"></a>macOS 环境设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Homebrew (如果尚未安装)</span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">brew install cmake ninja gperf python3 ccache qemu dtc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 West</span></span><br><span class="line">pip3 install west</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 Zephyr 源码</span></span><br><span class="line">west init ~/zephyrproject</span><br><span class="line"><span class="built_in">cd</span> ~/zephyrproject</span><br><span class="line">west update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 依赖</span></span><br><span class="line">pip3 install -r ~/zephyrproject/zephyr/scripts/requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ARM 工具链</span></span><br><span class="line">brew install gcc-arm-embedded</span><br></pre></td></tr></table></figure><h2 id="工具链组件"><a href="#工具链组件" class="headerlink" title="工具链组件"></a>工具链组件</h2><h3 id="1-交叉编译器"><a href="#1-交叉编译器" class="headerlink" title="1. 交叉编译器"></a>1. 交叉编译器</h3><p>Zephyr SDK 包含多种架构的交叉编译器：</p><ul><li><strong>arm-zephyr-eabi</strong>: ARM Cortex-M&#x2F;R</li><li><strong>aarch64-zephyr-elf</strong>: ARM Cortex-A</li><li><strong>riscv64-zephyr-elf</strong>: RISC-V</li><li><strong>arc-zephyr-elf</strong>: ARC</li><li><strong>x86_64-zephyr-elf</strong>: x86</li><li><strong>xtensa-espressif_esp32_zephyr-elf</strong>: ESP32</li></ul><h3 id="2-调试工具"><a href="#2-调试工具" class="headerlink" title="2. 调试工具"></a>2. 调试工具</h3><ul><li><strong>GDB</strong>: GNU 调试器，支持各种架构</li><li><strong>OpenOCD</strong>: 开源调试器，支持多种调试适配器</li><li><strong>SEGGER J-Link</strong>: 商业调试解决方案</li><li><strong>pyOCD</strong>: Python 调试工具</li></ul><h3 id="3-构建工具"><a href="#3-构建工具" class="headerlink" title="3. 构建工具"></a>3. 构建工具</h3><ul><li><strong>CMake</strong>: 跨平台构建系统</li><li><strong>Ninja</strong>: 高性能构建工具</li><li><strong>West</strong>: Zephyr 元工具</li></ul><h3 id="4-其他工具"><a href="#4-其他工具" class="headerlink" title="4. 其他工具"></a>4. 其他工具</h3><ul><li><strong>Device Tree Compiler (DTC)</strong>: 设备树编译器</li><li><strong>Kconfig</strong>: 配置系统</li><li><strong>QEMU</strong>: 硬件模拟器</li><li><strong>Uniflash</strong>: TI 设备烧录工具</li><li><strong>nrfjprog</strong>: Nordic 设备烧录工具</li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>重要的环境变量：</p><ul><li><strong>ZEPHYR_BASE</strong>: Zephyr 源码根目录</li><li><strong>ZEPHYR_SDK_INSTALL_DIR</strong>: Zephyr SDK 安装目录</li><li><strong>ZEPHYR_TOOLCHAIN_VARIANT</strong>: 使用的工具链变体</li></ul><h2 id="版本兼容性"><a href="#版本兼容性" class="headerlink" title="版本兼容性"></a>版本兼容性</h2><table><thead><tr><th>Zephyr 版本</th><th>推荐 SDK 版本</th><th>最低 CMake 版本</th><th>Python 版本</th></tr></thead><tbody><tr><td>v2.9.x</td><td>0.16.x</td><td>3.20.0</td><td>3.8+</td></tr><tr><td>v2.7.x</td><td>0.15.x</td><td>3.20.0</td><td>3.6+</td></tr><tr><td>v2.5.x</td><td>0.13.x</td><td>3.13.1</td><td>3.6+</td></tr></tbody></table><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>使用虚拟环境</strong></p><ul><li>为每个项目创建独立的 Python 虚拟环境</li><li>避免全局依赖冲突</li></ul></li><li><p><strong>版本控制</strong></p><ul><li>记录工具链版本信息</li><li>使用 manifest 文件锁定依赖版本</li></ul></li><li><p><strong>构建优化</strong></p><ul><li>使用 ccache 加速重复构建</li><li>配置并行构建</li></ul></li><li><p><strong>IDE 集成</strong></p><ul><li>配置 IDE 使用正确的工具链</li><li>设置调试器配置</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>工具链安装失败</strong></p><ul><li>检查系统依赖</li><li>验证下载完整性</li><li>确认权限设置</li></ul></li><li><p><strong>构建错误</strong></p><ul><li>检查环境变量</li><li>验证 CMake 版本</li><li>确认工具链路径</li></ul></li><li><p><strong>调试连接问题</strong></p><ul><li>检查硬件连接</li><li>验证调试器配置</li><li>确认驱动安装</li></ul></li><li><p><strong>West 命令失败</strong></p><ul><li>检查 Python 版本</li><li>验证 West 安装</li><li>确认 manifest 文件</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 开发需要一套完整的工具链，包括交叉编译器、构建系统和调试工具。正确设置和配置这些工具对于成功开发 Zephyr 应用程序至关重要。本章节提供了工具链安装和使用的详细指南，帮助开发者快速搭建开发环境。</p><p>在接下来的章节中，我们将详细介绍工具链的各个组件，包括安装配置、构建系统、调试工具和开发环境设置。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>debugging</title>
      <link href="/2025/03/21/nodic/zephyr/toolchain/debugging/"/>
      <url>/2025/03/21/nodic/zephyr/toolchain/debugging/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-调试工具"><a href="#Zephyr-调试工具" class="headerlink" title="Zephyr 调试工具"></a>Zephyr 调试工具</h1><p>本文档详细介绍了 Zephyr RTOS 的调试工具，包括 GDB 调试、OpenOCD 配置、SEGGER J-Link 使用以及跟踪和分析工具等内容。</p><h2 id="GDB-调试"><a href="#GDB-调试" class="headerlink" title="GDB 调试"></a>GDB 调试</h2><p>GNU 调试器 (GDB) 是 Zephyr 开发中最常用的调试工具，用于检查程序运行状态、设置断点和分析问题。</p><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><p>要使用 GDB 调试 Zephyr 应用程序，需要以调试模式构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建调试版本</span></span><br><span class="line">west build -b &lt;board&gt; &lt;app_directory&gt; -- -DCMAKE_BUILD_TYPE=Debug</span><br></pre></td></tr></table></figure><h3 id="启动调试会话"><a href="#启动调试会话" class="headerlink" title="启动调试会话"></a>启动调试会话</h3><p>使用 West 启动调试会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动调试</span></span><br><span class="line">west debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或指定运行器</span></span><br><span class="line">west debug --runner openocd</span><br><span class="line">west debug --runner jlink</span><br><span class="line">west debug --runner pyocd</span><br></pre></td></tr></table></figure><h3 id="常用-GDB-命令"><a href="#常用-GDB-命令" class="headerlink" title="常用 GDB 命令"></a>常用 GDB 命令</h3><p>在 GDB 提示符下，可以使用以下常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"># 运行程序</span><br><span class="line">(gdb) continue</span><br><span class="line">(gdb) c</span><br><span class="line"></span><br><span class="line"># 单步执行（进入函数）</span><br><span class="line">(gdb) step</span><br><span class="line">(gdb) s</span><br><span class="line"></span><br><span class="line"># 单步执行（不进入函数）</span><br><span class="line">(gdb) next</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line"># 运行到当前函数返回</span><br><span class="line">(gdb) finish</span><br><span class="line"></span><br><span class="line"># 设置断点</span><br><span class="line">(gdb) break main</span><br><span class="line">(gdb) b app_main</span><br><span class="line">(gdb) break file.c:123</span><br><span class="line"></span><br><span class="line"># 查看断点</span><br><span class="line">(gdb) info breakpoints</span><br><span class="line"></span><br><span class="line"># 删除断点</span><br><span class="line">(gdb) delete 1</span><br><span class="line">(gdb) clear file.c:123</span><br><span class="line"></span><br><span class="line"># 查看变量</span><br><span class="line">(gdb) print variable</span><br><span class="line">(gdb) p variable</span><br><span class="line"></span><br><span class="line"># 查看内存</span><br><span class="line">(gdb) x/10x 0x20000000  # 以十六进制查看 10 个字</span><br><span class="line">(gdb) x/s 0x20000000    # 查看字符串</span><br><span class="line"></span><br><span class="line"># 查看寄存器</span><br><span class="line">(gdb) info registers</span><br><span class="line">(gdb) p/x $pc</span><br><span class="line"></span><br><span class="line"># 查看调用栈</span><br><span class="line">(gdb) backtrace</span><br><span class="line">(gdb) bt</span><br><span class="line"></span><br><span class="line"># 切换栈帧</span><br><span class="line">(gdb) frame 2</span><br><span class="line"></span><br><span class="line"># 查看线程</span><br><span class="line">(gdb) info threads</span><br><span class="line">(gdb) thread 2</span><br><span class="line"></span><br><span class="line"># 查看源代码</span><br><span class="line">(gdb) list</span><br><span class="line">(gdb) list main</span><br><span class="line">(gdb) list file.c:100</span><br><span class="line"></span><br><span class="line"># 监视变量</span><br><span class="line">(gdb) watch variable</span><br><span class="line">(gdb) rwatch variable  # 读监视</span><br><span class="line">(gdb) awatch variable  # 读写监视</span><br><span class="line"></span><br><span class="line"># 修改变量</span><br><span class="line">(gdb) set variable = value</span><br><span class="line"></span><br><span class="line"># 退出 GDB</span><br><span class="line">(gdb) quit</span><br><span class="line">(gdb) q</span><br></pre></td></tr></table></figure><h3 id="GDB-初始化脚本"><a href="#GDB-初始化脚本" class="headerlink" title="GDB 初始化脚本"></a>GDB 初始化脚本</h3><p>可以创建 <code>.gdbinit</code> 文件自动执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># .gdbinit</span><br><span class="line">set print pretty on</span><br><span class="line">set print array on</span><br><span class="line">set print array-indexes on</span><br><span class="line"></span><br><span class="line"># 连接到目标</span><br><span class="line">target remote localhost:3333</span><br><span class="line"></span><br><span class="line"># 加载符号</span><br><span class="line">file build/zephyr/zephyr.elf</span><br><span class="line"></span><br><span class="line"># 监视常用变量</span><br><span class="line">display/i $pc</span><br></pre></td></tr></table></figure><h2 id="OpenOCD-配置"><a href="#OpenOCD-配置" class="headerlink" title="OpenOCD 配置"></a>OpenOCD 配置</h2><p>OpenOCD（Open On-Chip Debugger）是一个开源调试工具，支持多种调试适配器和目标设备。</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>OpenOCD 配置文件通常包含三个部分：</p><ol><li><strong>接口配置</strong>：定义调试适配器</li><li><strong>目标配置</strong>：定义目标芯片</li><li><strong>传输配置</strong>：定义调试接口（如 JTAG、SWD）</li></ol><h3 id="常用配置示例"><a href="#常用配置示例" class="headerlink" title="常用配置示例"></a>常用配置示例</h3><p><strong>STM32F4 开发板配置</strong>:</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接口配置</span></span><br><span class="line"><span class="keyword">source</span> [find interface/stlink.cfg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传输配置</span></span><br><span class="line">transport select hla_swd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标配置</span></span><br><span class="line"><span class="keyword">source</span> [find target/stm32f4x.cfg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作频率</span></span><br><span class="line">adapter speed <span class="number">2000</span></span><br></pre></td></tr></table></figure><p><strong>nRF52 开发板配置</strong>:</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接口配置</span></span><br><span class="line"><span class="keyword">source</span> [find interface/jlink.cfg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传输配置</span></span><br><span class="line">transport select swd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标配置</span></span><br><span class="line"><span class="keyword">source</span> [find target/nrf52.cfg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作频率</span></span><br><span class="line">adapter speed <span class="number">4000</span></span><br></pre></td></tr></table></figure><h3 id="启动-OpenOCD"><a href="#启动-OpenOCD" class="headerlink" title="启动 OpenOCD"></a>启动 OpenOCD</h3><p>手动启动 OpenOCD：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用配置文件启动</span></span><br><span class="line">openocd -f board/nrf52840dk.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用单独的接口和目标配置</span></span><br><span class="line">openocd -f interface/jlink.cfg -f target/nrf52.cfg</span><br></pre></td></tr></table></figure><p>通过 West 启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west debug --runner openocd</span><br></pre></td></tr></table></figure><h3 id="OpenOCD-命令"><a href="#OpenOCD-命令" class="headerlink" title="OpenOCD 命令"></a>OpenOCD 命令</h3><p>在 OpenOCD 控制台中，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 复位目标</span><br><span class="line">reset</span><br><span class="line"></span><br><span class="line"># 暂停目标</span><br><span class="line">halt</span><br><span class="line"></span><br><span class="line"># 继续执行</span><br><span class="line">resume</span><br><span class="line"></span><br><span class="line"># 单步执行</span><br><span class="line">step</span><br><span class="line"></span><br><span class="line"># 查看目标状态</span><br><span class="line">targets</span><br><span class="line"></span><br><span class="line"># 读取内存</span><br><span class="line">mdw 0x20000000 10  # 读取 10 个字</span><br><span class="line">mdb 0x20000000 16  # 读取 16 个字节</span><br><span class="line"></span><br><span class="line"># 写入内存</span><br><span class="line">mww 0x20000000 0x12345678  # 写入一个字</span><br></pre></td></tr></table></figure><h2 id="SEGGER-J-Link"><a href="#SEGGER-J-Link" class="headerlink" title="SEGGER J-Link"></a>SEGGER J-Link</h2><p>SEGGER J-Link 是一款高性能调试器，提供了更快的下载速度和更多的功能。</p><h3 id="安装-J-Link-软件"><a href="#安装-J-Link-软件" class="headerlink" title="安装 J-Link 软件"></a>安装 J-Link 软件</h3><p>从 <a href="https://www.segger.com/downloads/jlink/">SEGGER 网站</a> 下载并安装 J-Link 软件包。</p><h3 id="使用-J-Link-GDB-Server"><a href="#使用-J-Link-GDB-Server" class="headerlink" title="使用 J-Link GDB Server"></a>使用 J-Link GDB Server</h3><p>启动 J-Link GDB 服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 GDB 服务器</span></span><br><span class="line">JLinkGDBServer -device nRF52840_xxAA -<span class="keyword">if</span> SWD -speed 4000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在另一个终端中启动 GDB</span></span><br><span class="line">arm-zephyr-eabi-gdb build/zephyr/zephyr.elf</span><br></pre></td></tr></table></figure><p>在 GDB 中连接到 J-Link：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) target remote localhost:2331</span><br><span class="line">(gdb) monitor reset</span><br><span class="line">(gdb) load</span><br><span class="line">(gdb) continue</span><br></pre></td></tr></table></figure><h3 id="使用-J-Link-Commander"><a href="#使用-J-Link-Commander" class="headerlink" title="使用 J-Link Commander"></a>使用 J-Link Commander</h3><p>J-Link Commander 提供了交互式命令行界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 J-Link Commander</span></span><br><span class="line">JLinkExe -device nRF52840_xxAA -<span class="keyword">if</span> SWD -speed 4000</span><br></pre></td></tr></table></figure><p>常用 J-Link 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 连接到目标</span><br><span class="line">connect</span><br><span class="line"></span><br><span class="line"># 复位目标</span><br><span class="line">r</span><br><span class="line"></span><br><span class="line"># 暂停目标</span><br><span class="line">h</span><br><span class="line"></span><br><span class="line"># 下载固件</span><br><span class="line">loadfile build/zephyr/zephyr.hex</span><br><span class="line"></span><br><span class="line"># 查看内存</span><br><span class="line">mem 0x20000000,16</span><br><span class="line"></span><br><span class="line"># 设置断点</span><br><span class="line">setbp 0x00012345</span><br><span class="line"></span><br><span class="line"># 继续执行</span><br><span class="line">g</span><br><span class="line"></span><br><span class="line"># 退出</span><br><span class="line">q</span><br></pre></td></tr></table></figure><h3 id="使用-West-与-J-Link"><a href="#使用-West-与-J-Link" class="headerlink" title="使用 West 与 J-Link"></a>使用 West 与 J-Link</h3><p>通过 West 使用 J-Link：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 J-Link 调试</span></span><br><span class="line">west debug --runner jlink</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 J-Link 烧录</span></span><br><span class="line">west flash --runner jlink</span><br></pre></td></tr></table></figure><h2 id="pyOCD"><a href="#pyOCD" class="headerlink" title="pyOCD"></a>pyOCD</h2><p>pyOCD 是一个用 Python 编写的开源调试工具，特别适用于 ARM Cortex-M 设备。</p><h3 id="安装-pyOCD"><a href="#安装-pyOCD" class="headerlink" title="安装 pyOCD"></a>安装 pyOCD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --user -U pyocd</span><br></pre></td></tr></table></figure><h3 id="使用-pyOCD"><a href="#使用-pyOCD" class="headerlink" title="使用 pyOCD"></a>使用 pyOCD</h3><p>启动 pyOCD GDB 服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 GDB 服务器</span></span><br><span class="line">pyocd gdbserver -t nrf52840</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在另一个终端中启动 GDB</span></span><br><span class="line">arm-zephyr-eabi-gdb build/zephyr/zephyr.elf</span><br></pre></td></tr></table></figure><p>在 GDB 中连接到 pyOCD：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) target remote localhost:3333</span><br><span class="line">(gdb) load</span><br><span class="line">(gdb) continue</span><br></pre></td></tr></table></figure><h3 id="使用-West-与-pyOCD"><a href="#使用-West-与-pyOCD" class="headerlink" title="使用 West 与 pyOCD"></a>使用 West 与 pyOCD</h3><p>通过 West 使用 pyOCD：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 pyOCD 调试</span></span><br><span class="line">west debug --runner pyocd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 pyOCD 烧录</span></span><br><span class="line">west flash --runner pyocd</span><br></pre></td></tr></table></figure><h2 id="跟踪和分析"><a href="#跟踪和分析" class="headerlink" title="跟踪和分析"></a>跟踪和分析</h2><h3 id="系统视图跟踪-SystemView"><a href="#系统视图跟踪-SystemView" class="headerlink" title="系统视图跟踪 (SystemView)"></a>系统视图跟踪 (SystemView)</h3><p>SEGGER SystemView 是一个实时记录和可视化工具，用于分析系统行为。</p><p>在 <code>prj.conf</code> 中启用 SystemView：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_SEGGER_SYSTEMVIEW=y</span><br><span class="line">CONFIG_USE_SEGGER_RTT=y</span><br><span class="line">CONFIG_TRACING=y</span><br></pre></td></tr></table></figure><p>使用 SystemView：</p><ol><li>运行 SystemView 主机应用程序</li><li>配置目标设备和连接</li><li>开始记录</li><li>分析系统行为</li></ol><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><p>Zephyr 提供了内存使用情况分析工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启用内存分析</span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=16384</span><br><span class="line">CONFIG_HEAP_LISTENER=y</span><br><span class="line">CONFIG_HEAP_LISTENER_LOG=y</span><br></pre></td></tr></table></figure><p>使用 <code>west build -t ram_report</code> 生成内存使用报告。</p><h3 id="覆盖率分析"><a href="#覆盖率分析" class="headerlink" title="覆盖率分析"></a>覆盖率分析</h3><p>启用代码覆盖率分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 启用覆盖率分析</span><br><span class="line">CONFIG_COVERAGE=y</span><br><span class="line">CONFIG_COVERAGE_GCOV=y</span><br></pre></td></tr></table></figure><p>生成覆盖率报告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">west build -b qemu_x86 samples/hello_world</span><br><span class="line">west build -t run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成覆盖率报告</span></span><br><span class="line">gcovr -r . --html --html-details -o coverage.html</span><br></pre></td></tr></table></figure><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>使用内核事件记录器进行性能分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启用事件记录器</span><br><span class="line">CONFIG_EVENTS=y</span><br><span class="line">CONFIG_KERNEL_EVENT_LOGGER=y</span><br><span class="line">CONFIG_KERNEL_EVENT_LOGGER_BUFFER_SIZE=16384</span><br></pre></td></tr></table></figure><p>使用 <code>west debug</code> 和 GDB 分析性能数据。</p><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><p>Zephyr 的日志系统是一个强大的调试工具：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">LOG_MODULE_REGISTER(my_module, LOG_LEVEL_INF);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">function</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Error message&quot;</span>);</span><br><span class="line">    LOG_WRN(<span class="string">&quot;Warning message&quot;</span>);</span><br><span class="line">    LOG_INF(<span class="string">&quot;Info message&quot;</span>);</span><br><span class="line">    LOG_DBG(<span class="string">&quot;Debug message&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>prj.conf</code> 中配置日志级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3  # INFO</span><br><span class="line">CONFIG_LOG_BACKEND_UART=y</span><br><span class="line">CONFIG_LOG_BACKEND_RTT=y</span><br></pre></td></tr></table></figure><h2 id="调试特定问题"><a href="#调试特定问题" class="headerlink" title="调试特定问题"></a>调试特定问题</h2><h3 id="1-硬件故障"><a href="#1-硬件故障" class="headerlink" title="1. 硬件故障"></a>1. 硬件故障</h3><p>当遇到硬件故障（如硬错误、内存访问错误）时：</p><ol><li><p>启用硬故障处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_FAULT_DUMP=2</span><br></pre></td></tr></table></figure></li><li><p>分析故障信息：</p><ul><li>程序计数器 (PC) 位置</li><li>堆栈指针 (SP) 值</li><li>寄存器内容</li><li>调用栈</li></ul></li><li><p>使用 GDB 查找故障位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info registers</span><br><span class="line">(gdb) bt</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-栈溢出"><a href="#2-栈溢出" class="headerlink" title="2. 栈溢出"></a>2. 栈溢出</h3><p>检测栈溢出：</p><ol><li><p>启用栈保护：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_STACK_SENTINEL=y</span><br><span class="line">CONFIG_STACK_CANARIES=y</span><br></pre></td></tr></table></figure></li><li><p>分析栈使用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west build -t ram_report</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-死锁和竞争条件"><a href="#3-死锁和竞争条件" class="headerlink" title="3. 死锁和竞争条件"></a>3. 死锁和竞争条件</h3><p>调试多线程问题：</p><ol><li><p>启用线程监控：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_THREAD_MONITOR=y</span><br><span class="line">CONFIG_THREAD_NAME=y</span><br></pre></td></tr></table></figure></li><li><p>使用 GDB 查看线程状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info threads</span><br><span class="line">(gdb) thread apply all bt</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-内存泄漏"><a href="#4-内存泄漏" class="headerlink" title="4. 内存泄漏"></a>4. 内存泄漏</h3><p>检测内存泄漏：</p><ol><li><p>启用内存监控：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_HEAP_LISTENER=y</span><br><span class="line">CONFIG_HEAP_LISTENER_LOG=y</span><br></pre></td></tr></table></figure></li><li><p>使用内存分析工具跟踪分配和释放。</p></li></ol><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><ol><li><p><strong>使用条件断点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb) break file.c:123 if variable == 5</span><br></pre></td></tr></table></figure></li><li><p><strong>使用数据断点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb) watch *0x20000000</span><br></pre></td></tr></table></figure></li><li><p><strong>保存调试会话</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) save breakpoints breakpoints.txt</span><br><span class="line">(gdb) source breakpoints.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>自动化调试</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建 GDB 脚本</span><br><span class="line">echo &quot;break main\nrun\nbt\nquit&quot; &gt; debug.gdb</span><br><span class="line"></span><br><span class="line"># 运行脚本</span><br><span class="line">arm-zephyr-eabi-gdb -x debug.gdb build/zephyr/zephyr.elf</span><br></pre></td></tr></table></figure></li><li><p><strong>远程调试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在目标设备上启动 GDB 服务器</span></span><br><span class="line">west debug --attach</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在主机上连接</span></span><br><span class="line">arm-zephyr-eabi-gdb build/zephyr/zephyr.elf -ex <span class="string">&quot;target remote 192.168.1.100:3333&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-无法连接到目标"><a href="#1-无法连接到目标" class="headerlink" title="1. 无法连接到目标"></a>1. 无法连接到目标</h3><p><strong>问题</strong>：GDB 无法连接到目标设备</p><p><strong>解决方案</strong>：</p><ul><li>检查硬件连接</li><li>验证调试适配器驱动</li><li>确认目标设备供电</li><li>尝试重置设备和调试器</li></ul><h3 id="2-符号不可用"><a href="#2-符号不可用" class="headerlink" title="2. 符号不可用"></a>2. 符号不可用</h3><p><strong>问题</strong>：GDB 无法显示变量或函数名</p><p><strong>解决方案</strong>：</p><ul><li>确认以 Debug 模式构建</li><li>检查是否加载了正确的 ELF 文件</li><li>验证编译器优化级别</li></ul><h3 id="3-断点不触发"><a href="#3-断点不触发" class="headerlink" title="3. 断点不触发"></a>3. 断点不触发</h3><p><strong>问题</strong>：设置的断点不起作用</p><p><strong>解决方案</strong>：</p><ul><li>检查断点位置是否正确</li><li>验证代码是否被优化掉</li><li>尝试在不同位置设置断点</li></ul><h3 id="4-调试器崩溃"><a href="#4-调试器崩溃" class="headerlink" title="4. 调试器崩溃"></a>4. 调试器崩溃</h3><p><strong>问题</strong>：调试会话意外终止</p><p><strong>解决方案</strong>：</p><ul><li>检查 OpenOCD 或 J-Link 版本</li><li>验证目标配置是否正确</li><li>尝试降低调试速度</li></ul><h3 id="5-无法查看变量"><a href="#5-无法查看变量" class="headerlink" title="5. 无法查看变量"></a>5. 无法查看变量</h3><p><strong>问题</strong>：无法检查某些变量的值</p><p><strong>解决方案</strong>：</p><ul><li>检查变量作用域</li><li>验证变量是否被优化掉</li><li>使用 volatile 关键字防止优化</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了丰富的调试工具和选项，从基本的 GDB 调试到高级的跟踪和分析功能。掌握这些工具对于有效开发和调试 Zephyr 应用程序至关重要。通过合理配置和使用这些工具，可以更快地定位和解决问题，提高开发效率。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>installation</title>
      <link href="/2025/03/21/nodic/zephyr/toolchain/installation/"/>
      <url>/2025/03/21/nodic/zephyr/toolchain/installation/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-工具链安装"><a href="#Zephyr-工具链安装" class="headerlink" title="Zephyr 工具链安装"></a>Zephyr 工具链安装</h1><p>本文档详细介绍了如何在不同操作系统上安装和配置 Zephyr RTOS 开发所需的工具链，包括 SDK 安装步骤、交叉编译器配置以及常见问题解决方案。</p><h2 id="支持的操作系统"><a href="#支持的操作系统" class="headerlink" title="支持的操作系统"></a>支持的操作系统</h2><p>Zephyr 开发工具链可以在以下操作系统上安装：</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><strong>Ubuntu</strong> 20.04 LTS 或更高版本（推荐）</li><li><strong>Fedora</strong> 33 或更高版本</li><li><strong>Clear Linux OS</strong></li><li>其他 Linux 发行版（可能需要额外配置）</li></ul><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><ul><li>macOS 10.15 (Catalina) 或更高版本</li><li>支持 Intel 和 Apple Silicon 处理器</li></ul><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li>Windows 10 或更高版本</li><li>支持原生安装或 WSL (Windows Subsystem for Linux)</li></ul><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>在安装 Zephyr SDK 之前，需要先安装一些基本依赖：</p><h3 id="Linux-Ubuntu-依赖"><a href="#Linux-Ubuntu-依赖" class="headerlink" title="Linux (Ubuntu) 依赖"></a>Linux (Ubuntu) 依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install --no-install-recommends git cmake ninja-build gperf \</span><br><span class="line">  ccache dfu-util device-tree-compiler wget \</span><br><span class="line">  python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \</span><br><span class="line">  make gcc gcc-multilib g++-multilib libsdl2-dev</span><br></pre></td></tr></table></figure><h3 id="macOS-依赖"><a href="#macOS-依赖" class="headerlink" title="macOS 依赖"></a>macOS 依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Homebrew (如果尚未安装)</span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">brew install cmake ninja gperf python3 ccache qemu dtc</span><br></pre></td></tr></table></figure><h3 id="Windows-依赖"><a href="#Windows-依赖" class="headerlink" title="Windows 依赖"></a>Windows 依赖</h3><ol><li>安装 <a href="https://git-scm.com/download/win">Git for Windows</a></li><li>安装 <a href="https://www.python.org/downloads/">Python 3.8</a> 或更高版本</li><li>安装 <a href="https://cmake.org/download/">CMake</a></li><li>安装 <a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/">Visual Studio Build Tools</a></li></ol><h2 id="安装-West-工具"><a href="#安装-West-工具" class="headerlink" title="安装 West 工具"></a>安装 West 工具</h2><p>West 是 Zephyr 的元工具，用于管理多仓库项目。在所有平台上，可以使用 pip 安装 West：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux/macOS</span></span><br><span class="line">pip3 install --user -U west</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">pip install west</span><br></pre></td></tr></table></figure><p>在 Linux&#x2F;macOS 上，确保将 <code>~/.local/bin</code> 添加到 PATH 环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=~/.local/bin:&quot;$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="获取-Zephyr-源码"><a href="#获取-Zephyr-源码" class="headerlink" title="获取 Zephyr 源码"></a>获取 Zephyr 源码</h2><p>使用 West 初始化并获取 Zephyr 源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建工作目录并初始化</span></span><br><span class="line">west init -m https://github.com/zephyrproject-rtos/zephyr --mr v2.9.1 ~/zephyrproject</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入工作目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/zephyrproject</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有项目代码</span></span><br><span class="line">west update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 依赖</span></span><br><span class="line">pip3 install -r zephyr/scripts/requirements.txt</span><br></pre></td></tr></table></figure><h2 id="SDK-安装步骤"><a href="#SDK-安装步骤" class="headerlink" title="SDK 安装步骤"></a>SDK 安装步骤</h2><h3 id="Linux-SDK-安装"><a href="#Linux-SDK-安装" class="headerlink" title="Linux SDK 安装"></a>Linux SDK 安装</h3><ol><li><strong>下载 SDK</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>解压 SDK</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>运行安装脚本</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zephyr-sdk-0.16.1</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>安装 udev 规则（可选，用于访问开发板）</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -a ~/zephyr-sdk-0.16.1/sysroots/x86_64-pokysdk-linux/usr/share/openocd/contrib/60-openocd.rules /etc/udev/rules.d</span><br><span class="line"><span class="built_in">sudo</span> udevadm control --reload</span><br></pre></td></tr></table></figure><h3 id="macOS-SDK-安装"><a href="#macOS-SDK-安装" class="headerlink" title="macOS SDK 安装"></a>macOS SDK 安装</h3><ol><li><strong>安装 ARM 工具链</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gcc-arm-embedded</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>或者下载 Zephyr SDK（可选）</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/zephyr-sdk-0.16.1_macos-x86_64.tar.gz</span><br><span class="line">tar xvf zephyr-sdk-0.16.1_macos-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> zephyr-sdk-0.16.1</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><h3 id="Windows-SDK-安装"><a href="#Windows-SDK-安装" class="headerlink" title="Windows SDK 安装"></a>Windows SDK 安装</h3><ol><li><strong>使用 WSL（推荐）</strong></li></ol><p>在 WSL 中按照 Linux 安装步骤进行安装。</p><ol start="2"><li><strong>原生 Windows 安装</strong></li></ol><ul><li>下载 <a href="https://github.com/zephyrproject-rtos/sdk-ng/releases">Zephyr SDK for Windows</a></li><li>解压到合适的位置，如 <code>C:\zephyr-sdk-0.16.1</code></li><li>运行 <code>setup.cmd</code> 脚本</li><li>设置环境变量 <code>ZEPHYR_SDK_INSTALL_DIR</code> 指向 SDK 安装目录</li></ul><h2 id="交叉编译器配置"><a href="#交叉编译器配置" class="headerlink" title="交叉编译器配置"></a>交叉编译器配置</h2><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>在 Linux&#x2F;macOS 上，将以下内容添加到 <code>~/.bashrc</code> 或 <code>~/.zshrc</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZEPHYR_BASE=~/zephyrproject/zephyr</span><br><span class="line"><span class="built_in">export</span> ZEPHYR_SDK_INSTALL_DIR=~/zephyr-sdk-0.16.1</span><br><span class="line"><span class="built_in">export</span> ZEPHYR_TOOLCHAIN_VARIANT=zephyr</span><br></pre></td></tr></table></figure><p>在 Windows 上，设置系统环境变量：</p><ol><li>打开”系统属性” &gt; “环境变量”</li><li>添加新的系统变量：<ul><li><code>ZEPHYR_BASE</code>: <code>C:\zephyrproject\zephyr</code></li><li><code>ZEPHYR_SDK_INSTALL_DIR</code>: <code>C:\zephyr-sdk-0.16.1</code></li><li><code>ZEPHYR_TOOLCHAIN_VARIANT</code>: <code>zephyr</code></li></ul></li></ol><h3 id="使用其他工具链"><a href="#使用其他工具链" class="headerlink" title="使用其他工具链"></a>使用其他工具链</h3><p>除了 Zephyr SDK，还可以使用其他工具链：</p><ol><li><strong>GNU Arm Embedded</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb</span><br><span class="line"><span class="built_in">export</span> GNUARMEMB_TOOLCHAIN_PATH=/path/to/arm-gnu-toolchain</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Espressif ESP32 工具链</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZEPHYR_TOOLCHAIN_VARIANT=espressif</span><br><span class="line"><span class="built_in">export</span> ESPRESSIF_TOOLCHAIN_PATH=/path/to/espressif-toolchain</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>LLVM&#x2F;Clang</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZEPHYR_TOOLCHAIN_VARIANT=llvm</span><br></pre></td></tr></table></figure><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>验证工具链安装是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 West 版本</span></span><br><span class="line">west --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建示例应用</span></span><br><span class="line"><span class="built_in">cd</span> ~/zephyrproject</span><br><span class="line">west build -b qemu_x86 zephyr/samples/hello_world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行示例</span></span><br><span class="line">west build -t run</span><br></pre></td></tr></table></figure><h2 id="安装其他工具"><a href="#安装其他工具" class="headerlink" title="安装其他工具"></a>安装其他工具</h2><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><ol><li><strong>OpenOCD</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> apt install openocd</span><br><span class="line"></span><br><span class="line"><span class="comment"># macOS</span></span><br><span class="line">brew install open-ocd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="comment"># 下载并安装 OpenOCD 二进制包</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>J-Link</strong></li></ol><p>从 <a href="https://www.segger.com/downloads/jlink/">SEGGER 网站</a> 下载并安装 J-Link 软件包。</p><ol start="3"><li><strong>pyOCD</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user -U pyocd</span><br></pre></td></tr></table></figure><h3 id="烧录工具"><a href="#烧录工具" class="headerlink" title="烧录工具"></a>烧录工具</h3><ol><li><strong>nrfjprog（用于 Nordic 设备）</strong></li></ol><p>从 <a href="https://www.nordicsemi.com/Software-and-tools/Development-Tools/nRF-Command-Line-Tools">Nordic 网站</a> 下载并安装。</p><ol start="2"><li><strong>STM32 工具</strong></li></ol><p>从 <a href="https://www.st.com/en/development-tools/stm32cubeprog.html">ST 网站</a> 下载并安装 STM32CubeProgrammer。</p><h2 id="工具链更新"><a href="#工具链更新" class="headerlink" title="工具链更新"></a>工具链更新</h2><p>定期更新工具链以获取最新功能和修复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新 West</span></span><br><span class="line">pip3 install --user -U west</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 Zephyr 源码</span></span><br><span class="line"><span class="built_in">cd</span> ~/zephyrproject</span><br><span class="line">west update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 Python 依赖</span></span><br><span class="line">pip3 install --user -U -r zephyr/scripts/requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 SDK（需要重新下载并安装新版本）</span></span><br></pre></td></tr></table></figure><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="1-找不到工具链"><a href="#1-找不到工具链" class="headerlink" title="1. 找不到工具链"></a>1. 找不到工具链</h3><p><strong>问题</strong>：构建时报错 “Unable to find toolchain”</p><p><strong>解决方案</strong>：</p><ul><li>确认 <code>ZEPHYR_SDK_INSTALL_DIR</code> 环境变量已正确设置</li><li>确认 SDK 已正确安装</li><li>检查 <code>ZEPHYR_TOOLCHAIN_VARIANT</code> 是否正确设置</li></ul><h3 id="2-权限问题"><a href="#2-权限问题" class="headerlink" title="2. 权限问题"></a>2. 权限问题</h3><p><strong>问题</strong>：无法访问开发板或调试器</p><p><strong>解决方案</strong>：</p><ul><li>确认已安装 udev 规则</li><li>将用户添加到相关组：<code>sudo usermod -a -G dialout,plugdev $USER</code></li><li>重新登录或重启系统使更改生效</li></ul><h3 id="3-构建错误"><a href="#3-构建错误" class="headerlink" title="3. 构建错误"></a>3. 构建错误</h3><p><strong>问题</strong>：构建时出现编译错误</p><p><strong>解决方案</strong>：</p><ul><li>确认 CMake 和 Ninja 已正确安装</li><li>检查是否使用了正确的板子配置</li><li>验证 Zephyr 源码版本与 SDK 版本匹配</li></ul><h3 id="4-West-命令失败"><a href="#4-West-命令失败" class="headerlink" title="4. West 命令失败"></a>4. West 命令失败</h3><p><strong>问题</strong>：West 命令执行失败</p><p><strong>解决方案</strong>：</p><ul><li>确认 West 已正确安装：<code>west --version</code></li><li>检查 Python 版本是否满足要求（3.6+）</li><li>在工作区根目录执行 West 命令</li></ul><h3 id="5-找不到-Python-模块"><a href="#5-找不到-Python-模块" class="headerlink" title="5. 找不到 Python 模块"></a>5. 找不到 Python 模块</h3><p><strong>问题</strong>：导入 Python 模块时报错</p><p><strong>解决方案</strong>：</p><ul><li>重新安装 Python 依赖：<code>pip3 install -r zephyr/scripts/requirements.txt</code></li><li>考虑使用虚拟环境：<code>python3 -m venv .venv &amp;&amp; source .venv/bin/activate</code></li></ul><h3 id="6-Windows-特有问题"><a href="#6-Windows-特有问题" class="headerlink" title="6. Windows 特有问题"></a>6. Windows 特有问题</h3><p><strong>问题</strong>：在 Windows 上构建失败</p><p><strong>解决方案</strong>：</p><ul><li>使用短路径名称（避免空格和特殊字符）</li><li>考虑使用 WSL 替代原生 Windows 构建</li><li>确认 Visual Studio Build Tools 已正确安装</li></ul><h2 id="多版本管理"><a href="#多版本管理" class="headerlink" title="多版本管理"></a>多版本管理</h2><p>对于需要同时使用多个 Zephyr 版本的情况：</p><ol><li><strong>使用不同工作目录</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建特定版本的工作目录</span></span><br><span class="line">west init -m https://github.com/zephyrproject-rtos/zephyr --mr v2.7.0 ~/zephyrproject-2.7</span><br><span class="line">west init -m https://github.com/zephyrproject-rtos/zephyr --mr v2.9.1 ~/zephyrproject-2.9</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用不同 SDK 版本</strong></li></ol><p>为每个 Zephyr 版本安装匹配的 SDK 版本，并在使用时设置相应的环境变量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>正确安装和配置 Zephyr 工具链是开发 Zephyr 应用程序的第一步。通过本文档的指导，您应该能够在不同操作系统上成功安装 Zephyr SDK 和相关工具，并准备好开始 Zephyr 开发。记住定期更新工具链以获取最新功能和修复，并参考常见问题解决部分来解决安装过程中可能遇到的问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>basic_device</title>
      <link href="/2025/03/21/nodic/zephyr/usb/basic_device/"/>
      <url>/2025/03/21/nodic/zephyr/usb/basic_device/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-USB-基础设备类指南"><a href="#Zephyr-USB-基础设备类指南" class="headerlink" title="Zephyr USB 基础设备类指南"></a>Zephyr USB 基础设备类指南</h1><h2 id="1-USB-基础配置"><a href="#1-USB-基础配置" class="headerlink" title="1. USB 基础配置"></a>1. USB 基础配置</h2><h3 id="1-1-通用配置-prj-conf"><a href="#1-1-通用配置-prj-conf" class="headerlink" title="1.1 通用配置 (prj.conf)"></a>1.1 通用配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># USB 设备栈支持</span><br><span class="line">CONFIG_USB_DEVICE_STACK=y</span><br><span class="line">CONFIG_USB_DEVICE_MANUFACTURER=&quot;Zephyr&quot;</span><br><span class="line">CONFIG_USB_DEVICE_PRODUCT=&quot;USB Device&quot;</span><br><span class="line">CONFIG_USB_DEVICE_VID=0x2FE3</span><br><span class="line">CONFIG_USB_DEVICE_PID=0x0100</span><br><span class="line">CONFIG_USB_DEVICE_SN=&quot;0123456789AB&quot;</span><br><span class="line"></span><br><span class="line"># USB 设备日志</span><br><span class="line">CONFIG_USB_DRIVER_LOG_LEVEL_ERR=y</span><br><span class="line">CONFIG_USB_DEVICE_LOG_LEVEL_ERR=y</span><br><span class="line"></span><br><span class="line"># USB 缓冲区配置</span><br><span class="line">CONFIG_USB_REQUEST_BUFFER_SIZE=128</span><br><span class="line">CONFIG_USB_MAX_NUM_ENDPOINTS=8</span><br></pre></td></tr></table></figure><h3 id="1-2-设备描述符配置"><a href="#1-2-设备描述符配置" class="headerlink" title="1.2 设备描述符配置"></a>1.2 设备描述符配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_common.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_device_descriptor</span> <span class="title">dev_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_device_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_DEVICE,</span><br><span class="line">    .bcdUSB = sys_cpu_to_le16(USB_2_0),</span><br><span class="line">    .bDeviceClass = <span class="number">0</span>,</span><br><span class="line">    .bDeviceSubClass = <span class="number">0</span>,</span><br><span class="line">    .bDeviceProtocol = <span class="number">0</span>,</span><br><span class="line">    .bMaxPacketSize0 = USB_MAX_PACKET_SIZE,</span><br><span class="line">    .idVendor = sys_cpu_to_le16(CONFIG_USB_DEVICE_VID),</span><br><span class="line">    .idProduct = sys_cpu_to_le16(CONFIG_USB_DEVICE_PID),</span><br><span class="line">    .bcdDevice = sys_cpu_to_le16(<span class="number">0x0100</span>),</span><br><span class="line">    .iManufacturer = <span class="number">1</span>,</span><br><span class="line">    .iProduct = <span class="number">2</span>,</span><br><span class="line">    .iSerialNumber = <span class="number">3</span>,</span><br><span class="line">    .bNumConfigurations = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_cfg_descriptor</span> <span class="title">cfg_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_cfg_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_CONFIGURATION,</span><br><span class="line">    .wTotalLength = <span class="number">0</span>, <span class="comment">/* 将在运行时计算 */</span></span><br><span class="line">    .bNumInterfaces = <span class="number">1</span>,</span><br><span class="line">    .bConfigurationValue = <span class="number">1</span>,</span><br><span class="line">    .iConfiguration = <span class="number">0</span>,</span><br><span class="line">    .bmAttributes = USB_CONFIG_ATT_ONE | USB_CONFIG_ATT_SELF_POWERED,</span><br><span class="line">    .bMaxPower = <span class="number">50</span>, <span class="comment">/* 100 mA */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-USB-CDC-ACM-设备类"><a href="#2-USB-CDC-ACM-设备类" class="headerlink" title="2. USB CDC-ACM 设备类"></a>2. USB CDC-ACM 设备类</h2><h3 id="2-1-CDC-ACM-配置"><a href="#2-1-CDC-ACM-配置" class="headerlink" title="2.1 CDC-ACM 配置"></a>2.1 CDC-ACM 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># CDC-ACM 配置 (prj.conf)</span><br><span class="line">CONFIG_USB_CDC_ACM=y</span><br><span class="line">CONFIG_UART_LINE_CTRL=y</span><br><span class="line">CONFIG_UART_CONSOLE_ON_DEV_NAME=&quot;CDC_ACM_0&quot;</span><br></pre></td></tr></table></figure><h3 id="2-2-CDC-ACM-实现"><a href="#2-2-CDC-ACM-实现" class="headerlink" title="2.2 CDC-ACM 实现"></a>2.2 CDC-ACM 实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_cdc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">cdc_dev</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">volatile</span> <span class="type">bool</span> configured;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work_delayable</span> <span class="title">tx_work</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> tx_buffer[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USB 配置回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">cdc_acm_cfg_cb</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    configured = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USB 使能回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">cdc_acm_enable_cb</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    cdc_dev = dev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CDC ACM 回调结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdc_acm_ops</span> <span class="title">ops</span> =</span> &#123;</span><br><span class="line">    .configured = cdc_acm_cfg_cb,</span><br><span class="line">    .enable = cdc_acm_enable_cb,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cdc_acm_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注册回调 */</span></span><br><span class="line">    ret = usb_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待配置完成 */</span></span><br><span class="line">    <span class="keyword">while</span> (!configured) &#123;</span><br><span class="line">        k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cdc_acm_send_data</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!configured) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备发送数据 */</span></span><br><span class="line">    <span class="built_in">strcpy</span>(tx_buffer, <span class="string">&quot;Hello from CDC ACM\r\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    uart_fifo_fill(cdc_dev, tx_buffer, <span class="built_in">strlen</span>(tx_buffer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-USB-HID-设备类"><a href="#3-USB-HID-设备类" class="headerlink" title="3. USB HID 设备类"></a>3. USB HID 设备类</h2><h3 id="3-1-HID-配置"><a href="#3-1-HID-配置" class="headerlink" title="3.1 HID 配置"></a>3.1 HID 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># HID 配置 (prj.conf)</span><br><span class="line">CONFIG_USB_HID=y</span><br><span class="line">CONFIG_USB_HID_BOOT_PROTOCOL=y</span><br><span class="line">CONFIG_USB_HID_POLL_INTERVAL_MS=8</span><br></pre></td></tr></table></figure><h3 id="3-2-HID-键盘实现"><a href="#3-2-HID-键盘实现" class="headerlink" title="3.2 HID 键盘实现"></a>3.2 HID 键盘实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_hid.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* HID 报告描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> hid_report_desc[] = &#123;</span><br><span class="line">    HID_USAGE_PAGE(HID_USAGE_GEN_DESKTOP),</span><br><span class="line">    HID_USAGE(HID_USAGE_GEN_KEYBOARD),</span><br><span class="line">    HID_COLLECTION(HID_COLLECTION_APPLICATION),</span><br><span class="line">        HID_USAGE_PAGE(HID_USAGE_KEY),</span><br><span class="line">        HID_USAGE_MIN8(<span class="number">0</span>),</span><br><span class="line">        HID_USAGE_MAX8(<span class="number">0xFF</span>),</span><br><span class="line">        HID_LOGICAL_MIN8(<span class="number">0</span>),</span><br><span class="line">        HID_LOGICAL_MAX8(<span class="number">1</span>),</span><br><span class="line">        HID_REPORT_SIZE(<span class="number">1</span>),</span><br><span class="line">        HID_REPORT_COUNT(<span class="number">8</span>),</span><br><span class="line">        HID_INPUT(<span class="number">0x02</span>),</span><br><span class="line">    HID_END_COLLECTION,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">hid_ops</span> <span class="title">ops</span> =</span> &#123;</span><br><span class="line">    .get_report = <span class="literal">NULL</span>,</span><br><span class="line">    .get_idle = <span class="literal">NULL</span>,</span><br><span class="line">    .get_protocol = <span class="literal">NULL</span>,</span><br><span class="line">    .set_report = <span class="literal">NULL</span>,</span><br><span class="line">    .set_idle = <span class="literal">NULL</span>,</span><br><span class="line">    .set_protocol = <span class="literal">NULL</span>,</span><br><span class="line">    .int_in_ready = <span class="literal">NULL</span>,</span><br><span class="line">    .protocol_change = <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hid_keyboard_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化 HID */</span></span><br><span class="line">    usb_hid_register_device(hid_report_desc, <span class="keyword">sizeof</span>(hid_report_desc), &amp;ops);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能 USB */</span></span><br><span class="line">    usb_enable(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hid_keyboard_send_key</span><span class="params">(<span class="type">uint8_t</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> report[<span class="number">8</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 设置按键 */</span></span><br><span class="line">    report[<span class="number">0</span>] = key;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 发送报告 */</span></span><br><span class="line">    hid_int_ep_write(report, <span class="keyword">sizeof</span>(report), <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-USB-MSC-设备类"><a href="#4-USB-MSC-设备类" class="headerlink" title="4. USB MSC 设备类"></a>4. USB MSC 设备类</h2><h3 id="4-1-MSC-配置"><a href="#4-1-MSC-配置" class="headerlink" title="4.1 MSC 配置"></a>4.1 MSC 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># MSC 配置 (prj.conf)</span><br><span class="line">CONFIG_USB_MASS_STORAGE=y</span><br><span class="line">CONFIG_DISK_ACCESS=y</span><br><span class="line">CONFIG_FILE_SYSTEM=y</span><br></pre></td></tr></table></figure><h3 id="4-2-MSC-实现"><a href="#4-2-MSC-实现" class="headerlink" title="4.2 MSC 实现"></a>4.2 MSC 实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_msc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/disk_access.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储介质配置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISK_SECTOR_SIZE 512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISK_SECTOR_COUNT 2048</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISK_MEMORY_SIZE (DISK_SECTOR_SIZE * DISK_SECTOR_COUNT)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> disk_memory[DISK_MEMORY_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 磁盘操作回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_status</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> DISK_STATUS_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_read</span><span class="params">(<span class="type">uint8_t</span> *data, <span class="type">uint32_t</span> sector, <span class="type">uint32_t</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(data, &amp;disk_memory[sector * DISK_SECTOR_SIZE],</span><br><span class="line">           count * DISK_SECTOR_SIZE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_write</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">uint32_t</span> sector, <span class="type">uint32_t</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;disk_memory[sector * DISK_SECTOR_SIZE], data,</span><br><span class="line">           count * DISK_SECTOR_SIZE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_ioctl</span><span class="params">(<span class="type">uint8_t</span> cmd, <span class="type">void</span> *buff)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> DISK_IOCTL_GET_SECTOR_COUNT:</span><br><span class="line">        *(<span class="type">uint32_t</span> *)buff = DISK_SECTOR_COUNT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DISK_IOCTL_GET_SECTOR_SIZE:</span><br><span class="line">        *(<span class="type">uint32_t</span> *)buff = DISK_SECTOR_SIZE;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 磁盘操作结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">disk_operations</span> <span class="title">disk_ops</span> =</span> &#123;</span><br><span class="line">    .init = disk_init,</span><br><span class="line">    .status = disk_status,</span><br><span class="line">    .read = disk_read,</span><br><span class="line">    .write = disk_write,</span><br><span class="line">    .ioctl = disk_ioctl,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">msc_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 注册磁盘设备 */</span></span><br><span class="line">    disk_access_register(<span class="string">&quot;RAM&quot;</span>, &amp;disk_ops);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使能 USB */</span></span><br><span class="line">    usb_enable(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-基础设备测试"><a href="#5-基础设备测试" class="headerlink" title="5. 基础设备测试"></a>5. 基础设备测试</h2><h3 id="5-1-设备枚举测试"><a href="#5-1-设备枚举测试" class="headerlink" title="5.1 设备枚举测试"></a>5.1 设备枚举测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">test_usb_device_status</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">usb_dc_status_code</span> <span class="title">status</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取设备状态 */</span></span><br><span class="line">    ret = usb_dc_status(&amp;status);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> USB_DC_RESET:</span><br><span class="line">            printk(<span class="string">&quot;USB Reset\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> USB_DC_CONNECTED:</span><br><span class="line">            printk(<span class="string">&quot;USB Connected\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> USB_DC_CONFIGURED:</span><br><span class="line">            printk(<span class="string">&quot;USB Configured\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> USB_DC_DISCONNECTED:</span><br><span class="line">            printk(<span class="string">&quot;USB Disconnected\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> USB_DC_SUSPEND:</span><br><span class="line">            printk(<span class="string">&quot;USB Suspended\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> USB_DC_RESUME:</span><br><span class="line">            printk(<span class="string">&quot;USB Resumed\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            printk(<span class="string">&quot;USB Unknown state\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-端点测试"><a href="#5-2-端点测试" class="headerlink" title="5.2 端点测试"></a>5.2 端点测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_EP_OUT 0x01</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_EP_IN  0x81</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PACKET  64</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">test_usb_endpoints</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> data[MAX_PACKET];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置端点 */</span></span><br><span class="line">    ret = usb_dc_ep_configure(TEST_EP_OUT,</span><br><span class="line">                             USB_DC_EP_BULK,</span><br><span class="line">                             MAX_PACKET);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = usb_dc_ep_configure(TEST_EP_IN,</span><br><span class="line">                             USB_DC_EP_BULK,</span><br><span class="line">                             MAX_PACKET);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能端点 */</span></span><br><span class="line">    usb_dc_ep_enable(TEST_EP_OUT);</span><br><span class="line">    usb_dc_ep_enable(TEST_EP_IN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 测试数据传输 */</span></span><br><span class="line">    <span class="built_in">memset</span>(data, <span class="number">0xAA</span>, <span class="keyword">sizeof</span>(data));</span><br><span class="line">    ret = usb_dc_ep_write(TEST_EP_IN, data,</span><br><span class="line">                         <span class="keyword">sizeof</span>(data), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to write to EP\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-最佳实践"><a href="#6-最佳实践" class="headerlink" title="6. 最佳实践"></a>6. 最佳实践</h2><ol><li><p>端点配置：</p><ul><li>合理分配端点资源</li><li>使用适当的端点类型（控制、批量、中断、同步）</li><li>设置合适的最大包大小</li></ul></li><li><p>描述符设计：</p><ul><li>确保描述符结构正确</li><li>提供清晰的设备标识信息</li><li>正确设置配置属性</li></ul></li><li><p>电源管理：</p><ul><li>实现正确的挂起&#x2F;恢复处理</li><li>遵守 USB 总线供电规范</li><li>合理使用自供电&#x2F;总线供电模式</li></ul></li><li><p>错误处理：</p><ul><li>实现完整的错误检查</li><li>提供适当的错误恢复机制</li><li>记录关键错误信息</li></ul></li><li><p>性能优化：</p><ul><li>使用适当的缓冲区大小</li><li>实现高效的数据传输机制</li><li>避免不必要的数据拷贝</li></ul></li><li><p>调试支持：</p><ul><li>添加适当的调试日志</li><li>实现状态监控机制</li><li>提供测试接口</li></ul></li><li><p>兼容性：</p><ul><li>遵循 USB 规范</li><li>测试不同主机系统</li><li>考虑向后兼容性</li></ul></li><li><p>安全性：</p><ul><li>实现适当的访问控制</li><li>保护敏感数据</li><li>防止缓冲区溢出</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>composite_device</title>
      <link href="/2025/03/21/nodic/zephyr/usb/composite_device/"/>
      <url>/2025/03/21/nodic/zephyr/usb/composite_device/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-USB-复合设备指南"><a href="#Zephyr-USB-复合设备指南" class="headerlink" title="Zephyr USB 复合设备指南"></a>Zephyr USB 复合设备指南</h1><h2 id="1-复合设备基础"><a href="#1-复合设备基础" class="headerlink" title="1. 复合设备基础"></a>1. 复合设备基础</h2><p>复合设备是指在单个物理 USB 设备中包含多个功能类的设备。例如，一个设备可以同时实现 CDC-ACM（串口）、HID（键盘&#x2F;鼠标）和 MSC（存储）功能。</p><h3 id="1-1-复合设备配置-prj-conf"><a href="#1-1-复合设备配置-prj-conf" class="headerlink" title="1.1 复合设备配置 (prj.conf)"></a>1.1 复合设备配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># USB 设备栈基础配置</span><br><span class="line">CONFIG_USB_DEVICE_STACK=y</span><br><span class="line">CONFIG_USB_COMPOSITE_DEVICE=y</span><br><span class="line"></span><br><span class="line"># 复合设备类配置</span><br><span class="line">CONFIG_USB_CDC_ACM=y</span><br><span class="line">CONFIG_USB_HID=y</span><br><span class="line">CONFIG_USB_MASS_STORAGE=y</span><br><span class="line"></span><br><span class="line"># 复合设备描述符配置</span><br><span class="line">CONFIG_USB_DEVICE_MANUFACTURER=&quot;Zephyr&quot;</span><br><span class="line">CONFIG_USB_DEVICE_PRODUCT=&quot;Composite Device&quot;</span><br><span class="line">CONFIG_USB_DEVICE_VID=0x2FE3</span><br><span class="line">CONFIG_USB_DEVICE_PID=0x0200</span><br><span class="line">CONFIG_USB_DEVICE_SN=&quot;0123456789ABCDEF&quot;</span><br><span class="line"></span><br><span class="line"># 接口配置</span><br><span class="line">CONFIG_USB_MAX_NUM_INTERFACES=8</span><br><span class="line">CONFIG_USB_COMPOSITE_BUFFER_SIZE=512</span><br></pre></td></tr></table></figure><h3 id="1-2-复合设备描述符结构"><a href="#1-2-复合设备描述符结构" class="headerlink" title="1.2 复合设备描述符结构"></a>1.2 复合设备描述符结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_common.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_cdc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_hid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_msc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置描述符结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_composite_desc</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_cfg_descriptor</span> <span class="title">cfg_desc</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* CDC-ACM 接口描述符 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_if_descriptor</span> <span class="title">if0</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_ep_descriptor</span> <span class="title">if0_in_ep</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_ep_descriptor</span> <span class="title">if0_out_ep</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* HID 接口描述符 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_if_descriptor</span> <span class="title">if1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_ep_descriptor</span> <span class="title">if1_in_ep</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* MSC 接口描述符 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_if_descriptor</span> <span class="title">if2</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_ep_descriptor</span> <span class="title">if2_in_ep</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_ep_descriptor</span> <span class="title">if2_out_ep</span>;</span></span><br><span class="line">&#125; __packed;</span><br></pre></td></tr></table></figure><h2 id="2-复合设备实现"><a href="#2-复合设备实现" class="headerlink" title="2. 复合设备实现"></a>2. 复合设备实现</h2><h3 id="2-1-设备描述符定义"><a href="#2-1-设备描述符定义" class="headerlink" title="2.1 设备描述符定义"></a>2.1 设备描述符定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_common.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_device_descriptor</span> <span class="title">dev_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_device_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_DEVICE,</span><br><span class="line">    .bcdUSB = sys_cpu_to_le16(USB_2_0),</span><br><span class="line">    .bDeviceClass = USB_BCC_MISCELLANEOUS,</span><br><span class="line">    .bDeviceSubClass = <span class="number">0x02</span>,</span><br><span class="line">    .bDeviceProtocol = <span class="number">0x01</span>,</span><br><span class="line">    .bMaxPacketSize0 = USB_MAX_PACKET_SIZE,</span><br><span class="line">    .idVendor = sys_cpu_to_le16(CONFIG_USB_DEVICE_VID),</span><br><span class="line">    .idProduct = sys_cpu_to_le16(CONFIG_USB_DEVICE_PID),</span><br><span class="line">    .bcdDevice = sys_cpu_to_le16(<span class="number">0x0100</span>),</span><br><span class="line">    .iManufacturer = <span class="number">1</span>,</span><br><span class="line">    .iProduct = <span class="number">2</span>,</span><br><span class="line">    .iSerialNumber = <span class="number">3</span>,</span><br><span class="line">    .bNumConfigurations = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_composite_desc</span> <span class="title">desc</span> =</span> &#123;</span><br><span class="line">    .cfg_desc = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_cfg_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_CONFIGURATION,</span><br><span class="line">        .wTotalLength = <span class="number">0</span>, <span class="comment">/* 将在运行时计算 */</span></span><br><span class="line">        .bNumInterfaces = <span class="number">3</span>, <span class="comment">/* CDC + HID + MSC */</span></span><br><span class="line">        .bConfigurationValue = <span class="number">1</span>,</span><br><span class="line">        .iConfiguration = <span class="number">0</span>,</span><br><span class="line">        .bmAttributes = USB_CONFIG_ATT_ONE | USB_CONFIG_ATT_SELF_POWERED,</span><br><span class="line">        .bMaxPower = <span class="number">50</span>, <span class="comment">/* 100 mA */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* 各个接口描述符在子系统中定义 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 语言 ID 描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> lang_desc[] = &#123;</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    USB_DESC_STRING,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x04</span> <span class="comment">/* 英语 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 厂商字符串描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> mfr_desc[] = &#123;</span><br><span class="line">    USB_STRING_DESC_SIZE(CONFIG_USB_DEVICE_MANUFACTURER),</span><br><span class="line">    USB_DESC_STRING,</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;p&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;y&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;r&#x27;</span>, <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 产品字符串描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> product_desc[] = &#123;</span><br><span class="line">    USB_STRING_DESC_SIZE(CONFIG_USB_DEVICE_PRODUCT),</span><br><span class="line">    USB_DESC_STRING,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;o&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;m&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;p&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;o&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;s&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;i&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;t&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;v&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;i&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>, <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 序列号字符串描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> sn_desc[] = &#123;</span><br><span class="line">    USB_STRING_DESC_SIZE(CONFIG_USB_DEVICE_SN),</span><br><span class="line">    USB_DESC_STRING,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;4&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;5&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;6&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;7&#x27;</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;9&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;E&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 描述符列表 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_desc_header</span> *<span class="title">desc_list</span>[] =</span> &#123;</span><br><span class="line">    (<span class="keyword">struct</span> usb_desc_header *)&amp;dev_desc,</span><br><span class="line">    (<span class="keyword">struct</span> usb_desc_header *)&amp;desc,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字符串描述符列表 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_desc_header</span> *<span class="title">string_desc</span>[] =</span> &#123;</span><br><span class="line">    (<span class="keyword">struct</span> usb_desc_header *)lang_desc,</span><br><span class="line">    (<span class="keyword">struct</span> usb_desc_header *)mfr_desc,</span><br><span class="line">    (<span class="keyword">struct</span> usb_desc_header *)product_desc,</span><br><span class="line">    (<span class="keyword">struct</span> usb_desc_header *)sn_desc,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-复合设备初始化"><a href="#2-2-复合设备初始化" class="headerlink" title="2.2 复合设备初始化"></a>2.2 复合设备初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USB 设备状态回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">composite_status_cb</span><span class="params">(<span class="keyword">enum</span> usb_dc_status_code status, <span class="type">const</span> <span class="type">uint8_t</span> *param)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> USB_DC_RESET:</span><br><span class="line">        printk(<span class="string">&quot;USB Reset\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> USB_DC_CONNECTED:</span><br><span class="line">        printk(<span class="string">&quot;USB Connected\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> USB_DC_CONFIGURED:</span><br><span class="line">        printk(<span class="string">&quot;USB Configured\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> USB_DC_DISCONNECTED:</span><br><span class="line">        printk(<span class="string">&quot;USB Disconnected\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> USB_DC_SUSPEND:</span><br><span class="line">        printk(<span class="string">&quot;USB Suspended\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> USB_DC_RESUME:</span><br><span class="line">        printk(<span class="string">&quot;USB Resumed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化复合设备 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">composite_device_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置描述符 */</span></span><br><span class="line">    ret = usb_set_config(desc_list);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set USB configuration\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置字符串描述符 */</span></span><br><span class="line">    ret = usb_enable_strings(string_desc);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to enable USB strings\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注册状态回调 */</span></span><br><span class="line">    ret = usb_register_status_callback(composite_status_cb);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to register USB status callback\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能 USB */</span></span><br><span class="line">    ret = usb_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to enable USB\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-CDC-ACM-组件实现"><a href="#3-CDC-ACM-组件实现" class="headerlink" title="3. CDC-ACM 组件实现"></a>3. CDC-ACM 组件实现</h2><h3 id="3-1-CDC-ACM-接口定义"><a href="#3-1-CDC-ACM-接口定义" class="headerlink" title="3.1 CDC-ACM 接口定义"></a>3.1 CDC-ACM 接口定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_cdc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* CDC-ACM 设备配置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CDC_ACM_INTERFACE_0  0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CDC_ACM_INTERFACE_1  1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CDC_ACM_ENDPOINT_IN  0x81</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CDC_ACM_ENDPOINT_OUT 0x01</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_cdc_acm_config</span> <span class="title">cdc_acm_cfg</span> =</span> &#123;</span><br><span class="line">    .if0 = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_if_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_INTERFACE,</span><br><span class="line">        .bInterfaceNumber = CDC_ACM_INTERFACE_0,</span><br><span class="line">        .bAlternateSetting = <span class="number">0</span>,</span><br><span class="line">        .bNumEndpoints = <span class="number">1</span>,</span><br><span class="line">        .bInterfaceClass = USB_BCC_CDC_CONTROL,</span><br><span class="line">        .bInterfaceSubClass = ACM_SUBCLASS,</span><br><span class="line">        .bInterfaceProtocol = <span class="number">0</span>,</span><br><span class="line">        .iInterface = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* CDC 控制描述符 */</span></span><br><span class="line">    .if0_header = &#123;</span><br><span class="line">        .bFunctionLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> cdc_header_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_CS_INTERFACE,</span><br><span class="line">        .bDescriptorSubtype = HEADER_FUNC_DESC,</span><br><span class="line">        .bcdCDC = sys_cpu_to_le16(USB_1_1),</span><br><span class="line">    &#125;,</span><br><span class="line">    .if0_cm = &#123;</span><br><span class="line">        .bFunctionLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> cdc_cm_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_CS_INTERFACE,</span><br><span class="line">        .bDescriptorSubtype = CALL_MANAGEMENT_FUNC_DESC,</span><br><span class="line">        .bmCapabilities = <span class="number">0x02</span>,</span><br><span class="line">        .bDataInterface = <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .if0_acm = &#123;</span><br><span class="line">        .bFunctionLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> cdc_acm_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_CS_INTERFACE,</span><br><span class="line">        .bDescriptorSubtype = ACM_FUNC_DESC,</span><br><span class="line">        .bmCapabilities = <span class="number">0x02</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .if0_union = &#123;</span><br><span class="line">        .bFunctionLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> cdc_union_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_CS_INTERFACE,</span><br><span class="line">        .bDescriptorSubtype = UNION_FUNC_DESC,</span><br><span class="line">        .bControlInterface = <span class="number">0</span>,</span><br><span class="line">        .bSubordinateInterface0 = <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .if0_int_ep = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_ep_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_ENDPOINT,</span><br><span class="line">        .bEndpointAddress = CDC_ACM_ENDPOINT_IN,</span><br><span class="line">        .bmAttributes = USB_DC_EP_INTERRUPT,</span><br><span class="line">        .wMaxPacketSize = sys_cpu_to_le16(<span class="number">16</span>),</span><br><span class="line">        .bInterval = <span class="number">10</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .if1 = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_if_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_INTERFACE,</span><br><span class="line">        .bInterfaceNumber = CDC_ACM_INTERFACE_1,</span><br><span class="line">        .bAlternateSetting = <span class="number">0</span>,</span><br><span class="line">        .bNumEndpoints = <span class="number">2</span>,</span><br><span class="line">        .bInterfaceClass = USB_BCC_CDC_DATA,</span><br><span class="line">        .bInterfaceSubClass = <span class="number">0</span>,</span><br><span class="line">        .bInterfaceProtocol = <span class="number">0</span>,</span><br><span class="line">        .iInterface = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .if1_in_ep = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_ep_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_ENDPOINT,</span><br><span class="line">        .bEndpointAddress = CDC_ACM_ENDPOINT_IN,</span><br><span class="line">        .bmAttributes = USB_DC_EP_BULK,</span><br><span class="line">        .wMaxPacketSize = sys_cpu_to_le16(<span class="number">64</span>),</span><br><span class="line">        .bInterval = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .if1_out_ep = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_ep_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_ENDPOINT,</span><br><span class="line">        .bEndpointAddress = CDC_ACM_ENDPOINT_OUT,</span><br><span class="line">        .bmAttributes = USB_DC_EP_BULK,</span><br><span class="line">        .wMaxPacketSize = sys_cpu_to_le16(<span class="number">64</span>),</span><br><span class="line">        .bInterval = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-2-CDC-ACM-初始化和数据处理"><a href="#3-2-CDC-ACM-初始化和数据处理" class="headerlink" title="3.2 CDC-ACM 初始化和数据处理"></a>3.2 CDC-ACM 初始化和数据处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_cdc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> cdc_acm_rx_buf[<span class="number">64</span>];</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> cdc_acm_tx_buf[<span class="number">64</span>];</span><br><span class="line"><span class="type">static</span> <span class="keyword">volatile</span> <span class="type">bool</span> cdc_acm_configured;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CDC ACM 数据接收回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">cdc_acm_rx_cb</span><span class="params">(<span class="type">uint8_t</span> ep, <span class="type">int</span> size, <span class="type">void</span> *priv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理接收到的数据 */</span></span><br><span class="line">    printk(<span class="string">&quot;CDC ACM received %d bytes\n&quot;</span>, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 回显数据 */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(cdc_acm_tx_buf, cdc_acm_rx_buf, size);</span><br><span class="line">    usb_transfer(CDC_ACM_ENDPOINT_IN, cdc_acm_tx_buf, size, USB_TRANS_WRITE, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备接收更多数据 */</span></span><br><span class="line">    usb_transfer(CDC_ACM_ENDPOINT_OUT, cdc_acm_rx_buf, <span class="keyword">sizeof</span>(cdc_acm_rx_buf),</span><br><span class="line">                USB_TRANS_READ, cdc_acm_rx_cb, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CDC ACM 配置回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">cdc_acm_configure</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    cdc_acm_configured = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动接收 */</span></span><br><span class="line">    usb_transfer(CDC_ACM_ENDPOINT_OUT, cdc_acm_rx_buf, <span class="keyword">sizeof</span>(cdc_acm_rx_buf),</span><br><span class="line">                USB_TRANS_READ, cdc_acm_rx_cb, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CDC ACM 回调结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_cdc_acm_ops</span> <span class="title">cdc_acm_ops</span> =</span> &#123;</span><br><span class="line">    .configured = cdc_acm_configure,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 CDC ACM */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cdc_acm_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注册 CDC ACM 设备 */</span></span><br><span class="line">    ret = usb_cdc_acm_register(&amp;cdc_acm_cfg, &amp;cdc_acm_ops);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to register CDC ACM device\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-HID-组件实现"><a href="#4-HID-组件实现" class="headerlink" title="4. HID 组件实现"></a>4. HID 组件实现</h2><h3 id="4-1-HID-接口定义"><a href="#4-1-HID-接口定义" class="headerlink" title="4.1 HID 接口定义"></a>4.1 HID 接口定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_hid.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* HID 设备配置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HID_INTERFACE      2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HID_ENDPOINT_IN    0x82</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* HID 报告描述符 - 键盘 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> hid_report_desc[] = &#123;</span><br><span class="line">    HID_USAGE_PAGE(HID_USAGE_GEN_DESKTOP),</span><br><span class="line">    HID_USAGE(HID_USAGE_GEN_KEYBOARD),</span><br><span class="line">    HID_COLLECTION(HID_COLLECTION_APPLICATION),</span><br><span class="line">        HID_USAGE_PAGE(HID_USAGE_KEY),</span><br><span class="line">        HID_USAGE_MIN8(<span class="number">0</span>),</span><br><span class="line">        HID_USAGE_MAX8(<span class="number">0xFF</span>),</span><br><span class="line">        HID_LOGICAL_MIN8(<span class="number">0</span>),</span><br><span class="line">        HID_LOGICAL_MAX8(<span class="number">1</span>),</span><br><span class="line">        HID_REPORT_SIZE(<span class="number">1</span>),</span><br><span class="line">        HID_REPORT_COUNT(<span class="number">8</span>),</span><br><span class="line">        HID_INPUT(<span class="number">0x02</span>),</span><br><span class="line">    HID_END_COLLECTION,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_hid_config</span> <span class="title">hid_cfg</span> =</span> &#123;</span><br><span class="line">    .interface = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_if_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_INTERFACE,</span><br><span class="line">        .bInterfaceNumber = HID_INTERFACE,</span><br><span class="line">        .bAlternateSetting = <span class="number">0</span>,</span><br><span class="line">        .bNumEndpoints = <span class="number">1</span>,</span><br><span class="line">        .bInterfaceClass = USB_BCC_HID,</span><br><span class="line">        .bInterfaceSubClass = <span class="number">0</span>,</span><br><span class="line">        .bInterfaceProtocol = <span class="number">0</span>,</span><br><span class="line">        .iInterface = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .hid_descriptor = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_hid_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_HID,</span><br><span class="line">        .bcdHID = sys_cpu_to_le16(USB_1_1),</span><br><span class="line">        .bCountryCode = <span class="number">0</span>,</span><br><span class="line">        .bNumDescriptors = <span class="number">1</span>,</span><br><span class="line">        .subdesc[<span class="number">0</span>] = &#123;</span><br><span class="line">            .bDescriptorType = USB_DESC_HID_REPORT,</span><br><span class="line">            .wDescriptorLength = sys_cpu_to_le16(<span class="keyword">sizeof</span>(hid_report_desc)),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    .ep_in = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_ep_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_ENDPOINT,</span><br><span class="line">        .bEndpointAddress = HID_ENDPOINT_IN,</span><br><span class="line">        .bmAttributes = USB_DC_EP_INTERRUPT,</span><br><span class="line">        .wMaxPacketSize = sys_cpu_to_le16(<span class="number">8</span>),</span><br><span class="line">        .bInterval = <span class="number">10</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-2-HID-初始化和数据处理"><a href="#4-2-HID-初始化和数据处理" class="headerlink" title="4.2 HID 初始化和数据处理"></a>4.2 HID 初始化和数据处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_hid.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> hid_configured;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work_delayable</span> <span class="title">hid_work</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* HID 中断就绪回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">hid_int_in_ready</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;HID interrupt endpoint ready\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* HID 获取报告回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">hid_get_report</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> usb_setup_packet *setup,</span></span><br><span class="line"><span class="params">                         <span class="type">int32_t</span> *len, <span class="type">uint8_t</span> **data)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;HID Get Report request\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* HID 设置报告回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">hid_set_report</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> usb_setup_packet *setup,</span></span><br><span class="line"><span class="params">                         <span class="type">int32_t</span> *len, <span class="type">uint8_t</span> **data)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;HID Set Report request\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* HID 回调结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">hid_ops</span> <span class="title">hid_ops</span> =</span> &#123;</span><br><span class="line">    .get_report = hid_get_report,</span><br><span class="line">    .set_report = hid_set_report,</span><br><span class="line">    .int_in_ready = hid_int_in_ready,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* HID 工作处理函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">hid_work_handler</span><span class="params">(<span class="keyword">struct</span> k_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uint8_t</span> report[<span class="number">8</span>];</span><br><span class="line">    <span class="type">static</span> <span class="type">uint8_t</span> key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 模拟按键 */</span></span><br><span class="line">    report[<span class="number">0</span>] = key++;</span><br><span class="line">    <span class="keyword">if</span> (key &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        key = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送报告 */</span></span><br><span class="line">    hid_int_ep_write(report, <span class="keyword">sizeof</span>(report), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 安排下一次发送 */</span></span><br><span class="line">    k_work_schedule(&amp;hid_work, K_MSEC(<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 HID */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hid_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注册 HID 设备 */</span></span><br><span class="line">    ret = usb_hid_register_device(hid_report_desc, <span class="keyword">sizeof</span>(hid_report_desc),</span><br><span class="line">                                 &amp;hid_cfg, &amp;hid_ops);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to register HID device\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化工作队列 */</span></span><br><span class="line">    k_work_init_delayable(&amp;hid_work, hid_work_handler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动周期性发送 */</span></span><br><span class="line">    k_work_schedule(&amp;hid_work, K_MSEC(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-MSC-组件实现"><a href="#5-MSC-组件实现" class="headerlink" title="5. MSC 组件实现"></a>5. MSC 组件实现</h2><h3 id="5-1-MSC-接口定义"><a href="#5-1-MSC-接口定义" class="headerlink" title="5.1 MSC 接口定义"></a>5.1 MSC 接口定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_msc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* MSC 设备配置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MSC_INTERFACE      3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MSC_ENDPOINT_IN    0x83</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MSC_ENDPOINT_OUT   0x03</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_msc_config</span> <span class="title">msc_cfg</span> =</span> &#123;</span><br><span class="line">    .interface = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_if_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_INTERFACE,</span><br><span class="line">        .bInterfaceNumber = MSC_INTERFACE,</span><br><span class="line">        .bAlternateSetting = <span class="number">0</span>,</span><br><span class="line">        .bNumEndpoints = <span class="number">2</span>,</span><br><span class="line">        .bInterfaceClass = USB_BCC_MASS_STORAGE,</span><br><span class="line">        .bInterfaceSubClass = SCSI_TRANSPARENT_SUBCLASS,</span><br><span class="line">        .bInterfaceProtocol = BULK_ONLY_PROTOCOL,</span><br><span class="line">        .iInterface = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .ep_in = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_ep_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_ENDPOINT,</span><br><span class="line">        .bEndpointAddress = MSC_ENDPOINT_IN,</span><br><span class="line">        .bmAttributes = USB_DC_EP_BULK,</span><br><span class="line">        .wMaxPacketSize = sys_cpu_to_le16(<span class="number">64</span>),</span><br><span class="line">        .bInterval = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .ep_out = &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_ep_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_ENDPOINT,</span><br><span class="line">        .bEndpointAddress = MSC_ENDPOINT_OUT,</span><br><span class="line">        .bmAttributes = USB_DC_EP_BULK,</span><br><span class="line">        .wMaxPacketSize = sys_cpu_to_le16(<span class="number">64</span>),</span><br><span class="line">        .bInterval = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-2-MSC-初始化和数据处理"><a href="#5-2-MSC-初始化和数据处理" class="headerlink" title="5.2 MSC 初始化和数据处理"></a>5.2 MSC 初始化和数据处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/class/usb_msc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/disk_access.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储介质配置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISK_SECTOR_SIZE 512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISK_SECTOR_COUNT 2048</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISK_MEMORY_SIZE (DISK_SECTOR_SIZE * DISK_SECTOR_COUNT)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> disk_memory[DISK_MEMORY_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 磁盘操作回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_status</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> DISK_STATUS_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_read</span><span class="params">(<span class="type">uint8_t</span> *data, <span class="type">uint32_t</span> sector, <span class="type">uint32_t</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(data, &amp;disk_memory[sector * DISK_SECTOR_SIZE],</span><br><span class="line">           count * DISK_SECTOR_SIZE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_write</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">uint32_t</span> sector, <span class="type">uint32_t</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;disk_memory[sector * DISK_SECTOR_SIZE], data,</span><br><span class="line">           count * DISK_SECTOR_SIZE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">disk_ioctl</span><span class="params">(<span class="type">uint8_t</span> cmd, <span class="type">void</span> *buff)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> DISK_IOCTL_GET_SECTOR_COUNT:</span><br><span class="line">        *(<span class="type">uint32_t</span> *)buff = DISK_SECTOR_COUNT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DISK_IOCTL_GET_SECTOR_SIZE:</span><br><span class="line">        *(<span class="type">uint32_t</span> *)buff = DISK_SECTOR_SIZE;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 磁盘操作结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">disk_operations</span> <span class="title">disk_ops</span> =</span> &#123;</span><br><span class="line">    .init = disk_init,</span><br><span class="line">    .status = disk_status,</span><br><span class="line">    .read = disk_read,</span><br><span class="line">    .write = disk_write,</span><br><span class="line">    .ioctl = disk_ioctl,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 MSC */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">msc_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注册磁盘设备 */</span></span><br><span class="line">    ret = disk_access_register(<span class="string">&quot;RAM&quot;</span>, &amp;disk_ops);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to register disk\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注册 MSC 设备 */</span></span><br><span class="line">    ret = usb_msc_register(&amp;msc_cfg, <span class="string">&quot;RAM&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to register MSC device\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-复合设备测试"><a href="#6-复合设备测试" class="headerlink" title="6. 复合设备测试"></a>6. 复合设备测试</h2><h3 id="6-1-主程序集成"><a href="#6-1-主程序集成" class="headerlink" title="6.1 主程序集成"></a>6.1 主程序集成</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">composite_device_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">cdc_acm_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">hid_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">msc_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;USB Composite Device Example\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化各个组件 */</span></span><br><span class="line">    cdc_acm_init();</span><br><span class="line">    hid_init();</span><br><span class="line">    msc_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化复合设备 */</span></span><br><span class="line">    composite_device_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-测试验证"><a href="#6-2-测试验证" class="headerlink" title="6.2 测试验证"></a>6.2 测试验证</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_composite_device</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 验证设备状态 */</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">usb_dc_status_code</span> <span class="title">status</span>;</span></span><br><span class="line">    usb_dc_status(&amp;status);</span><br><span class="line">    printk(<span class="string">&quot;USB Status: %d\n&quot;</span>, status);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证各个组件功能 */</span></span><br><span class="line">    <span class="keyword">if</span> (status == USB_DC_CONFIGURED) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Testing CDC ACM...\n&quot;</span>);</span><br><span class="line">        <span class="comment">/* 发送测试数据 */</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *test_str = <span class="string">&quot;CDC ACM Test\r\n&quot;</span>;</span><br><span class="line">        usb_write(CDC_ACM_ENDPOINT_IN, test_str, <span class="built_in">strlen</span>(test_str), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        printk(<span class="string">&quot;Testing HID...\n&quot;</span>);</span><br><span class="line">        <span class="comment">/* 发送按键报告 */</span></span><br><span class="line">        <span class="type">uint8_t</span> report[<span class="number">8</span>] = &#123;<span class="number">0x04</span>&#125;; <span class="comment">/* &#x27;a&#x27; 键 */</span></span><br><span class="line">        hid_int_ep_write(report, <span class="keyword">sizeof</span>(report), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        printk(<span class="string">&quot;MSC should be accessible as a disk drive\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-最佳实践"><a href="#7-最佳实践" class="headerlink" title="7. 最佳实践"></a>7. 最佳实践</h2><ol><li><p>接口编号分配：</p><ul><li>确保每个接口使用唯一的接口编号</li><li>考虑使用 IAD (Interface Association Descriptor) 将相关接口组合在一起</li></ul></li><li><p>端点分配：</p><ul><li>合理分配端点资源，避免冲突</li><li>考虑不同设备类的端点需求和优先级</li></ul></li><li><p>描述符设计：</p><ul><li>确保描述符结构正确且完整</li><li>提供清晰的设备和接口标识信息</li></ul></li><li><p>资源管理：</p><ul><li>合理分配内存和缓冲区</li><li>考虑多个设备类之间的资源共享</li></ul></li><li><p>错误处理：</p><ul><li>实现完整的错误检查和恢复机制</li><li>考虑一个组件失败对整个设备的影响</li></ul></li><li><p>电源管理：</p><ul><li>实现正确的挂起&#x2F;恢复处理</li><li>考虑不同组件的电源需求</li></ul></li><li><p>测试验证：</p><ul><li>在不同主机系统上测试</li><li>验证各个组件的功能和互操作性</li></ul></li><li><p>兼容性：</p><ul><li>遵循 USB 规范和各设备类规范</li><li>考虑向后兼容性和不同主机系统的支持</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>build_system</title>
      <link href="/2025/03/21/nodic/zephyr/toolchain/build_system/"/>
      <url>/2025/03/21/nodic/zephyr/toolchain/build_system/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-构建系统"><a href="#Zephyr-构建系统" class="headerlink" title="Zephyr 构建系统"></a>Zephyr 构建系统</h1><p>本文档详细介绍了 Zephyr RTOS 的构建系统，包括 CMake 构建流程、West 命令工具、构建配置选项以及自定义构建方法。</p><h2 id="CMake-构建流程"><a href="#CMake-构建流程" class="headerlink" title="CMake 构建流程"></a>CMake 构建流程</h2><p>Zephyr 使用 CMake 作为其主要构建系统，结合 Ninja 或 Make 作为构建工具。</p><h3 id="构建系统架构"><a href="#构建系统架构" class="headerlink" title="构建系统架构"></a>构建系统架构</h3><p>Zephyr 的构建系统由以下几个主要部分组成：</p><ol><li><strong>CMake 脚本</strong>：定义构建逻辑和目标</li><li><strong>Kconfig 系统</strong>：管理配置选项</li><li><strong>设备树</strong>：描述硬件配置</li><li><strong>West</strong>：元构建工具，简化命令行操作</li></ol><h3 id="基本构建流程"><a href="#基本构建流程" class="headerlink" title="基本构建流程"></a>基本构建流程</h3><p>Zephyr 应用程序的构建流程如下：</p><ol><li><p><strong>配置阶段</strong></p><ul><li>处理 Kconfig 选项</li><li>解析设备树源文件</li><li>生成构建系统缓存</li></ul></li><li><p><strong>生成阶段</strong></p><ul><li>生成构建规则</li><li>创建构建目标</li></ul></li><li><p><strong>构建阶段</strong></p><ul><li>编译源代码</li><li>链接目标文件</li><li>生成最终二进制文件</li></ul></li></ol><h3 id="CMake-脚本结构"><a href="#CMake-脚本结构" class="headerlink" title="CMake 脚本结构"></a>CMake 脚本结构</h3><p>Zephyr 项目的 CMake 脚本组织结构：</p><ul><li><strong>zephyr&#x2F;CMakeLists.txt</strong>：主 CMake 文件</li><li>**zephyr&#x2F;cmake&#x2F;**：构建系统模块</li><li><strong>zephyr&#x2F;modules&#x2F;*&#x2F;CMakeLists.txt</strong>：模块构建脚本</li><li><strong>app&#x2F;CMakeLists.txt</strong>：应用程序 CMake 文件</li></ul><h3 id="应用程序-CMakeLists-txt"><a href="#应用程序-CMakeLists-txt" class="headerlink" title="应用程序 CMakeLists.txt"></a>应用程序 CMakeLists.txt</h3><p>一个典型的 Zephyr 应用程序 CMakeLists.txt 文件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置最低 CMake 版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找 Zephyr 包</span></span><br><span class="line"><span class="keyword">find_package</span>(Zephyr REQUIRED HINTS $ENV&#123;ZEPHYR_BASE&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目名称</span></span><br><span class="line"><span class="keyword">project</span>(my_zephyr_app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加应用程序源文件</span></span><br><span class="line"><span class="keyword">target_sources</span>(app PRIVATE src/main.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加包含目录</span></span><br><span class="line"><span class="keyword">target_include_directories</span>(app PRIVATE <span class="keyword">include</span>)</span><br></pre></td></tr></table></figure><h2 id="West-命令工具"><a href="#West-命令工具" class="headerlink" title="West 命令工具"></a>West 命令工具</h2><p>West 是 Zephyr 的元工具，用于管理多仓库项目和简化构建命令。</p><h3 id="West-基本命令"><a href="#West-基本命令" class="headerlink" title="West 基本命令"></a>West 基本命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化 Zephyr 工作区</span></span><br><span class="line">west init -m https://github.com/zephyrproject-rtos/zephyr --mr v2.9.1 zephyrproject</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新所有项目</span></span><br><span class="line">west update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有项目</span></span><br><span class="line">west list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建应用程序</span></span><br><span class="line">west build -b &lt;board&gt; &lt;app_directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录应用程序</span></span><br><span class="line">west flash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行应用程序</span></span><br><span class="line">west debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理构建目录</span></span><br><span class="line">west build -t clean</span><br></pre></td></tr></table></figure><h3 id="West-构建命令"><a href="#West-构建命令" class="headerlink" title="West 构建命令"></a>West 构建命令</h3><p>West 构建命令的完整语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">west build [-h] [-b BOARD] [-d BUILD_DIR]</span><br><span class="line">           [-t TARGET] [-p] [-c] [--cmake-only]</span><br><span class="line">           [--sysbuild | --no-sysbuild]</span><br><span class="line">           [--pristine | --pristine=always | --pristine=auto | --pristine=never]</span><br><span class="line">           [--context CONTEXT] [--force]</span><br><span class="line">           [source_dir] [-- [cmake_opt [cmake_opt ...]]]</span><br></pre></td></tr></table></figure><p>主要选项：</p><ul><li><strong>-b, –board BOARD</strong>：指定目标板子</li><li><strong>-d, –build-dir BUILD_DIR</strong>：指定构建目录</li><li><strong>-t, –target TARGET</strong>：指定构建目标</li><li><strong>-p, –pristine</strong>：清理构建目录</li><li><strong>-c, –cmake</strong>：重新运行 CMake</li><li><strong>–sysbuild</strong>：使用系统构建</li><li>**– [cmake_opt …]**：传递额外的 CMake 选项</li></ul><h3 id="West-配置"><a href="#West-配置" class="headerlink" title="West 配置"></a>West 配置</h3><p>West 配置存储在 <code>.west/config</code> 文件中，可以使用以下命令进行管理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置配置选项</span></span><br><span class="line">west config build.board nrf52840dk_nrf52840</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取配置选项</span></span><br><span class="line">west config build.board</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除配置选项</span></span><br><span class="line">west config --delete build.board</span><br></pre></td></tr></table></figure><p>常用配置选项：</p><ul><li><strong>build.board</strong>：默认板子</li><li><strong>build.dir</strong>：默认构建目录</li><li><strong>build.generator</strong>：CMake 生成器（Ninja 或 Make）</li><li><strong>build.pristine</strong>：构建前是否清理</li></ul><h2 id="构建配置选项"><a href="#构建配置选项" class="headerlink" title="构建配置选项"></a>构建配置选项</h2><p>Zephyr 提供了多种方式配置构建过程：</p><h3 id="Kconfig-配置"><a href="#Kconfig-配置" class="headerlink" title="Kconfig 配置"></a>Kconfig 配置</h3><p>Kconfig 用于配置软件选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># prj.conf</span><br><span class="line">CONFIG_GPIO=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_INTERRUPT_DRIVEN=y</span><br></pre></td></tr></table></figure><p>可以通过以下方式指定 Kconfig 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用默认的 prj.conf</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定配置文件</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app -- -DCONF_FILE=my_prj.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并多个配置文件</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app -- -DCONF_FILE=<span class="string">&quot;prj.conf;overlay.conf&quot;</span></span><br></pre></td></tr></table></figure><h3 id="设备树配置"><a href="#设备树配置" class="headerlink" title="设备树配置"></a>设备树配置</h3><p>设备树用于配置硬件：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* app.overlay */</span></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>可以通过以下方式指定设备树覆盖文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用默认的 app.overlay</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定覆盖文件</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app -- -DDTC_OVERLAY_FILE=my_overlay.dts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并多个覆盖文件</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app -- -DDTC_OVERLAY_FILE=<span class="string">&quot;app.overlay;extra.overlay&quot;</span></span><br></pre></td></tr></table></figure><h3 id="CMake-变量"><a href="#CMake-变量" class="headerlink" title="CMake 变量"></a>CMake 变量</h3><p>可以通过 CMake 变量配置构建过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置构建类型</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app -- -DCMAKE_BUILD_TYPE=Debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用覆盖率分析</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app -- -DCMAKE_BUILD_TYPE=Debug -DCONFIG_COVERAGE=y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用编译器优化</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app -- -DEXTRA_CFLAGS=<span class="string">&quot;-O2 -fomit-frame-pointer&quot;</span></span><br></pre></td></tr></table></figure><h3 id="板级配置"><a href="#板级配置" class="headerlink" title="板级配置"></a>板级配置</h3><p>每个板子可以有特定的配置文件：</p><ul><li><strong>boards&#x2F;<arch>&#x2F;<board>&#x2F;<board>_defconfig</strong>：默认板级 Kconfig 配置</li><li><strong>boards&#x2F;<arch>&#x2F;<board>&#x2F;<board>.dts</strong>：默认板级设备树</li></ul><p>可以创建板级特定的应用程序配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">├── boards/</span><br><span class="line">│   ├── nrf52840dk_nrf52840.conf     # 板级特定 Kconfig</span><br><span class="line">│   └── nrf52840dk_nrf52840.overlay  # 板级特定设备树</span><br><span class="line">├── prj.conf                         # 通用 Kconfig</span><br><span class="line">└── app.overlay                      # 通用设备树</span><br></pre></td></tr></table></figure><h2 id="自定义构建"><a href="#自定义构建" class="headerlink" title="自定义构建"></a>自定义构建</h2><h3 id="自定义构建目标"><a href="#自定义构建目标" class="headerlink" title="自定义构建目标"></a>自定义构建目标</h3><p>可以在应用程序的 CMakeLists.txt 中定义自定义目标：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加自定义目标</span></span><br><span class="line"><span class="keyword">add_custom_target</span>(my_target</span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E echo <span class="string">&quot;Running custom target&quot;</span></span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;PYTHON_EXECUTABLE&#125;</span> <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/scripts/my_script.py</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用自定义目标：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west build -t my_target</span><br></pre></td></tr></table></figure><h3 id="自定义构建脚本"><a href="#自定义构建脚本" class="headerlink" title="自定义构建脚本"></a>自定义构建脚本</h3><p>可以创建自定义 CMake 模块：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake/custom_module.cmake</span></span><br><span class="line"><span class="keyword">function</span>(my_custom_function)</span><br><span class="line">    <span class="comment"># 实现自定义功能</span></span><br><span class="line"><span class="keyword">endfunction</span>()</span><br></pre></td></tr></table></figure><p>在应用程序的 CMakeLists.txt 中使用自定义模块：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 包含自定义模块</span></span><br><span class="line"><span class="keyword">list</span>(APPEND CMAKE_MODULE_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/cmake)</span><br><span class="line"><span class="keyword">include</span>(custom_module)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用自定义函数</span></span><br><span class="line">my_custom_function()</span><br></pre></td></tr></table></figure><h3 id="条件构建"><a href="#条件构建" class="headerlink" title="条件构建"></a>条件构建</h3><p>可以使用 CMake 条件语句根据配置选项控制构建：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据 Kconfig 选项控制源文件</span></span><br><span class="line"><span class="keyword">if</span>(CONFIG_FEATURE_X)</span><br><span class="line">    <span class="keyword">target_sources</span>(app PRIVATE src/feature_x.c)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据板子类型控制包含目录</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$&#123;BOARD&#125;</span> <span class="keyword">MATCHES</span> <span class="string">&quot;nrf52.*&quot;</span>)</span><br><span class="line">    <span class="keyword">target_include_directories</span>(app PRIVATE <span class="keyword">include</span>/nrf52)</span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$&#123;BOARD&#125;</span> <span class="keyword">MATCHES</span> <span class="string">&quot;stm32.*&quot;</span>)</span><br><span class="line">    <span class="keyword">target_include_directories</span>(app PRIVATE <span class="keyword">include</span>/stm32)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><h3 id="多应用程序构建"><a href="#多应用程序构建" class="headerlink" title="多应用程序构建"></a>多应用程序构建</h3><p>Zephyr 支持使用 sysbuild 构建多个应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用 sysbuild</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 --sysbuild app</span><br></pre></td></tr></table></figure><p>sysbuild 配置示例 (sysbuild.cmake)：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(SB_CONFIG_BOOTLOADER_MCUBOOT y)</span><br><span class="line"><span class="keyword">set</span>(SB_CONFIG_MCUBOOT_BUILD_STRATEGY_FROM_SOURCE y)</span><br><span class="line"></span><br><span class="line">add_child_image(</span><br><span class="line">    NAME mcuboot</span><br><span class="line">    SOURCE_DIR <span class="variable">$&#123;ZEPHYR_BASE&#125;</span>/../bootloader/mcuboot/boot/zephyr</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">add_child_image(</span><br><span class="line">    NAME app</span><br><span class="line">    SOURCE_DIR <span class="variable">$&#123;APP_DIR&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="构建缓存和优化"><a href="#构建缓存和优化" class="headerlink" title="构建缓存和优化"></a>构建缓存和优化</h2><h3 id="使用-ccache"><a href="#使用-ccache" class="headerlink" title="使用 ccache"></a>使用 ccache</h3><p>启用 ccache 加速重复构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 prj.conf 中启用</span></span><br><span class="line">CONFIG_CCACHE=y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或在构建命令中启用</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 app -- -DCCACHE=1</span><br></pre></td></tr></table></figure><h3 id="增量构建"><a href="#增量构建" class="headerlink" title="增量构建"></a>增量构建</h3><p>默认情况下，Zephyr 使用增量构建。可以控制构建清理级别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完全清理构建目录</span></span><br><span class="line">west build --pristine=always</span><br><span class="line"></span><br><span class="line"><span class="comment"># 智能清理（仅在必要时清理）</span></span><br><span class="line">west build --pristine=auto</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从不清理</span></span><br><span class="line">west build --pristine=never</span><br></pre></td></tr></table></figure><h3 id="并行构建"><a href="#并行构建" class="headerlink" title="并行构建"></a>并行构建</h3><p>配置并行构建任务数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 .west/config 中设置</span></span><br><span class="line">west config build.jobs 8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或在环境变量中设置</span></span><br><span class="line"><span class="built_in">export</span> ZEPHYR_JOBS=8</span><br></pre></td></tr></table></figure><h2 id="构建输出"><a href="#构建输出" class="headerlink" title="构建输出"></a>构建输出</h2><p>构建过程生成的主要文件：</p><ul><li><strong>zephyr.elf</strong>：ELF 格式的可执行文件</li><li><strong>zephyr.bin</strong>：二进制格式的固件</li><li><strong>zephyr.hex</strong>：Intel HEX 格式的固件</li><li><strong>zephyr.map</strong>：链接映射文件</li><li><strong>zephyr.lst</strong>：反汇编列表</li><li><strong>zephyr.stat</strong>：内存使用统计</li></ul><p>这些文件位于构建目录的 <code>zephyr</code> 子目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build/zephyr/zephyr.hex</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-构建错误"><a href="#1-构建错误" class="headerlink" title="1. 构建错误"></a>1. 构建错误</h3><p><strong>问题</strong>：构建过程中出现错误</p><p><strong>解决方案</strong>：</p><ul><li>尝试使用 <code>--pristine</code> 选项重新构建</li><li>检查配置文件和源代码错误</li><li>验证工具链和依赖是否正确安装</li></ul><h3 id="2-配置问题"><a href="#2-配置问题" class="headerlink" title="2. 配置问题"></a>2. 配置问题</h3><p><strong>问题</strong>：配置选项不生效</p><p><strong>解决方案</strong>：</p><ul><li>检查配置文件路径是否正确</li><li>确认配置选项名称和值是否正确</li><li>使用 <code>west build -t menuconfig</code> 验证配置</li></ul><h3 id="3-设备树问题"><a href="#3-设备树问题" class="headerlink" title="3. 设备树问题"></a>3. 设备树问题</h3><p><strong>问题</strong>：设备树覆盖不生效</p><p><strong>解决方案</strong>：</p><ul><li>检查设备树语法是否正确</li><li>确认覆盖文件路径是否正确</li><li>使用 <code>west build -t devicetree</code> 检查处理后的设备树</li></ul><h3 id="4-内存不足"><a href="#4-内存不足" class="headerlink" title="4. 内存不足"></a>4. 内存不足</h3><p><strong>问题</strong>：链接阶段报告内存不足</p><p><strong>解决方案</strong>：</p><ul><li>优化代码减少内存使用</li><li>调整链接脚本增加可用内存</li><li>禁用不必要的功能和模块</li></ul><h3 id="5-构建性能问题"><a href="#5-构建性能问题" class="headerlink" title="5. 构建性能问题"></a>5. 构建性能问题</h3><p><strong>问题</strong>：构建过程缓慢</p><p><strong>解决方案</strong>：</p><ul><li>启用 ccache</li><li>增加并行任务数</li><li>使用增量构建</li><li>使用更快的存储设备</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 的构建系统基于 CMake，提供了强大而灵活的配置和构建能力。通过 West 工具，可以简化构建命令和工作流程。Kconfig 和设备树系统提供了软件和硬件配置的分离，使得应用程序更加可移植。了解这些构建系统组件和工作流程对于高效开发 Zephyr 应用程序至关重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>power_management</title>
      <link href="/2025/03/21/nodic/zephyr/usb/power_management/"/>
      <url>/2025/03/21/nodic/zephyr/usb/power_management/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-USB-电源管理指南"><a href="#Zephyr-USB-电源管理指南" class="headerlink" title="Zephyr USB 电源管理指南"></a>Zephyr USB 电源管理指南</h1><h2 id="1-USB-电源管理基础"><a href="#1-USB-电源管理基础" class="headerlink" title="1. USB 电源管理基础"></a>1. USB 电源管理基础</h2><h3 id="1-1-电源管理配置-prj-conf"><a href="#1-1-电源管理配置-prj-conf" class="headerlink" title="1.1 电源管理配置 (prj.conf)"></a>1.1 电源管理配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># USB 设备栈支持</span><br><span class="line">CONFIG_USB_DEVICE_STACK=y</span><br><span class="line"></span><br><span class="line"># 电源管理支持</span><br><span class="line">CONFIG_PM=y</span><br><span class="line">CONFIG_PM_DEVICE=y</span><br><span class="line">CONFIG_PM_DEVICE_RUNTIME=y</span><br><span class="line"></span><br><span class="line"># USB 电源管理</span><br><span class="line">CONFIG_USB_DEVICE_BOS=y</span><br><span class="line">CONFIG_USB_DEVICE_OS_DESC=y</span><br><span class="line">CONFIG_USB_DEVICE_REMOTE_WAKEUP=y</span><br></pre></td></tr></table></figure><h3 id="1-2-电源描述符配置"><a href="#1-2-电源描述符配置" class="headerlink" title="1.2 电源描述符配置"></a>1.2 电源描述符配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_cfg_descriptor</span> <span class="title">cfg_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_cfg_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_CONFIGURATION,</span><br><span class="line">    .wTotalLength = <span class="number">0</span>, <span class="comment">/* 运行时计算 */</span></span><br><span class="line">    .bNumInterfaces = <span class="number">1</span>,</span><br><span class="line">    .bConfigurationValue = <span class="number">1</span>,</span><br><span class="line">    .iConfiguration = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/* 支持远程唤醒 */</span></span><br><span class="line">    .bmAttributes = USB_CONFIG_ATT_ONE | USB_CONFIG_ATT_SELF_POWERED | USB_CONFIG_ATT_WAKEUP,</span><br><span class="line">    .bMaxPower = <span class="number">50</span>, <span class="comment">/* 100 mA */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* BOS 描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_bos_descriptor</span> <span class="title">bos_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_bos_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_BOS,</span><br><span class="line">    .wTotalLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_bos_descriptor) +</span><br><span class="line">                   <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_dev_cap_platform_descriptor),</span><br><span class="line">    .bNumDeviceCaps = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 平台描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_dev_cap_platform_descriptor</span> <span class="title">platform_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_dev_cap_platform_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_DEVICE_CAPABILITY,</span><br><span class="line">    .bDevCapabilityType = USB_DC_PLATFORM,</span><br><span class="line">    .bReserved = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/* MS OS 2.0 描述符 */</span></span><br><span class="line">    .PlatformCapabilityUUID = &#123;</span><br><span class="line">        <span class="number">0xDF</span>, <span class="number">0x60</span>, <span class="number">0xDD</span>, <span class="number">0xD8</span>, <span class="number">0x89</span>, <span class="number">0x45</span>, <span class="number">0xC7</span>, <span class="number">0x4C</span>,</span><br><span class="line">        <span class="number">0x9C</span>, <span class="number">0xD2</span>, <span class="number">0x65</span>, <span class="number">0x9D</span>, <span class="number">0x9E</span>, <span class="number">0x64</span>, <span class="number">0x8A</span>, <span class="number">0x9F</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-USB-挂起-恢复处理"><a href="#2-USB-挂起-恢复处理" class="headerlink" title="2. USB 挂起&#x2F;恢复处理"></a>2. USB 挂起&#x2F;恢复处理</h2><h3 id="2-1-挂起-恢复回调"><a href="#2-1-挂起-恢复回调" class="headerlink" title="2.1 挂起&#x2F;恢复回调"></a>2.1 挂起&#x2F;恢复回调</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USB 设备状态回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">usb_status_cb</span><span class="params">(<span class="keyword">enum</span> usb_dc_status_code status, <span class="type">const</span> <span class="type">uint8_t</span> *param)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> USB_DC_SUSPEND:</span><br><span class="line">        printk(<span class="string">&quot;USB suspended\n&quot;</span>);</span><br><span class="line">        <span class="comment">/* 进入低功耗模式 */</span></span><br><span class="line">        pm_device_action_run(PM_DEVICE_ACTION_SUSPEND);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> USB_DC_RESUME:</span><br><span class="line">        printk(<span class="string">&quot;USB resumed\n&quot;</span>);</span><br><span class="line">        <span class="comment">/* 退出低功耗模式 */</span></span><br><span class="line">        pm_device_action_run(PM_DEVICE_ACTION_RESUME);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 USB 电源管理 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">usb_pm_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 注册状态回调 */</span></span><br><span class="line">    usb_register_status_callback(usb_status_cb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-远程唤醒实现"><a href="#2-2-远程唤醒实现" class="headerlink" title="2.2 远程唤醒实现"></a>2.2 远程唤醒实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 远程唤醒标志 */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">volatile</span> <span class="type">bool</span> remote_wakeup_enabled;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 处理 SET_FEATURE/CLEAR_FEATURE 请求 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">usb_feature_handler</span><span class="params">(<span class="keyword">struct</span> usb_setup_packet *setup,</span></span><br><span class="line"><span class="params">                              <span class="type">int32_t</span> *len, <span class="type">uint8_t</span> **data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (setup-&gt;bRequest == USB_REQUEST_SET_FEATURE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (setup-&gt;wValue == USB_FEATURE_REMOTE_WAKEUP) &#123;</span><br><span class="line">            remote_wakeup_enabled = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setup-&gt;bRequest == USB_REQUEST_CLEAR_FEATURE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (setup-&gt;wValue == USB_FEATURE_REMOTE_WAKEUP) &#123;</span><br><span class="line">            remote_wakeup_enabled = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送远程唤醒 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">usb_remote_wakeup</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!remote_wakeup_enabled) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EACCES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> usb_dc_wakeup_request();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-总线供电管理"><a href="#3-总线供电管理" class="headerlink" title="3. 总线供电管理"></a>3. 总线供电管理</h2><h3 id="3-1-总线供电配置"><a href="#3-1-总线供电配置" class="headerlink" title="3.1 总线供电配置"></a>3.1 总线供电配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置描述符 - 总线供电 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_cfg_descriptor</span> <span class="title">bus_powered_cfg_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_cfg_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_CONFIGURATION,</span><br><span class="line">    .wTotalLength = <span class="number">0</span>, <span class="comment">/* 运行时计算 */</span></span><br><span class="line">    .bNumInterfaces = <span class="number">1</span>,</span><br><span class="line">    .bConfigurationValue = <span class="number">1</span>,</span><br><span class="line">    .iConfiguration = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/* 总线供电 */</span></span><br><span class="line">    .bmAttributes = USB_CONFIG_ATT_ONE,</span><br><span class="line">    .bMaxPower = <span class="number">50</span>, <span class="comment">/* 100 mA */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置描述符 - 自供电 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_cfg_descriptor</span> <span class="title">self_powered_cfg_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_cfg_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_CONFIGURATION,</span><br><span class="line">    .wTotalLength = <span class="number">0</span>, <span class="comment">/* 运行时计算 */</span></span><br><span class="line">    .bNumInterfaces = <span class="number">1</span>,</span><br><span class="line">    .bConfigurationValue = <span class="number">1</span>,</span><br><span class="line">    .iConfiguration = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/* 自供电 */</span></span><br><span class="line">    .bmAttributes = USB_CONFIG_ATT_ONE | USB_CONFIG_ATT_SELF_POWERED,</span><br><span class="line">    .bMaxPower = <span class="number">0</span>, <span class="comment">/* 0 mA */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-2-电源状态监控"><a href="#3-2-电源状态监控" class="headerlink" title="3.2 电源状态监控"></a>3.2 电源状态监控</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* VBUS 检测引脚 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">vbus_gpio</span> =</span></span><br><span class="line">    GPIO_DT_SPEC_GET(DT_NODELABEL(vbus_detect), gpios);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* VBUS 中断回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">vbus_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *port,</span></span><br><span class="line"><span class="params">                         <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">                         <span class="type">gpio_port_pins_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 检查 VBUS 状态 */</span></span><br><span class="line">    <span class="type">int</span> vbus_present = gpio_pin_get_dt(&amp;vbus_gpio);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vbus_present) &#123;</span><br><span class="line">        printk(<span class="string">&quot;VBUS connected\n&quot;</span>);</span><br><span class="line">        <span class="comment">/* 启用 USB 设备 */</span></span><br><span class="line">        usb_enable(<span class="literal">NULL</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;VBUS disconnected\n&quot;</span>);</span><br><span class="line">        <span class="comment">/* 禁用 USB 设备 */</span></span><br><span class="line">        usb_disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">vbus_cb_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 VBUS 检测 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">vbus_detection_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置 VBUS 检测引脚 */</span></span><br><span class="line">    gpio_pin_configure_dt(&amp;vbus_gpio, GPIO_INPUT);</span><br><span class="line">    gpio_pin_interrupt_configure_dt(&amp;vbus_gpio, GPIO_INT_EDGE_BOTH);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置中断回调 */</span></span><br><span class="line">    gpio_init_callback(&amp;vbus_cb_data, vbus_callback, BIT(vbus_gpio.pin));</span><br><span class="line">    gpio_add_callback(vbus_gpio.port, &amp;vbus_cb_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-电源协商-USB-PD"><a href="#4-电源协商-USB-PD" class="headerlink" title="4. 电源协商 (USB PD)"></a>4. 电源协商 (USB PD)</h2><h3 id="4-1-USB-PD-配置"><a href="#4-1-USB-PD-配置" class="headerlink" title="4.1 USB PD 配置"></a>4.1 USB PD 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># USB PD 配置 (prj.conf)</span><br><span class="line">CONFIG_USBC_STACK=y</span><br><span class="line">CONFIG_USBC_PD=y</span><br><span class="line">CONFIG_USBC_PD_TCPC=y</span><br><span class="line">CONFIG_USBC_PD_POLICY=y</span><br></pre></td></tr></table></figure><h3 id="4-2-USB-PD-实现"><a href="#4-2-USB-PD-实现" class="headerlink" title="4.2 USB PD 实现"></a>4.2 USB PD 实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usbc/usbc_pd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USB PD 事件回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pd_event_handler</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                            <span class="keyword">enum</span> usbc_pd_event event,</span></span><br><span class="line"><span class="params">                            <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event) &#123;</span><br><span class="line">    <span class="keyword">case</span> USBC_PD_EVT_SOURCE_ATTACHED:</span><br><span class="line">        printk(<span class="string">&quot;USB PD source attached\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> USBC_PD_EVT_SOURCE_DETACHED:</span><br><span class="line">        printk(<span class="string">&quot;USB PD source detached\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> USBC_PD_EVT_POWER_READY:</span><br><span class="line">        printk(<span class="string">&quot;USB PD power ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 USB PD */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">usb_pd_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">pd_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(usbc_pd));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注册 PD 事件回调 */</span></span><br><span class="line">    usbc_pd_register_callback(pd_dev, pd_event_handler, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 请求电源数据对象 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">request_power</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">pd_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(usbc_pd));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usbc_pd_pdo</span> <span class="title">pdo</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取源能力 */</span></span><br><span class="line">    <span class="type">int</span> ret = usbc_pd_get_source_capabilities(pd_dev, &amp;pdo, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 请求 5V/2A */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usbc_pd_rdo</span> <span class="title">rdo</span> =</span> &#123;</span><br><span class="line">        .object_pos = <span class="number">1</span>,</span><br><span class="line">        .max_current = <span class="number">200</span>, <span class="comment">/* 2A */</span></span><br><span class="line">        .op_current = <span class="number">200</span>,  <span class="comment">/* 2A */</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    usbc_pd_request_power(pd_dev, &amp;rdo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-电源状态转换"><a href="#5-电源状态转换" class="headerlink" title="5. 电源状态转换"></a>5. 电源状态转换</h2><h3 id="5-1-电源状态机"><a href="#5-1-电源状态机" class="headerlink" title="5.1 电源状态机"></a>5.1 电源状态机</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电源状态 */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">power_state</span> &#123;</span></span><br><span class="line">    POWER_STATE_ACTIVE,</span><br><span class="line">    POWER_STATE_IDLE,</span><br><span class="line">    POWER_STATE_SUSPEND,</span><br><span class="line">    POWER_STATE_OFF,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">enum</span> <span class="title">power_state</span> <span class="title">current_state</span> =</span> POWER_STATE_ACTIVE;</span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> last_activity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电源状态转换 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">update_power_state</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> now = k_uptime_get_32();</span><br><span class="line">    <span class="type">uint32_t</span> idle_time = now - last_activity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (current_state) &#123;</span><br><span class="line">    <span class="keyword">case</span> POWER_STATE_ACTIVE:</span><br><span class="line">        <span class="keyword">if</span> (idle_time &gt; <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="comment">/* 5秒无活动，进入空闲状态 */</span></span><br><span class="line">            current_state = POWER_STATE_IDLE;</span><br><span class="line">            <span class="comment">/* 降低时钟频率 */</span></span><br><span class="line">            pm_device_action_run(PM_DEVICE_ACTION_TURN_OFF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> POWER_STATE_IDLE:</span><br><span class="line">        <span class="keyword">if</span> (idle_time &gt; <span class="number">30000</span>) &#123;</span><br><span class="line">            <span class="comment">/* 30秒无活动，进入挂起状态 */</span></span><br><span class="line">            current_state = POWER_STATE_SUSPEND;</span><br><span class="line">            <span class="comment">/* 进入深度睡眠 */</span></span><br><span class="line">            pm_device_action_run(PM_DEVICE_ACTION_SUSPEND);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> POWER_STATE_SUSPEND:</span><br><span class="line">        <span class="comment">/* 在挂起状态下保持，直到有外部唤醒 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 记录活动 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">record_activity</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    last_activity = k_uptime_get_32();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果不在活动状态，恢复到活动状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (current_state != POWER_STATE_ACTIVE) &#123;</span><br><span class="line">        current_state = POWER_STATE_ACTIVE;</span><br><span class="line">        pm_device_action_run(PM_DEVICE_ACTION_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-低功耗模式"><a href="#5-2-低功耗模式" class="headerlink" title="5.2 低功耗模式"></a>5.2 低功耗模式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 低功耗模式配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pm_state_info</span> <span class="title">states</span>[] =</span> &#123;</span><br><span class="line">    &#123;PM_STATE_RUNTIME_IDLE, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;PM_STATE_SUSPEND_TO_IDLE, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;PM_STATE_SUSPEND_TO_RAM, <span class="number">0</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入低功耗模式 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enter_low_power_mode</span><span class="params">(<span class="keyword">enum</span> pm_state state)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 准备进入低功耗模式 */</span></span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_STATE_RUNTIME_IDLE:</span><br><span class="line">        <span class="comment">/* 轻度睡眠，快速唤醒 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_STATE_SUSPEND_TO_IDLE:</span><br><span class="line">        <span class="comment">/* 中度睡眠，关闭更多外设 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_STATE_SUSPEND_TO_RAM:</span><br><span class="line">        <span class="comment">/* 深度睡眠，只保留关键唤醒源 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置唤醒源 */</span></span><br><span class="line">    pm_device_wakeup_enable(DEVICE_DT_GET(DT_NODELABEL(usbd)), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 进入低功耗模式 */</span></span><br><span class="line">    pm_state_force(<span class="number">0</span>, &amp;(<span class="keyword">struct</span> pm_state_info)&#123;</span><br><span class="line">        .state = state</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-电池供电设备"><a href="#6-电池供电设备" class="headerlink" title="6. 电池供电设备"></a>6. 电池供电设备</h2><h3 id="6-1-电池电量监控"><a href="#6-1-电池电量监控" class="headerlink" title="6.1 电池电量监控"></a>6.1 电池电量监控</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电池状态 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">battery_status</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> level;       <span class="comment">/* 0-100% */</span></span><br><span class="line">    <span class="type">bool</span> charging;       <span class="comment">/* 是否充电 */</span></span><br><span class="line">    <span class="type">uint16_t</span> voltage_mv; <span class="comment">/* 电压（毫伏） */</span></span><br><span class="line">    <span class="type">int16_t</span> current_ma;  <span class="comment">/* 电流（毫安） */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">battery_status</span> <span class="title">bat_status</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更新电池状态 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">update_battery_status</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">bat_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(battery));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">val</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取电池电量 */</span></span><br><span class="line">    sensor_sample_fetch(bat_dev);</span><br><span class="line">    sensor_channel_get(bat_dev, SENSOR_CHAN_GAUGE_STATE_OF_CHARGE, &amp;val);</span><br><span class="line">    bat_status.level = val.val1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取充电状态 */</span></span><br><span class="line">    sensor_channel_get(bat_dev, SENSOR_CHAN_GAUGE_STATE_OF_CHARGE, &amp;val);</span><br><span class="line">    bat_status.charging = (val.val1 &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取电压 */</span></span><br><span class="line">    sensor_channel_get(bat_dev, SENSOR_CHAN_GAUGE_VOLTAGE, &amp;val);</span><br><span class="line">    bat_status.voltage_mv = val.val1 * <span class="number">1000</span> + val.val2 / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取电流 */</span></span><br><span class="line">    sensor_channel_get(bat_dev, SENSOR_CHAN_GAUGE_CURRENT, &amp;val);</span><br><span class="line">    bat_status.current_ma = val.val1 * <span class="number">1000</span> + val.val2 / <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据电池状态调整 USB 配置 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">adjust_usb_power_config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 如果电池电量低于阈值，降低 USB 功耗 */</span></span><br><span class="line">    <span class="keyword">if</span> (bat_status.level &lt; <span class="number">10</span> &amp;&amp; !bat_status.charging) &#123;</span><br><span class="line">        <span class="comment">/* 降低 USB 端点数量 */</span></span><br><span class="line">        usb_disable_endpoint(<span class="number">0x81</span>);</span><br><span class="line">        usb_disable_endpoint(<span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 降低 USB 速度 */</span></span><br><span class="line">        usb_dc_set_device_speed(USB_SPEED_FULL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-充电控制"><a href="#6-2-充电控制" class="headerlink" title="6.2 充电控制"></a>6.2 充电控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 充电控制引脚 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">charge_en</span> =</span></span><br><span class="line">    GPIO_DT_SPEC_GET(DT_NODELABEL(charge_enable), gpios);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 充电状态引脚 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">charge_stat</span> =</span></span><br><span class="line">    GPIO_DT_SPEC_GET(DT_NODELABEL(charge_status), gpios);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 充电电流设置 */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">charge_current</span> &#123;</span></span><br><span class="line">    CHARGE_CURRENT_100MA,</span><br><span class="line">    CHARGE_CURRENT_500MA,</span><br><span class="line">    CHARGE_CURRENT_1000MA,</span><br><span class="line">    CHARGE_CURRENT_2000MA,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置充电电流 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_charge_current</span><span class="params">(<span class="keyword">enum</span> charge_current current)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2c_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2c0));</span><br><span class="line">    <span class="type">uint8_t</span> reg_addr = <span class="number">0x02</span>;</span><br><span class="line">    <span class="type">uint8_t</span> reg_val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 根据电流选择寄存器值 */</span></span><br><span class="line">    <span class="keyword">switch</span> (current) &#123;</span><br><span class="line">    <span class="keyword">case</span> CHARGE_CURRENT_100MA:</span><br><span class="line">        reg_val = <span class="number">0x01</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CHARGE_CURRENT_500MA:</span><br><span class="line">        reg_val = <span class="number">0x02</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CHARGE_CURRENT_1000MA:</span><br><span class="line">        reg_val = <span class="number">0x04</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CHARGE_CURRENT_2000MA:</span><br><span class="line">        reg_val = <span class="number">0x08</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写入充电控制器寄存器 */</span></span><br><span class="line">    i2c_write(i2c_dev, &amp;reg_val, <span class="number">1</span>, <span class="number">0x6B</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 启用/禁用充电 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_charging</span><span class="params">(<span class="type">bool</span> enable)</span></span><br><span class="line">&#123;</span><br><span class="line">    gpio_pin_set_dt(&amp;charge_en, enable ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取充电状态 */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_charging</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> gpio_pin_get_dt(&amp;charge_stat) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-USB-电源管理最佳实践"><a href="#7-USB-电源管理最佳实践" class="headerlink" title="7. USB 电源管理最佳实践"></a>7. USB 电源管理最佳实践</h2><ol><li><p>电源状态管理：</p><ul><li>实现完整的电源状态机</li><li>正确处理挂起&#x2F;恢复事件</li><li>使用适当的低功耗模式</li></ul></li><li><p>远程唤醒：</p><ul><li>正确实现远程唤醒功能</li><li>仅在主机允许时使用</li><li>提供唤醒源配置</li></ul></li><li><p>总线供电管理：</p><ul><li>遵循 USB 总线供电规范</li><li>监控电流消耗</li><li>实现动态功率调整</li></ul></li><li><p>电池管理：</p><ul><li>监控电池状态</li><li>根据电池电量调整功耗</li><li>实现智能充电控制</li></ul></li><li><p>USB PD 实现：</p><ul><li>正确协商电源能力</li><li>处理电源角色转换</li><li>支持多种电源配置文件</li></ul></li><li><p>测试验证：</p><ul><li>测试不同电源状态转换</li><li>验证唤醒功能</li><li>测量实际功耗</li></ul></li><li><p>错误处理：</p><ul><li>检测电源故障</li><li>实现安全关断</li><li>提供电源状态诊断</li></ul></li><li><p>兼容性：</p><ul><li>支持不同 USB 主机的电源管理</li><li>遵循 USB 电源规范</li><li>考虑向后兼容性</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>high_speed</title>
      <link href="/2025/03/21/nodic/zephyr/usb/high_speed/"/>
      <url>/2025/03/21/nodic/zephyr/usb/high_speed/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-USB-高速设备指南"><a href="#Zephyr-USB-高速设备指南" class="headerlink" title="Zephyr USB 高速设备指南"></a>Zephyr USB 高速设备指南</h1><h2 id="1-高速设备基础"><a href="#1-高速设备基础" class="headerlink" title="1. 高速设备基础"></a>1. 高速设备基础</h2><h3 id="1-1-高速设备配置-prj-conf"><a href="#1-1-高速设备配置-prj-conf" class="headerlink" title="1.1 高速设备配置 (prj.conf)"></a>1.1 高速设备配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># USB 高速设备支持</span><br><span class="line">CONFIG_USB_DEVICE_STACK=y</span><br><span class="line">CONFIG_USB_DEVICE_HIGH_SPEED=y</span><br><span class="line"></span><br><span class="line"># DMA 支持（用于高速传输）</span><br><span class="line">CONFIG_DMA=y</span><br><span class="line">CONFIG_USB_DMA=y</span><br><span class="line"></span><br><span class="line"># 缓冲区配置</span><br><span class="line">CONFIG_USB_REQUEST_BUFFER_SIZE=512</span><br><span class="line">CONFIG_USB_MAX_NUM_ENDPOINTS=16</span><br><span class="line">CONFIG_USB_DEVICE_BUF_NUM_HE=8</span><br><span class="line">CONFIG_USB_DEVICE_BUF_NUM_LE=8</span><br></pre></td></tr></table></figure><h3 id="1-2-设备描述符"><a href="#1-2-设备描述符" class="headerlink" title="1.2 设备描述符"></a>1.2 设备描述符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_device_descriptor</span> <span class="title">dev_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_device_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_DEVICE,</span><br><span class="line">    .bcdUSB = sys_cpu_to_le16(USB_2_0),</span><br><span class="line">    .bDeviceClass = <span class="number">0</span>,</span><br><span class="line">    .bDeviceSubClass = <span class="number">0</span>,</span><br><span class="line">    .bDeviceProtocol = <span class="number">0</span>,</span><br><span class="line">    .bMaxPacketSize0 = USB_MAX_PACKET_SIZE,</span><br><span class="line">    .idVendor = sys_cpu_to_le16(CONFIG_USB_DEVICE_VID),</span><br><span class="line">    .idProduct = sys_cpu_to_le16(CONFIG_USB_DEVICE_PID),</span><br><span class="line">    .bcdDevice = sys_cpu_to_le16(<span class="number">0x0100</span>),</span><br><span class="line">    .iManufacturer = <span class="number">1</span>,</span><br><span class="line">    .iProduct = <span class="number">2</span>,</span><br><span class="line">    .iSerialNumber = <span class="number">3</span>,</span><br><span class="line">    .bNumConfigurations = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备限定符描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_device_qualifier_descriptor</span> <span class="title">dev_qualifier</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_device_qualifier_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_DEVICE_QUALIFIER,</span><br><span class="line">    .bcdUSB = sys_cpu_to_le16(USB_2_0),</span><br><span class="line">    .bDeviceClass = <span class="number">0</span>,</span><br><span class="line">    .bDeviceSubClass = <span class="number">0</span>,</span><br><span class="line">    .bDeviceProtocol = <span class="number">0</span>,</span><br><span class="line">    .bMaxPacketSize0 = USB_MAX_PACKET_SIZE,</span><br><span class="line">    .bNumConfigurations = <span class="number">1</span>,</span><br><span class="line">    .bReserved = <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-高速端点配置"><a href="#2-高速端点配置" class="headerlink" title="2. 高速端点配置"></a>2. 高速端点配置</h2><h3 id="2-1-高速端点描述符"><a href="#2-1-高速端点描述符" class="headerlink" title="2.1 高速端点描述符"></a>2.1 高速端点描述符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 高速配置描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_config_descriptor</span> <span class="title">hs_cfg_desc</span> =</span> &#123;</span><br><span class="line">    .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_config_descriptor),</span><br><span class="line">    .bDescriptorType = USB_DESC_CONFIGURATION,</span><br><span class="line">    .wTotalLength = <span class="number">0</span>, <span class="comment">/* 运行时计算 */</span></span><br><span class="line">    .bNumInterfaces = <span class="number">1</span>,</span><br><span class="line">    .bConfigurationValue = <span class="number">1</span>,</span><br><span class="line">    .iConfiguration = <span class="number">0</span>,</span><br><span class="line">    .bmAttributes = USB_CONFIG_ATT_ONE | USB_CONFIG_ATT_SELF_POWERED,</span><br><span class="line">    .bMaxPower = <span class="number">50</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 高速端点描述符 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_ep_descriptor</span> <span class="title">hs_ep_desc</span>[] =</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_ep_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_ENDPOINT,</span><br><span class="line">        .bEndpointAddress = <span class="number">0x81</span>,</span><br><span class="line">        .bmAttributes = USB_DC_EP_BULK,</span><br><span class="line">        .wMaxPacketSize = sys_cpu_to_le16(<span class="number">512</span>), <span class="comment">/* 高速批量端点 */</span></span><br><span class="line">        .bInterval = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .bLength = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> usb_ep_descriptor),</span><br><span class="line">        .bDescriptorType = USB_DESC_ENDPOINT,</span><br><span class="line">        .bEndpointAddress = <span class="number">0x01</span>,</span><br><span class="line">        .bmAttributes = USB_DC_EP_BULK,</span><br><span class="line">        .wMaxPacketSize = sys_cpu_to_le16(<span class="number">512</span>),</span><br><span class="line">        .bInterval = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-DMA-配置"><a href="#2-2-DMA-配置" class="headerlink" title="2.2 DMA 配置"></a>2.2 DMA 配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;</span><br><span class="line">    .channel_direction = MEMORY_TO_PERIPHERAL,</span><br><span class="line">    .source_data_size = <span class="number">4</span>,</span><br><span class="line">    .dest_data_size = <span class="number">4</span>,</span><br><span class="line">    .source_burst_length = <span class="number">4</span>,</span><br><span class="line">    .dest_burst_length = <span class="number">4</span>,</span><br><span class="line">    .dma_callback = <span class="literal">NULL</span>,</span><br><span class="line">    .block_count = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 传输块配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block</span> =</span> &#123;</span><br><span class="line">    .source_gather_en = <span class="number">0</span>,</span><br><span class="line">    .dest_scatter_en = <span class="number">0</span>,</span><br><span class="line">    .source_addr_adj = DMA_ADDR_ADJ_INCREMENT,</span><br><span class="line">    .dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-高速传输实现"><a href="#3-高速传输实现" class="headerlink" title="3. 高速传输实现"></a>3. 高速传输实现</h2><h3 id="3-1-批量传输"><a href="#3-1-批量传输" class="headerlink" title="3.1 批量传输"></a>3.1 批量传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BULK_EP_IN   0x81</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BULK_EP_OUT  0x01</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PACKET   512</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> bulk_buf[MAX_PACKET];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 批量传输回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">bulk_out_cb</span><span class="params">(<span class="type">uint8_t</span> ep, <span class="keyword">enum</span> usb_dc_ep_cb_status_code status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (status != USB_DC_EP_DATA_OUT) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取数据 */</span></span><br><span class="line">    <span class="type">int</span> bytes_read = usb_read(ep, bulk_buf, <span class="keyword">sizeof</span>(bulk_buf));</span><br><span class="line">    <span class="keyword">if</span> (bytes_read &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理数据 */</span></span><br><span class="line">    process_bulk_data(bulk_buf, bytes_read);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备接收下一个包 */</span></span><br><span class="line">    usb_dc_ep_read_continue(ep);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化批量传输 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_bulk_transfer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置端点 */</span></span><br><span class="line">    usb_dc_ep_configure(BULK_EP_IN, USB_DC_EP_BULK, MAX_PACKET);</span><br><span class="line">    usb_dc_ep_configure(BULK_EP_OUT, USB_DC_EP_BULK, MAX_PACKET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能端点 */</span></span><br><span class="line">    usb_dc_ep_enable(BULK_EP_IN);</span><br><span class="line">    usb_dc_ep_enable(BULK_EP_OUT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置回调 */</span></span><br><span class="line">    usb_dc_ep_callback_set(BULK_EP_OUT, bulk_out_cb);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动接收 */</span></span><br><span class="line">    usb_dc_ep_read_continue(BULK_EP_OUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送批量数据 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">send_bulk_data</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> sent = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (sent &lt; len) &#123;</span><br><span class="line">        <span class="type">size_t</span> chunk = MIN(len - sent, MAX_PACKET);</span><br><span class="line">        <span class="type">int</span> ret = usb_write(BULK_EP_IN, data + sent, chunk);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        sent += chunk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-DMA-传输"><a href="#3-2-DMA-传输" class="headerlink" title="3.2 DMA 传输"></a>3.2 DMA 传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 传输完成回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dma_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dma_dev, <span class="type">void</span> *user_data,</span></span><br><span class="line"><span class="params">                        <span class="type">uint32_t</span> channel, <span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 通知传输完成 */</span></span><br><span class="line">    k_sem_give((<span class="keyword">struct</span> k_sem *)user_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 DMA 发送数据 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">send_data_with_dma</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">dma_sem</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    k_sem_init(&amp;dma_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA */</span></span><br><span class="line">    dma_cfg.dma_callback = dma_callback;</span><br><span class="line">    dma_cfg.user_data = &amp;dma_sem;</span><br><span class="line">    dma_block.block_size = len;</span><br><span class="line">    dma_block.source_address = (<span class="type">uint32_t</span>)data;</span><br><span class="line">    dma_block.dest_address = USB_EP_FIFO_ADDR(BULK_EP_IN);</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待传输完成 */</span></span><br><span class="line">    ret = k_sem_take(&amp;dma_sem, K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        dma_stop(dma_dev, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-高速传输优化"><a href="#4-高速传输优化" class="headerlink" title="4. 高速传输优化"></a>4. 高速传输优化</h2><h3 id="4-1-缓冲区管理"><a href="#4-1-缓冲区管理" class="headerlink" title="4.1 缓冲区管理"></a>4.1 缓冲区管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 缓冲区配置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_BUFFERS 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 512</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 缓冲区池 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> buffer_pool[NUM_BUFFERS][BUFFER_SIZE] __aligned(<span class="number">32</span>);</span><br><span class="line"><span class="type">static</span> <span class="title function_">ATOMIC_DEFINE</span><span class="params">(buffer_map, NUM_BUFFERS)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取缓冲区 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> *<span class="title function_">get_buffer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_BUFFERS; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!atomic_test_and_set_bit(buffer_map, i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> buffer_pool[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放缓冲区 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">release_buffer</span><span class="params">(<span class="type">uint8_t</span> *buffer)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> index = (buffer - (<span class="type">uint8_t</span> *)buffer_pool) / BUFFER_SIZE;</span><br><span class="line">    atomic_clear_bit(buffer_map, index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 缓冲区管理示例 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">buffer_management_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *buf = get_buffer();</span><br><span class="line">    <span class="keyword">if</span> (buf != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* 使用缓冲区 */</span></span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">        release_buffer(buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-性能优化"><a href="#4-2-性能优化" class="headerlink" title="4.2 性能优化"></a>4.2 性能优化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/usb/usb_device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 双缓冲传输 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">transfer_buffer</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> *buffer;</span><br><span class="line">    <span class="type">size_t</span> length;</span><br><span class="line">    <span class="type">bool</span> in_use;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">transfer_buffer</span> <span class="title">tx_buffers</span>[2];</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> active_buffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化双缓冲 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_double_buffering</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        tx_buffers[i].buffer = get_buffer();</span><br><span class="line">        tx_buffers[i].length = <span class="number">0</span>;</span><br><span class="line">        tx_buffers[i].in_use = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    active_buffer = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 双缓冲传输 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">send_data_double_buffered</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">transfer_buffer</span> *<span class="title">curr</span> =</span> &amp;tx_buffers[active_buffer];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待当前缓冲区可用 */</span></span><br><span class="line">    <span class="keyword">while</span> (curr-&gt;in_use) &#123;</span><br><span class="line">        k_yield();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备数据 */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(curr-&gt;buffer, data, len);</span><br><span class="line">    curr-&gt;length = len;</span><br><span class="line">    curr-&gt;in_use = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    ret = usb_write(BULK_EP_IN, curr-&gt;buffer, curr-&gt;length);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        curr-&gt;in_use = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 切换缓冲区 */</span></span><br><span class="line">    active_buffer = (active_buffer + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-高速设备测试"><a href="#5-高速设备测试" class="headerlink" title="5. 高速设备测试"></a>5. 高速设备测试</h2><h3 id="5-1-传输速度测试"><a href="#5-1-传输速度测试" class="headerlink" title="5.1 传输速度测试"></a>5.1 传输速度测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/timing/timing.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 速度测试参数 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_SIZE (1024 * 1024)  <span class="comment">/* 1MB */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNK_SIZE 512</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试数据传输速度 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_transfer_speed</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *test_data = k_malloc(TEST_SIZE);</span><br><span class="line">    <span class="type">uint32_t</span> start_time, end_time;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (test_data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备测试数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; TEST_SIZE; i++) &#123;</span><br><span class="line">        test_data[i] = i &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开始计时 */</span></span><br><span class="line">    start_time = k_uptime_get_32();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> offset = <span class="number">0</span>; offset &lt; TEST_SIZE; offset += CHUNK_SIZE) &#123;</span><br><span class="line">        <span class="type">size_t</span> chunk = MIN(CHUNK_SIZE, TEST_SIZE - offset);</span><br><span class="line">        ret = send_bulk_data(test_data + offset, chunk);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 结束计时 */</span></span><br><span class="line">    end_time = k_uptime_get_32();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算传输速度 */</span></span><br><span class="line">    <span class="type">uint32_t</span> duration_ms = end_time - start_time;</span><br><span class="line">    <span class="type">float</span> speed_mbps = (<span class="type">float</span>)TEST_SIZE / duration_ms * <span class="number">1000</span> / (<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Transfer speed: %.2f MB/s\n&quot;</span>, speed_mbps);</span><br><span class="line"></span><br><span class="line">    k_free(test_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-稳定性测试"><a href="#5-2-稳定性测试" class="headerlink" title="5.2 稳定性测试"></a>5.2 稳定性测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/random/rand32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 稳定性测试参数 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_DURATION_SEC 3600  <span class="comment">/* 1小时 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PACKET_SIZE 512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN_PACKET_SIZE 64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 随机数据传输测试 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_stability</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *test_data = k_malloc(MAX_PACKET_SIZE);</span><br><span class="line">    <span class="type">uint32_t</span> start_time = k_uptime_get_32();</span><br><span class="line">    <span class="type">uint32_t</span> packets_sent = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint32_t</span> errors = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (test_data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (k_uptime_get_32() - start_time &lt; (TEST_DURATION_SEC * <span class="number">1000</span>)) &#123;</span><br><span class="line">        <span class="comment">/* 生成随机数据大小 */</span></span><br><span class="line">        <span class="type">size_t</span> size = (sys_rand32_get() %</span><br><span class="line">                      (MAX_PACKET_SIZE - MIN_PACKET_SIZE + <span class="number">1</span>)) + MIN_PACKET_SIZE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 生成随机数据 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            test_data[i] = sys_rand32_get() &amp; <span class="number">0xFF</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 发送数据 */</span></span><br><span class="line">        <span class="type">int</span> ret = send_bulk_data(test_data, size);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            errors++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        packets_sent++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 定期打印状态 */</span></span><br><span class="line">        <span class="keyword">if</span> (packets_sent % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Packets sent: %u, Errors: %u\n&quot;</span>,</span><br><span class="line">                   packets_sent, errors);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Stability test completed:\n&quot;</span>);</span><br><span class="line">    printk(<span class="string">&quot;Total packets: %u\n&quot;</span>, packets_sent);</span><br><span class="line">    printk(<span class="string">&quot;Total errors: %u\n&quot;</span>, errors);</span><br><span class="line">    printk(<span class="string">&quot;Error rate: %.2f%%\n&quot;</span>,</span><br><span class="line">           (<span class="type">float</span>)errors / packets_sent * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    k_free(test_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-高速设备最佳实践"><a href="#6-高速设备最佳实践" class="headerlink" title="6. 高速设备最佳实践"></a>6. 高速设备最佳实践</h2><ol><li><p>缓冲区管理：</p><ul><li>使用对齐的缓冲区以优化 DMA 传输</li><li>实现缓冲区池以避免频繁分配</li><li>使用双缓冲或环形缓冲区提高吞吐量</li></ul></li><li><p>DMA 使用：</p><ul><li>对大数据传输使用 DMA</li><li>正确配置 DMA 通道和优先级</li><li>实现适当的错误处理和超时机制</li></ul></li><li><p>端点配置：</p><ul><li>使用最大包大小（512字节）</li><li>为批量传输启用双缓冲</li><li>适当配置端点类型和属性</li></ul></li><li><p>性能优化：</p><ul><li>最小化中断处理时间</li><li>使用零拷贝技术</li><li>实现有效的数据包分段和重组</li></ul></li><li><p>错误处理：</p><ul><li>实现完善的错误恢复机制</li><li>监控传输错误和重试</li><li>提供详细的错误诊断信息</li></ul></li><li><p>测试验证：</p><ul><li>进行长期稳定性测试</li><li>测试不同数据大小和传输模式</li><li>验证在各种主机系统上的性能</li></ul></li><li><p>功耗管理：</p><ul><li>在空闲时进入低功耗状态</li><li>优化 DMA 传输以减少功耗</li><li>实现适当的唤醒机制</li></ul></li><li><p>调试支持：</p><ul><li>添加性能计数器</li><li>实现详细的日志记录</li><li>提供诊断接口</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ide</title>
      <link href="/2025/03/21/nodic/zephyr/toolchain/ide/"/>
      <url>/2025/03/21/nodic/zephyr/toolchain/ide/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-IDE-开发环境"><a href="#Zephyr-IDE-开发环境" class="headerlink" title="Zephyr IDE 开发环境"></a>Zephyr IDE 开发环境</h1><p>本文档详细介绍了 Zephyr RTOS 开发中常用的集成开发环境（IDE）配置，包括 Visual Studio Code、Eclipse、SEGGER Embedded Studio 等工具的设置和使用方法。</p><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>Visual Studio Code (VS Code) 是一个轻量级但功能强大的代码编辑器，通过适当的扩展可以提供出色的 Zephyr 开发体验。</p><h3 id="必要扩展"><a href="#必要扩展" class="headerlink" title="必要扩展"></a>必要扩展</h3><ol><li><p><strong>C&#x2F;C++</strong></p><ul><li>提供 C&#x2F;C++ 语言支持</li><li>智能代码补全</li><li>代码导航</li><li>调试支持</li></ul></li><li><p><strong>Cortex-Debug</strong></p><ul><li>ARM Cortex-M 处理器调试支持</li><li>RTOS 感知调试</li><li>外设寄存器视图</li></ul></li><li><p><strong>CMake Tools</strong></p><ul><li>CMake 项目支持</li><li>构建系统集成</li><li>配置管理</li></ul></li><li><p><strong>DeviceTree</strong></p><ul><li>设备树语法高亮</li><li>代码补全</li><li>语法检查</li></ul></li></ol><h3 id="VS-Code-配置"><a href="#VS-Code-配置" class="headerlink" title="VS Code 配置"></a>VS Code 配置</h3><ol><li><strong>工作区设置</strong></li></ol><p>创建 <code>.vscode/settings.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.default.includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;env:ZEPHYR_BASE&#125;/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;env:ZEPHYR_BASE&#125;/kernel/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;env:ZEPHYR_BASE&#125;/arch/$&#123;env:ARCH&#125;/include&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.default.defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;CONFIG_MULTITHREADING=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC=32768&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;CONFIG_KERNEL=1&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cmake.configureOnOpen&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cmake.configureArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-DBOARD=nrf52840dk_nrf52840&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-DCMAKE_EXPORT_COMPILE_COMMANDS=ON&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cortex-debug.armToolchainPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;env:ZEPHYR_SDK_INSTALL_DIR&#125;/arm-zephyr-eabi/bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cortex-debug.openocdPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;env:ZEPHYR_SDK_INSTALL_DIR&#125;/sysroots/x86_64-pokysdk-linux/usr/bin/openocd&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>启动配置</strong></li></ol><p>创建 <code>.vscode/launch.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Zephyr Debug (OpenOCD)&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cortex-debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;servertype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openocd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;executable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/zephyr/zephyr.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;configFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;board/nrf52840dk_nrf52840.cfg&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;svdFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/debug/nrf52840.svd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;runToEntryPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;west build&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Zephyr Debug (J-Link)&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cortex-debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;servertype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jlink&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;executable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/zephyr/zephyr.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;device&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nRF52840_xxAA&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;interface&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;runToEntryPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;west build&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>任务配置</strong></li></ol><p>创建 <code>.vscode/tasks.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;west build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;west build -b nrf52840dk_nrf52840&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;west flash&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;west flash&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;west clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;west build -t clean&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>C&#x2F;C++ 配置</strong></li></ol><p>创建 <code>.vscode/c_cpp_properties.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Zephyr&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;env:ZEPHYR_BASE&#125;/include/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;env:ZEPHYR_BASE&#125;/kernel/include/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;env:ZEPHYR_BASE&#125;/arch/$&#123;env:ARCH&#125;/include/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;CONFIG_MULTITHREADING=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC=32768&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CONFIG_KERNEL=1&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;env:ZEPHYR_SDK_INSTALL_DIR&#125;/arm-zephyr-eabi/bin/arm-zephyr-eabi-gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc-arm&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="使用-VS-Code"><a href="#使用-VS-Code" class="headerlink" title="使用 VS Code"></a>使用 VS Code</h3><ol><li><p><strong>构建项目</strong></p><ul><li>使用命令面板 (Ctrl+Shift+P)</li><li>选择 “Tasks: Run Build Task”</li><li>或使用快捷键 Ctrl+Shift+B</li></ul></li><li><p><strong>调试</strong></p><ul><li>在代码中设置断点</li><li>按 F5 开始调试</li><li>使用调试工具栏控制执行</li></ul></li><li><p><strong>代码导航</strong></p><ul><li>F12: 转到定义</li><li>Alt+F12: 查看定义</li><li>Shift+F12: 查找所有引用</li></ul></li><li><p><strong>智能编辑</strong></p><ul><li>代码补全 (Ctrl+Space)</li><li>快速修复 (Ctrl+.)</li><li>重命名符号 (F2)</li></ul></li></ol><h2 id="Eclipse-IDE"><a href="#Eclipse-IDE" class="headerlink" title="Eclipse IDE"></a>Eclipse IDE</h2><p>Eclipse IDE 为 Zephyr 开发提供了强大的支持，特别是通过 Eclipse CDT 插件。</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><ol><li><p><strong>下载 Eclipse CDT</strong></p><ul><li>从 <a href="https://www.eclipse.org/downloads/">Eclipse 下载页面</a> 获取</li><li>选择 “Eclipse IDE for C&#x2F;C++ Developers”</li></ul></li><li><p><strong>安装必要插件</strong></p><ul><li>GNU MCU Eclipse</li><li>Eclipse Embedded CDT</li><li>CMake Editor</li></ul></li><li><p><strong>配置 Zephyr 工具链</strong></p><ul><li>设置工具链路径</li><li>配置构建环境</li><li>设置调试器选项</li></ul></li></ol><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><ol><li><p><strong>创建 Zephyr 项目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File -&gt; New -&gt; C/C++ Project</span><br><span class="line">选择 &quot;Zephyr Application&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>配置构建设置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Project Properties -&gt; C/C++ Build</span><br><span class="line">设置构建命令：west build</span><br></pre></td></tr></table></figure></li><li><p><strong>配置调试设置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Run -&gt; Debug Configurations</span><br><span class="line">选择 &quot;GDB OpenOCD Debugging&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用-Eclipse"><a href="#使用-Eclipse" class="headerlink" title="使用 Eclipse"></a>使用 Eclipse</h3><ol><li><p><strong>编译项目</strong></p><ul><li>Project -&gt; Build Project</li><li>或使用快捷键 Ctrl+B</li></ul></li><li><p><strong>调试</strong></p><ul><li>设置断点</li><li>Run -&gt; Debug</li><li>使用调试视图控制执行</li></ul></li><li><p><strong>代码分析</strong></p><ul><li>语法检查</li><li>代码覆盖率分析</li><li>内存分析</li></ul></li></ol><h2 id="SEGGER-Embedded-Studio"><a href="#SEGGER-Embedded-Studio" class="headerlink" title="SEGGER Embedded Studio"></a>SEGGER Embedded Studio</h2><p>SEGGER Embedded Studio (SES) 是一个专业的嵌入式开发 IDE，特别适合 Nordic nRF5x 系列设备的开发。</p><h3 id="安装设置"><a href="#安装设置" class="headerlink" title="安装设置"></a>安装设置</h3><ol><li><p><strong>下载安装</strong></p><ul><li>从 <a href="https://www.segger.com/products/development-tools/embedded-studio/">SEGGER 网站</a> 下载</li><li>获取免费许可证（Nordic SDK 用户）</li></ul></li><li><p><strong>配置 Zephyr 支持</strong></p><ul><li>安装 CMSIS 支持包</li><li>配置工具链路径</li><li>设置项目模板</li></ul></li></ol><h3 id="项目配置-1"><a href="#项目配置-1" class="headerlink" title="项目配置"></a>项目配置</h3><ol><li><p><strong>创建项目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File -&gt; New -&gt; Project</span><br><span class="line">选择 &quot;Zephyr Application&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>配置构建选项</strong></p><ul><li>设置目标处理器</li><li>配置编译器选项</li><li>设置链接器脚本</li></ul></li><li><p><strong>调试配置</strong></p><ul><li>选择调试器（J-Link）</li><li>配置目标设备</li><li>设置启动选项</li></ul></li></ol><h3 id="使用-SES"><a href="#使用-SES" class="headerlink" title="使用 SES"></a>使用 SES</h3><ol><li><p><strong>编译</strong></p><ul><li>Build -&gt; Build Solution</li><li>或使用快捷键 F7</li></ul></li><li><p><strong>调试</strong></p><ul><li>设置断点</li><li>Debug -&gt; Start Debugging</li><li>使用调试工具栏</li></ul></li><li><p><strong>代码分析</strong></p><ul><li>内存使用分析</li><li>性能分析器</li><li>堆栈使用分析</li></ul></li></ol><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><p>虽然 IDE 提供了图形界面，但命令行工具仍然是重要的开发方式。</p><h3 id="基本工具"><a href="#基本工具" class="headerlink" title="基本工具"></a>基本工具</h3><ol><li><p><strong>文本编辑器</strong></p><ul><li>Vim</li><li>Emacs</li><li>Nano</li></ul></li><li><p><strong>构建工具</strong></p><ul><li>West</li><li>CMake</li><li>Ninja</li></ul></li><li><p><strong>调试工具</strong></p><ul><li>GDB</li><li>OpenOCD</li><li>J-Link Commander</li></ul></li></ol><h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><ol><li><strong>Vim 配置</strong></li></ol><p><code>.vimrc</code> 配置：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; 语法高亮</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 显示行号</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 自动缩进</span></span><br><span class="line"><span class="keyword">set</span> autoindent</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; C 语言缩进</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">cindent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 使用空格代替制表符</span></span><br><span class="line"><span class="keyword">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 制表符宽度</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 显示匹配的括号</span></span><br><span class="line"><span class="keyword">set</span> showmatch</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 搜索高亮</span></span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 实时搜索</span></span><br><span class="line"><span class="keyword">set</span> incsearch</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 忽略大小写</span></span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 智能大小写匹配</span></span><br><span class="line"><span class="keyword">set</span> smartcase</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 显示状态栏</span></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; 使用 ctags</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">tags</span>=./<span class="keyword">tags</span>,<span class="keyword">tags</span>;$HOME</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>GDB 配置</strong></li></ol><p><code>.gdbinit</code> 配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 打印漂亮的结构体</span><br><span class="line">set print pretty on</span><br><span class="line"></span><br><span class="line"># 显示数组索引</span><br><span class="line">set print array-indexes on</span><br><span class="line"></span><br><span class="line"># 禁用分页</span><br><span class="line">set pagination off</span><br><span class="line"></span><br><span class="line"># 保存历史命令</span><br><span class="line">set history save on</span><br><span class="line">set history filename ~/.gdb_history</span><br><span class="line">set history size 10000</span><br><span class="line"></span><br><span class="line"># 当程序崩溃时不询问是否退出</span><br><span class="line">set confirm off</span><br></pre></td></tr></table></figure><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li><p><strong>开发循环</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑代码</span></span><br><span class="line">vim src/main.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建项目</span></span><br><span class="line">west build -b nrf52840dk_nrf52840</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录程序</span></span><br><span class="line">west flash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试</span></span><br><span class="line">west debug</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 tmux</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新会话</span></span><br><span class="line">tmux new -s zephyr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割窗口</span></span><br><span class="line"><span class="comment"># 编辑器 | 构建输出</span></span><br><span class="line"><span class="comment"># ------+------------</span></span><br><span class="line"><span class="comment"># 调试器 | 串口监视</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>IDE 选择</strong></p><ul><li>根据项目需求选择合适的 IDE</li><li>考虑团队经验和偏好</li><li>评估工具链集成度</li></ul></li><li><p><strong>工作流程优化</strong></p><ul><li>使用版本控制</li><li>自动化构建和测试</li><li>配置文件版本管理</li></ul></li><li><p><strong>团队协作</strong></p><ul><li>统一开发环境</li><li>共享配置文件</li><li>制定编码规范</li></ul></li><li><p><strong>性能考虑</strong></p><ul><li>优化 IDE 设置</li><li>合理使用插件</li><li>管理工作区大小</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-IDE-性能问题"><a href="#1-IDE-性能问题" class="headerlink" title="1. IDE 性能问题"></a>1. IDE 性能问题</h3><p><strong>问题</strong>：IDE 运行缓慢或占用资源过多</p><p><strong>解决方案</strong>：</p><ul><li>禁用不必要的插件</li><li>限制工作区大小</li><li>增加 IDE 内存限制</li><li>使用 exclude 过滤不需要索引的文件</li></ul><h3 id="2-智能提示不准确"><a href="#2-智能提示不准确" class="headerlink" title="2. 智能提示不准确"></a>2. 智能提示不准确</h3><p><strong>问题</strong>：代码补全或导航功能不正确</p><p><strong>解决方案</strong>：</p><ul><li>更新 compile_commands.json</li><li>检查包含路径配置</li><li>重新生成项目索引</li><li>验证工具链设置</li></ul><h3 id="3-调试器连接问题"><a href="#3-调试器连接问题" class="headerlink" title="3. 调试器连接问题"></a>3. 调试器连接问题</h3><p><strong>问题</strong>：无法启动调试会话</p><p><strong>解决方案</strong>：</p><ul><li>检查硬件连接</li><li>验证调试器配置</li><li>更新驱动程序</li><li>检查权限设置</li></ul><h3 id="4-构建集成问题"><a href="#4-构建集成问题" class="headerlink" title="4. 构建集成问题"></a>4. 构建集成问题</h3><p><strong>问题</strong>：IDE 构建与命令行结果不一致</p><p><strong>解决方案</strong>：</p><ul><li>统一环境变量</li><li>检查构建配置</li><li>清理构建缓存</li><li>验证工具链路径</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>选择合适的开发环境对于提高开发效率至关重要。无论是使用现代 IDE 还是传统的命令行工具，了解其配置和使用方法都能帮助开发者更好地进行 Zephyr 开发。通过合理配置和使用这些工具，可以显著提高开发效率和代码质量。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 贡献指南</title>
      <link href="/2025/03/21/nodic/zephyr/development/contributing/"/>
      <url>/2025/03/21/nodic/zephyr/development/contributing/</url>
      
        <content type="html"><![CDATA[<h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 02:30</li></ul><h1 id="Zephyr-贡献指南"><a href="#Zephyr-贡献指南" class="headerlink" title="Zephyr 贡献指南"></a>Zephyr 贡献指南</h1><p>本文档提供了向 Zephyr 项目贡献代码的详细指南，包括代码风格、提交流程、文档编写和社区参与等方面的内容。遵循这些指南可以帮助您的贡献更容易被社区接受。</p><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h3><p>Zephyr 项目遵循严格的编码规范，主要基于 Linux 内核的编码风格。</p><ol><li><p><strong>基本格式</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 多行注释使用这种格式</span></span><br><span class="line"><span class="comment"> * 包含详细的描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行注释使用这种格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进使用 8 个空格（或 tab）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">function_name</span><span class="params">(<span class="type">int</span> param1, <span class="type">int</span> param2)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">                do_something();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数和变量命名使用小写字母和下划线</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> my_local_variable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏和常量使用大写字母</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_CONSTANT 42</span></span><br></pre></td></tr></table></figure></li><li><p><strong>函数定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 函数简短描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 函数详细描述，包括参数和返回值的说明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param param1 参数1的说明</span></span><br><span class="line"><span class="comment"> * @param param2 参数2的说明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return 返回值说明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_function</span><span class="params">(<span class="type">int</span> param1, <span class="type">int</span> param2)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 函数实现 */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>头文件组织</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ZEPHYR_INCLUDE_MY_HEADER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ZEPHYR_INCLUDE_MY_HEADER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/printk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 公共 API 声明 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* ZEPHYR_INCLUDE_MY_HEADER_H_ */</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="代码检查工具"><a href="#代码检查工具" class="headerlink" title="代码检查工具"></a>代码检查工具</h3><p>使用 Zephyr 提供的代码检查工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行代码风格检查</span></span><br><span class="line">./scripts/checkpatch.pl --git &lt;commit&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行静态分析</span></span><br><span class="line">west build -t clang-tidy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 Coverity 扫描</span></span><br><span class="line">west build -t coverity</span><br></pre></td></tr></table></figure><h2 id="提交流程"><a href="#提交流程" class="headerlink" title="提交流程"></a>提交流程</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p><strong>设置开发环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zephyrproject-rtos/zephyr.git</span><br><span class="line"><span class="built_in">cd</span> zephyr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置远程仓库</span></span><br><span class="line">git remote add upstream https://github.com/zephyrproject-rtos/zephyr.git</span><br><span class="line">git remote add origin &lt;your-fork-url&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新主分支</span></span><br><span class="line">git checkout main</span><br><span class="line">git pull upstream main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建特性分支</span></span><br><span class="line">git checkout -b feature/my-feature</span><br></pre></td></tr></table></figure></li></ol><h3 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h3><ol><li><p><strong>提交消息格式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">subsys: area: brief description</span><br><span class="line"></span><br><span class="line">Detailed description of the changes, explaining why the</span><br><span class="line">changes are needed and how they address the issue.</span><br><span class="line"></span><br><span class="line">The description should be wrapped at 72 characters and</span><br><span class="line">written in complete sentences.</span><br><span class="line"></span><br><span class="line">Fixes #1234</span><br><span class="line"></span><br><span class="line">Signed-off-by: Your Name &lt;your.email@example.com&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>提交分割</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改分割成逻辑独立的提交</span></span><br><span class="line">git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改最后一次提交</span></span><br><span class="line">git commit --amend</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新组织提交</span></span><br><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure></li></ol><h3 id="提交检查"><a href="#提交检查" class="headerlink" title="提交检查"></a>提交检查</h3><ol><li><p><strong>本地测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行相关测试</span></span><br><span class="line">west twister -T tests/my_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查代码风格</span></span><br><span class="line">./scripts/checkpatch.pl --git HEAD</span><br></pre></td></tr></table></figure></li><li><p><strong>创建拉取请求</strong></p><ul><li>确保分支是最新的</li><li>提供清晰的描述</li><li>链接相关问题</li><li>添加测试用例</li></ul></li></ol><h2 id="文档编写"><a href="#文档编写" class="headerlink" title="文档编写"></a>文档编写</h2><h3 id="文档格式"><a href="#文档格式" class="headerlink" title="文档格式"></a>文档格式</h3><p>Zephyr 使用 reStructuredText (RST) 格式编写文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Title</span><br><span class="line">#####</span><br><span class="line"></span><br><span class="line">Section</span><br><span class="line">*******</span><br><span class="line"></span><br><span class="line">Subsection</span><br><span class="line">==========</span><br><span class="line"></span><br><span class="line">Normal text with ``inline code`` and **bold text**.</span><br><span class="line"></span><br><span class="line">Code block::</span><br><span class="line"></span><br><span class="line">    #include &lt;zephyr/kernel.h&gt;</span><br><span class="line">    </span><br><span class="line">    void main(void)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(&quot;Hello World\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Lists:</span><br><span class="line">- Item 1</span><br><span class="line">- Item 2</span><br><span class="line">  - Sub-item A</span><br><span class="line">  - Sub-item B</span><br><span class="line"></span><br><span class="line">Links:</span><br><span class="line">- `External link &lt;https://docs.zephyrproject.org&gt;`_</span><br><span class="line">- :ref:`Internal reference &lt;label-name&gt;`</span><br></pre></td></tr></table></figure><h3 id="API-文档"><a href="#API-文档" class="headerlink" title="API 文档"></a>API 文档</h3><p>使用 Doxygen 格式编写 API 文档：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @defgroup my_api My API</span></span><br><span class="line"><span class="comment"> * @&#123;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Brief description of the function</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Detailed description of the function, including</span></span><br><span class="line"><span class="comment"> * any important notes or warnings.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param param1 Description of param1</span></span><br><span class="line"><span class="comment"> * @param param2 Description of param2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return Description of return value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @retval 0 Success</span></span><br><span class="line"><span class="comment"> * @retval -EINVAL Invalid parameter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_function</span><span class="params">(<span class="type">int</span> param1, <span class="type">int</span> param2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** @&#125; */</span></span><br></pre></td></tr></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>提供完整的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2023 Your Name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file</span></span><br><span class="line"><span class="comment"> * @brief Example demonstrating the usage of My API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_api.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/* Initialize variables */</span></span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Call the API */</span></span><br><span class="line">        result = my_function(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Check the result */</span></span><br><span class="line">        <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                printk(<span class="string">&quot;Error: %d\n&quot;</span>, result);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        printk(<span class="string">&quot;Success!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="社区参与"><a href="#社区参与" class="headerlink" title="社区参与"></a>社区参与</h2><h3 id="邮件列表"><a href="#邮件列表" class="headerlink" title="邮件列表"></a>邮件列表</h3><ol><li><p><strong>订阅邮件列表</strong></p><ul><li><a href="mailto:&#100;&#101;&#118;&#101;&#x6c;&#x40;&#x6c;&#105;&#x73;&#x74;&#x73;&#46;&#122;&#101;&#112;&#104;&#121;&#114;&#112;&#114;&#x6f;&#106;&#101;&#99;&#x74;&#x2e;&#x6f;&#114;&#103;">&#100;&#101;&#118;&#101;&#x6c;&#x40;&#x6c;&#105;&#x73;&#x74;&#x73;&#46;&#122;&#101;&#112;&#104;&#121;&#114;&#112;&#114;&#x6f;&#106;&#101;&#99;&#x74;&#x2e;&#x6f;&#114;&#103;</a>（开发讨论）</li><li><a href="mailto:&#117;&#x73;&#101;&#114;&#115;&#64;&#x6c;&#x69;&#x73;&#x74;&#x73;&#x2e;&#122;&#x65;&#x70;&#x68;&#x79;&#114;&#x70;&#114;&#111;&#x6a;&#101;&#x63;&#x74;&#46;&#x6f;&#x72;&#x67;">&#117;&#x73;&#101;&#114;&#115;&#64;&#x6c;&#x69;&#x73;&#x74;&#x73;&#x2e;&#122;&#x65;&#x70;&#x68;&#x79;&#114;&#x70;&#114;&#111;&#x6a;&#101;&#x63;&#x74;&#46;&#x6f;&#x72;&#x67;</a>（用户支持）</li></ul></li><li><p><strong>邮件礼仪</strong></p><ul><li>使用清晰的主题</li><li>保持专业和友好</li><li>使用纯文本格式</li><li>适当引用之前的消息</li></ul></li></ol><h3 id="Discord-频道"><a href="#Discord-频道" class="headerlink" title="Discord 频道"></a>Discord 频道</h3><ol><li><p><strong>加入 Discord</strong></p><ul><li>访问 <a href="https://chat.zephyrproject.org/">https://chat.zephyrproject.org</a></li><li>选择适当的频道参与讨论</li></ul></li><li><p><strong>互动指南</strong></p><ul><li>遵循频道主题</li><li>使用代码块分享代码</li><li>提供足够的上下文信息</li><li>耐心等待回复</li></ul></li></ol><h3 id="问题追踪"><a href="#问题追踪" class="headerlink" title="问题追踪"></a>问题追踪</h3><ol><li><p><strong>报告问题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### 问题描述</span><br><span class="line">简明扼要地描述问题</span><br><span class="line"></span><br><span class="line">### 复现步骤</span><br><span class="line">1. 第一步</span><br><span class="line">2. 第二步</span><br><span class="line">3. 问题出现</span><br><span class="line"></span><br><span class="line">### 期望行为</span><br><span class="line">描述期望看到的行为</span><br><span class="line"></span><br><span class="line">### 实际行为</span><br><span class="line">描述实际看到的行为</span><br><span class="line"></span><br><span class="line">### 环境信息</span><br><span class="line">- Zephyr 版本：</span><br><span class="line">- 硬件平台：</span><br><span class="line">- 工具链版本：</span><br></pre></td></tr></table></figure></li><li><p><strong>处理问题</strong></p><ul><li>及时响应反馈</li><li>提供必要的信息</li><li>测试和验证修复</li><li>更新文档</li></ul></li></ol><h2 id="贡献流程"><a href="#贡献流程" class="headerlink" title="贡献流程"></a>贡献流程</h2><h3 id="1-选择任务"><a href="#1-选择任务" class="headerlink" title="1. 选择任务"></a>1. 选择任务</h3><ol><li><p><strong>寻找合适的任务</strong></p><ul><li>检查 issue 标签</li><li>关注 “good first issue”</li><li>考虑自己的专长</li></ul></li><li><p><strong>任务认领</strong></p><ul><li>在 issue 中评论表明意图</li><li>等待维护者确认</li><li>讨论实现方案</li></ul></li></ol><h3 id="2-开发"><a href="#2-开发" class="headerlink" title="2. 开发"></a>2. 开发</h3><ol><li><p><strong>代码开发</strong></p><ul><li>遵循编码规范</li><li>添加测试用例</li><li>更新文档</li></ul></li><li><p><strong>本地测试</strong></p><ul><li>运行单元测试</li><li>检查代码风格</li><li>验证功能</li></ul></li></ol><h3 id="3-提交"><a href="#3-提交" class="headerlink" title="3. 提交"></a>3. 提交</h3><ol><li><p><strong>准备提交</strong></p><ul><li>整理提交历史</li><li>编写提交信息</li><li>签署提交</li></ul></li><li><p><strong>创建 PR</strong></p><ul><li>提供完整描述</li><li>链接相关 issue</li><li>等待 CI 检查</li></ul></li></ol><h3 id="4-评审"><a href="#4-评审" class="headerlink" title="4. 评审"></a>4. 评审</h3><ol><li><p><strong>响应反馈</strong></p><ul><li>及时处理评审意见</li><li>更新代码</li><li>保持讨论积极</li></ul></li><li><p><strong>最终确认</strong></p><ul><li>确保所有检查通过</li><li>获得必要的批准</li><li>等待合并</li></ul></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>代码质量</strong></p><ul><li>编写清晰可维护的代码</li><li>添加适当的注释</li><li>保持代码简洁</li></ul></li><li><p><strong>测试覆盖</strong></p><ul><li>为新功能添加测试</li><li>包括边界条件测试</li><li>验证错误处理</li></ul></li><li><p><strong>文档更新</strong></p><ul><li>保持文档同步</li><li>提供使用示例</li><li>说明配置选项</li></ul></li><li><p><strong>社区互动</strong></p><ul><li>保持礼貌和专业</li><li>积极参与讨论</li><li>帮助其他贡献者</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>提交被拒绝</strong></p><ul><li>仔细阅读反馈</li><li>改进代码质量</li><li>完善测试用例</li></ul></li><li><p><strong>CI 检查失败</strong></p><ul><li>检查失败原因</li><li>修复代码问题</li><li>验证本地测试</li></ul></li><li><p><strong>合并冲突</strong></p><ul><li>更新分支</li><li>解决冲突</li><li>保持提交历史清晰</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为 Zephyr 项目贡献代码是一个有价值的学习经历，也是回馈社区的好方式。通过遵循本指南中的建议，您可以更有效地参与项目开发，提供高质量的贡献。记住，良好的沟通和耐心是成功贡献的关键。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 开发指南</title>
      <link href="/2025/03/21/nodic/zephyr/development/README/"/>
      <url>/2025/03/21/nodic/zephyr/development/README/</url>
      
        <content type="html"><![CDATA[<h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 02:00</li></ul><h1 id="Zephyr-开发指南"><a href="#Zephyr-开发指南" class="headerlink" title="Zephyr 开发指南"></a>Zephyr 开发指南</h1><p>本章节提供了 Zephyr RTOS 应用程序开发的详细指南，包括应用程序结构、驱动开发、设备树配置、内核服务使用等内容。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><p><a href="application.md">应用程序开发</a></p><ul><li>应用程序结构</li><li>配置系统</li><li>构建系统</li><li>应用程序示例</li></ul></li><li><p><a href="driver.md">驱动开发</a></p><ul><li>驱动模型</li><li>驱动 API</li><li>设备树绑定</li><li>驱动示例</li></ul></li><li><p><a href="devicetree.md">设备树配置</a></p><ul><li>设备树基础</li><li>节点和属性</li><li>绑定文件</li><li>覆盖文件</li></ul></li><li><p><a href="kernel.md">内核服务</a></p><ul><li>线程管理</li><li>同步机制</li><li>内存管理</li><li>定时器服务</li></ul></li><li><p><a href="networking.md">网络开发</a></p><ul><li>网络协议栈</li><li>网络接口</li><li>协议实现</li><li>网络应用</li></ul></li><li><p><a href="security.md">安全开发</a></p><ul><li>安全启动</li><li>加密服务</li><li>安全存储</li><li>访问控制</li></ul></li><li><p><a href="testing.md">测试与调试</a></p><ul><li>单元测试</li><li>集成测试</li><li>调试技术</li><li>性能分析</li></ul></li><li><p><a href="porting.md">移植指南</a></p><ul><li>板级支持包</li><li>SOC 适配</li><li>驱动移植</li><li>启动配置</li></ul></li></ol><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>Zephyr 应用程序开发通常遵循以下流程：</p><ol><li><p><strong>项目初始化</strong></p><ul><li>创建应用程序目录</li><li>配置开发环境</li><li>初始化版本控制</li></ul></li><li><p><strong>应用程序配置</strong></p><ul><li>选择目标板</li><li>配置内核选项</li><li>设置设备树</li></ul></li><li><p><strong>代码开发</strong></p><ul><li>编写应用程序代码</li><li>实现驱动程序</li><li>添加功能模块</li></ul></li><li><p><strong>测试验证</strong></p><ul><li>单元测试</li><li>功能测试</li><li>性能测试</li></ul></li><li><p><strong>调试优化</strong></p><ul><li>问题诊断</li><li>性能优化</li><li>代码审查</li></ul></li><li><p><strong>发布部署</strong></p><ul><li>版本控制</li><li>文档更新</li><li>发布包制作</li></ul></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-代码组织"><a href="#1-代码组织" class="headerlink" title="1. 代码组织"></a>1. 代码组织</h3><ul><li>使用清晰的目录结构</li><li>遵循命名约定</li><li>模块化设计</li><li>代码复用</li></ul><h3 id="2-配置管理"><a href="#2-配置管理" class="headerlink" title="2. 配置管理"></a>2. 配置管理</h3><ul><li>使用版本控制</li><li>分离配置文件</li><li>环境变量管理</li><li>构建变体</li></ul><h3 id="3-调试策略"><a href="#3-调试策略" class="headerlink" title="3. 调试策略"></a>3. 调试策略</h3><ul><li>日志系统使用</li><li>断点设置</li><li>错误处理</li><li>性能监控</li></ul><h3 id="4-文档维护"><a href="#4-文档维护" class="headerlink" title="4. 文档维护"></a>4. 文档维护</h3><ul><li>代码注释</li><li>API 文档</li><li>使用说明</li><li>变更记录</li></ul><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="1-必要工具"><a href="#1-必要工具" class="headerlink" title="1. 必要工具"></a>1. 必要工具</h3><ul><li>编译器工具链</li><li>调试器</li><li>IDE&#x2F;编辑器</li><li>版本控制系统</li></ul><h3 id="2-可选工具"><a href="#2-可选工具" class="headerlink" title="2. 可选工具"></a>2. 可选工具</h3><ul><li>静态分析器</li><li>代码格式化工具</li><li>文档生成器</li><li>持续集成系统</li></ul><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ol><li><p><strong>官方文档</strong></p><ul><li><a href="https://docs.zephyrproject.org/">Zephyr Project Documentation</a></li><li><a href="https://docs.zephyrproject.org/latest/doxygen/html/">API Documentation</a></li><li><a href="https://docs.zephyrproject.org/latest/develop/index.html">Developer Guide</a></li></ul></li><li><p><strong>社区资源</strong></p><ul><li><a href="https://github.com/zephyrproject-rtos/zephyr">GitHub Repository</a></li><li><a href="https://lists.zephyrproject.org/g/devel">Developer Mailing List</a></li><li><a href="https://www.zephyrproject.org/blog/">Zephyr Project Blog</a></li></ul></li><li><p><strong>培训材料</strong></p><ul><li>入门指南</li><li>教程视频</li><li>示例项目</li><li>最佳实践</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-编译错误"><a href="#1-编译错误" class="headerlink" title="1. 编译错误"></a>1. 编译错误</h3><p><strong>问题</strong>：编译过程中遇到错误</p><p><strong>解决方案</strong>：</p><ul><li>检查工具链配置</li><li>验证源代码语法</li><li>查看依赖关系</li><li>清理构建目录</li></ul><h3 id="2-运行时错误"><a href="#2-运行时错误" class="headerlink" title="2. 运行时错误"></a>2. 运行时错误</h3><p><strong>问题</strong>：程序运行时出现问题</p><p><strong>解决方案</strong>：</p><ul><li>检查初始化顺序</li><li>验证配置选项</li><li>分析日志输出</li><li>使用调试器</li></ul><h3 id="3-性能问题"><a href="#3-性能问题" class="headerlink" title="3. 性能问题"></a>3. 性能问题</h3><p><strong>问题</strong>：程序性能不达标</p><p><strong>解决方案</strong>：</p><ul><li>优化代码结构</li><li>调整编译选项</li><li>使用性能分析工具</li><li>检查资源使用</li></ul><h3 id="4-内存问题"><a href="#4-内存问题" class="headerlink" title="4. 内存问题"></a>4. 内存问题</h3><p><strong>问题</strong>：内存使用异常</p><p><strong>解决方案</strong>：</p><ul><li>检查内存分配</li><li>跟踪内存泄漏</li><li>优化资源使用</li><li>调整堆栈大小</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 开发涉及多个方面，从应用程序结构到驱动开发，从内核服务到网络功能。通过本章节的指南，开发者可以更好地理解和使用 Zephyr 的各种功能，提高开发效率和代码质量。在接下来的章节中，我们将详细介绍每个主题的具体内容。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 调试工具指南</title>
      <link href="/2025/03/21/nodic/zephyr/debugging/README/"/>
      <url>/2025/03/21/nodic/zephyr/debugging/README/</url>
      
        <content type="html"><![CDATA[<h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 01:45</li></ul><h1 id="Zephyr-调试工具指南"><a href="#Zephyr-调试工具指南" class="headerlink" title="Zephyr 调试工具指南"></a>Zephyr 调试工具指南</h1><h2 id="1-调试工具概述"><a href="#1-调试工具概述" class="headerlink" title="1. 调试工具概述"></a>1. 调试工具概述</h2><h3 id="1-1-调试架构"><a href="#1-1-调试架构" class="headerlink" title="1.1 调试架构"></a>1.1 调试架构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[应用程序] --&gt; B[调试工具]</span><br><span class="line">    B --&gt; C[调试接口]</span><br><span class="line">    C --&gt; D[硬件]</span><br><span class="line">    subgraph &quot;调试工具&quot;</span><br><span class="line">        E[GDB]</span><br><span class="line">        F[OpenOCD]</span><br><span class="line">        G[SEGGER J-Link]</span><br><span class="line">        H[打印调试]</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="1-2-支持的调试方式"><a href="#1-2-支持的调试方式" class="headerlink" title="1.2 支持的调试方式"></a>1.2 支持的调试方式</h3><ul><li>GDB&#x2F;OpenOCD调试</li><li>SEGGER J-Link调试</li><li>printf&#x2F;printk调试</li><li>系统查看器</li><li>内存调试</li><li>性能分析</li></ul><h2 id="2-GDB调试"><a href="#2-GDB调试" class="headerlink" title="2. GDB调试"></a>2. GDB调试</h2><h3 id="2-1-配置"><a href="#2-1-配置" class="headerlink" title="2.1 配置"></a>2.1 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 调试支持</span><br><span class="line">CONFIG_DEBUG=y</span><br><span class="line"></span><br><span class="line"># GDB调试支持</span><br><span class="line">CONFIG_GDB_SERVER=y</span><br><span class="line">CONFIG_DEBUG_THREAD_INFO=y</span><br><span class="line"></span><br><span class="line"># 优化级别</span><br><span class="line">CONFIG_DEBUG_OPTIMIZATIONS=y</span><br></pre></td></tr></table></figure><h3 id="2-2-使用GDB"><a href="#2-2-使用GDB" class="headerlink" title="2.2 使用GDB"></a>2.2 使用GDB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动OpenOCD</span></span><br><span class="line">openocd -f board/stm32f4discovery.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在另一个终端启动GDB</span></span><br><span class="line">arm-zephyr-eabi-gdb build/zephyr/zephyr.elf</span><br><span class="line"></span><br><span class="line"><span class="comment"># GDB命令</span></span><br><span class="line">(gdb) target remote localhost:3333</span><br><span class="line">(gdb) monitor reset halt</span><br><span class="line">(gdb) <span class="built_in">break</span> main</span><br><span class="line">(gdb) <span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="2-3-GDB脚本示例"><a href="#2-3-GDB脚本示例" class="headerlink" title="2.3 GDB脚本示例"></a>2.3 GDB脚本示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># .gdbinit</span><br><span class="line">set print pretty on</span><br><span class="line">set print array on</span><br><span class="line">set print array-indexes on</span><br><span class="line"></span><br><span class="line">define reload</span><br><span class="line">    monitor reset halt</span><br><span class="line">    load</span><br><span class="line">    monitor reset init</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">define restart</span><br><span class="line">    monitor reset halt</span><br><span class="line">    continue</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="3-日志系统"><a href="#3-日志系统" class="headerlink" title="3. 日志系统"></a>3. 日志系统</h2><h3 id="3-1-配置日志"><a href="#3-1-配置日志" class="headerlink" title="3.1 配置日志"></a>3.1 配置日志</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 日志系统配置</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3</span><br><span class="line">CONFIG_LOG_BACKEND_UART=y</span><br><span class="line">CONFIG_LOG_BACKEND_RTT=y</span><br></pre></td></tr></table></figure><h3 id="3-2-使用日志"><a href="#3-2-使用日志" class="headerlink" title="3.2 使用日志"></a>3.2 使用日志</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(my_module, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">debug_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 不同级别的日志 */</span></span><br><span class="line">    LOG_DBG(<span class="string">&quot;Debug message&quot;</span>);</span><br><span class="line">    LOG_INF(<span class="string">&quot;Info message&quot;</span>);</span><br><span class="line">    LOG_WRN(<span class="string">&quot;Warning message&quot;</span>);</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Error message&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 带参数的日志 */</span></span><br><span class="line">    <span class="type">int</span> value = <span class="number">42</span>;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Value is %d&quot;</span>, value);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 十六进制dump */</span></span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line">    LOG_HEXDUMP_DBG(data, <span class="keyword">sizeof</span>(data), <span class="string">&quot;Data dump:&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-内存调试"><a href="#4-内存调试" class="headerlink" title="4. 内存调试"></a>4. 内存调试</h2><h3 id="4-1-内存检测工具"><a href="#4-1-内存检测工具" class="headerlink" title="4.1 内存检测工具"></a>4.1 内存检测工具</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/debug/heap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memory_debug</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 获取堆使用情况 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_heap_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">    k_heap_stats_get(&amp;stats);</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Total bytes: %zu\n&quot;</span>, stats.total_bytes);</span><br><span class="line">    printk(<span class="string">&quot;Used bytes: %zu\n&quot;</span>, stats.used_bytes);</span><br><span class="line">    printk(<span class="string">&quot;Free bytes: %zu\n&quot;</span>, stats.free_bytes);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 内存泄漏检测 */</span></span><br><span class="line">    <span class="type">void</span> *ptr = k_malloc(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// k_free(ptr); // 注释掉以模拟内存泄漏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-堆栈分析"><a href="#4-2-堆栈分析" class="headerlink" title="4.2 堆栈分析"></a>4.2 堆栈分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/debug/stack.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_analysis</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 获取当前线程堆栈使用情况 */</span></span><br><span class="line">    k_thread_stack_space_get(k_current_get(), &amp;stack_space);</span><br><span class="line">    printk(<span class="string">&quot;Stack space: %zu\n&quot;</span>, stack_space);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 打印堆栈跟踪 */</span></span><br><span class="line">    k_stack_dump(k_current_get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-性能分析"><a href="#5-性能分析" class="headerlink" title="5. 性能分析"></a>5. 性能分析</h2><h3 id="5-1-时间测量"><a href="#5-1-时间测量" class="headerlink" title="5.1 时间测量"></a>5.1 时间测量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/timing/timing.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">performance_measurement</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> start_time, end_time;</span><br><span class="line">    <span class="type">uint32_t</span> cycles, ns;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 开始计时 */</span></span><br><span class="line">    timing_start();</span><br><span class="line">    start_time = timing_counter_get();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 执行要测量的代码 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="comment">/* 测试代码 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 结束计时 */</span></span><br><span class="line">    end_time = timing_counter_get();</span><br><span class="line">    cycles = timing_cycles_get(&amp;start_time, &amp;end_time);</span><br><span class="line">    ns = timing_cycles_to_ns(cycles);</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Execution time: %u cycles (%u ns)\n&quot;</span>,</span><br><span class="line">           cycles, ns);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-CPU负载监控"><a href="#5-2-CPU负载监控" class="headerlink" title="5.2 CPU负载监控"></a>5.2 CPU负载监控</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cpu_load_monitor</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 获取线程运行时统计 */</span></span><br><span class="line">    <span class="type">k_thread_runtime_stats_t</span> stats;</span><br><span class="line">    k_thread_runtime_stats_all_get(&amp;stats);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 计算CPU使用率 */</span></span><br><span class="line">    <span class="type">uint64_t</span> total = stats.total_cycles;</span><br><span class="line">    <span class="type">uint64_t</span> idle = stats.idle_cycles;</span><br><span class="line">    <span class="type">uint32_t</span> usage = (total - idle) * <span class="number">100</span> / total;</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;CPU Usage: %u%%\n&quot;</span>, usage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-SEGGER-SystemView"><a href="#6-SEGGER-SystemView" class="headerlink" title="6. SEGGER SystemView"></a>6. SEGGER SystemView</h2><h3 id="6-1-配置SystemView"><a href="#6-1-配置SystemView" class="headerlink" title="6.1 配置SystemView"></a>6.1 配置SystemView</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># SystemView配置</span><br><span class="line">CONFIG_SEGGER_SYSTEMVIEW=y</span><br><span class="line">CONFIG_SEGGER_RTT=y</span><br><span class="line">CONFIG_TRACING=y</span><br></pre></td></tr></table></figure><h3 id="6-2-使用SystemView"><a href="#6-2-使用SystemView" class="headerlink" title="6.2 使用SystemView"></a>6.2 使用SystemView</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SEGGER_SYSVIEW.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">systemview_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化SystemView */</span></span><br><span class="line">    SEGGER_SYSVIEW_Init();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 记录事件 */</span></span><br><span class="line">    SEGGER_SYSVIEW_PrintfTarget(<span class="string">&quot;Event occurred&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 开始任务 */</span></span><br><span class="line">    SEGGER_SYSVIEW_OnTaskStartExec(task_id);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 执行任务 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 结束任务 */</span></span><br><span class="line">    SEGGER_SYSVIEW_OnTaskStopExec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-断言和错误处理"><a href="#7-断言和错误处理" class="headerlink" title="7. 断言和错误处理"></a>7. 断言和错误处理</h2><h3 id="7-1-断言使用"><a href="#7-1-断言使用" class="headerlink" title="7.1 断言使用"></a>7.1 断言使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/__assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_example</span><span class="params">(<span class="type">void</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 参数检查 */</span></span><br><span class="line">    __ASSERT(data != <span class="literal">NULL</span>, <span class="string">&quot;data pointer is NULL&quot;</span>);</span><br><span class="line">    __ASSERT(len &gt; <span class="number">0</span>, <span class="string">&quot;length must be positive&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 状态检查 */</span></span><br><span class="line">    __ASSERT(is_initialized(),</span><br><span class="line">             <span class="string">&quot;System not initialized&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 范围检查 */</span></span><br><span class="line">    __ASSERT(len &lt;= MAX_LENGTH,</span><br><span class="line">             <span class="string">&quot;length exceeds maximum&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-错误追踪"><a href="#7-2-错误追踪" class="headerlink" title="7.2 错误追踪"></a>7.2 错误追踪</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error_tracking</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 错误代码 */</span></span><br><span class="line">    <span class="type">int</span> err = -EIO;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 错误处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error occurred: %d\n&quot;</span>, err);</span><br><span class="line">        k_oops();  <span class="comment">// 触发系统错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-调试实践"><a href="#8-调试实践" class="headerlink" title="8. 调试实践"></a>8. 调试实践</h2><h3 id="8-1-远程调试配置"><a href="#8-1-远程调试配置" class="headerlink" title="8.1 远程调试配置"></a>8.1 远程调试配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vscode/launch.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Zephyr Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cortex-debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;servertype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openocd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;executable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build/zephyr/zephyr.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;device&quot;</span><span class="punctuation">:</span> <span class="string">&quot;STM32F407VG&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;configFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;board/st_nucleo_f4.cfg&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-调试会话示例"><a href="#8-2-调试会话示例" class="headerlink" title="8.2 调试会话示例"></a>8.2 调试会话示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">LOG_MODULE_REGISTER(debug_demo, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">debug_session_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    LOG_INF(<span class="string">&quot;Starting debug session&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (counter &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="comment">/* 设置断点的好位置 */</span></span><br><span class="line">        counter++;</span><br><span class="line">        LOG_DBG(<span class="string">&quot;Counter value: %d&quot;</span>, counter);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (counter == <span class="number">3</span>) &#123;</span><br><span class="line">            LOG_WRN(<span class="string">&quot;Counter reached 3!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    LOG_INF(<span class="string">&quot;Debug session completed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-常见问题调试"><a href="#8-3-常见问题调试" class="headerlink" title="8.3 常见问题调试"></a>8.3 常见问题调试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">debug_common_issues</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 1. 内存问题 */</span></span><br><span class="line">    <span class="type">void</span> *ptr = k_malloc(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOG_ERR(<span class="string">&quot;Memory allocation failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 2. 定时问题 */</span></span><br><span class="line">    <span class="type">uint32_t</span> start = k_uptime_get_32();</span><br><span class="line">    k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line">    <span class="type">uint32_t</span> duration = k_uptime_get_32() - start;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Sleep duration: %u ms&quot;</span>, duration);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 3. 中断问题 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key = irq_lock();</span><br><span class="line">    <span class="comment">/* 临界区代码 */</span></span><br><span class="line">    irq_unlock(key);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 4. 线程问题 */</span></span><br><span class="line">    k_thread_state_str(k_current_get(), key, <span class="number">100</span>);</span><br><span class="line">    LOG_INF(<span class="string">&quot;Thread state: %s&quot;</span>, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 核心模块</title>
      <link href="/2025/03/21/nodic/zephyr/core/README/"/>
      <url>/2025/03/21/nodic/zephyr/core/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-核心模块"><a href="#Zephyr-核心模块" class="headerlink" title="Zephyr 核心模块"></a>Zephyr 核心模块</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 01:30</li></ul><p>Zephyr RTOS 提供了丰富的核心模块，用于支持各种嵌入式应用开发需求。本章节将详细介绍 Zephyr 的核心功能模块。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><p><a href="kernel">内核模块</a></p></li><li><p><a href="drivers">驱动系统</a></p></li><li><p><a href="networking">网络协议栈</a></p></li><li><p><a href="filesystem">文件系统</a></p></li><li><p><a href="power">电源管理</a></p></li><li><p><a href="/nodic/zephyr/core/drivers">驱动系统</a></p><ul><li>驱动框架</li><li>常用外设驱动</li><li>传感器子系统</li><li>存储驱动</li></ul></li><li><p><a href="/nodic/zephyr/core/networking">网络协议栈</a></p><ul><li>TCP&#x2F;IP 协议栈</li><li>蓝牙支持</li><li>IEEE 802.15.4</li><li>LoRaWAN</li></ul></li><li><p><a href="/nodic/zephyr/core/filesystem">文件系统</a></p><ul><li>支持的文件系统</li><li>文件系统 API</li><li>存储分区</li><li>文件操作</li></ul></li><li><p><a href="/nodic/zephyr/core/power">电源管理</a></p><ul><li>电源状态</li><li>设备电源管理</li><li>动态频率调节</li><li>唤醒源管理</li></ul></li></ol><h2 id="核心模块概述"><a href="#核心模块概述" class="headerlink" title="核心模块概述"></a>核心模块概述</h2><p>Zephyr 的核心模块设计遵循以下原则：</p><ol><li><strong>模块化设计</strong>：每个功能模块可以独立配置和使用</li><li><strong>可扩展性</strong>：支持通过添加新模块扩展系统功能</li><li><strong>可裁剪性</strong>：可以根据应用需求裁剪不需要的功能</li><li><strong>标准接口</strong>：提供统一的 API，简化应用开发</li><li><strong>高效实现</strong>：针对资源受限的嵌入式系统优化</li></ol><h2 id="模块配置"><a href="#模块配置" class="headerlink" title="模块配置"></a>模块配置</h2><p>Zephyr 使用 Kconfig 系统配置各个功能模块。通过修改 <code>prj.conf</code> 文件，可以启用或禁用特定功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 启用网络功能</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line"></span><br><span class="line"># 启用文件系统</span><br><span class="line">CONFIG_FILE_SYSTEM=y</span><br><span class="line">CONFIG_FAT_FILESYSTEM_ELM=y</span><br><span class="line"></span><br><span class="line"># 启用蓝牙</span><br><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br></pre></td></tr></table></figure><h2 id="模块依赖关系"><a href="#模块依赖关系" class="headerlink" title="模块依赖关系"></a>模块依赖关系</h2><p>Zephyr 的核心模块之间存在依赖关系，Kconfig 系统会自动处理这些依赖：</p><ol><li><strong>驱动依赖</strong>：特定驱动可能依赖于特定的硬件抽象层</li><li><strong>网络依赖</strong>：网络协议可能依赖于特定的硬件驱动</li><li><strong>文件系统依赖</strong>：文件系统可能依赖于特定的存储驱动</li><li><strong>电源管理依赖</strong>：电源管理功能可能依赖于特定的 SoC 支持</li></ol><h2 id="模块源码结构"><a href="#模块源码结构" class="headerlink" title="模块源码结构"></a>模块源码结构</h2><p>Zephyr 源码中的核心模块主要分布在以下目录：</p><ol><li><strong>内核模块</strong>：<code>kernel/</code></li><li><strong>驱动系统</strong>：<code>drivers/</code></li><li><strong>网络协议栈</strong>：<code>subsys/net/</code></li><li><strong>文件系统</strong>：<code>subsys/fs/</code></li><li><strong>电源管理</strong>：<code>subsys/pm/</code></li></ol><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>以下是使用 Zephyr 核心模块的简单示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 GPIO 驱动</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">gpio_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(gpio0));</span><br><span class="line">    gpio_pin_configure(gpio_dev, <span class="number">13</span>, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用网络功能</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span> =</span> net_if_get_default();</span><br><span class="line">    net_if_up(iface);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用文件系统</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    fs_open(&amp;file, <span class="string">&quot;/sdc/data.txt&quot;</span>, FS_O_CREATE | FS_O_WRITE);</span><br><span class="line">    fs_write(&amp;file, <span class="string">&quot;Hello, Zephyr!&quot;</span>, <span class="number">14</span>);</span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 的核心模块提供了丰富的功能，支持各种嵌入式应用开发需求。通过深入了解这些核心模块，开发者可以更好地利用 Zephyr 的特性，开发高效、可靠的嵌入式应用。</p><p>在接下来的章节中，我们将详细介绍每个核心模块的功能和使用方法。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 系统配置指南</title>
      <link href="/2025/03/21/nodic/zephyr/config/README/"/>
      <url>/2025/03/21/nodic/zephyr/config/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-系统配置指南"><a href="#Zephyr-系统配置指南" class="headerlink" title="Zephyr 系统配置指南"></a>Zephyr 系统配置指南</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 01:15</li></ul><h2 id="1-配置系统概述"><a href="#1-配置系统概述" class="headerlink" title="1. 配置系统概述"></a>1. 配置系统概述</h2><h3 id="1-1-配置文件层次"><a href="#1-1-配置文件层次" class="headerlink" title="1.1 配置文件层次"></a>1.1 配置文件层次</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">项目目录/</span><br><span class="line">├── prj.conf           # 项目配置</span><br><span class="line">├── boards/</span><br><span class="line">│   └── xxx.conf      # 板级配置</span><br><span class="line">├── arch/</span><br><span class="line">│   └── xxx.conf      # 架构配置</span><br><span class="line">└── soc/</span><br><span class="line">    └── xxx.conf      # SoC配置</span><br></pre></td></tr></table></figure><h3 id="1-2-配置优先级"><a href="#1-2-配置优先级" class="headerlink" title="1.2 配置优先级"></a>1.2 配置优先级</h3><ol><li>命令行配置 (-DCONFIG_XXX&#x3D;Y)</li><li>项目配置 (prj.conf)</li><li>应用程序覆盖配置 (app.overlay)</li><li>板级配置 (boards&#x2F;xxx.conf)</li><li>SoC配置 (soc&#x2F;xxx.conf)</li><li>架构配置 (arch&#x2F;xxx.conf)</li><li>默认配置 (Kconfig默认值)</li></ol><h2 id="2-项目配置"><a href="#2-项目配置" class="headerlink" title="2. 项目配置"></a>2. 项目配置</h2><h3 id="2-1-基本配置-prj-conf"><a href="#2-1-基本配置-prj-conf" class="headerlink" title="2.1 基本配置 (prj.conf)"></a>2.1 基本配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 系统配置</span><br><span class="line">CONFIG_MAIN_STACK_SIZE=2048</span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=16384</span><br><span class="line">CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=2048</span><br><span class="line"></span><br><span class="line"># 内核配置</span><br><span class="line">CONFIG_MULTITHREADING=y</span><br><span class="line">CONFIG_NUM_PREEMPT_PRIORITIES=16</span><br><span class="line">CONFIG_TIMESLICING=y</span><br><span class="line"></span><br><span class="line"># 调试配置</span><br><span class="line">CONFIG_DEBUG=y</span><br><span class="line">CONFIG_DEBUG_INFO=y</span><br><span class="line">CONFIG_STACK_USAGE=y</span><br><span class="line">CONFIG_THREAD_MONITOR=y</span><br><span class="line"></span><br><span class="line"># 控制台配置</span><br><span class="line">CONFIG_CONSOLE=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3</span><br></pre></td></tr></table></figure><h3 id="2-2-设备树覆盖-app-overlay"><a href="#2-2-设备树覆盖-app-overlay" class="headerlink" title="2.2 设备树覆盖 (app.overlay)"></a>2.2 设备树覆盖 (app.overlay)</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,shell-uart</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,uart-mcumgr</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">buttons</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-keys&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        button0:</span> <span class="title class_">button_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">11</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Push button switch 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="3-内核配置"><a href="#3-内核配置" class="headerlink" title="3. 内核配置"></a>3. 内核配置</h2><h3 id="3-1-内存配置"><a href="#3-1-内存配置" class="headerlink" title="3.1 内存配置"></a>3.1 内存配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 堆内存配置</span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=16384</span><br><span class="line">CONFIG_HEAP_MEM_POOL_MIN_SIZE=64</span><br><span class="line"></span><br><span class="line"># 栈配置</span><br><span class="line">CONFIG_MAIN_STACK_SIZE=2048</span><br><span class="line">CONFIG_IDLE_STACK_SIZE=512</span><br><span class="line">CONFIG_ISR_STACK_SIZE=2048</span><br><span class="line">CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=2048</span><br><span class="line"></span><br><span class="line"># 内存保护</span><br><span class="line">CONFIG_MPU=y</span><br><span class="line">CONFIG_MPU_STACK_GUARD=y</span><br><span class="line">CONFIG_USERSPACE=y</span><br></pre></td></tr></table></figure><h3 id="3-2-调度器配置"><a href="#3-2-调度器配置" class="headerlink" title="3.2 调度器配置"></a>3.2 调度器配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 线程配置</span><br><span class="line">CONFIG_NUM_PREEMPT_PRIORITIES=16</span><br><span class="line">CONFIG_NUM_COOP_PRIORITIES=16</span><br><span class="line">CONFIG_TIMESLICING=y</span><br><span class="line">CONFIG_TIMESLICE_SIZE=10</span><br><span class="line">CONFIG_TIMESLICE_PRIORITY=0</span><br><span class="line"></span><br><span class="line"># 工作队列配置</span><br><span class="line">CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=2048</span><br><span class="line">CONFIG_SYSTEM_WORKQUEUE_PRIORITY=0</span><br></pre></td></tr></table></figure><h2 id="4-驱动配置"><a href="#4-驱动配置" class="headerlink" title="4. 驱动配置"></a>4. 驱动配置</h2><h3 id="4-1-GPIO配置"><a href="#4-1-GPIO配置" class="headerlink" title="4.1 GPIO配置"></a>4.1 GPIO配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># GPIO配置</span><br><span class="line">CONFIG_GPIO=y</span><br><span class="line">CONFIG_GPIO_SHELL=y</span><br><span class="line"></span><br><span class="line"># 中断配置</span><br><span class="line">CONFIG_GPIO_INTERRUPT=y</span><br><span class="line">CONFIG_GPIO_INIT_PRIORITY=40</span><br></pre></td></tr></table></figure><h3 id="4-2-串口配置"><a href="#4-2-串口配置" class="headerlink" title="4.2 串口配置"></a>4.2 串口配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># UART配置</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line">CONFIG_UART_INTERRUPT_DRIVEN=y</span><br><span class="line">CONFIG_UART_LINE_CTRL=y</span><br><span class="line">CONFIG_UART_SHELL_ON_DEV_NAME=&quot;UART_0&quot;</span><br></pre></td></tr></table></figure><h2 id="5-网络配置"><a href="#5-网络配置" class="headerlink" title="5. 网络配置"></a>5. 网络配置</h2><h3 id="5-1-TCP-IP配置"><a href="#5-1-TCP-IP配置" class="headerlink" title="5.1 TCP&#x2F;IP配置"></a>5.1 TCP&#x2F;IP配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 网络基础配置</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_IPV6=y</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line">CONFIG_NET_UDP=y</span><br><span class="line"></span><br><span class="line"># 网络缓冲区配置</span><br><span class="line">CONFIG_NET_BUF_RX_COUNT=64</span><br><span class="line">CONFIG_NET_BUF_TX_COUNT=64</span><br><span class="line">CONFIG_NET_BUF_DATA_SIZE=128</span><br><span class="line"></span><br><span class="line"># DHCP配置</span><br><span class="line">CONFIG_NET_DHCPV4=y</span><br><span class="line">CONFIG_NET_DHCPV4_INITIAL_RETRY_MAX=10</span><br><span class="line"></span><br><span class="line"># DNS配置</span><br><span class="line">CONFIG_DNS_RESOLVER=y</span><br><span class="line">CONFIG_DNS_SERVER_IP_ADDRESSES=y</span><br><span class="line">CONFIG_DNS_SERVER1=&quot;8.8.8.8&quot;</span><br></pre></td></tr></table></figure><h3 id="5-2-蓝牙配置"><a href="#5-2-蓝牙配置" class="headerlink" title="5.2 蓝牙配置"></a>5.2 蓝牙配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 蓝牙基础配置</span><br><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br><span class="line">CONFIG_BT_CENTRAL=y</span><br><span class="line">CONFIG_BT_DEBUG_LOG=y</span><br><span class="line"></span><br><span class="line"># GATT配置</span><br><span class="line">CONFIG_BT_GATT_DYNAMIC_DB=y</span><br><span class="line">CONFIG_BT_GATT_CLIENT=y</span><br><span class="line"></span><br><span class="line"># 安全配置</span><br><span class="line">CONFIG_BT_SMP=y</span><br><span class="line">CONFIG_BT_PRIVACY=y</span><br><span class="line">CONFIG_BT_SIGNING=y</span><br></pre></td></tr></table></figure><h2 id="6-文件系统配置"><a href="#6-文件系统配置" class="headerlink" title="6. 文件系统配置"></a>6. 文件系统配置</h2><h3 id="6-1-文件系统配置"><a href="#6-1-文件系统配置" class="headerlink" title="6.1 文件系统配置"></a>6.1 文件系统配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 文件系统支持</span><br><span class="line">CONFIG_FILE_SYSTEM=y</span><br><span class="line">CONFIG_FILE_SYSTEM_LITTLEFS=y</span><br><span class="line"></span><br><span class="line"># FAT文件系统支持</span><br><span class="line">CONFIG_FAT_FILESYSTEM_ELM=y</span><br><span class="line">CONFIG_FS_FATFS_NUM_FILES=4</span><br><span class="line">CONFIG_FS_FATFS_NUM_DIRS=4</span><br><span class="line"></span><br><span class="line"># Flash驱动配置</span><br><span class="line">CONFIG_FLASH=y</span><br><span class="line">CONFIG_FLASH_MAP=y</span><br><span class="line">CONFIG_FLASH_PAGE_LAYOUT=y</span><br></pre></td></tr></table></figure><h3 id="6-2-存储分区配置"><a href="#6-2-存储分区配置" class="headerlink" title="6.2 存储分区配置"></a>6.2 存储分区配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">fstab</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,fstab&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        lfs1:</span> <span class="title class_">lfs1</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,fstab,littlefs&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">mount-point</span> <span class="operator">=</span> <span class="string">&quot;/lfs1&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">partition</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;lfs1_part</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">read-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">prog-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">lookahead-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">32</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">block-cycles</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">512</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;flash0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">partitions</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;fixed-partitions&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">        <span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">        lfs1_part:</span> <span class="title class_">partition@70000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;storage&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x70000</span> <span class="number">0x10000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="7-调试配置"><a href="#7-调试配置" class="headerlink" title="7. 调试配置"></a>7. 调试配置</h2><h3 id="7-1-日志配置"><a href="#7-1-日志配置" class="headerlink" title="7.1 日志配置"></a>7.1 日志配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 日志系统配置</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3</span><br><span class="line">CONFIG_LOG_BACKEND_UART=y</span><br><span class="line">CONFIG_LOG_BACKEND_SHOW_COLOR=y</span><br><span class="line"></span><br><span class="line"># 内存调试</span><br><span class="line">CONFIG_DEBUG_OPTIMIZATIONS=y</span><br><span class="line">CONFIG_DEBUG_INFO=y</span><br><span class="line">CONFIG_STACK_USAGE=y</span><br><span class="line">CONFIG_STACK_SENTINEL=y</span><br><span class="line">CONFIG_HEAP_MEMORY_INFO=y</span><br><span class="line"></span><br><span class="line"># 线程监控</span><br><span class="line">CONFIG_THREAD_MONITOR=y</span><br><span class="line">CONFIG_THREAD_NAME=y</span><br><span class="line">CONFIG_THREAD_STACK_INFO=y</span><br></pre></td></tr></table></figure><h3 id="7-2-Shell配置"><a href="#7-2-Shell配置" class="headerlink" title="7.2 Shell配置"></a>7.2 Shell配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Shell配置</span><br><span class="line">CONFIG_SHELL=y</span><br><span class="line">CONFIG_SHELL_BACKEND_SERIAL=y</span><br><span class="line">CONFIG_SHELL_PROMPT_UART=&quot;zephyr:~$ &quot;</span><br><span class="line"></span><br><span class="line"># Shell历史记录</span><br><span class="line">CONFIG_SHELL_HISTORY=y</span><br><span class="line">CONFIG_SHELL_HISTORY_BUFFER=512</span><br><span class="line"></span><br><span class="line"># Shell命令</span><br><span class="line">CONFIG_SHELL_CMD_BUFF_SIZE=256</span><br><span class="line">CONFIG_SHELL_ARGC_MAX=12</span><br><span class="line">CONFIG_SHELL_WILDCARD=y</span><br></pre></td></tr></table></figure><h2 id="8-安全配置"><a href="#8-安全配置" class="headerlink" title="8. 安全配置"></a>8. 安全配置</h2><h3 id="8-1-加密配置"><a href="#8-1-加密配置" class="headerlink" title="8.1 加密配置"></a>8.1 加密配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 加密支持</span><br><span class="line">CONFIG_CRYPTO=y</span><br><span class="line">CONFIG_CRYPTO_MBEDTLS=y</span><br><span class="line"></span><br><span class="line"># 随机数生成器</span><br><span class="line">CONFIG_ENTROPY_GENERATOR=y</span><br><span class="line">CONFIG_TEST_RANDOM_GENERATOR=n</span><br><span class="line"></span><br><span class="line"># TLS配置</span><br><span class="line">CONFIG_MBEDTLS=y</span><br><span class="line">CONFIG_MBEDTLS_BUILTIN=y</span><br><span class="line">CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN=1500</span><br></pre></td></tr></table></figure><h3 id="8-2-安全启动配置"><a href="#8-2-安全启动配置" class="headerlink" title="8.2 安全启动配置"></a>8.2 安全启动配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 安全启动</span><br><span class="line">CONFIG_BOOTLOADER_MCUBOOT=y</span><br><span class="line">CONFIG_MCUBOOT_SIGNATURE_KEY_FILE=&quot;bootloader/mcuboot/root-rsa-2048.pem&quot;</span><br><span class="line">CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS=&quot;--version 1.0.0&quot;</span><br><span class="line"></span><br><span class="line"># 固件更新</span><br><span class="line">CONFIG_MCUBOOT_IMG_MANAGER=y</span><br><span class="line">CONFIG_MCUBOOT_SERIAL=y</span><br><span class="line">CONFIG_BOOT_UPGRADE_ONLY=y</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 支持的开发板</title>
      <link href="/2025/03/21/nodic/zephyr/boards/supported/"/>
      <url>/2025/03/21/nodic/zephyr/boards/supported/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-支持的开发板"><a href="#Zephyr-支持的开发板" class="headerlink" title="Zephyr 支持的开发板"></a>Zephyr 支持的开发板</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 01:00</li></ul><p>本文档详细介绍了 Zephyr RTOS 支持的主要开发板、它们的硬件特性对比以及开发板选择指南。</p><h2 id="主要开发板列表"><a href="#主要开发板列表" class="headerlink" title="主要开发板列表"></a>主要开发板列表</h2><h3 id="ARM-Cortex-M-系列"><a href="#ARM-Cortex-M-系列" class="headerlink" title="ARM Cortex-M 系列"></a>ARM Cortex-M 系列</h3><h4 id="Nordic-Semiconductor"><a href="#Nordic-Semiconductor" class="headerlink" title="Nordic Semiconductor"></a>Nordic Semiconductor</h4><ol><li><p><strong>nRF52840 DK (nrf52840dk_nrf52840)</strong></p><ul><li>处理器: ARM Cortex-M4F @ 64 MHz</li><li>闪存: 1 MB</li><li>RAM: 256 KB</li><li>特性: BLE 5.0, NFC, USB, 多种无线协议</li></ul></li><li><p><strong>nRF52 DK (nrf52dk_nrf52832)</strong></p><ul><li>处理器: ARM Cortex-M4F @ 64 MHz</li><li>闪存: 512 KB</li><li>RAM: 64 KB</li><li>特性: BLE 5.0, NFC</li></ul></li><li><p><strong>nRF5340 DK (nrf5340dk_nrf5340)</strong></p><ul><li>处理器: ARM Cortex-M33 (应用核 + 网络核)</li><li>闪存: 1 MB (应用核) + 256 KB (网络核)</li><li>RAM: 512 KB (应用核) + 64 KB (网络核)</li><li>特性: BLE 5.2, NFC, 安全启动</li></ul></li></ol><h4 id="STMicroelectronics"><a href="#STMicroelectronics" class="headerlink" title="STMicroelectronics"></a>STMicroelectronics</h4><ol><li><p><strong>STM32F4 Discovery (stm32f4_disco)</strong></p><ul><li>处理器: ARM Cortex-M4F @ 168 MHz</li><li>闪存: 1 MB</li><li>RAM: 192 KB</li><li>特性: 加速度计, 音频 DAC</li></ul></li><li><p><strong>STM32F746G Discovery (stm32f746g_disco)</strong></p><ul><li>处理器: ARM Cortex-M7 @ 216 MHz</li><li>闪存: 1 MB</li><li>RAM: 320 KB</li><li>特性: LCD 触摸屏, 摄像头接口, 以太网</li></ul></li><li><p><strong>STM32 Nucleo-F401RE (nucleo_f401re)</strong></p><ul><li>处理器: ARM Cortex-M4F @ 84 MHz</li><li>闪存: 512 KB</li><li>RAM: 96 KB</li><li>特性: Arduino 兼容接口</li></ul></li></ol><h4 id="NXP"><a href="#NXP" class="headerlink" title="NXP"></a>NXP</h4><ol><li><p><strong>FRDM-K64F (frdm_k64f)</strong></p><ul><li>处理器: ARM Cortex-M4F @ 120 MHz</li><li>闪存: 1 MB</li><li>RAM: 256 KB</li><li>特性: 以太网, SD 卡插槽, 加速度计</li></ul></li><li><p><strong>MIMXRT1050-EVK (mimxrt1050_evk)</strong></p><ul><li>处理器: ARM Cortex-M7 @ 600 MHz</li><li>闪存: 外部 QSPI 闪存</li><li>RAM: 512 KB SRAM + 外部 SDRAM</li><li>特性: LCD 接口, 以太网, USB</li></ul></li></ol><h4 id="Espressif"><a href="#Espressif" class="headerlink" title="Espressif"></a>Espressif</h4><ol><li><p><strong>ESP32 DevKitC (esp32)</strong></p><ul><li>处理器: Xtensa LX6 双核 @ 240 MHz</li><li>闪存: 外部 4 MB</li><li>RAM: 520 KB SRAM</li><li>特性: WiFi, BLE, 丰富的外设</li></ul></li><li><p><strong>ESP32-C3 DevKitM (esp32c3_devkitm)</strong></p><ul><li>处理器: RISC-V 单核 @ 160 MHz</li><li>闪存: 外部 4 MB</li><li>RAM: 400 KB SRAM</li><li>特性: WiFi, BLE 5.0</li></ul></li></ol><h3 id="x86-系列"><a href="#x86-系列" class="headerlink" title="x86 系列"></a>x86 系列</h3><ol><li><p><strong>UP Squared (up_squared)</strong></p><ul><li>处理器: Intel Apollo Lake</li><li>内存: 取决于配置</li><li>特性: 完整 x86 平台, PCIe, SATA</li></ul></li><li><p><strong>MinnowBoard (minnowboard)</strong></p><ul><li>处理器: Intel Atom E3800 系列</li><li>内存: 取决于配置</li><li>特性: UEFI, PCIe, SATA</li></ul></li></ol><h3 id="RISC-V-系列"><a href="#RISC-V-系列" class="headerlink" title="RISC-V 系列"></a>RISC-V 系列</h3><ol><li><p><strong>SiFive HiFive1 Rev B (hifive1_revb)</strong></p><ul><li>处理器: SiFive Freedom E310 @ 320 MHz</li><li>闪存: 16 MB</li><li>RAM: 16 KB</li><li>特性: Arduino 兼容接口</li></ul></li><li><p><strong>Microchip PolarFire SoC Icicle Kit (mpfs_icicle)</strong></p><ul><li>处理器: SiFive U54 四核 RISC-V @ 667 MHz</li><li>内存: 取决于配置</li><li>特性: FPGA, PCIe, GbE</li></ul></li></ol><h2 id="硬件特性对比"><a href="#硬件特性对比" class="headerlink" title="硬件特性对比"></a>硬件特性对比</h2><h3 id="处理能力"><a href="#处理能力" class="headerlink" title="处理能力"></a>处理能力</h3><table><thead><tr><th>开发板</th><th>处理器</th><th>频率</th><th>性能指标 (CoreMark)</th></tr></thead><tbody><tr><td>nRF52840 DK</td><td>Cortex-M4F</td><td>64 MHz</td><td>~200</td></tr><tr><td>STM32F746G Discovery</td><td>Cortex-M7</td><td>216 MHz</td><td>~1000</td></tr><tr><td>MIMXRT1050-EVK</td><td>Cortex-M7</td><td>600 MHz</td><td>~3000</td></tr><tr><td>ESP32 DevKitC</td><td>Xtensa LX6 双核</td><td>240 MHz</td><td>~1500</td></tr><tr><td>UP Squared</td><td>Intel Apollo Lake</td><td>1.8 GHz</td><td>~10000</td></tr></tbody></table><h3 id="内存资源"><a href="#内存资源" class="headerlink" title="内存资源"></a>内存资源</h3><table><thead><tr><th>开发板</th><th>闪存</th><th>RAM</th><th>外部存储</th></tr></thead><tbody><tr><td>nRF52840 DK</td><td>1 MB</td><td>256 KB</td><td>可选外部 QSPI 闪存</td></tr><tr><td>STM32F746G Discovery</td><td>1 MB</td><td>320 KB</td><td>SDRAM, QSPI 闪存</td></tr><tr><td>FRDM-K64F</td><td>1 MB</td><td>256 KB</td><td>SD 卡插槽</td></tr><tr><td>ESP32 DevKitC</td><td>外部 4 MB</td><td>520 KB</td><td>支持 SD 卡</td></tr><tr><td>HiFive1 Rev B</td><td>16 MB</td><td>16 KB</td><td>无</td></tr></tbody></table><h3 id="通信接口"><a href="#通信接口" class="headerlink" title="通信接口"></a>通信接口</h3><table><thead><tr><th>开发板</th><th>UART</th><th>SPI</th><th>I2C</th><th>USB</th><th>以太网</th><th>无线</th></tr></thead><tbody><tr><td>nRF52840 DK</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>-</td><td>BLE 5.0, 802.15.4</td></tr><tr><td>STM32F746G Discovery</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>-</td></tr><tr><td>FRDM-K64F</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>-</td></tr><tr><td>ESP32 DevKitC</td><td>✓</td><td>✓</td><td>✓</td><td>-</td><td>-</td><td>WiFi, BLE</td></tr><tr><td>UP Squared</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>可选 WiFi</td></tr></tbody></table><h3 id="外设支持"><a href="#外设支持" class="headerlink" title="外设支持"></a>外设支持</h3><table><thead><tr><th>开发板</th><th>GPIO</th><th>ADC</th><th>DAC</th><th>PWM</th><th>显示接口</th><th>摄像头</th><th>其他传感器</th></tr></thead><tbody><tr><td>nRF52840 DK</td><td>✓</td><td>✓</td><td>-</td><td>✓</td><td>-</td><td>-</td><td>温度</td></tr><tr><td>STM32F746G Discovery</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>LCD 触摸屏</td><td>✓</td><td>加速度计</td></tr><tr><td>FRDM-K64F</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>-</td><td>-</td><td>加速度计, 磁力计</td></tr><tr><td>ESP32 DevKitC</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>可扩展</td><td>可扩展</td><td>温度</td></tr><tr><td>UP Squared</td><td>✓</td><td>-</td><td>-</td><td>-</td><td>HDMI, DP</td><td>-</td><td>-</td></tr></tbody></table><h3 id="调试支持"><a href="#调试支持" class="headerlink" title="调试支持"></a>调试支持</h3><table><thead><tr><th>开发板</th><th>调试接口</th><th>调试工具</th><th>串口</th><th>JTAG&#x2F;SWD</th><th>追踪</th></tr></thead><tbody><tr><td>nRF52840 DK</td><td>J-Link OB</td><td>J-Link</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>STM32F746G Discovery</td><td>ST-LINK&#x2F;V2-1</td><td>ST-LINK</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>FRDM-K64F</td><td>OpenSDA</td><td>CMSIS-DAP</td><td>✓</td><td>✓</td><td>-</td></tr><tr><td>ESP32 DevKitC</td><td>UART</td><td>ESP-Prog</td><td>✓</td><td>✓</td><td>-</td></tr><tr><td>HiFive1 Rev B</td><td>FTDI</td><td>OpenOCD</td><td>✓</td><td>✓</td><td>-</td></tr></tbody></table><h2 id="开发板选择指南"><a href="#开发板选择指南" class="headerlink" title="开发板选择指南"></a>开发板选择指南</h2><h3 id="根据应用场景选择"><a href="#根据应用场景选择" class="headerlink" title="根据应用场景选择"></a>根据应用场景选择</h3><ol><li><p><strong>IoT 和无线应用</strong></p><ul><li><strong>推荐</strong>: nRF52840 DK, ESP32 DevKitC</li><li><strong>优势</strong>: 集成无线功能, 低功耗, 丰富的协议栈</li></ul></li><li><p><strong>实时控制系统</strong></p><ul><li><strong>推荐</strong>: STM32F746G Discovery, MIMXRT1050-EVK</li><li><strong>优势</strong>: 高性能处理器, 丰富的外设, 实时响应</li></ul></li><li><p><strong>网关和边缘计算</strong></p><ul><li><strong>推荐</strong>: UP Squared, ESP32 DevKitC</li><li><strong>优势</strong>: 高性能, 多种通信接口, 丰富的存储选项</li></ul></li><li><p><strong>入门和教育</strong></p><ul><li><strong>推荐</strong>: STM32 Nucleo-F401RE, FRDM-K64F</li><li><strong>优势</strong>: 价格适中, 资源丰富, 社区支持好</li></ul></li><li><p><strong>工业控制</strong></p><ul><li><strong>推荐</strong>: MIMXRT1050-EVK, STM32F746G Discovery</li><li><strong>优势</strong>: 高可靠性, 丰富的接口, 实时性能</li></ul></li></ol><h3 id="根据开发经验选择"><a href="#根据开发经验选择" class="headerlink" title="根据开发经验选择"></a>根据开发经验选择</h3><ol><li><p><strong>初学者</strong></p><ul><li><strong>推荐</strong>: STM32 Nucleo 系列, FRDM-K64F</li><li><strong>原因</strong>: 文档丰富, 示例代码多, 社区支持好</li></ul></li><li><p><strong>有经验的开发者</strong></p><ul><li><strong>推荐</strong>: nRF52840 DK, ESP32 DevKitC</li><li><strong>原因</strong>: 功能强大, 灵活性高, 可实现复杂应用</li></ul></li><li><p><strong>专业嵌入式工程师</strong></p><ul><li><strong>推荐</strong>: MIMXRT1050-EVK, UP Squared</li><li><strong>原因</strong>: 高性能, 丰富的配置选项, 适合复杂系统</li></ul></li></ol><h3 id="根据项目约束选择"><a href="#根据项目约束选择" class="headerlink" title="根据项目约束选择"></a>根据项目约束选择</h3><ol><li><p><strong>成本敏感</strong></p><ul><li><strong>推荐</strong>: STM32 Nucleo 系列, ESP32-C3 DevKitM</li><li><strong>优势</strong>: 价格适中, 性价比高</li></ul></li><li><p><strong>功耗敏感</strong></p><ul><li><strong>推荐</strong>: nRF52840 DK, nRF5340 DK</li><li><strong>优势</strong>: 低功耗设计, 多种省电模式</li></ul></li><li><p><strong>尺寸受限</strong></p><ul><li><strong>推荐</strong>: ESP32-C3 DevKitM, STM32 Nucleo-32 系列</li><li><strong>优势</strong>: 小尺寸, 高集成度</li></ul></li><li><p><strong>高性能需求</strong></p><ul><li><strong>推荐</strong>: MIMXRT1050-EVK, UP Squared</li><li><strong>优势</strong>: 高频率处理器, 大内存</li></ul></li></ol><h2 id="开发板获取方式"><a href="#开发板获取方式" class="headerlink" title="开发板获取方式"></a>开发板获取方式</h2><ol><li><p><strong>官方渠道</strong></p><ul><li>制造商官网</li><li>授权分销商</li></ul></li><li><p><strong>电子元件分销商</strong></p><ul><li>Mouser Electronics</li><li>Digi-Key</li><li>Element14 &#x2F; Newark</li><li>RS Components</li></ul></li><li><p><strong>在线零售商</strong></p><ul><li>Amazon</li><li>Adafruit</li><li>SparkFun</li><li>Seeed Studio</li></ul></li></ol><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ol><li><p><strong>环境准备</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Zephyr SDK</span></span><br><span class="line">wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br><span class="line">tar xvf zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> zephyr-sdk-0.16.1</span><br><span class="line">./setup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 Zephyr 源码</span></span><br><span class="line">west init -m https://github.com/zephyrproject-rtos/zephyr --mr v2.9.1 zephyrproject</span><br><span class="line"><span class="built_in">cd</span> zephyrproject</span><br><span class="line">west update</span><br></pre></td></tr></table></figure></li><li><p><strong>构建示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对特定开发板构建 Hello World 示例</span></span><br><span class="line"><span class="built_in">cd</span> zephyrproject/zephyr</span><br><span class="line">west build -b nrf52840dk_nrf52840 samples/hello_world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录到开发板</span></span><br><span class="line">west flash</span><br></pre></td></tr></table></figure></li><li><p><strong>调试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动调试会话</span></span><br><span class="line">west debug</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 支持广泛的硬件平台，从低功耗微控制器到高性能处理器。选择合适的开发板对于项目成功至关重要。在选择时，应考虑：</p><ol><li>应用需求（处理能力、内存、通信接口）</li><li>开发经验和可用资源</li><li>项目约束（成本、功耗、尺寸）</li><li>工具链和调试支持</li></ol><p>通过本文档提供的信息，您可以更好地了解各种开发板的特点，并为您的项目选择最合适的硬件平台。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加新板子到 Zephyr</title>
      <link href="/2025/03/21/nodic/zephyr/boards/porting/"/>
      <url>/2025/03/21/nodic/zephyr/boards/porting/</url>
      
        <content type="html"><![CDATA[<h1 id="添加新板子到-Zephyr"><a href="#添加新板子到-Zephyr" class="headerlink" title="添加新板子到 Zephyr"></a>添加新板子到 Zephyr</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 00:45</li></ul><p>本文档详细介绍了如何将新的开发板添加到 Zephyr RTOS 中，包括移植流程、设备树配置、驱动适配和调试方法。</p><h2 id="移植流程概述"><a href="#移植流程概述" class="headerlink" title="移植流程概述"></a>移植流程概述</h2><ol><li><p><strong>准备工作</strong></p><ul><li>收集硬件文档</li><li>确定 SoC 和 CPU 架构</li><li>检查现有的类似板子支持</li></ul></li><li><p><strong>创建板级支持包 (BSP)</strong></p><ul><li>添加新的板子目录</li><li>创建基本配置文件</li></ul></li><li><p><strong>配置设备树</strong></p><ul><li>定义板子特定的设备树</li><li>配置引脚复用和外设</li></ul></li><li><p><strong>适配驱动程序</strong></p><ul><li>确认所需驱动的可用性</li><li>修改或创建新的驱动程序</li></ul></li><li><p><strong>实现板级初始化</strong></p><ul><li>配置时钟系统</li><li>设置中断控制器</li><li>初始化关键外设</li></ul></li><li><p><strong>配置构建系统</strong></p><ul><li>更新 CMakeLists.txt</li><li>设置 Kconfig 选项</li></ul></li><li><p><strong>测试和调试</strong></p><ul><li>编译基本示例</li><li>使用调试工具验证功能</li></ul></li><li><p><strong>文档和示例</strong></p><ul><li>编写板级文档</li><li>创建板子特定的示例代码</li></ul></li></ol><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><ul><li><p>收集硬件文档</p><ul><li>处理器数据手册</li><li>开发板原理图</li><li>引脚分配表</li></ul></li><li><p>确定 SoC 和 CPU 架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 Zephyr 支持的架构</span></span><br><span class="line"><span class="built_in">ls</span> zephyr/arch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 SoC 支持</span></span><br><span class="line"><span class="built_in">ls</span> zephyr/soc</span><br></pre></td></tr></table></figure></li><li><p>检查类似板子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找类似的板子支持</span></span><br><span class="line">find zephyr/boards -name <span class="string">&quot;*_defconfig&quot;</span> | grep -i &lt;your_soc_family&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-创建板级支持包"><a href="#2-创建板级支持包" class="headerlink" title="2. 创建板级支持包"></a>2. 创建板级支持包</h3><ul><li><p>添加新的板子目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p zephyr/boards/&lt;<span class="built_in">arch</span>&gt;/&lt;your_board_name&gt;</span><br><span class="line"><span class="built_in">cd</span> zephyr/boards/&lt;<span class="built_in">arch</span>&gt;/&lt;your_board_name&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建基本配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> &lt;your_board_name&gt;.dts</span><br><span class="line"><span class="built_in">touch</span> &lt;your_board_name&gt;_defconfig</span><br><span class="line"><span class="built_in">touch</span> board.cmake</span><br><span class="line"><span class="built_in">touch</span> Kconfig.board</span><br><span class="line"><span class="built_in">touch</span> Kconfig.defconfig</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-配置设备树"><a href="#3-配置设备树" class="headerlink" title="3. 配置设备树"></a>3. 配置设备树</h3><ul><li>编辑 <code>&lt;your_board_name&gt;.dts</code><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">/dts-v1/</span><span class="punctuation">;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;your_soc.dtsi&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">model</span> <span class="operator">=</span> <span class="string">&quot;Your Board Name&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,your-board-name&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,shell-uart</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,sram</span> <span class="operator">=</span> <span class="variable">&amp;sram0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,flash</span> <span class="operator">=</span> <span class="variable">&amp;flash0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定义 LED */</span></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定义按钮 */</span></span><br><span class="line">    <span class="title class_">buttons</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-keys&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        button0:</span> <span class="title class_">button_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">11</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Push button switch 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">tx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">6</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">rx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">8</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">sda-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">26</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">scl-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">27</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加其他外设配置 */</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-适配驱动程序"><a href="#4-适配驱动程序" class="headerlink" title="4. 适配驱动程序"></a>4. 适配驱动程序</h3><ul><li><p>检查驱动可用性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> zephyr/drivers</span><br></pre></td></tr></table></figure></li><li><p>修改驱动程序（如果需要）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：修改 UART 驱动以支持新的硬件特性</span></span><br><span class="line"><span class="comment">// 文件：zephyr/drivers/serial/uart_your_soc.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">uart_your_soc_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 实现初始化逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">uart_driver_api</span> <span class="title">uart_your_soc_driver_api</span> =</span> &#123;</span><br><span class="line">    .poll_in = uart_your_soc_poll_in,</span><br><span class="line">    .poll_out = uart_your_soc_poll_out,</span><br><span class="line">    .err_check = uart_your_soc_err_check,</span><br><span class="line">    <span class="comment">// 添加其他必要的函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义设备</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_YOUR_SOC_INIT(n)                                            \</span></span><br><span class="line"><span class="meta">    static struct uart_your_soc_data uart_your_soc_data_##n = &#123;          \</span></span><br><span class="line"><span class="meta">        <span class="comment">// 初始化数据                                                     \</span></span></span><br><span class="line"><span class="comment"><span class="meta">    &#125;;                                                                   \</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                                         \</span></span></span><br><span class="line"><span class="comment"><span class="meta">    static const struct uart_your_soc_config uart_your_soc_config_##n = &#123;\</span></span></span><br><span class="line"><span class="comment"><span class="meta">        // 配置数据                                                       \</span></span></span><br><span class="line"><span class="comment"><span class="meta">    &#125;;                                                                   \</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                                         \</span></span></span><br><span class="line"><span class="comment"><span class="meta">    DEVICE_DT_INST_DEFINE(n,                                             \</span></span></span><br><span class="line"><span class="comment"><span class="meta">                          uart_your_soc_init,                            \</span></span></span><br><span class="line"><span class="comment"><span class="meta">                          NULL,                                          \</span></span></span><br><span class="line"><span class="comment"><span class="meta">                          &amp;uart_your_soc_data_##n,                       \</span></span></span><br><span class="line"><span class="comment"><span class="meta">                          &amp;uart_your_soc_config_##n,                     \</span></span></span><br><span class="line"><span class="comment"><span class="meta">                          PRE_KERNEL_1,                                  \</span></span></span><br><span class="line"><span class="comment"><span class="meta">                          CONFIG_SERIAL_INIT_PRIORITY,                   \</span></span></span><br><span class="line"><span class="comment"><span class="meta">                          &amp;uart_your_soc_driver_api);</span></span></span><br><span class="line"></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(UART_YOUR_SOC_INIT)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-实现板级初始化"><a href="#5-实现板级初始化" class="headerlink" title="5. 实现板级初始化"></a>5. 实现板级初始化</h3><ul><li>创建 <code>board.c</code> 文件<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">board_your_board_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 配置时钟</span></span><br><span class="line">    <span class="comment">// 设置中断控制器</span></span><br><span class="line">    <span class="comment">// 初始化关键外设</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SYS_INIT(board_your_board_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-配置构建系统"><a href="#6-配置构建系统" class="headerlink" title="6. 配置构建系统"></a>6. 配置构建系统</h3><ul><li><p>编辑 <code>CMakeLists.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加源文件</span></span><br><span class="line">zephyr_library_sources(board.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含头文件目录</span></span><br><span class="line">zephyr_library_include_directories(<span class="variable">$&#123;ZEPHYR_BASE&#125;</span>/drivers)</span><br></pre></td></tr></table></figure></li><li><p>配置 <code>Kconfig.board</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config BOARD_YOUR_BOARD_NAME</span><br><span class="line">    bool &quot;Your Board Name&quot;</span><br><span class="line">    depends on SOC_SERIES_YOUR_SOC_SERIES</span><br></pre></td></tr></table></figure></li><li><p>配置 <code>Kconfig.defconfig</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if BOARD_YOUR_BOARD_NAME</span><br><span class="line"></span><br><span class="line">config BOARD</span><br><span class="line">    default &quot;your_board_name&quot;</span><br><span class="line"></span><br><span class="line">if GPIO</span><br><span class="line"></span><br><span class="line">config GPIO_AS_PINRESET</span><br><span class="line">    default y</span><br><span class="line"></span><br><span class="line">endif # GPIO</span><br><span class="line"></span><br><span class="line">endif # BOARD_YOUR_BOARD_NAME</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-测试和调试"><a href="#7-测试和调试" class="headerlink" title="7. 测试和调试"></a>7. 测试和调试</h3><ul><li><p>编译基本示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west build -b your_board_name samples/basic/blinky</span><br></pre></td></tr></table></figure></li><li><p>使用调试工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west debug</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-文档和示例"><a href="#8-文档和示例" class="headerlink" title="8. 文档和示例"></a>8. 文档和示例</h3><ul><li>创建 <code>doc/board.rst</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">.. _your_board_name:</span><br><span class="line"></span><br><span class="line">Your Board Name</span><br><span class="line">###############</span><br><span class="line"></span><br><span class="line">Overview</span><br><span class="line">********</span><br><span class="line"></span><br><span class="line">The Your Board Name is a development board based on the YOUR_SOC.</span><br><span class="line"></span><br><span class="line">Hardware</span><br><span class="line">********</span><br><span class="line"></span><br><span class="line">- YOUR_SOC ARM Cortex-M4 processor at 64 MHz</span><br><span class="line">- 512 KiB flash memory</span><br><span class="line">- 64 KiB RAM</span><br><span class="line">- GPIO</span><br><span class="line">- UART</span><br><span class="line">- I2C</span><br><span class="line">- SPI</span><br><span class="line"></span><br><span class="line">Supported Features</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">The your_board_name board configuration supports the following hardware features:</span><br><span class="line"></span><br><span class="line">+-----------+------------+-------------------------------------+</span><br><span class="line">| Interface | Controller | Driver/Component                    |</span><br><span class="line">+===========+============+=====================================+</span><br><span class="line">| NVIC      | on-chip    | nested vector interrupt controller  |</span><br><span class="line">+-----------+------------+-------------------------------------+</span><br><span class="line">| UART      | on-chip    | serial port-polling;                |</span><br><span class="line">|           |            | serial port-interrupt               |</span><br><span class="line">+-----------+------------+-------------------------------------+</span><br><span class="line">| GPIO      | on-chip    | gpio                                |</span><br><span class="line">+-----------+------------+-------------------------------------+</span><br><span class="line">| I2C       | on-chip    | i2c                                 |</span><br><span class="line">+-----------+------------+-------------------------------------+</span><br><span class="line">| SPI       | on-chip    | spi                                 |</span><br><span class="line">+-----------+------------+-------------------------------------+</span><br><span class="line"></span><br><span class="line">Connections and IOs</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">LED</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">* LED0 (green) = P0.13</span><br><span class="line"></span><br><span class="line">Push buttons</span><br><span class="line">------------</span><br><span class="line"></span><br><span class="line">* BUTTON0 = P0.11</span><br><span class="line"></span><br><span class="line">Programming and Debugging</span><br><span class="line">*************************</span><br><span class="line"></span><br><span class="line">Flashing</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">Here is an example for the :ref:`hello_world` application.</span><br><span class="line"></span><br><span class="line">.. zephyr-app-commands::</span><br><span class="line">   :zephyr-app: samples/hello_world</span><br><span class="line">   :board: your_board_name</span><br><span class="line">   :goals: flash</span><br><span class="line"></span><br><span class="line">Debugging</span><br><span class="line">=========</span><br><span class="line"></span><br><span class="line">Refer to the :ref:`cmake_debugging` guide for information about debugging Zephyr applications.</span><br><span class="line"></span><br><span class="line">References</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">.. target-notes::</span><br><span class="line"></span><br><span class="line">.. _Your Board Name website: https://www.example.com/your_board</span><br><span class="line">.. _YOUR_SOC Datasheet: https://www.example.com/your_soc_datasheet.pdf</span><br></pre></td></tr></table></figure></li></ul><h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h2><ol><li><p><strong>使用 OpenOCD</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 OpenOCD 配置文件</span></span><br><span class="line"><span class="built_in">touch</span> your_board.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line"><span class="built_in">source</span> [find interface/jlink.cfg]</span><br><span class="line">transport <span class="keyword">select</span> swd</span><br><span class="line"><span class="built_in">source</span> [find target/your_soc.cfg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 OpenOCD</span></span><br><span class="line">openocd -f your_board.cfg</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 GDB</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 GDB</span></span><br><span class="line">arm-zephyr-eabi-gdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 GDB 中连接到目标</span></span><br><span class="line">(gdb) target remote localhost:3333</span><br><span class="line">(gdb) monitor reset halt</span><br><span class="line">(gdb) load</span><br><span class="line">(gdb) <span class="built_in">continue</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用 Segger J-Link</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 J-Link GDB 服务器</span></span><br><span class="line">JLinkGDBServer -device YOUR_SOC -<span class="keyword">if</span> SWD -speed 4000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在另一个终端中启动 GDB</span></span><br><span class="line">arm-zephyr-eabi-gdb</span><br><span class="line">(gdb) target remote localhost:2331</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 pyOCD</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 pyOCD</span></span><br><span class="line">pip install pyocd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 pyOCD GDB 服务器</span></span><br><span class="line">pyocd gdbserver -t YOUR_SOC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 GDB 连接</span></span><br><span class="line">arm-zephyr-eabi-gdb</span><br><span class="line">(gdb) target remote localhost:3333</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>复用现有代码</strong></p><ul><li>尽可能使用现有的 SoC 和驱动程序代码</li><li>只添加必要的板级特定代码</li></ul></li><li><p><strong>遵循命名约定</strong></p><ul><li>使用一致的命名方式，如 <code>&lt;vendor&gt;_&lt;board&gt;</code></li><li>在设备树中使用描述性的标签</li></ul></li><li><p><strong>文档化</strong></p><ul><li>详细记录硬件特性和支持的功能</li><li>提供清晰的配置和使用说明</li></ul></li><li><p><strong>测试覆盖</strong></p><ul><li>为所有支持的功能编写测试用例</li><li>使用持续集成确保兼容性</li></ul></li><li><p><strong>保持更新</strong></p><ul><li>跟踪上游 Zephyr 的变化</li><li>定期更新板级支持包</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>编译错误</strong></p><ul><li>检查 Kconfig 和 CMake 配置</li><li>验证所有必要的驱动程序都已启用</li></ul></li><li><p><strong>设备树错误</strong></p><ul><li>确保设备树语法正确</li><li>验证所有必要的节点都已定义</li></ul></li><li><p><strong>驱动程序不工作</strong></p><ul><li>检查设备树配置</li><li>验证驱动程序初始化顺序</li></ul></li><li><p><strong>调试连接失败</strong></p><ul><li>检查硬件连接</li><li>验证调试器配置</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>检查时钟配置</li><li>优化中断和 DMA 设置</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将新的开发板添加到 Zephyr RTOS 需要详细了解硬件规格、熟悉 Zephyr 的架构和开发流程。通过遵循本文档中的步骤和最佳实践，您可以成功地将新的硬件平台集成到 Zephyr 生态系统中。记住，良好的文档和全面的测试对于确保您的贡献被社区接受和长期维护至关重要。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 硬件抽象层</title>
      <link href="/2025/03/21/nodic/zephyr/boards/hal/"/>
      <url>/2025/03/21/nodic/zephyr/boards/hal/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-硬件抽象层"><a href="#Zephyr-硬件抽象层" class="headerlink" title="Zephyr 硬件抽象层"></a>Zephyr 硬件抽象层</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 00:30</li></ul><p>本文档详细介绍了 Zephyr RTOS 的硬件抽象层 (HAL) 架构、驱动框架、中断管理和时钟系统等内容。</p><h2 id="HAL-架构"><a href="#HAL-架构" class="headerlink" title="HAL 架构"></a>HAL 架构</h2><p>Zephyr 的硬件抽象层采用分层设计，从底层硬件到应用程序分为以下几层：</p><h3 id="1-架构层-Architecture-Layer"><a href="#1-架构层-Architecture-Layer" class="headerlink" title="1. 架构层 (Architecture Layer)"></a>1. 架构层 (Architecture Layer)</h3><p>架构层提供了与 CPU 架构相关的抽象，如上下文切换、中断处理、内存管理单元等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 架构层代码示例 (arch/arm/core/aarch32/cpu_idle.S)</span></span><br><span class="line">_ASM_FILE_PROLOGUE</span><br><span class="line"></span><br><span class="line"><span class="title function_">GTEXT</span><span class="params">(arch_cpu_idle)</span></span><br><span class="line"><span class="title function_">GTEXT</span><span class="params">(arch_cpu_atomic_idle)</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">SECTION_FUNC</span><span class="params">(TEXT, arch_cpu_idle)</span></span><br><span class="line">    wfi</span><br><span class="line">    bx lr</span><br><span class="line"></span><br><span class="line"><span class="title function_">SECTION_FUNC</span><span class="params">(TEXT, arch_cpu_atomic_idle)</span></span><br><span class="line">    <span class="comment">// 禁用中断</span></span><br><span class="line">    cpsid i</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待中断</span></span><br><span class="line">    wfi</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用中断</span></span><br><span class="line">    cpsie i</span><br><span class="line"></span><br><span class="line">    bx lr</span><br></pre></td></tr></table></figure><h3 id="2-SoC-层-System-on-Chip-Layer"><a href="#2-SoC-层-System-on-Chip-Layer" class="headerlink" title="2. SoC 层 (System on Chip Layer)"></a>2. SoC 层 (System on Chip Layer)</h3><p>SoC 层处理特定芯片系列的初始化和配置，包括时钟设置、电源管理和外设配置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SoC 层代码示例 (soc/arm/nordic_nrf/nrf52/soc.c)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">z_arm_platform_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    SystemInit();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NRF_ENABLE_ICACHE</span></span><br><span class="line">    <span class="comment">/* 启用指令缓存 */</span></span><br><span class="line">    NRF_NVMC-&gt;ICACHECNF = NVMC_ICACHECNF_CACHEEN_Enabled;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_SOC_DCDC_NRF52X)</span></span><br><span class="line">    <span class="comment">/* 启用 DC/DC 转换器 */</span></span><br><span class="line">    NRF_POWER-&gt;DCDCEN = <span class="number">1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-板级层-Board-Layer"><a href="#3-板级层-Board-Layer" class="headerlink" title="3. 板级层 (Board Layer)"></a>3. 板级层 (Board Layer)</h3><p>板级层处理特定开发板的配置，包括引脚复用、外部组件初始化等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 板级层代码示例 (boards/arm/nrf52840dk_nrf52840/board.c)</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">board_nrf52840dk_nrf52840_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    err = gpio_pin_configure(DEVICE_DT_GET(DT_NODELABEL(gpio0)),</span><br><span class="line">                           <span class="number">13</span>, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SYS_INIT(board_nrf52840dk_nrf52840_init, PRE_KERNEL_1,</span><br><span class="line">         CONFIG_BOARD_INIT_PRIORITY);</span><br></pre></td></tr></table></figure><h3 id="4-驱动层-Driver-Layer"><a href="#4-驱动层-Driver-Layer" class="headerlink" title="4. 驱动层 (Driver Layer)"></a>4. 驱动层 (Driver Layer)</h3><p>驱动层提供了与硬件外设交互的统一接口，如 GPIO、UART、SPI 等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 驱动层代码示例 (drivers/gpio/gpio_nrfx.c)</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_nrfx_port_get_raw</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *port, <span class="type">uint32_t</span> *value)</span></span><br><span class="line">&#123;</span><br><span class="line">    NRF_GPIO_Type *gpio = get_port_cfg(port)-&gt;gpio_base_addr;</span><br><span class="line"></span><br><span class="line">    *value = nrf_gpio_port_in_read(gpio);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_nrfx_port_set_masked_raw</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *port,</span></span><br><span class="line"><span class="params">                                        <span class="type">uint32_t</span> mask, <span class="type">uint32_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    NRF_GPIO_Type *gpio = get_port_cfg(port)-&gt;gpio_base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> out = nrf_gpio_port_out_read(gpio);</span><br><span class="line"></span><br><span class="line">    nrf_gpio_port_out_write(gpio, (out &amp; ~mask) | (value &amp; mask));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-应用层-Application-Layer"><a href="#5-应用层-Application-Layer" class="headerlink" title="5. 应用层 (Application Layer)"></a>5. 应用层 (Application Layer)</h3><p>应用层使用驱动层提供的 API 实现具体功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应用层代码示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">gpio_dev</span>;</span></span><br><span class="line">    </span><br><span class="line">    gpio_dev = DEVICE_DT_GET(DT_NODELABEL(gpio0));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(gpio_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    gpio_pin_configure(gpio_dev, <span class="number">13</span>, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        gpio_pin_toggle(gpio_dev, <span class="number">13</span>);</span><br><span class="line">        k_sleep(K_MSEC(<span class="number">500</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="驱动框架"><a href="#驱动框架" class="headerlink" title="驱动框架"></a>驱动框架</h2><p>Zephyr 的驱动框架基于设备模型，提供了统一的接口和生命周期管理。</p><h3 id="设备模型"><a href="#设备模型" class="headerlink" title="设备模型"></a>设备模型</h3><p>设备模型的核心是 <code>struct device</code> 结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> *config;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> *api;</span><br><span class="line">    <span class="type">void</span> *data;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PM_DEVICE</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">pm_device</span> *<span class="title">pm</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>name</strong>: 设备名称</li><li><strong>config</strong>: 设备的静态配置信息</li><li><strong>api</strong>: 设备操作函数指针</li><li><strong>data</strong>: 设备的运行时数据</li><li><strong>pm</strong>: 电源管理相关信息</li></ul><h3 id="驱动注册"><a href="#驱动注册" class="headerlink" title="驱动注册"></a>驱动注册</h3><p>使用 <code>DEVICE_DEFINE</code> 宏注册设备：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEVICE_DEFINE(my_dev,                  <span class="comment">// 设备名称</span></span><br><span class="line">              <span class="string">&quot;MY_DEVICE&quot;</span>,             <span class="comment">// 友好名称</span></span><br><span class="line">              my_device_init,          <span class="comment">// 初始化函数</span></span><br><span class="line">              my_device_pm_control,    <span class="comment">// 电源管理函数</span></span><br><span class="line">              &amp;my_device_data,         <span class="comment">// 设备数据</span></span><br><span class="line">              &amp;my_device_config,       <span class="comment">// 设备配置</span></span><br><span class="line">              POST_KERNEL,             <span class="comment">// 初始化级别</span></span><br><span class="line">              CONFIG_MY_DEVICE_INIT_PRIORITY, <span class="comment">// 初始化优先级</span></span><br><span class="line">              &amp;my_device_api);         <span class="comment">// 设备 API</span></span><br></pre></td></tr></table></figure><h3 id="设备初始化"><a href="#设备初始化" class="headerlink" title="设备初始化"></a>设备初始化</h3><p>设备初始化过程按照初始化级别和优先级顺序进行：</p><ol><li><code>PRE_KERNEL_1</code>: 基础硬件初始化</li><li><code>PRE_KERNEL_2</code>: 设备和驱动初始化</li><li><code>POST_KERNEL</code>: 需要内核服务的设备</li><li><code>APPLICATION</code>: 应用级设备</li><li><code>SMP</code>: 多处理器相关设备</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取配置和数据</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_device_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_device_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化硬件</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="驱动-API"><a href="#驱动-API" class="headerlink" title="驱动 API"></a>驱动 API</h3><p>每种类型的驱动程序定义了一组标准 API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GPIO 驱动 API 示例</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*pin_configure)(<span class="type">const</span> <span class="keyword">struct</span> device *port, <span class="type">gpio_pin_t</span> pin,</span><br><span class="line">                        <span class="type">gpio_flags_t</span> flags);</span><br><span class="line">    <span class="type">int</span> (*port_get_raw)(<span class="type">const</span> <span class="keyword">struct</span> device *port, <span class="type">gpio_port_value_t</span> *value);</span><br><span class="line">    <span class="type">int</span> (*port_set_masked_raw)(<span class="type">const</span> <span class="keyword">struct</span> device *port, <span class="type">gpio_port_pins_t</span> mask,</span><br><span class="line">                              <span class="type">gpio_port_value_t</span> value);</span><br><span class="line">    <span class="type">int</span> (*port_set_bits_raw)(<span class="type">const</span> <span class="keyword">struct</span> device *port, <span class="type">gpio_port_pins_t</span> pins);</span><br><span class="line">    <span class="type">int</span> (*port_clear_bits_raw)(<span class="type">const</span> <span class="keyword">struct</span> device *port, <span class="type">gpio_port_pins_t</span> pins);</span><br><span class="line">    <span class="type">int</span> (*port_toggle_bits)(<span class="type">const</span> <span class="keyword">struct</span> device *port, <span class="type">gpio_port_pins_t</span> pins);</span><br><span class="line">    <span class="type">int</span> (*pin_interrupt_configure)(<span class="type">const</span> <span class="keyword">struct</span> device *port, <span class="type">gpio_pin_t</span> pin,</span><br><span class="line">                                 <span class="keyword">enum</span> gpio_int_mode mode,</span><br><span class="line">                                 <span class="keyword">enum</span> gpio_int_trig trig);</span><br><span class="line">    <span class="type">int</span> (*manage_callback)(<span class="type">const</span> <span class="keyword">struct</span> device *port,</span><br><span class="line">                         <span class="keyword">struct</span> gpio_callback *callback, <span class="type">bool</span> <span class="built_in">set</span>);</span><br><span class="line">    <span class="type">uint32_t</span> (*get_pending_int)(<span class="type">const</span> <span class="keyword">struct</span> device *dev);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="设备使用"><a href="#设备使用" class="headerlink" title="设备使用"></a>设备使用</h3><p>应用程序通过 <code>DEVICE_DT_GET</code> 或 <code>device_get_binding</code> 获取设备实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用设备树获取设备</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(uart0));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查设备是否就绪</span></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用设备 API</span></span><br><span class="line">uart_config(dev, &amp;uart_cfg);</span><br></pre></td></tr></table></figure><h2 id="中断管理"><a href="#中断管理" class="headerlink" title="中断管理"></a>中断管理</h2><p>Zephyr 提供了一套统一的中断管理接口，抽象了不同架构的中断控制器差异。</p><h3 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h3><p>使用 <code>IRQ_CONNECT</code> 宏连接中断处理函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IRQ_CONNECT(IRQ_NUM,           <span class="comment">// 中断号</span></span><br><span class="line">            IRQ_PRIO,          <span class="comment">// 中断优先级</span></span><br><span class="line">            irq_handler,       <span class="comment">// 中断处理函数</span></span><br><span class="line">            <span class="literal">NULL</span>,              <span class="comment">// 传递给处理函数的参数</span></span><br><span class="line">            IRQ_FLAGS);        <span class="comment">// 中断标志</span></span><br></pre></td></tr></table></figure><h3 id="中断处理"><a href="#中断处理" class="headerlink" title="中断处理"></a>中断处理</h3><p>中断处理函数示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">irq_handler</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> arg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_device_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理中断</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清除中断标志</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中断控制"><a href="#中断控制" class="headerlink" title="中断控制"></a>中断控制</h3><p>控制中断的启用和禁用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启用特定中断</span></span><br><span class="line">irq_enable(IRQ_NUM);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用特定中断</span></span><br><span class="line">irq_disable(IRQ_NUM);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用所有中断</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key = irq_lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临界区代码</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复中断状态</span></span><br><span class="line">irq_unlock(key);</span><br></pre></td></tr></table></figure><h3 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h3><p>设置中断优先级：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置中断优先级</span></span><br><span class="line">irq_priority_set(IRQ_NUM, IRQ_PRIO);</span><br></pre></td></tr></table></figure><h2 id="时钟系统"><a href="#时钟系统" class="headerlink" title="时钟系统"></a>时钟系统</h2><p>Zephyr 的时钟系统提供了计时、延时和定时器功能。</p><h3 id="系统时钟"><a href="#系统时钟" class="headerlink" title="系统时钟"></a>系统时钟</h3><p>系统时钟是内核的基础计时单元：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取系统滴答计数</span></span><br><span class="line"><span class="type">uint32_t</span> ticks = k_cycle_get_32();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取系统启动后的时间（毫秒）</span></span><br><span class="line"><span class="type">int64_t</span> uptime = k_uptime_get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取系统启动后的时间（微秒）</span></span><br><span class="line"><span class="type">int64_t</span> uptime_us = k_uptime_get_32();</span><br></pre></td></tr></table></figure><h3 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h3><p>提供不同精度的延时功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延时指定的滴答数</span></span><br><span class="line">k_sleep(K_TICKS(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延时指定的毫秒数</span></span><br><span class="line">k_msleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延时指定的微秒数</span></span><br><span class="line">k_usleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>内核定时器用于延迟执行或周期性执行任务：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义定时器</span></span><br><span class="line">K_TIMER_DEFINE(my_timer, timer_expiry_function, timer_stop_function);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动定时器（延迟 100ms 后到期，之后每 1000ms 触发一次）</span></span><br><span class="line">k_timer_start(&amp;my_timer, K_MSEC(<span class="number">100</span>), K_MSEC(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line">k_timer_stop(&amp;my_timer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_expiry_function</span><span class="params">(<span class="keyword">struct</span> k_timer *timer_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定时器到期时执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_stop_function</span><span class="params">(<span class="keyword">struct</span> k_timer *timer_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定时器停止时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="硬件定时器"><a href="#硬件定时器" class="headerlink" title="硬件定时器"></a>硬件定时器</h3><p>硬件定时器通过计数器驱动实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/counter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">counter_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(timer0));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">counter_alarm_cfg</span> <span class="title">alarm_cfg</span> =</span> &#123;</span><br><span class="line">    .callback = alarm_callback,</span><br><span class="line">    .flags = <span class="number">0</span>,</span><br><span class="line">    .ticks = counter_us_to_ticks(counter_dev, <span class="number">1000</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">counter_start(counter_dev);</span><br><span class="line">counter_set_alarm(counter_dev, <span class="number">0</span>, &amp;alarm_cfg);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">alarm_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint8_t</span> chan_id,</span></span><br><span class="line"><span class="params">                         <span class="type">uint32_t</span> ticks, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 闹钟回调函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h2><p>Zephyr 的电源管理系统允许设备进入低功耗状态。</p><h3 id="设备电源管理"><a href="#设备电源管理" class="headerlink" title="设备电源管理"></a>设备电源管理</h3><p>设备可以实现电源管理回调：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_pm_control</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                              <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">// 唤醒设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">// 挂起设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义设备的电源管理支持</span></span><br><span class="line">PM_DEVICE_DEFINE(my_dev, my_device_pm_control);</span><br></pre></td></tr></table></figure><h3 id="系统电源管理"><a href="#系统电源管理" class="headerlink" title="系统电源管理"></a>系统电源管理</h3><p>系统级电源管理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置电源状态约束</span></span><br><span class="line">pm_constraint_set(PM_STATE_SUSPEND_TO_RAM);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放电源状态约束</span></span><br><span class="line">pm_constraint_release(PM_STATE_SUSPEND_TO_RAM);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置电源状态</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pm_state_info</span> <span class="title">info</span> =</span> &#123;</span><br><span class="line">    .state = PM_STATE_SUSPEND_TO_RAM,</span><br><span class="line">    .min_residency_us = <span class="number">1000</span>,</span><br><span class="line">    .exit_latency_us = <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line">pm_power_state_set(&amp;info);</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>使用抽象接口</strong></p><ul><li>使用 Zephyr 提供的抽象 API，而不是直接访问硬件</li><li>这样可以提高代码的可移植性</li></ul></li><li><p><strong>正确处理错误</strong></p><ul><li>检查所有 API 调用的返回值</li><li>实现适当的错误恢复机制</li></ul></li><li><p><strong>遵循设备模型</strong></p><ul><li>使用标准的设备注册和初始化流程</li><li>实现所有必要的驱动 API 函数</li></ul></li><li><p><strong>中断处理</strong></p><ul><li>保持中断处理函数简短</li><li>使用工作队列处理耗时操作</li></ul></li><li><p><strong>电源管理</strong></p><ul><li>实现设备电源管理回调</li><li>在不需要时禁用外设</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>设备初始化失败</strong></p><ul><li>检查依赖项是否已初始化</li><li>验证设备树配置是否正确</li><li>确认硬件连接是否正常</li></ul></li><li><p><strong>中断问题</strong></p><ul><li>检查中断优先级设置</li><li>验证中断向量表配置</li><li>确认中断处理函数注册是否正确</li></ul></li><li><p><strong>定时器不准确</strong></p><ul><li>检查系统时钟配置</li><li>验证定时器参数</li><li>考虑使用硬件定时器</li></ul></li><li><p><strong>电源管理问题</strong></p><ul><li>检查电源管理回调实现</li><li>验证设备状态转换逻辑</li><li>确认唤醒源配置</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 的硬件抽象层提供了一套统一的接口，屏蔽了底层硬件差异，使应用程序可以在不同的硬件平台上运行。通过分层设计和标准化的驱动框架，Zephyr 实现了高度的可移植性和模块化。了解这些概念对于开发 Zephyr 应用程序和驱动程序至关重要。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 硬件支持</title>
      <link href="/2025/03/21/nodic/zephyr/boards/README/"/>
      <url>/2025/03/21/nodic/zephyr/boards/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-硬件支持"><a href="#Zephyr-硬件支持" class="headerlink" title="Zephyr 硬件支持"></a>Zephyr 硬件支持</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 00:15</li></ul><p>本章节详细介绍了 Zephyr RTOS 支持的硬件平台、如何添加新的开发板支持以及硬件抽象层的实现。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><p><a href="supported">支持的开发板</a></p></li><li><p><a href="porting">添加新板子</a></p></li><li><p><a href="hal">硬件抽象层</a></p><ul><li>开发板选择指南</li></ul></li><li><p><a href="./porting.md">添加新板子</a></p><ul><li>移植流程</li><li>设备树配置</li><li>驱动适配</li><li>调试方法</li></ul></li><li><p><a href="./hal.md">硬件抽象层</a></p><ul><li>HAL 架构</li><li>驱动框架</li><li>中断管理</li><li>时钟系统</li></ul></li></ol><h2 id="硬件支持概述"><a href="#硬件支持概述" class="headerlink" title="硬件支持概述"></a>硬件支持概述</h2><p>Zephyr RTOS 支持多种硬件架构和平台：</p><ol><li><p><strong>处理器架构</strong></p><ul><li>ARM Cortex-M</li><li>ARM Cortex-R</li><li>ARM Cortex-A</li><li>x86</li><li>RISC-V</li><li>ARC</li><li>Xtensa</li></ul></li><li><p><strong>主要厂商支持</strong></p><ul><li>Nordic Semiconductor</li><li>STMicroelectronics</li><li>NXP</li><li>Microchip</li><li>Espressif</li><li>Intel</li><li>TI</li></ul></li><li><p><strong>硬件功能支持</strong></p><ul><li>处理器核心</li><li>内存管理</li><li>中断控制器</li><li>定时器</li><li>GPIO</li><li>串口</li><li>I2C&#x2F;SPI</li><li>ADC&#x2F;DAC</li><li>PWM</li><li>网络接口</li></ul></li></ol><h2 id="开发板支持层次"><a href="#开发板支持层次" class="headerlink" title="开发板支持层次"></a>开发板支持层次</h2><p>Zephyr 的硬件支持分为以下层次：</p><ol><li><p><strong>SoC 层</strong></p><ul><li>处理器核心配置</li><li>内存映射</li><li>时钟系统</li><li>中断控制器</li></ul></li><li><p><strong>板级支持包 (BSP)</strong></p><ul><li>引脚复用</li><li>外设配置</li><li>时钟配置</li><li>调试接口</li></ul></li><li><p><strong>设备驱动层</strong></p><ul><li>硬件抽象</li><li>设备访问 API</li><li>中断处理</li><li>DMA 支持</li></ul></li></ol><h2 id="硬件配置系统"><a href="#硬件配置系统" class="headerlink" title="硬件配置系统"></a>硬件配置系统</h2><p>Zephyr 使用多种配置机制：</p><ol><li><p><strong>Kconfig 系统</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_BOARD=&quot;nrf52840dk_nrf52840&quot;</span><br><span class="line">CONFIG_SOC=&quot;nRF52840_QIAA&quot;</span><br><span class="line">CONFIG_SOC_SERIES=&quot;nrf52&quot;</span><br><span class="line">CONFIG_SOC_FAMILY=&quot;nordic_nrf&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>设备树</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">soc</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">        uart0:</span> <span class="title class_">uart@40002000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>CMake 配置</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(BOARD nrf52840dk_nrf52840)</span><br><span class="line"><span class="keyword">set</span>(BOARD_ROOT <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="开发工具支持"><a href="#开发工具支持" class="headerlink" title="开发工具支持"></a>开发工具支持</h2><ol><li><p><strong>调试工具</strong></p><ul><li>OpenOCD</li><li>J-Link</li><li>ST-Link</li><li>pyOCD</li><li>Intel System Studio</li></ul></li><li><p><strong>烧录工具</strong></p><ul><li>west flash</li><li>nrfjprog</li><li>pyocd</li><li>openocd</li></ul></li><li><p><strong>开发环境</strong></p><ul><li>Visual Studio Code</li><li>Eclipse</li><li>SEGGER Embedded Studio</li><li>IAR Embedded Workbench</li></ul></li></ol><h2 id="硬件开发流程"><a href="#硬件开发流程" class="headerlink" title="硬件开发流程"></a>硬件开发流程</h2><ol><li><p><strong>选择开发板</strong></p><ul><li>确定硬件需求</li><li>检查 Zephyr 支持状态</li><li>评估开发工具可用性</li></ul></li><li><p><strong>环境设置</strong></p><ul><li>安装工具链</li><li>配置调试器</li><li>准备开发环境</li></ul></li><li><p><strong>硬件配置</strong></p><ul><li>修改设备树</li><li>配置引脚复用</li><li>设置时钟系统</li></ul></li><li><p><strong>驱动开发</strong></p><ul><li>实现设备驱动</li><li>添加中断处理</li><li>配置 DMA</li></ul></li><li><p><strong>测试验证</strong></p><ul><li>功能测试</li><li>性能测试</li><li>稳定性测试</li></ul></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>硬件选择</strong></p><ul><li>选择成熟稳定的平台</li><li>确认工具链支持</li><li>考虑社区活跃度</li></ul></li><li><p><strong>配置管理</strong></p><ul><li>使用版本控制</li><li>文档化硬件配置</li><li>维护测试用例</li></ul></li><li><p><strong>调试策略</strong></p><ul><li>使用 JTAG&#x2F;SWD 调试</li><li>配置串口日志</li><li>实现错误处理</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>优化时钟配置</li><li>合理使用 DMA</li><li>减少中断开销</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>硬件初始化失败</strong></p><ul><li>检查时钟配置</li><li>验证引脚设置</li><li>确认电源状态</li></ul></li><li><p><strong>驱动不工作</strong></p><ul><li>检查设备树配置</li><li>验证驱动初始化</li><li>确认中断配置</li></ul></li><li><p><strong>调试问题</strong></p><ul><li>检查调试器连接</li><li>验证 OpenOCD 配置</li><li>确认 JTAG&#x2F;SWD 设置</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>分析时钟设置</li><li>检查 DMA 配置</li><li>优化中断处理</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了广泛的硬件支持和灵活的配置系统。通过了解这些内容，开发者可以：</p><ol><li>选择合适的硬件平台</li><li>正确配置和使用硬件</li><li>开发和调试设备驱动</li><li>优化系统性能</li></ol><p>在接下来的章节中，我们将详细介绍支持的开发板、移植流程和硬件抽象层的实现。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 蓝牙协议栈指南</title>
      <link href="/2025/03/21/nodic/zephyr/bluetooth/README/"/>
      <url>/2025/03/21/nodic/zephyr/bluetooth/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-蓝牙协议栈指南"><a href="#Zephyr-蓝牙协议栈指南" class="headerlink" title="Zephyr 蓝牙协议栈指南"></a>Zephyr 蓝牙协议栈指南</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 00:00</li></ul><h2 id="1-蓝牙架构"><a href="#1-蓝牙架构" class="headerlink" title="1. 蓝牙架构"></a>1. 蓝牙架构</h2><h3 id="1-1-协议栈结构"><a href="#1-1-协议栈结构" class="headerlink" title="1.1 协议栈结构"></a>1.1 协议栈结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[应用层] --&gt; B[主机层]</span><br><span class="line">    B --&gt; C[控制器层]</span><br><span class="line">    C --&gt; D[硬件]</span><br><span class="line">    subgraph &quot;主机层&quot;</span><br><span class="line">        E[GATT/GAP] --&gt; F[L2CAP]</span><br><span class="line">        F --&gt; G[HCI]</span><br><span class="line">    end</span><br><span class="line">    subgraph &quot;控制器层&quot;</span><br><span class="line">        H[链路层] --&gt; I[物理层]</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h3 id="1-2-支持的功能"><a href="#1-2-支持的功能" class="headerlink" title="1.2 支持的功能"></a>1.2 支持的功能</h3><ul><li>低功耗蓝牙 (BLE)</li><li>GATT 服务器&#x2F;客户端</li><li>多连接支持</li><li>安全管理</li><li>网状网络</li><li>配对和绑定</li><li>广播和扫描</li></ul><h2 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2. 基本配置"></a>2. 基本配置</h2><h3 id="2-1-Kconfig配置"><a href="#2-1-Kconfig配置" class="headerlink" title="2.1 Kconfig配置"></a>2.1 Kconfig配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 基本蓝牙支持</span><br><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_DEBUG_LOG=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br><span class="line">CONFIG_BT_CENTRAL=y</span><br><span class="line"></span><br><span class="line"># GATT配置</span><br><span class="line">CONFIG_BT_GATT_DYNAMIC_DB=y</span><br><span class="line">CONFIG_BT_GATT_CLIENT=y</span><br><span class="line"></span><br><span class="line"># 安全配置</span><br><span class="line">CONFIG_BT_SMP=y</span><br><span class="line">CONFIG_BT_PRIVACY=y</span><br><span class="line"></span><br><span class="line"># 设备名称</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr BLE Device&quot;</span><br></pre></td></tr></table></figure><h2 id="3-外围设备开发"><a href="#3-外围设备开发" class="headerlink" title="3. 外围设备开发"></a>3. 外围设备开发</h2><h3 id="3-1-基本广播"><a href="#3-1-基本广播" class="headerlink" title="3.1 基本广播"></a>3.1 基本广播</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">start_advertising</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 广播数据 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">        BT_DATA_BYTES(BT_DATA_FLAGS,</span><br><span class="line">                      (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">        BT_DATA_BYTES(BT_DATA_NAME_COMPLETE,</span><br><span class="line">                      <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 启动广播 */</span></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),</span><br><span class="line">                         <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Advertising started\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 初始化蓝牙 */</span></span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    start_advertising();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-GATT服务实现"><a href="#3-2-GATT服务实现" class="headerlink" title="3.2 GATT服务实现"></a>3.2 GATT服务实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/uuid.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自定义服务UUID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_SERVICE_UUID BT_UUID_DECLARE_16(0xAAAA)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_CHAR_UUID    BT_UUID_DECLARE_16(0xBBBB)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 特征值回调函数 */</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read_characteristic</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                          <span class="type">void</span> *buf, <span class="type">uint16_t</span> len, <span class="type">uint16_t</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *value = <span class="string">&quot;Hello GATT&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> bt_gatt_attr_read(conn, attr, buf, len, offset,</span><br><span class="line">                            value, <span class="built_in">strlen</span>(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义GATT服务 */</span></span><br><span class="line">BT_GATT_SERVICE_DEFINE(my_service,</span><br><span class="line">    BT_GATT_PRIMARY_SERVICE(MY_SERVICE_UUID),</span><br><span class="line">    BT_GATT_CHARACTERISTIC(MY_CHAR_UUID,</span><br><span class="line">                          BT_GATT_CHRC_READ,</span><br><span class="line">                          BT_GATT_PERM_READ,</span><br><span class="line">                          read_characteristic, <span class="literal">NULL</span>, <span class="literal">NULL</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="4-中心设备开发"><a href="#4-中心设备开发" class="headerlink" title="4. 中心设备开发"></a>4. 中心设备开发</h2><h3 id="4-1-扫描实现"><a href="#4-1-扫描实现" class="headerlink" title="4.1 扫描实现"></a>4.1 扫描实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 扫描回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">scan_cb</span><span class="params">(<span class="type">const</span> <span class="type">bt_addr_le_t</span> *addr, <span class="type">int8_t</span> rssi,</span></span><br><span class="line"><span class="params">                   <span class="type">uint8_t</span> adv_type, <span class="keyword">struct</span> net_buf_simple *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> addr_str[BT_ADDR_LE_STR_LEN];</span><br><span class="line">    </span><br><span class="line">    bt_addr_le_to_str(addr, addr_str, <span class="keyword">sizeof</span>(addr_str));</span><br><span class="line">    printk(<span class="string">&quot;Device found: %s (RSSI %d)\n&quot;</span>, addr_str, rssi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">start_scan</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置扫描参数 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bt_le_scan_param</span> <span class="title">scan_param</span> =</span> &#123;</span><br><span class="line">        .type = BT_LE_SCAN_TYPE_ACTIVE,</span><br><span class="line">        .options = BT_LE_SCAN_OPT_NONE,</span><br><span class="line">        .interval = BT_GAP_SCAN_FAST_INTERVAL,</span><br><span class="line">        .window = BT_GAP_SCAN_FAST_WINDOW,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 启动扫描 */</span></span><br><span class="line">    err = bt_le_scan_start(&amp;scan_param, scan_cb);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Scanning failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Scanning started\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-连接管理"><a href="#4-2-连接管理" class="headerlink" title="4.2 连接管理"></a>4.2 连接管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/conn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bt_conn</span> *<span class="title">default_conn</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected_cb</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connection failed (err %u)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    default_conn = bt_conn_ref(conn);</span><br><span class="line">    printk(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 断开连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disconnected_cb</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Disconnected (reason %u)\n&quot;</span>, reason);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (default_conn) &#123;</span><br><span class="line">        bt_conn_unref(default_conn);</span><br><span class="line">        default_conn = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接回调结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_conn_cb</span> <span class="title">conn_callbacks</span> =</span> &#123;</span><br><span class="line">    .connected = connected_cb,</span><br><span class="line">    .disconnected = disconnected_cb,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">connection_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    bt_conn_cb_register(&amp;conn_callbacks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-GATT客户端"><a href="#5-GATT客户端" class="headerlink" title="5. GATT客户端"></a>5. GATT客户端</h2><h3 id="5-1-服务发现"><a href="#5-1-服务发现" class="headerlink" title="5.1 服务发现"></a>5.1 服务发现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">discover_func</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                           <span class="keyword">struct</span> bt_gatt_discover_params *params)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!attr) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Discovery complete\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BT_GATT_ITER_STOP;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Discovered attribute at handle %u\n&quot;</span>, attr-&gt;handle);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> BT_GATT_ITER_CONTINUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">discover_services</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_gatt_discover_params</span> <span class="title">discover_params</span>;</span></span><br><span class="line">    </span><br><span class="line">    discover_params.uuid = <span class="literal">NULL</span>;</span><br><span class="line">    discover_params.func = discover_func;</span><br><span class="line">    discover_params.start_handle = <span class="number">0x0001</span>;</span><br><span class="line">    discover_params.end_handle = <span class="number">0xffff</span>;</span><br><span class="line">    discover_params.type = BT_GATT_DISCOVER_PRIMARY;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> err = bt_gatt_discover(conn, &amp;discover_params);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Discover failed(err %d)\n&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-特征值操作"><a href="#5-2-特征值操作" class="headerlink" title="5.2 特征值操作"></a>5.2 特征值操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> <span class="title function_">read_func</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> bt_gatt_read_params *params,</span></span><br><span class="line"><span class="params">                        <span class="type">const</span> <span class="type">void</span> *data, <span class="type">uint16_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Read failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> BT_GATT_ITER_STOP;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Read value: %.*s\n&quot;</span>, length, (<span class="type">char</span> *)data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> BT_GATT_ITER_STOP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写入完成回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">write_func</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err,</span></span><br><span class="line"><span class="params">                      <span class="keyword">struct</span> bt_gatt_write_params *params)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Write failed (err %d)\n&quot;</span>, err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Write successful\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取特征值 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">read_characteristic</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint16_t</span> handle)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_gatt_read_params</span> <span class="title">read_params</span>;</span></span><br><span class="line">    </span><br><span class="line">    read_params.func = read_func;</span><br><span class="line">    read_params.handle_count = <span class="number">1</span>;</span><br><span class="line">    read_params.single.handle = handle;</span><br><span class="line">    read_params.single.offset = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> err = bt_gatt_read(conn, &amp;read_params);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Read failed (err %d)\n&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写入特征值 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_characteristic</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint16_t</span> handle,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">uint16_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_gatt_write_params</span> <span class="title">write_params</span>;</span></span><br><span class="line">    </span><br><span class="line">    write_params.func = write_func;</span><br><span class="line">    write_params.handle = handle;</span><br><span class="line">    write_params.offset = <span class="number">0</span>;</span><br><span class="line">    write_params.data = data;</span><br><span class="line">    write_params.length = length;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> err = bt_gatt_write(conn, &amp;write_params);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Write failed (err %d)\n&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-安全管理"><a href="#6-安全管理" class="headerlink" title="6. 安全管理"></a>6. 安全管理</h2><h3 id="6-1-配对和绑定"><a href="#6-1-配对和绑定" class="headerlink" title="6.1 配对和绑定"></a>6.1 配对和绑定</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/conn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配对状态回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pairing_complete</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">bool</span> bonded)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Pairing %s\n&quot;</span>, bonded ? <span class="string">&quot;bonded&quot;</span> : <span class="string">&quot;complete&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配对失败回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pairing_failed</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                          <span class="keyword">enum</span> bt_security_err reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Pairing failed (reason %d)\n&quot;</span>, reason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配对回调结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_conn_auth_cb</span> <span class="title">auth_callbacks</span> =</span> &#123;</span><br><span class="line">    .pairing_complete = pairing_complete,</span><br><span class="line">    .pairing_failed = pairing_failed,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">security_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    bt_conn_auth_cb_register(&amp;auth_callbacks);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置安全等级 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_security</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err = bt_conn_set_security(conn, BT_SECURITY_L2);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set security (err %d)\n&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-加密数据传输"><a href="#6-2-加密数据传输" class="headerlink" title="6.2 加密数据传输"></a>6.2 加密数据传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/crypto.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt_data</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> key[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> plaintext[] = <span class="string">&quot;Secret Message&quot;</span>;</span><br><span class="line">    <span class="type">uint8_t</span> encrypted[<span class="keyword">sizeof</span>(plaintext)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 生成随机密钥 */</span></span><br><span class="line">    bt_rand(key, <span class="keyword">sizeof</span>(key));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 加密数据 */</span></span><br><span class="line">    <span class="type">int</span> err = bt_encrypt_le(key, plaintext, encrypted);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Encryption failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Data encrypted successfully\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-蓝牙网状网络"><a href="#7-蓝牙网状网络" class="headerlink" title="7. 蓝牙网状网络"></a>7. 蓝牙网状网络</h2><h3 id="7-1-网状网络节点"><a href="#7-1-网状网络节点" class="headerlink" title="7.1 网状网络节点"></a>7.1 网状网络节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/mesh.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模型操作码 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OP_ONOFF_GET    BT_MESH_MODEL_OP_2(0x82, 0x01)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OP_ONOFF_SET    BT_MESH_MODEL_OP_2(0x82, 0x02)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OP_ONOFF_STATUS BT_MESH_MODEL_OP_2(0x82, 0x03)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模型回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">onoff_get</span><span class="params">(<span class="keyword">struct</span> bt_mesh_model *model,</span></span><br><span class="line"><span class="params">                     <span class="keyword">struct</span> bt_mesh_msg_ctx *ctx,</span></span><br><span class="line"><span class="params">                     <span class="keyword">struct</span> net_buf_simple *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    NET_BUF_SIMPLE_DEFINE(msg, <span class="number">2</span> + <span class="number">1</span> + <span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    bt_mesh_model_msg_init(&amp;msg, OP_ONOFF_STATUS);</span><br><span class="line">    net_buf_simple_add_u8(&amp;msg, <span class="number">0x01</span>);</span><br><span class="line">    </span><br><span class="line">    bt_mesh_model_send(model, ctx, &amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模型操作结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_model_op</span> <span class="title">onoff_op</span>[] =</span> &#123;</span><br><span class="line">    &#123; OP_ONOFF_GET, <span class="number">0</span>, onoff_get &#125;,</span><br><span class="line">    BT_MESH_MODEL_OP_END,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化网状网络 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mesh_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 配置和初始化网状网络 */</span></span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_model_pub</span> <span class="title">pub</span> =</span> &#123;</span><br><span class="line">        .msg = NET_BUF_SIMPLE(<span class="number">2</span> + <span class="number">1</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_model</span> <span class="title">models</span>[] =</span> &#123;</span><br><span class="line">        BT_MESH_MODEL_CFG_SRV,</span><br><span class="line">        BT_MESH_MODEL(BT_MESH_MODEL_ID_GEN_ONOFF_SRV, onoff_op,</span><br><span class="line">                      &amp;pub, <span class="literal">NULL</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_elem</span> <span class="title">elements</span>[] =</span> &#123;</span><br><span class="line">        BT_MESH_ELEM(<span class="number">0</span>, models, BT_MESH_MODEL_NONE),</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_mesh_comp</span> <span class="title">comp</span> =</span> &#123;</span><br><span class="line">        .cid = <span class="number">0xFFFF</span>,</span><br><span class="line">        .elem = elements,</span><br><span class="line">        .elem_count = ARRAY_SIZE(elements),</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    err = bt_mesh_init(&amp;comp);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Mesh initialization failed (err %d)\n&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 音频子系统指南</title>
      <link href="/2025/03/20/nodic/zephyr/audio/README/"/>
      <url>/2025/03/20/nodic/zephyr/audio/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-音频子系统指南"><a href="#Zephyr-音频子系统指南" class="headerlink" title="Zephyr 音频子系统指南"></a>Zephyr 音频子系统指南</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月20日 23:45</li></ul><h2 id="1-音频子系统概述"><a href="#1-音频子系统概述" class="headerlink" title="1. 音频子系统概述"></a>1. 音频子系统概述</h2><p>Zephyr RTOS 提供了完整的音频子系统，支持音频捕获、处理和播放功能。音频子系统基于模块化架构，包括音频编解码器驱动、音频控制器、音频流管理和音频处理框架。</p><h3 id="1-1-基础配置-prj-conf"><a href="#1-1-基础配置-prj-conf" class="headerlink" title="1.1 基础配置 (prj.conf)"></a>1.1 基础配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 音频子系统支持</span><br><span class="line">CONFIG_AUDIO=y</span><br><span class="line">CONFIG_AUDIO_CODEC=y</span><br><span class="line">CONFIG_AUDIO_DMIC=y</span><br><span class="line">CONFIG_I2S=y</span><br><span class="line"></span><br><span class="line"># 音频处理支持</span><br><span class="line">CONFIG_AUDIO_PROCESSING=y</span><br><span class="line">CONFIG_AUDIO_SAMPLE_RATE_CONVERTER=y</span><br><span class="line"></span><br><span class="line"># 内存配置</span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=32768</span><br><span class="line">CONFIG_AUDIO_BUFFER_SIZE=4096</span><br></pre></td></tr></table></figure><h3 id="1-2-设备树配置"><a href="#1-2-设备树配置" class="headerlink" title="1.2 设备树配置"></a>1.2 设备树配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">dmic</span> <span class="operator">=</span> <span class="variable">&amp;dmic0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">codec</span> <span class="operator">=</span> <span class="variable">&amp;codec0</span><span class="punctuation">;</span></span><br><span class="line">        i2s = <span class="variable">&amp;i2s0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    dmic0:</span> <span class="title class_">dmic0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,dmic&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">3072000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">sample-rate</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">48000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">channels</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    codec0:</span> <span class="title class_">codec0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,audio-codec&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">sample-rate</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">48000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">channels</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    i2s0:</span> <span class="title class_">i2s0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,i2s&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">12288000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">sample-rate</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">48000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">channels</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">word-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="2-音频编解码器驱动"><a href="#2-音频编解码器驱动" class="headerlink" title="2. 音频编解码器驱动"></a>2. 音频编解码器驱动</h2><h3 id="2-1-编解码器初始化"><a href="#2-1-编解码器初始化" class="headerlink" title="2.1 编解码器初始化"></a>2.1 编解码器初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/audio/codec.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">codec_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">codec_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(codec0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">audio_codec_cfg</span> <span class="title">codec_cfg</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(codec_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Codec device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置编解码器 */</span></span><br><span class="line">    codec_cfg.dai_type = AUDIO_DAI_TYPE_I2S;</span><br><span class="line">    codec_cfg.dai_cfg.i2s = &#123;</span><br><span class="line">        .word_size = <span class="number">16</span>,</span><br><span class="line">        .channels = <span class="number">2</span>,</span><br><span class="line">        .format = I2S_FMT_DATA_FORMAT_I2S,</span><br><span class="line">        .options = I2S_OPT_FRAME_CLK_MASTER | I2S_OPT_BIT_CLK_MASTER,</span><br><span class="line">        .frame_clk_freq = <span class="number">48000</span>,</span><br><span class="line">        .block_size = <span class="number">512</span>,</span><br><span class="line">        .timeout = <span class="number">1000</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化编解码器 */</span></span><br><span class="line">    ret = audio_codec_configure(codec_dev, &amp;codec_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure codec: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动编解码器 */</span></span><br><span class="line">    ret = audio_codec_start(codec_dev);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start codec: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-编解码器控制"><a href="#2-2-编解码器控制" class="headerlink" title="2.2 编解码器控制"></a>2.2 编解码器控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/audio/codec.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">codec_control_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">codec_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(codec0));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(codec_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置音量 */</span></span><br><span class="line">    ret = audio_codec_set_property(codec_dev,</span><br><span class="line">                                  AUDIO_PROPERTY_VOLUME,</span><br><span class="line">                                  AUDIO_CHANNEL_ALL,</span><br><span class="line">                                  <span class="number">80</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set volume: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置静音 */</span></span><br><span class="line">    ret = audio_codec_set_property(codec_dev,</span><br><span class="line">                                  AUDIO_PROPERTY_MUTE,</span><br><span class="line">                                  AUDIO_CHANNEL_ALL,</span><br><span class="line">                                  <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set mute: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置增益 */</span></span><br><span class="line">    ret = audio_codec_set_property(codec_dev,</span><br><span class="line">                                  AUDIO_PROPERTY_GAIN,</span><br><span class="line">                                  AUDIO_CHANNEL_LEFT,</span><br><span class="line">                                  <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set gain: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-音频数据流"><a href="#3-音频数据流" class="headerlink" title="3. 音频数据流"></a>3. 音频数据流</h2><h3 id="3-1-I2S-配置"><a href="#3-1-I2S-配置" class="headerlink" title="3.1 I2S 配置"></a>3.1 I2S 配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2s.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE   48000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_BIT_WIDTH 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHANNELS      2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE    512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_COUNT   4</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2s_config</span> <span class="title">i2s_cfg</span> =</span> &#123;</span><br><span class="line">    .word_size = SAMPLE_BIT_WIDTH,</span><br><span class="line">    .channels = CHANNELS,</span><br><span class="line">    .format = I2S_FMT_DATA_FORMAT_I2S,</span><br><span class="line">    .options = I2S_OPT_FRAME_CLK_MASTER | I2S_OPT_BIT_CLK_MASTER,</span><br><span class="line">    .frame_clk_freq = SAMPLE_RATE,</span><br><span class="line">    .block_size = BLOCK_SIZE,</span><br><span class="line">    .timeout = <span class="number">1000</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">i2s_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2s_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2s0));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(i2s_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;I2S device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 I2S */</span></span><br><span class="line">    ret = i2s_configure(i2s_dev, I2S_DIR_TX, &amp;i2s_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure I2S: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 触发 I2S 开始 */</span></span><br><span class="line">    ret = i2s_trigger(i2s_dev, I2S_DIR_TX, I2S_TRIGGER_START);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start I2S: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-音频数据传输"><a href="#3-2-音频数据传输" class="headerlink" title="3.2 音频数据传输"></a>3.2 音频数据传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2s.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE    512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE   48000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_BIT_WIDTH 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHANNELS      2</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int16_t</span> audio_buffer[BLOCK_SIZE / <span class="keyword">sizeof</span>(<span class="type">int16_t</span>)];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">audio_transfer_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2s_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2s0));</span><br><span class="line">    <span class="type">void</span> *tx_block;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备音频数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE(audio_buffer); i++) &#123;</span><br><span class="line">        <span class="comment">/* 生成正弦波 */</span></span><br><span class="line">        audio_buffer[i] = (<span class="type">int16_t</span>)(<span class="number">32767.0f</span> *</span><br><span class="line">                                  sinf(<span class="number">2.0f</span> * <span class="number">3.14159f</span> * <span class="number">1000.0f</span> *</span><br><span class="line">                                       i / SAMPLE_RATE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取写入缓冲区 */</span></span><br><span class="line">    ret = i2s_buf_write(i2s_dev, audio_buffer, BLOCK_SIZE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to write to I2S buffer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取音频数据 */</span></span><br><span class="line">    ret = i2s_buf_read(i2s_dev, &amp;tx_block, &amp;size);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to read from I2S buffer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理读取的数据 */</span></span><br><span class="line">    process_audio_data(tx_block, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放缓冲区 */</span></span><br><span class="line">    i2s_buf_release(i2s_dev, tx_block);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-数字麦克风-DMIC"><a href="#4-数字麦克风-DMIC" class="headerlink" title="4. 数字麦克风 (DMIC)"></a>4. 数字麦克风 (DMIC)</h2><h3 id="4-1-DMIC-配置"><a href="#4-1-DMIC-配置" class="headerlink" title="4.1 DMIC 配置"></a>4.1 DMIC 配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/audio/dmic.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE     48000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHANNEL_COUNT   2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_BIT_WIDTH 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE      512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_COUNT     4</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">dmic_cfg</span> <span class="title">dmic_config</span> =</span> &#123;</span><br><span class="line">    .io = &#123;</span><br><span class="line">        .min_pdm_clk_freq = <span class="number">1024000</span>,</span><br><span class="line">        .max_pdm_clk_freq = <span class="number">4096000</span>,</span><br><span class="line">        .min_pdm_clk_dc = <span class="number">40</span>,</span><br><span class="line">        .max_pdm_clk_dc = <span class="number">60</span>,</span><br><span class="line">        .pdm_clk_pol = <span class="number">0</span>,</span><br><span class="line">        .pdm_data_pol = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    .streams = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            .pcm_rate = SAMPLE_RATE,</span><br><span class="line">            .pcm_width = SAMPLE_BIT_WIDTH,</span><br><span class="line">            .block_size = BLOCK_SIZE,</span><br><span class="line">            .mem_slab = <span class="literal">NULL</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    .channel = &#123;</span><br><span class="line">        .req_num_chan = CHANNEL_COUNT,</span><br><span class="line">        .req_chan_map_lo = dmic_build_channel_map(<span class="number">0</span>, <span class="number">0</span>, PDM_CHAN_LEFT) |</span><br><span class="line">                         dmic_build_channel_map(<span class="number">1</span>, <span class="number">0</span>, PDM_CHAN_RIGHT),</span><br><span class="line">        .req_chan_map_hi = <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dmic_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dmic_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dmic0));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dmic_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMIC device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMIC */</span></span><br><span class="line">    ret = dmic_configure(dmic_dev, &amp;dmic_config);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMIC: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 触发 DMIC 开始 */</span></span><br><span class="line">    ret = dmic_trigger(dmic_dev, DMIC_TRIGGER_START);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMIC: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-DMIC-数据采集"><a href="#4-2-DMIC-数据采集" class="headerlink" title="4.2 DMIC 数据采集"></a>4.2 DMIC 数据采集</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/audio/dmic.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE      512</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="title function_">K_MEM_SLAB_DEFINE</span><span class="params">(mic_mem_slab, BLOCK_SIZE, <span class="number">4</span>, <span class="number">4</span>)</span>;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">dmic_cfg</span> <span class="title">dmic_config</span> =</span> &#123;</span><br><span class="line">    <span class="comment">/* ... 配置同上 ... */</span></span><br><span class="line">    .streams = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            .pcm_rate = <span class="number">48000</span>,</span><br><span class="line">            .pcm_width = <span class="number">16</span>,</span><br><span class="line">            .block_size = BLOCK_SIZE,</span><br><span class="line">            .mem_slab = &amp;mic_mem_slab,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dmic_capture_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dmic_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dmic0));</span><br><span class="line">    <span class="type">void</span> *buffer;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMIC */</span></span><br><span class="line">    ret = dmic_configure(dmic_dev, &amp;dmic_config);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 触发 DMIC 开始 */</span></span><br><span class="line">    ret = dmic_trigger(dmic_dev, DMIC_TRIGGER_START);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取麦克风数据 */</span></span><br><span class="line">    ret = dmic_read(dmic_dev, <span class="number">0</span>, &amp;buffer, BLOCK_SIZE, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to read DMIC data: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理麦克风数据 */</span></span><br><span class="line">    process_mic_data(buffer, BLOCK_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放缓冲区 */</span></span><br><span class="line">    k_mem_slab_free(&amp;mic_mem_slab, buffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 停止 DMIC */</span></span><br><span class="line">    dmic_trigger(dmic_dev, DMIC_TRIGGER_STOP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-音频处理"><a href="#5-音频处理" class="headerlink" title="5. 音频处理"></a>5. 音频处理</h2><h3 id="5-1-音频格式转换"><a href="#5-1-音频格式转换" class="headerlink" title="5.1 音频格式转换"></a>5.1 音频格式转换</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/audio/dsp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 格式转换：16位有符号整数到32位浮点数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">audio_format_conversion</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int16_t</span> input[<span class="number">256</span>];</span><br><span class="line">    <span class="type">float</span> output[<span class="number">256</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备输入数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(input); i++) &#123;</span><br><span class="line">        input[i] = i * <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 转换格式 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(input); i++) &#123;</span><br><span class="line">        output[i] = input[i] / <span class="number">32768.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用转换后的数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(output); i++) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Sample %d: %f\n&quot;</span>, i, output[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-音频滤波器"><a href="#5-2-音频滤波器" class="headerlink" title="5.2 音频滤波器"></a>5.2 音频滤波器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/audio/dsp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 简单的低通滤波器 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">audio_filter_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> input[<span class="number">256</span>];</span><br><span class="line">    <span class="type">float</span> output[<span class="number">256</span>];</span><br><span class="line">    <span class="type">float</span> coeff[<span class="number">5</span>] = &#123;<span class="number">0.1f</span>, <span class="number">0.2f</span>, <span class="number">0.4f</span>, <span class="number">0.2f</span>, <span class="number">0.1f</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备输入数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(input); i++) &#123;</span><br><span class="line">        input[i] = sinf(<span class="number">2.0f</span> * <span class="number">3.14159f</span> * <span class="number">1000.0f</span> * i / <span class="number">48000.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 应用滤波器 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; ARRAY_SIZE(input) - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        output[i] = <span class="number">0.0f</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; ARRAY_SIZE(coeff); j++) &#123;</span><br><span class="line">            output[i] += input[i + j - <span class="number">2</span>] * coeff[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理边界 */</span></span><br><span class="line">    output[<span class="number">0</span>] = input[<span class="number">0</span>] * coeff[<span class="number">2</span>];</span><br><span class="line">    output[<span class="number">1</span>] = input[<span class="number">0</span>] * coeff[<span class="number">1</span>] + input[<span class="number">1</span>] * coeff[<span class="number">2</span>] + input[<span class="number">2</span>] * coeff[<span class="number">3</span>];</span><br><span class="line">    output[ARRAY_SIZE(output) - <span class="number">2</span>] = input[ARRAY_SIZE(input) - <span class="number">4</span>] * coeff[<span class="number">0</span>] +</span><br><span class="line">                                    input[ARRAY_SIZE(input) - <span class="number">3</span>] * coeff[<span class="number">1</span>] +</span><br><span class="line">                                    input[ARRAY_SIZE(input) - <span class="number">2</span>] * coeff[<span class="number">2</span>];</span><br><span class="line">    output[ARRAY_SIZE(output) - <span class="number">1</span>] = input[ARRAY_SIZE(input) - <span class="number">3</span>] * coeff[<span class="number">0</span>] +</span><br><span class="line">                                    input[ARRAY_SIZE(input) - <span class="number">2</span>] * coeff[<span class="number">1</span>] +</span><br><span class="line">                                    input[ARRAY_SIZE(input) - <span class="number">1</span>] * coeff[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-音量控制"><a href="#5-3-音量控制" class="headerlink" title="5.3 音量控制"></a>5.3 音量控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 音量控制函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">audio_volume_control</span><span class="params">(<span class="type">int16_t</span> *buffer, <span class="type">size_t</span> size, <span class="type">int</span> volume_percent)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> gain = volume_percent / <span class="number">100.0f</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 应用音量增益 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size / <span class="keyword">sizeof</span>(<span class="type">int16_t</span>); i++) &#123;</span><br><span class="line">        <span class="type">float</span> sample = buffer[i];</span><br><span class="line">        sample *= gain;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 限幅 */</span></span><br><span class="line">        <span class="keyword">if</span> (sample &gt; <span class="number">32767.0f</span>) &#123;</span><br><span class="line">            sample = <span class="number">32767.0f</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sample &lt; <span class="number">-32768.0f</span>) &#123;</span><br><span class="line">            sample = <span class="number">-32768.0f</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffer[i] = (<span class="type">int16_t</span>)sample;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-音频编解码"><a href="#6-音频编解码" class="headerlink" title="6. 音频编解码"></a>6. 音频编解码</h2><h3 id="6-1-PCM-编码"><a href="#6-1-PCM-编码" class="headerlink" title="6.1 PCM 编码"></a>6.1 PCM 编码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* PCM 编码参数 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcm_params</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> sample_rate;</span><br><span class="line">    <span class="type">uint8_t</span> bit_depth;</span><br><span class="line">    <span class="type">uint8_t</span> channels;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* PCM 编码函数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pcm_encode</span><span class="params">(<span class="type">const</span> <span class="type">float</span> *samples, <span class="type">size_t</span> num_samples,</span></span><br><span class="line"><span class="params">              <span class="type">uint8_t</span> *pcm_data, <span class="type">size_t</span> pcm_size,</span></span><br><span class="line"><span class="params">              <span class="type">const</span> <span class="keyword">struct</span> pcm_params *params)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> bytes_per_sample = params-&gt;bit_depth / <span class="number">8</span>;</span><br><span class="line">    <span class="type">size_t</span> required_size = num_samples * bytes_per_sample;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pcm_size &lt; required_size) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; num_samples; i++) &#123;</span><br><span class="line">        <span class="comment">/* 将浮点样本转换为整数 */</span></span><br><span class="line">        <span class="type">int32_t</span> sample_int;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (params-&gt;bit_depth == <span class="number">16</span>) &#123;</span><br><span class="line">            sample_int = (<span class="type">int32_t</span>)(samples[i] * <span class="number">32767.0f</span>);</span><br><span class="line">            <span class="keyword">if</span> (sample_int &gt; <span class="number">32767</span>) sample_int = <span class="number">32767</span>;</span><br><span class="line">            <span class="keyword">if</span> (sample_int &lt; <span class="number">-32768</span>) sample_int = <span class="number">-32768</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* 写入 16 位 PCM 数据 */</span></span><br><span class="line">            pcm_data[i * <span class="number">2</span>] = sample_int &amp; <span class="number">0xFF</span>;</span><br><span class="line">            pcm_data[i * <span class="number">2</span> + <span class="number">1</span>] = (sample_int &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (params-&gt;bit_depth == <span class="number">24</span>) &#123;</span><br><span class="line">            sample_int = (<span class="type">int32_t</span>)(samples[i] * <span class="number">8388607.0f</span>);</span><br><span class="line">            <span class="keyword">if</span> (sample_int &gt; <span class="number">8388607</span>) sample_int = <span class="number">8388607</span>;</span><br><span class="line">            <span class="keyword">if</span> (sample_int &lt; <span class="number">-8388608</span>) sample_int = <span class="number">-8388608</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* 写入 24 位 PCM 数据 */</span></span><br><span class="line">            pcm_data[i * <span class="number">3</span>] = sample_int &amp; <span class="number">0xFF</span>;</span><br><span class="line">            pcm_data[i * <span class="number">3</span> + <span class="number">1</span>] = (sample_int &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">            pcm_data[i * <span class="number">3</span> + <span class="number">2</span>] = (sample_int &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> required_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-WAV-文件格式"><a href="#6-2-WAV-文件格式" class="headerlink" title="6.2 WAV 文件格式"></a>6.2 WAV 文件格式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* WAV 文件头 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">wav_header</span> &#123;</span></span><br><span class="line">    <span class="comment">/* RIFF 块 */</span></span><br><span class="line">    <span class="type">uint8_t</span> riff_header[<span class="number">4</span>];    <span class="comment">/* &quot;RIFF&quot; */</span></span><br><span class="line">    <span class="type">uint32_t</span> wav_size;         <span class="comment">/* 文件大小 - 8 */</span></span><br><span class="line">    <span class="type">uint8_t</span> wave_header[<span class="number">4</span>];    <span class="comment">/* &quot;WAVE&quot; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fmt 块 */</span></span><br><span class="line">    <span class="type">uint8_t</span> fmt_header[<span class="number">4</span>];     <span class="comment">/* &quot;fmt &quot; */</span></span><br><span class="line">    <span class="type">uint32_t</span> fmt_chunk_size;   <span class="comment">/* 16 for PCM */</span></span><br><span class="line">    <span class="type">uint16_t</span> audio_format;     <span class="comment">/* 1 for PCM */</span></span><br><span class="line">    <span class="type">uint16_t</span> num_channels;</span><br><span class="line">    <span class="type">uint32_t</span> sample_rate;</span><br><span class="line">    <span class="type">uint32_t</span> byte_rate;</span><br><span class="line">    <span class="type">uint16_t</span> block_align;</span><br><span class="line">    <span class="type">uint16_t</span> bits_per_sample;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* data 块 */</span></span><br><span class="line">    <span class="type">uint8_t</span> data_header[<span class="number">4</span>];    <span class="comment">/* &quot;data&quot; */</span></span><br><span class="line">    <span class="type">uint32_t</span> data_bytes;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建 WAV 文件 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">create_wav_file</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">uint8_t</span> *audio_data,</span></span><br><span class="line"><span class="params">                   <span class="type">size_t</span> data_size, <span class="type">uint32_t</span> sample_rate,</span></span><br><span class="line"><span class="params">                   <span class="type">uint16_t</span> channels, <span class="type">uint16_t</span> bit_depth)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">wav_header</span> <span class="title">header</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化文件对象 */</span></span><br><span class="line">    fs_file_t_init(&amp;file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建文件 */</span></span><br><span class="line">    ret = fs_open(&amp;file, filename, FS_O_CREATE | FS_O_WRITE);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 填充 WAV 头 */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(header.riff_header, <span class="string">&quot;RIFF&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    header.wav_size = data_size + <span class="keyword">sizeof</span>(header) - <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(header.wave_header, <span class="string">&quot;WAVE&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(header.fmt_header, <span class="string">&quot;fmt &quot;</span>, <span class="number">4</span>);</span><br><span class="line">    header.fmt_chunk_size = <span class="number">16</span>;</span><br><span class="line">    header.audio_format = <span class="number">1</span>; <span class="comment">/* PCM */</span></span><br><span class="line">    header.num_channels = channels;</span><br><span class="line">    header.sample_rate = sample_rate;</span><br><span class="line">    header.byte_rate = sample_rate * channels * (bit_depth / <span class="number">8</span>);</span><br><span class="line">    header.block_align = channels * (bit_depth / <span class="number">8</span>);</span><br><span class="line">    header.bits_per_sample = bit_depth;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(header.data_header, <span class="string">&quot;data&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    header.data_bytes = data_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写入 WAV 头 */</span></span><br><span class="line">    ret = fs_write(&amp;file, &amp;header, <span class="keyword">sizeof</span>(header));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fs_close(&amp;file);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写入音频数据 */</span></span><br><span class="line">    ret = fs_write(&amp;file, audio_data, data_size);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fs_close(&amp;file);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 关闭文件 */</span></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-音频应用示例"><a href="#7-音频应用示例" class="headerlink" title="7. 音频应用示例"></a>7. 音频应用示例</h2><h3 id="7-1-音频录制与播放"><a href="#7-1-音频录制与播放" class="headerlink" title="7.1 音频录制与播放"></a>7.1 音频录制与播放</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/audio/dmic.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2s.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_RATE     48000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_BIT_WIDTH 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHANNELS        2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE      512</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_COUNT     4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 内存分配 */</span></span><br><span class="line"><span class="type">static</span> <span class="title function_">K_MEM_SLAB_DEFINE</span><span class="params">(mic_mem_slab, BLOCK_SIZE, BLOCK_COUNT, <span class="number">4</span>)</span>;</span><br><span class="line"><span class="type">static</span> <span class="title function_">K_MEM_SLAB_DEFINE</span><span class="params">(i2s_mem_slab, BLOCK_SIZE, BLOCK_COUNT, <span class="number">4</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMIC 配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">dmic_cfg</span> <span class="title">dmic_config</span> =</span> &#123;</span><br><span class="line">    <span class="comment">/* ... 配置同上 ... */</span></span><br><span class="line">    .streams = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            .pcm_rate = SAMPLE_RATE,</span><br><span class="line">            .pcm_width = SAMPLE_BIT_WIDTH,</span><br><span class="line">            .block_size = BLOCK_SIZE,</span><br><span class="line">            .mem_slab = &amp;mic_mem_slab,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I2S 配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2s_config</span> <span class="title">i2s_cfg</span> =</span> &#123;</span><br><span class="line">    .word_size = SAMPLE_BIT_WIDTH,</span><br><span class="line">    .channels = CHANNELS,</span><br><span class="line">    .format = I2S_FMT_DATA_FORMAT_I2S,</span><br><span class="line">    .options = I2S_OPT_FRAME_CLK_MASTER | I2S_OPT_BIT_CLK_MASTER,</span><br><span class="line">    .frame_clk_freq = SAMPLE_RATE,</span><br><span class="line">    .block_size = BLOCK_SIZE,</span><br><span class="line">    .timeout = <span class="number">1000</span>,</span><br><span class="line">    .mem_slab = &amp;i2s_mem_slab,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">audio_record_playback</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dmic_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dmic0));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2s_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2s0));</span><br><span class="line">    <span class="type">void</span> *buffer;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMIC */</span></span><br><span class="line">    ret = dmic_configure(dmic_dev, &amp;dmic_config);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 I2S */</span></span><br><span class="line">    ret = i2s_configure(i2s_dev, I2S_DIR_TX, &amp;i2s_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMIC 和 I2S */</span></span><br><span class="line">    dmic_trigger(dmic_dev, DMIC_TRIGGER_START);</span><br><span class="line">    i2s_trigger(i2s_dev, I2S_DIR_TX, I2S_TRIGGER_START);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 读取麦克风数据 */</span></span><br><span class="line">        ret = dmic_read(dmic_dev, <span class="number">0</span>, &amp;buffer, BLOCK_SIZE, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 处理音频数据 */</span></span><br><span class="line">        process_audio_data(buffer, BLOCK_SIZE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 写入 I2S 播放 */</span></span><br><span class="line">        ret = i2s_write(i2s_dev, buffer, BLOCK_SIZE);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            k_mem_slab_free(&amp;mic_mem_slab, buffer);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 释放缓冲区 */</span></span><br><span class="line">        k_mem_slab_free(&amp;mic_mem_slab, buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-音频效果处理"><a href="#7-2-音频效果处理" class="headerlink" title="7.2 音频效果处理"></a>7.2 音频效果处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回声效果参数 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">echo_params</span> &#123;</span></span><br><span class="line">    <span class="type">int16_t</span> *delay_buffer;</span><br><span class="line">    <span class="type">size_t</span> buffer_size;</span><br><span class="line">    <span class="type">size_t</span> delay_samples;</span><br><span class="line">    <span class="type">float</span> decay;</span><br><span class="line">    <span class="type">size_t</span> write_index;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化回声效果 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">echo_init</span><span class="params">(<span class="keyword">struct</span> echo_params *echo, <span class="type">size_t</span> delay_ms, <span class="type">float</span> decay,</span></span><br><span class="line"><span class="params">              <span class="type">uint32_t</span> sample_rate)</span></span><br><span class="line">&#123;</span><br><span class="line">    echo-&gt;delay_samples = (delay_ms * sample_rate) / <span class="number">1000</span>;</span><br><span class="line">    echo-&gt;buffer_size = echo-&gt;delay_samples * <span class="keyword">sizeof</span>(<span class="type">int16_t</span>);</span><br><span class="line">    echo-&gt;delay_buffer = k_malloc(echo-&gt;buffer_size);</span><br><span class="line">    echo-&gt;decay = decay;</span><br><span class="line">    echo-&gt;write_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (echo-&gt;delay_buffer) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(echo-&gt;delay_buffer, <span class="number">0</span>, echo-&gt;buffer_size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 应用回声效果 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">apply_echo_effect</span><span class="params">(<span class="keyword">struct</span> echo_params *echo, <span class="type">int16_t</span> *buffer,</span></span><br><span class="line"><span class="params">                      <span class="type">size_t</span> num_samples)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">size_t</span> i;</span><br><span class="line">    <span class="type">size_t</span> read_index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!echo-&gt;delay_buffer) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_samples; i++) &#123;</span><br><span class="line">        <span class="comment">/* 计算读取索引 */</span></span><br><span class="line">        read_index = (echo-&gt;write_index + i) % echo-&gt;delay_samples;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 添加回声 */</span></span><br><span class="line">        <span class="type">int32_t</span> sample = buffer[i];</span><br><span class="line">        sample += (<span class="type">int32_t</span>)(echo-&gt;delay_buffer[read_index] * echo-&gt;decay);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 限幅 */</span></span><br><span class="line">        <span class="keyword">if</span> (sample &gt; <span class="number">32767</span>) &#123;</span><br><span class="line">            sample = <span class="number">32767</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sample &lt; <span class="number">-32768</span>) &#123;</span><br><span class="line">            sample = <span class="number">-32768</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 更新缓冲区 */</span></span><br><span class="line">        echo-&gt;delay_buffer[read_index] = buffer[i];</span><br><span class="line">        buffer[i] = (<span class="type">int16_t</span>)sample;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 更新写入索引 */</span></span><br><span class="line">    echo-&gt;write_index = (echo-&gt;write_index + num_samples) % echo-&gt;delay_samples;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-音频子系统最佳实践"><a href="#8-音频子系统最佳实践" class="headerlink" title="8. 音频子系统最佳实践"></a>8. 音频子系统最佳实践</h2><ol><li><p>缓冲区管理：</p><ul><li>使用适当大小的缓冲区以平衡延迟和处理开销</li><li>实现双缓冲或环形缓冲区以避免数据丢失</li><li>考虑使用 DMA 进行高效数据传输</li></ul></li><li><p>采样率和位深度：</p><ul><li>根据应用需求选择合适的采样率和位深度</li><li>考虑功耗和性能之间的权衡</li><li>实现采样率转换以支持不同设备</li></ul></li><li><p>音频处理：</p><ul><li>在定点数学运算中使用适当的缩放以避免溢出</li><li>考虑使用 DSP 加速指令进行处理</li><li>实现高效的滤波器算法</li></ul></li><li><p>同步处理：</p><ul><li>确保音频捕获和播放之间的同步</li><li>实现缓冲区调整以处理时钟偏差</li><li>考虑使用硬件同步机制</li></ul></li><li><p>电源管理：</p><ul><li>在不使用时禁用音频设备</li><li>实现动态时钟调整以节省功耗</li><li>考虑使用低功耗模式</li></ul></li><li><p>错误处理：</p><ul><li>实现完善的错误检测和恢复机制</li><li>处理缓冲区溢出和欠载情况</li><li>提供诊断信息</li></ul></li><li><p>测试与验证：</p><ul><li>进行音频质量测试</li><li>测量延迟和抖动</li><li>验证在不同条件下的性能</li></ul></li><li><p>可扩展性：</p><ul><li>设计模块化的音频处理管道</li><li>支持动态加载和卸载音频处理模块</li><li>考虑未来的功能扩展</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 驱动模型</title>
      <link href="/2025/03/20/nodic/zephyr/architecture/drivers/"/>
      <url>/2025/03/20/nodic/zephyr/architecture/drivers/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-驱动模型"><a href="#Zephyr-驱动模型" class="headerlink" title="Zephyr 驱动模型"></a>Zephyr 驱动模型</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月20日 23:30</li></ul><p>Zephyr RTOS 提供了一个统一的驱动模型，用于管理和操作各种硬件设备。这个模型定义了驱动程序的结构、初始化过程和操作方法，使得驱动开发更加标准化和模块化。</p><h2 id="驱动模型概述"><a href="#驱动模型概述" class="headerlink" title="驱动模型概述"></a>驱动模型概述</h2><h3 id="驱动模型的目标"><a href="#驱动模型的目标" class="headerlink" title="驱动模型的目标"></a>驱动模型的目标</h3><ol><li><strong>抽象硬件差异</strong>：提供统一的 API，隐藏底层硬件细节</li><li><strong>简化驱动开发</strong>：标准化驱动程序的结构和接口</li><li><strong>提高可移植性</strong>：使应用程序可以在不同硬件平台上运行</li><li><strong>支持动态配置</strong>：通过设备树实现驱动的动态配置</li></ol><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ol><li><strong>设备对象</strong>：表示一个硬件设备的软件抽象</li><li><strong>驱动 API</strong>：定义了设备操作的标准接口</li><li><strong>设备树</strong>：描述硬件配置和设备关系</li><li><strong>设备模型</strong>：管理设备生命周期和依赖关系</li></ol><h2 id="驱动程序结构"><a href="#驱动程序结构" class="headerlink" title="驱动程序结构"></a>驱动程序结构</h2><h3 id="设备结构体"><a href="#设备结构体" class="headerlink" title="设备结构体"></a>设备结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> *config;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> *api;</span><br><span class="line">    <span class="type">void</span> *data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>name</code>: 设备名称</li><li><code>config</code>: 设备配置信息（只读）</li><li><code>api</code>: 设备操作函数指针</li><li><code>data</code>: 设备运行时数据</li></ul><h3 id="驱动-API-结构体"><a href="#驱动-API-结构体" class="headerlink" title="驱动 API 结构体"></a>驱动 API 结构体</h3><p>以 GPIO 驱动为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*pin_configure)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">gpio_pin_t</span> pin, <span class="type">gpio_flags_t</span> flags);</span><br><span class="line">    <span class="type">int</span> (*port_get_raw)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">gpio_port_value_t</span> *value);</span><br><span class="line">    <span class="type">int</span> (*port_set_masked_raw)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">gpio_port_pins_t</span> mask,</span><br><span class="line">                               <span class="type">gpio_port_value_t</span> value);</span><br><span class="line">    <span class="type">int</span> (*port_set_bits_raw)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">gpio_port_pins_t</span> pins);</span><br><span class="line">    <span class="type">int</span> (*port_clear_bits_raw)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">gpio_port_pins_t</span> pins);</span><br><span class="line">    <span class="type">int</span> (*port_toggle_bits)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">gpio_port_pins_t</span> pins);</span><br><span class="line">    <span class="type">int</span> (*pin_interrupt_configure)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">gpio_pin_t</span> pin,</span><br><span class="line">                                   <span class="keyword">enum</span> gpio_int_mode mode,</span><br><span class="line">                                   <span class="keyword">enum</span> gpio_int_trig trig);</span><br><span class="line">    <span class="type">int</span> (*manage_callback)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> gpio_callback *callback,</span><br><span class="line">                           <span class="type">bool</span> <span class="built_in">set</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="驱动程序实现"><a href="#驱动程序实现" class="headerlink" title="驱动程序实现"></a>驱动程序实现</h2><h3 id="驱动初始化"><a href="#驱动初始化" class="headerlink" title="驱动初始化"></a>驱动初始化</h3><p>使用 <code>DEVICE_DEFINE</code> 宏定义设备：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEVICE_DEFINE(my_device, <span class="string">&quot;MY_DEVICE&quot;</span>, my_device_init,</span><br><span class="line">              <span class="literal">NULL</span>, &amp;my_device_data, &amp;my_device_config,</span><br><span class="line">              POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,</span><br><span class="line">              &amp;my_device_api);</span><br></pre></td></tr></table></figure><p>初始化函数示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 初始化硬件</span></span><br><span class="line">    <span class="comment">// 设置中断</span></span><br><span class="line">    <span class="comment">// 配置设备状态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="驱动-API-实现"><a href="#驱动-API-实现" class="headerlink" title="驱动 API 实现"></a>驱动 API 实现</h3><p>实现驱动 API 结构体中定义的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_function</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 实现具体功能</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_device_driver_api</span> <span class="title">my_device_api</span> =</span> &#123;</span><br><span class="line">    .function = my_device_function,</span><br><span class="line">    <span class="comment">// ...其他函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="设备树集成"><a href="#设备树集成" class="headerlink" title="设备树集成"></a>设备树集成</h2><h3 id="设备树节点"><a href="#设备树节点" class="headerlink" title="设备树节点"></a>设备树节点</h3><p>在设备树中定义设备节点：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">my_device:</span> <span class="title class_">my_device@40000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">5</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="设备树绑定"><a href="#设备树绑定" class="headerlink" title="设备树绑定"></a>设备树绑定</h3><p>创建设备树绑定文件 <code>my-device.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">Device</span> <span class="string">Controller</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compatible:</span> <span class="string">&quot;vendor,my-device&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">include:</span> <span class="string">base.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">  <span class="attr">reg:</span></span><br><span class="line">    <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">interrupts:</span></span><br><span class="line">    <span class="attr">required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="在驱动中使用设备树信息"><a href="#在驱动中使用设备树信息" class="headerlink" title="在驱动中使用设备树信息"></a>在驱动中使用设备树信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DT_DRV_COMPAT vendor_my_device</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> reg = DT_INST_REG_ADDR(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> irq = DT_INST_IRQN(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 使用这些值初始化设备</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_DEVICE_INIT)</span><br></pre></td></tr></table></figure><h2 id="驱动使用示例"><a href="#驱动使用示例" class="headerlink" title="驱动使用示例"></a>驱动使用示例</h2><h3 id="获取设备实例"><a href="#获取设备实例" class="headerlink" title="获取设备实例"></a>获取设备实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_device));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用驱动-API"><a href="#调用驱动-API" class="headerlink" title="调用驱动 API"></a>调用驱动 API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ret = my_device_function(dev, ...);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="电源管理集成"><a href="#电源管理集成" class="headerlink" title="电源管理集成"></a>电源管理集成</h2><h3 id="实现电源管理回调"><a href="#实现电源管理回调" class="headerlink" title="实现电源管理回调"></a>实现电源管理回调</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_pm_action</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                               <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">// 唤醒设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">// 挂起设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PM_DEVICE_DEFINE(my_device, my_device_pm_action);</span><br></pre></td></tr></table></figure><h3 id="在应用中使用电源管理"><a href="#在应用中使用电源管理" class="headerlink" title="在应用中使用电源管理"></a>在应用中使用电源管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ret = pm_device_state_set(dev, PM_DEVICE_STATE_SUSPENDED);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><strong>使用设备树</strong>：尽可能使用设备树来配置驱动，提高可移植性</li><li><strong>错误处理</strong>：所有驱动 API 都应该返回错误码，并在应用中处理这些错误</li><li><strong>资源管理</strong>：正确管理设备资源，如中断、DMA 通道等</li><li><strong>并发控制</strong>：在多线程环境中，使用适当的同步机制保护共享资源</li><li><strong>电源管理</strong>：实现电源管理回调，支持系统级电源管理</li><li><strong>测试</strong>：为驱动编写单元测试和集成测试</li><li><strong>文档</strong>：提供清晰的 API 文档和使用示例</li></ol><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ol><li><strong>设备初始化失败</strong>：检查设备树配置，确保硬件资源（如中断、内存区域）没有冲突</li><li><strong>驱动 API 返回错误</strong>：查看错误码定义，可能是参数错误或硬件状态问题</li><li><strong>设备不响应</strong>：检查电源管理状态，设备可能处于低功耗模式</li><li><strong>中断处理问题</strong>：确保正确配置和启用了中断，检查中断优先级设置</li><li><strong>DMA 传输失败</strong>：验证 DMA 通道配置，检查内存对齐和缓冲区大小</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 的驱动模型提供了一个强大而灵活的框架，用于开发和管理设备驱动程序。通过遵循这个模型，开发者可以创建标准化、可移植的驱动程序，简化硬件抽象层的实现。深入理解驱动模型对于开发高质量的 Zephyr 应用程序至关重要。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 硬件支持</title>
      <link href="/2025/03/20/nodic/zephyr/architecture/hardware/"/>
      <url>/2025/03/20/nodic/zephyr/architecture/hardware/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-硬件支持"><a href="#Zephyr-硬件支持" class="headerlink" title="Zephyr 硬件支持"></a>Zephyr 硬件支持</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月20日 23:00</li></ul><p>Zephyr RTOS 提供了广泛的硬件平台支持，包括多种 CPU 架构和开发板。本文档将详细介绍 Zephyr 的硬件支持架构。</p><h2 id="支持的硬件架构"><a href="#支持的硬件架构" class="headerlink" title="支持的硬件架构"></a>支持的硬件架构</h2><h3 id="ARM-架构"><a href="#ARM-架构" class="headerlink" title="ARM 架构"></a>ARM 架构</h3><ol><li><p><strong>Cortex-M 系列</strong></p><ul><li>Cortex-M0&#x2F;M0+</li><li>Cortex-M3</li><li>Cortex-M4</li><li>Cortex-M7</li><li>Cortex-M23</li><li>Cortex-M33</li></ul></li><li><p><strong>Cortex-R 系列</strong></p><ul><li>Cortex-R5</li><li>Cortex-R7</li></ul></li><li><p><strong>Cortex-A 系列</strong></p><ul><li>Cortex-A53</li><li>Cortex-A72</li></ul></li></ol><h3 id="x86-架构"><a href="#x86-架构" class="headerlink" title="x86 架构"></a>x86 架构</h3><ol><li><p><strong>Intel IA-32</strong></p><ul><li>Intel Quark</li><li>Intel Atom</li></ul></li><li><p><strong>x86_64</strong></p><ul><li>支持现代 x86_64 处理器</li></ul></li></ol><h3 id="RISC-V"><a href="#RISC-V" class="headerlink" title="RISC-V"></a>RISC-V</h3><ol><li><p><strong>RV32</strong></p><ul><li>RV32I</li><li>RV32IM</li><li>RV32IMC</li><li>RV32IMAC</li></ul></li><li><p><strong>RV64</strong></p><ul><li>RV64I</li><li>RV64IM</li><li>RV64IMAC</li></ul></li></ol><h3 id="其他架构"><a href="#其他架构" class="headerlink" title="其他架构"></a>其他架构</h3><ol><li><p><strong>Xtensa</strong></p><ul><li>ESP32</li><li>ESP32-S2</li><li>ESP32-S3</li></ul></li><li><p><strong>ARC</strong></p><ul><li>EM 系列</li><li>HS 系列</li></ul></li><li><p><strong>SPARC</strong></p><ul><li>LEON 处理器</li></ul></li></ol><h2 id="硬件抽象层-HAL"><a href="#硬件抽象层-HAL" class="headerlink" title="硬件抽象层 (HAL)"></a>硬件抽象层 (HAL)</h2><h3 id="HAL-架构"><a href="#HAL-架构" class="headerlink" title="HAL 架构"></a>HAL 架构</h3><ol><li><p><strong>架构层</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arch/arm/core/aarch32/cortex_m/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">arch_cpu_idle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arch_cpu_atomic_idle</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>SoC 层</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// soc/arm/nordic_nrf/nrf52/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">soc_system_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>板级层</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boards/arm/nrf52dk_nrf52832/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">board_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="中断控制"><a href="#中断控制" class="headerlink" title="中断控制"></a>中断控制</h3><ol><li><p><strong>中断控制器抽象</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/drivers/interrupt_controller/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">irq_enable</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> irq)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">irq_disable</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> irq)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>中断向量表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arch/arm/core/aarch32/cortex_m/vector_table.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vector_table</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *<span class="built_in">stack</span>;</span><br><span class="line">    <span class="type">void</span> (*reset)(<span class="type">void</span>);</span><br><span class="line">    <span class="type">void</span> (*nmi)(<span class="type">void</span>);</span><br><span class="line">    <span class="type">void</span> (*hard_fault)(<span class="type">void</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="时钟管理"><a href="#时钟管理" class="headerlink" title="时钟管理"></a>时钟管理</h3><ol><li><p><strong>系统时钟</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// drivers/timer/</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">sys_clock_cycle_get_32</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_clock_driver_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>硬件定时器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// drivers/timer/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">z_clock_set_timeout</span><span class="params">(<span class="type">int32_t</span> ticks, <span class="type">bool</span> idle)</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="外设支持"><a href="#外设支持" class="headerlink" title="外设支持"></a>外设支持</h2><h3 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h3><ol><li><p><strong>GPIO 控制器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/drivers/gpio.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gpio_pin_configure</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *port,</span></span><br><span class="line"><span class="params">                      <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                      <span class="type">gpio_flags_t</span> flags)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>GPIO 中断</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">gpio_pin_interrupt_configure</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *port,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_flags_t</span> flags)</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="串行通信"><a href="#串行通信" class="headerlink" title="串行通信"></a>串行通信</h3><ol><li><p><strong>UART</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/drivers/uart.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">uart_tx</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">            <span class="type">const</span> <span class="type">uint8_t</span> *buf,</span></span><br><span class="line"><span class="params">            <span class="type">size_t</span> len,</span></span><br><span class="line"><span class="params">            <span class="type">int32_t</span> timeout)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>SPI</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/drivers/spi.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">spi_transceive</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                   <span class="type">const</span> <span class="keyword">struct</span> spi_config *config,</span></span><br><span class="line"><span class="params">                   <span class="type">const</span> <span class="keyword">struct</span> spi_buf_set *tx_bufs,</span></span><br><span class="line"><span class="params">                   <span class="type">const</span> <span class="keyword">struct</span> spi_buf_set *rx_bufs)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>I2C</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/drivers/i2c.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">i2c_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">              <span class="type">const</span> <span class="type">uint8_t</span> *buf,</span></span><br><span class="line"><span class="params">              <span class="type">uint32_t</span> num_bytes,</span></span><br><span class="line"><span class="params">              <span class="type">uint16_t</span> addr)</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="存储接口"><a href="#存储接口" class="headerlink" title="存储接口"></a>存储接口</h3><ol><li><p><strong>Flash 存储</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/drivers/flash.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">flash_read</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">              <span class="type">off_t</span> offset,</span></span><br><span class="line"><span class="params">              <span class="type">void</span> *data,</span></span><br><span class="line"><span class="params">              <span class="type">size_t</span> len)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>EEPROM</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/drivers/eeprom.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">eeprom_read</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">               <span class="type">off_t</span> offset,</span></span><br><span class="line"><span class="params">               <span class="type">void</span> *data,</span></span><br><span class="line"><span class="params">               <span class="type">size_t</span> len)</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="板级支持包-BSP"><a href="#板级支持包-BSP" class="headerlink" title="板级支持包 (BSP)"></a>板级支持包 (BSP)</h2><h3 id="BSP-结构"><a href="#BSP-结构" class="headerlink" title="BSP 结构"></a>BSP 结构</h3><ol><li><p><strong>板级配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">boards/arm/nrf52dk_nrf52832/</span><br><span class="line">├── board.cmake</span><br><span class="line">├── board.h</span><br><span class="line">├── Kconfig.board</span><br><span class="line">├── Kconfig.defconfig</span><br><span class="line">├── nrf52dk_nrf52832.dts</span><br><span class="line">└── nrf52dk_nrf52832_defconfig</span><br></pre></td></tr></table></figure></li><li><p><strong>设备树覆盖</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boards/arm/nrf52dk_nrf52832/nrf52dk_nrf52832.dts</span></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;nordic,nrf-uart&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="板级初始化"><a href="#板级初始化" class="headerlink" title="板级初始化"></a>板级初始化</h3><ol><li><p><strong>早期初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boards/arm/nrf52dk_nrf52832/board.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">board_nrf52dk_nrf52832_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 板级特定初始化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">SYS_INIT(board_nrf52dk_nrf52832_init,</span><br><span class="line">         PRE_KERNEL_1,</span><br><span class="line">         CONFIG_BOARD_INIT_PRIORITY);</span><br></pre></td></tr></table></figure></li><li><p><strong>引脚复用配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boards/arm/nrf52dk_nrf52832/pinmux.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">board_pinmux_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 配置引脚复用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="硬件调试支持"><a href="#硬件调试支持" class="headerlink" title="硬件调试支持"></a>硬件调试支持</h2><h3 id="JTAG-SWD-调试"><a href="#JTAG-SWD-调试" class="headerlink" title="JTAG&#x2F;SWD 调试"></a>JTAG&#x2F;SWD 调试</h3><ol><li><p><strong>OpenOCD 支持</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boards/arm/nrf52dk_nrf52832/support/openocd.cfg</span></span><br><span class="line"><span class="string">source</span> [<span class="string">find</span> <span class="string">interface/jlink.cfg</span>]</span><br><span class="line"><span class="string">transport</span> <span class="string">select</span> <span class="string">swd</span></span><br><span class="line"><span class="string">source</span> [<span class="string">find</span> <span class="string">target/nrf52.cfg</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>调试配置</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boards/arm/nrf52dk_nrf52832/board.cmake</span></span><br><span class="line">board_runner_args(jlink <span class="string">&quot;--device=nRF52832_xxAA&quot;</span>)</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$&#123;ZEPHYR_BASE&#125;</span>/boards/common/jlink.board.cmake)</span><br></pre></td></tr></table></figure></li></ol><h3 id="串口调试"><a href="#串口调试" class="headerlink" title="串口调试"></a>串口调试</h3><ol><li><p><strong>串口配置</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">tx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">6</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">rx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">8</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>调试日志</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// prj.conf</span></span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_BACKEND_UART=y</span><br></pre></td></tr></table></figure></li></ol><h2 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h2><h3 id="电源状态"><a href="#电源状态" class="headerlink" title="电源状态"></a>电源状态</h3><ol><li><p><strong>CPU 电源管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pm_power_state_set</span><span class="params">(<span class="keyword">struct</span> pm_state_info info)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>设备电源管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pm_device_state_set</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                       <span class="keyword">enum</span> pm_device_state state)</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="时钟管理-1"><a href="#时钟管理-1" class="headerlink" title="时钟管理"></a>时钟管理</h3><ol><li><p><strong>时钟门控</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">clock_control_on</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                     <span class="type">clock_control_subsys_t</span> sub_system)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>频率调节</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">clock_control_set_rate</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                         <span class="type">clock_control_subsys_t</span> sub_system,</span></span><br><span class="line"><span class="params">                         <span class="type">uint32_t</span> rate)</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="硬件资源管理"><a href="#硬件资源管理" class="headerlink" title="硬件资源管理"></a>硬件资源管理</h2><h3 id="DMA-控制器"><a href="#DMA-控制器" class="headerlink" title="DMA 控制器"></a>DMA 控制器</h3><ol><li><p><strong>DMA 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">dma_config</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">              <span class="type">uint32_t</span> channel,</span></span><br><span class="line"><span class="params">              <span class="keyword">struct</span> dma_config *config)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>DMA 传输</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">dma_start</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> channel)</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="内存控制器"><a href="#内存控制器" class="headerlink" title="内存控制器"></a>内存控制器</h3><ol><li><p><strong>内存保护单元 (MPU)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">arch_mem_domain_init</span><span class="params">(<span class="keyword">struct</span> k_mem_domain *domain)</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>缓存控制</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">arch_dcache_flush</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>硬件选择</strong></p><ul><li>选择成熟稳定的硬件平台</li><li>确认 Zephyr 对硬件的支持程度</li><li>考虑开发工具的可用性</li></ul></li><li><p><strong>硬件抽象</strong></p><ul><li>使用标准的 HAL 接口</li><li>避免直接访问硬件寄存器</li><li>合理使用设备树配置</li></ul></li><li><p><strong>调试策略</strong></p><ul><li>配置适当的调试接口</li><li>使用日志系统记录关键信息</li><li>合理使用硬件调试工具</li></ul></li><li><p><strong>电源优化</strong></p><ul><li>合理配置时钟频率</li><li>使用低功耗模式</li><li>关闭不需要的外设</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了全面的硬件支持，通过统一的 HAL 接口和设备驱动框架，简化了跨平台开发。了解这些硬件支持特性，有助于开发者更好地利用硬件资源，开发高效的嵌入式应用。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 内核架构</title>
      <link href="/2025/03/20/nodic/zephyr/architecture/kernel/"/>
      <url>/2025/03/20/nodic/zephyr/architecture/kernel/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-内核架构"><a href="#Zephyr-内核架构" class="headerlink" title="Zephyr 内核架构"></a>Zephyr 内核架构</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月20日 22:45</li></ul><p>Zephyr 内核是一个实时操作系统内核，专为资源受限的嵌入式系统设计。本文档将详细介绍 Zephyr 内核的架构设计和核心组件。</p><h2 id="内核概述"><a href="#内核概述" class="headerlink" title="内核概述"></a>内核概述</h2><p>Zephyr 内核是一个单体内核（Monolithic Kernel），具有以下特点：</p><ol><li><strong>实时性</strong>：支持抢占式调度，保证任务的实时响应</li><li><strong>可扩展性</strong>：模块化设计，可根据应用需求裁剪</li><li><strong>低资源占用</strong>：最小配置下内存占用仅几 KB</li><li><strong>多架构支持</strong>：支持多种 CPU 架构</li><li><strong>可配置性</strong>：通过 Kconfig 系统高度可配置</li></ol><h2 id="内核组件"><a href="#内核组件" class="headerlink" title="内核组件"></a>内核组件</h2><h3 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h3><p>Zephyr 内核提供了完整的线程管理功能：</p><ol><li><p><strong>线程创建与销毁</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k_thread_create(thread, <span class="built_in">stack</span>, stack_size, entry, p1, p2, p3, prio, options, delay);</span><br><span class="line">k_thread_abort(thread);</span><br></pre></td></tr></table></figure></li><li><p><strong>线程优先级</strong></p><ul><li>支持 0-15 个优先级（可配置）</li><li>优先级越低，线程优先级越高</li></ul></li><li><p><strong>线程调度</strong></p><ul><li>基于优先级的抢占式调度</li><li>支持时间片轮转（可配置）</li></ul></li><li><p><strong>线程状态</strong></p><ul><li>就绪态（READY）</li><li>运行态（RUNNING）</li><li>等待态（WAITING）</li><li>挂起态（SUSPENDED）</li><li>终止态（TERMINATED）</li></ul></li></ol><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>Zephyr 提供了多种内存管理机制：</p><ol><li><p><strong>静态内存分配</strong></p><ul><li>编译时分配，最安全可靠</li><li>适合资源受限系统</li></ul></li><li><p><strong>内存池</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K_MEM_POOL_DEFINE(pool_name, block_size, max_size, n_max, align);</span><br></pre></td></tr></table></figure><ul><li>固定大小块分配</li><li>支持内存碎片整理</li></ul></li><li><p><strong>堆内存管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">k_malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">k_free</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br></pre></td></tr></table></figure><ul><li>动态内存分配</li><li>需要额外配置启用</li></ul></li><li><p><strong>内存保护</strong></p><ul><li>支持 MPU（内存保护单元）</li><li>支持 MMU（内存管理单元）</li><li>用户模式和特权模式隔离</li></ul></li></ol><h3 id="同步原语"><a href="#同步原语" class="headerlink" title="同步原语"></a>同步原语</h3><p>Zephyr 提供了丰富的同步机制：</p><ol><li><p><strong>信号量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">K_SEM_DEFINE(sem_name, initial_count, limit);</span><br><span class="line">k_sem_take(&amp;sem_name, timeout);</span><br><span class="line">k_sem_give(&amp;sem_name);</span><br></pre></td></tr></table></figure></li><li><p><strong>互斥量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">K_MUTEX_DEFINE(mutex_name);</span><br><span class="line">k_mutex_lock(&amp;mutex_name, timeout);</span><br><span class="line">k_mutex_unlock(&amp;mutex_name);</span><br></pre></td></tr></table></figure><ul><li>支持优先级继承，避免优先级反转</li></ul></li><li><p><strong>条件变量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">K_CONDVAR_DEFINE(condvar_name);</span><br><span class="line">k_condvar_wait(&amp;condvar_name, &amp;mutex_name, timeout);</span><br><span class="line">k_condvar_signal(&amp;condvar_name);</span><br></pre></td></tr></table></figure></li><li><p><strong>事件组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">K_EVENT_DEFINE(event_name);</span><br><span class="line">k_event_post(&amp;event_name, event_mask);</span><br><span class="line">k_event_wait(&amp;event_name, event_mask, wait_all, timeout);</span><br></pre></td></tr></table></figure></li></ol><h3 id="定时器与时间管理"><a href="#定时器与时间管理" class="headerlink" title="定时器与时间管理"></a>定时器与时间管理</h3><ol><li><p><strong>系统时钟</strong></p><ul><li>基于硬件定时器</li><li>可配置的时钟频率</li></ul></li><li><p><strong>内核定时器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">K_TIMER_DEFINE(timer_name, expiry_fn, stop_fn);</span><br><span class="line">k_timer_start(&amp;timer_name, delay, period);</span><br><span class="line">k_timer_stop(&amp;timer_name);</span><br></pre></td></tr></table></figure></li><li><p><strong>延时函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k_sleep(timeout);</span><br><span class="line">k_usleep(microseconds);</span><br></pre></td></tr></table></figure></li><li><p><strong>时间戳</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k_uptime_get();  <span class="comment">// 获取系统启动后的毫秒数</span></span><br><span class="line">k_cycle_get_32();  <span class="comment">// 获取 CPU 周期计数</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="中断管理"><a href="#中断管理" class="headerlink" title="中断管理"></a>中断管理</h3><ol><li><p><strong>中断控制器抽象</strong></p><ul><li>支持多种中断控制器</li><li>统一的中断 API</li></ul></li><li><p><strong>中断处理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IRQ_CONNECT(irq_num, priority, isr_handler, isr_param, flags);</span><br><span class="line">irq_enable(irq_num);</span><br><span class="line">irq_disable(irq_num);</span><br></pre></td></tr></table></figure></li><li><p><strong>中断优先级</strong></p><ul><li>可配置的中断优先级</li><li>支持嵌套中断</li></ul></li><li><p><strong>中断延迟工作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">K_WORK_DEFINE(work_item, work_handler);</span><br><span class="line">k_work_submit(&amp;work_item);</span><br></pre></td></tr></table></figure></li></ol><h3 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h3><ol><li><p><strong>低功耗模式</strong></p><ul><li>支持多种低功耗状态</li><li>自动电源管理</li></ul></li><li><p><strong>设备电源管理</strong></p><ul><li>设备级电源状态控制</li><li>电源域管理</li></ul></li></ol><h2 id="内核配置"><a href="#内核配置" class="headerlink" title="内核配置"></a>内核配置</h2><p>Zephyr 内核高度可配置，通过 Kconfig 系统可以裁剪和定制内核功能：</p><ol><li><p><strong>内核配置选项</strong></p><ul><li><code>CONFIG_MULTITHREADING</code>：多线程支持</li><li><code>CONFIG_PREEMPT_ENABLED</code>：抢占式调度</li><li><code>CONFIG_TIMESLICING</code>：时间片轮转</li><li><code>CONFIG_HEAP_MEM_POOL_SIZE</code>：堆内存大小</li></ul></li><li><p><strong>配置方法</strong></p><ul><li>在 <code>prj.conf</code> 文件中添加配置项</li><li>使用 <code>menuconfig</code> 图形界面配置</li><li>通过 CMake 命令行参数配置</li></ul></li></ol><h2 id="内核源码结构"><a href="#内核源码结构" class="headerlink" title="内核源码结构"></a>内核源码结构</h2><p>Zephyr 内核源码位于 <code>kernel/</code> 目录下，主要包括：</p><ol><li><p><strong>核心功能</strong></p><ul><li><code>kernel/init.c</code>：内核初始化</li><li><code>kernel/thread.c</code>：线程管理</li><li><code>kernel/sched.c</code>：调度器</li><li><code>kernel/sem.c</code>：信号量实现</li><li><code>kernel/mutex.c</code>：互斥量实现</li></ul></li><li><p><strong>架构相关代码</strong></p><ul><li><code>arch/</code>：架构特定代码</li><li><code>include/arch/</code>：架构特定头文件</li></ul></li><li><p><strong>设备驱动模型</strong></p><ul><li><code>drivers/</code>：设备驱动</li><li><code>include/drivers/</code>：驱动 API</li></ul></li></ol><h2 id="内核启动流程"><a href="#内核启动流程" class="headerlink" title="内核启动流程"></a>内核启动流程</h2><p>Zephyr 内核的启动过程如下：</p><ol><li><p><strong>启动阶段</strong></p><ul><li>硬件初始化</li><li>架构特定初始化</li><li>C 运行时初始化</li></ul></li><li><p><strong>内核初始化</strong></p><ul><li>内核数据结构初始化</li><li>调度器初始化</li><li>系统时钟初始化</li></ul></li><li><p><strong>设备初始化</strong></p><ul><li>按优先级初始化设备驱动</li><li>设备树处理</li></ul></li><li><p><strong>应用程序启动</strong></p><ul><li>创建主线程</li><li>调用 <code>main()</code> 函数</li></ul></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>资源优化</strong></p><ul><li>根据需求裁剪内核功能</li><li>使用静态分配代替动态分配</li><li>优化线程栈大小</li></ul></li><li><p><strong>实时性保证</strong></p><ul><li>合理设置线程优先级</li><li>避免长时间禁用中断</li><li>使用中断延迟工作处理耗时任务</li></ul></li><li><p><strong>内存安全</strong></p><ul><li>启用内存保护功能</li><li>使用用户模式隔离关键任务</li><li>避免使用动态内存分配</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 内核提供了完整的实时操作系统功能，同时保持了高度的可配置性和可裁剪性。通过深入理解内核架构，开发者可以更好地利用 Zephyr 的特性，开发高效、可靠的嵌入式应用。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr RTOS 系统架构</title>
      <link href="/2025/03/20/nodic/zephyr/architecture/README/"/>
      <url>/2025/03/20/nodic/zephyr/architecture/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-RTOS-系统架构"><a href="#Zephyr-RTOS-系统架构" class="headerlink" title="Zephyr RTOS 系统架构"></a>Zephyr RTOS 系统架构</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月20日 22:30</li></ul><p>Zephyr RTOS 是一个模块化、可扩展的实时操作系统，设计用于资源受限的嵌入式系统。本章节将介绍 Zephyr 的整体系统架构。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="kernel">内核架构</a></li><li><a href="hardware">硬件支持</a></li><li><a href="devicetree">设备树</a></li><li><a href="drivers">驱动模型</a></li></ol><h2 id="架构概览"><a href="#架构概览" class="headerlink" title="架构概览"></a>架构概览</h2><p>Zephyr 的系统架构主要包括以下几个部分：</p><ol><li><p>微内核</p><ul><li>提供基本的线程管理、同步原语和内存管理</li><li>支持抢占式多任务和协作式多任务</li><li>实现了实时调度器</li></ul></li><li><p>硬件抽象层 (HAL)</p><ul><li>提供统一的硬件访问接口</li><li>支持多种 CPU 架构和开发板</li></ul></li><li><p>设备驱动框架</p><ul><li>统一的驱动模型</li><li>支持动态加载和卸载驱动</li></ul></li><li><p>网络协议栈</p><ul><li>支持多种网络协议，如 TCP&#x2F;IP、Bluetooth、IEEE 802.15.4</li></ul></li><li><p>文件系统</p><ul><li>支持多种文件系统，如 FAT、LittleFS</li></ul></li><li><p>电源管理</p><ul><li>提供低功耗模式和动态频率调节</li></ul></li><li><p>安全子系统</p><ul><li>提供加密、认证和安全启动等功能</li></ul></li></ol><h2 id="模块化设计"><a href="#模块化设计" class="headerlink" title="模块化设计"></a>模块化设计</h2><p>Zephyr 采用高度模块化的设计，主要体现在：</p><ol><li><p>内核模块化</p><ul><li>核心功能和可选功能分离</li><li>通过 Kconfig 系统进行配置</li></ul></li><li><p>驱动模块化</p><ul><li>驱动程序可独立编译和加载</li><li>支持设备树描述硬件</li></ul></li><li><p>协议栈模块化</p><ul><li>网络协议可独立选择和配置</li><li>支持多种无线和有线通信协议</li></ul></li><li><p>文件系统模块化</p><ul><li>支持多种文件系统并可动态挂载</li></ul></li></ol><h2 id="跨平台支持"><a href="#跨平台支持" class="headerlink" title="跨平台支持"></a>跨平台支持</h2><p>Zephyr 支持多种硬件平台和 CPU 架构：</p><ol><li><p>支持的 CPU 架构</p><ul><li>ARM Cortex-M</li><li>ARM Cortex-R</li><li>ARM Cortex-A</li><li>x86</li><li>RISC-V</li><li>Xtensa</li><li>ARC</li></ul></li><li><p>跨平台抽象</p><ul><li>硬件抽象层 (HAL)</li><li>统一的驱动 API</li><li>架构无关的内核 API</li></ul></li><li><p>板级支持包 (BSP)</p><ul><li>提供特定开发板的配置和初始化代码</li><li>支持快速添加新的开发板</li></ul></li></ol><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><p>Zephyr 使用 Kconfig 和 CMake 作为主要的配置系统：</p><ol><li><p>Kconfig</p><ul><li>用于配置内核、驱动和应用程序选项</li><li>提供图形化和命令行配置界面</li></ul></li><li><p>CMake</p><ul><li>管理构建过程和依赖关系</li><li>支持跨平台构建</li></ul></li><li><p>Device Tree</p><ul><li>描述硬件配置和资源</li><li>支持动态生成设备驱动代码</li></ul></li></ol><h2 id="安全性设计"><a href="#安全性设计" class="headerlink" title="安全性设计"></a>安全性设计</h2><p>Zephyr 在设计中考虑了安全性：</p><ol><li><p>内存保护</p><ul><li>支持 MPU 和 MMU</li><li>用户模式和内核模式分离</li></ul></li><li><p>安全启动</p><ul><li>支持固件签名和验证</li></ul></li><li><p>加密子系统</p><ul><li>提供硬件加速的加密算法</li></ul></li><li><p>安全存储</p><ul><li>支持安全密钥存储</li></ul></li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Zephyr RTOS 的架构设计注重模块化、可扩展性和安全性，使其能够适应各种嵌入式应用场景。通过深入了解 Zephyr 的系统架构，开发者可以更好地利用其特性，开发高效、安全的嵌入式应用。</p><p>在接下来的章节中，我们将详细介绍内核架构、硬件支持、设备树和驱动模型等核心概念。</p>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zephyr】【二】Zephyr RTOS 系统架构</title>
      <link href="/2025/03/20/zephyer/zephyr2/"/>
      <url>/2025/03/20/zephyer/zephyr2/</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script><script>mermaid.initialize({startOnLoad:true});</script><h1 id="Zephyr-RTOS-系统架构"><a href="#Zephyr-RTOS-系统架构" class="headerlink" title="Zephyr RTOS 系统架构"></a>Zephyr RTOS 系统架构</h1><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><div class="mermaid">graph TB    subgraph "应用层"        App1[应用1]        App2[应用2]        App3[应用3]    end    subgraph "系统服务层"        FS[文件系统]        Net[网络协议栈]        Shell[命令行界面]    end    subgraph "内核层"        Sched[调度器]        Mem[内存管理]        IPC[进程间通信]        Time[时间管理]    end    subgraph "硬件抽象层"        GPIO[GPIO驱动]        UART[串口驱动]        SPI[SPI驱动]        I2C[I2C驱动]    end    App1 & App2 & App3 --> FS & Net & Shell    FS & Net & Shell --> Sched & Mem & IPC & Time    Sched & Mem & IPC & Time --> GPIO & UART & SPI & I2C</div><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><h3 id="1-内核-kernel"><a href="#1-内核-kernel" class="headerlink" title="1. 内核 (kernel&#x2F;)"></a>1. 内核 (kernel&#x2F;)</h3><p>内核是 Zephyr 的核心，提供基础的操作系统服务。</p><h4 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h4><ul><li>任务调度</li><li>中断处理</li><li>内存管理</li><li>同步机制</li><li>时间管理</li></ul><div class="mermaid">graph LR    subgraph "内核核心"        Sched[调度器] --> Thread[线程管理]        Thread --> Sync[同步原语]        Sync --> Mem[内存管理]        Mem --> IRQ[中断处理]    end</div><h3 id="2-驱动系统-drivers"><a href="#2-驱动系统-drivers" class="headerlink" title="2. 驱动系统 (drivers&#x2F;)"></a>2. 驱动系统 (drivers&#x2F;)</h3><p>驱动系统提供硬件抽象层，使应用程序能够统一访问不同的硬件。</p><h4 id="驱动架构："><a href="#驱动架构：" class="headerlink" title="驱动架构："></a>驱动架构：</h4><div class="mermaid">graph TB    subgraph "驱动框架"        API[驱动API] --> Core[驱动核心]        Core --> HAL[硬件抽象层]        HAL --> HW[硬件接口]    end</div><h3 id="3-设备树-dts"><a href="#3-设备树-dts" class="headerlink" title="3. 设备树 (dts&#x2F;)"></a>3. 设备树 (dts&#x2F;)</h3><p>设备树描述硬件配置和资源分配。</p><div class="mermaid">graph TD    subgraph "设备树结构"        Root[根节点] --> CPU[处理器]        Root --> Mem[内存]        Root --> Bus[总线]        Bus --> Dev1[设备1]        Bus --> Dev2[设备2]    end</div><h2 id="子系统-subsys"><a href="#子系统-subsys" class="headerlink" title="子系统 (subsys&#x2F;)"></a>子系统 (subsys&#x2F;)</h2><p>Zephyr 包含多个子系统，每个子系统提供特定的功能。</p><h3 id="主要子系统："><a href="#主要子系统：" class="headerlink" title="主要子系统："></a>主要子系统：</h3><ol><li><p><strong>网络协议栈</strong></p><ul><li>TCP&#x2F;IP</li><li>Bluetooth</li><li>IEEE 802.15.4</li></ul></li><li><p><strong>文件系统</strong></p><ul><li>FAT</li><li>LittleFS</li><li>NFFS</li></ul></li><li><p><strong>电源管理</strong></p><ul><li>休眠模式</li><li>动态频率调节</li><li>电源状态管理</li></ul></li></ol><div class="mermaid">graph LR    subgraph "子系统架构"        Net[网络] --> Proto[协议栈]        FS[文件系统] --> Storage[存储]        PM[电源管理] --> State[状态机]    end</div><h2 id="开发板支持-boards"><a href="#开发板支持-boards" class="headerlink" title="开发板支持 (boards&#x2F;)"></a>开发板支持 (boards&#x2F;)</h2><p>Zephyr 支持多种开发板，每个开发板都有其特定的配置和驱动。</p><h3 id="开发板支持结构："><a href="#开发板支持结构：" class="headerlink" title="开发板支持结构："></a>开发板支持结构：</h3><div class="mermaid">graph TB    subgraph "开发板支持"        Board[开发板定义] --> DTS[设备树]        DTS --> Kconfig[配置选项]        Kconfig --> Init[初始化代码]    end</div><h2 id="架构支持-arch"><a href="#架构支持-arch" class="headerlink" title="架构支持 (arch&#x2F;)"></a>架构支持 (arch&#x2F;)</h2><p>支持多种处理器架构，每种架构都有其特定的实现。</p><h3 id="主要支持的架构："><a href="#主要支持的架构：" class="headerlink" title="主要支持的架构："></a>主要支持的架构：</h3><ul><li>ARM (32位和64位)</li><li>x86</li><li>RISC-V</li><li>ARC</li><li>SPARC</li><li>MIPS</li></ul><div class="mermaid">graph TB    subgraph "架构支持"        Core[架构核心] --> Port[移植层]        Port --> HAL[硬件抽象]        HAL --> Spec[架构特定代码]    end</div><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><div class="mermaid">sequenceDiagram    participant App as 应用程序    participant API as Zephyr API    participant Kernel as 内核    participant Driver as 驱动    participant HW as 硬件    App->>API: 调用系统API    API->>Kernel: 内核服务    Kernel->>Driver: 驱动操作    Driver->>HW: 硬件控制    HW->>Driver: 硬件响应    Driver->>Kernel: 驱动回调    Kernel->>API: 服务完成    API->>App: 返回结果</div>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zephyr】【一】Zephyr RTOS 示例代码集</title>
      <link href="/2025/03/20/zephyer/zephyer1/"/>
      <url>/2025/03/20/zephyer/zephyer1/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-RTOS-示例代码集"><a href="#Zephyr-RTOS-示例代码集" class="headerlink" title="Zephyr RTOS 示例代码集"></a>Zephyr RTOS 示例代码集</h1><h2 id="1-基础示例"><a href="#1-基础示例" class="headerlink" title="1. 基础示例"></a>1. 基础示例</h2><h3 id="1-0-基础配置"><a href="#1-0-基础配置" class="headerlink" title="1.0 基础配置"></a>1.0 基础配置</h3><p>每个示例都需要一个 <code>prj.conf</code> 文件来配置项目。以下是各个示例所需的配置：</p><h4 id="基础示例-prj-conf"><a href="#基础示例-prj-conf" class="headerlink" title="基础示例 prj.conf"></a>基础示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 控制台输出</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 日志系统</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3</span><br><span class="line"></span><br><span class="line"># 内核配置</span><br><span class="line">CONFIG_KERNEL_BIN_NAME=&quot;app&quot;</span><br></pre></td></tr></table></figure><h4 id="线程示例-prj-conf"><a href="#线程示例-prj-conf" class="headerlink" title="线程示例 prj.conf"></a>线程示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 线程配置</span><br><span class="line">CONFIG_THREAD_NAME=y</span><br><span class="line">CONFIG_THREAD_MONITOR=y</span><br><span class="line">CONFIG_THREAD_STACK_INFO=y</span><br></pre></td></tr></table></figure><h3 id="1-1-Hello-World"><a href="#1-1-Hello-World" class="headerlink" title="1.1 Hello World"></a>1.1 Hello World</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">uart_dev</span> =</span> DEVICE_DT_GET(DT_CHOSEN(zephyr_console));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(uart_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;UART device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> tx_buf[] = <span class="string">&quot;Hello World!\r\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_buf); i++) &#123;</span><br><span class="line">        uart_poll_out(uart_dev, tx_buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        gpio_pin_set(dev, PIN, (<span class="type">int</span>)led_is_on);</span><br><span class="line">        led_is_on = !led_is_on;</span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Thread 1 running\n&quot;</span>);</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread2_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Thread 2 running\n&quot;</span>);</span><br><span class="line">        k_msleep(<span class="number">1500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    k_thread_create(&amp;thread1_data, thread1_stack,</span><br><span class="line">                    STACK_SIZE, thread1_entry,</span><br><span class="line">                    <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    THREAD_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    k_thread_create(&amp;thread2_data, thread2_stack,</span><br><span class="line">                    STACK_SIZE, thread2_entry,</span><br><span class="line">                    <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    THREAD_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-通信示例"><a href="#2-通信示例" class="headerlink" title="2. 通信示例"></a>2. 通信示例</h2><h3 id="2-0-通信示例配置"><a href="#2-0-通信示例配置" class="headerlink" title="2.0 通信示例配置"></a>2.0 通信示例配置</h3><h4 id="信号量示例-prj-conf"><a href="#信号量示例-prj-conf" class="headerlink" title="信号量示例 prj.conf"></a>信号量示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 内核配置</span><br><span class="line">CONFIG_KERNEL_BIN_NAME=&quot;app&quot;</span><br><span class="line"></span><br><span class="line"># 线程配置</span><br><span class="line">CONFIG_THREAD_NAME=y</span><br><span class="line">CONFIG_THREAD_MONITOR=y</span><br><span class="line">CONFIG_THREAD_STACK_INFO=y</span><br></pre></td></tr></table></figure><h4 id="消息队列示例-prj-conf"><a href="#消息队列示例-prj-conf" class="headerlink" title="消息队列示例 prj.conf"></a>消息队列示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 内核配置</span><br><span class="line">CONFIG_KERNEL_BIN_NAME=&quot;app&quot;</span><br><span class="line"></span><br><span class="line"># 线程配置</span><br><span class="line">CONFIG_THREAD_NAME=y</span><br><span class="line">CONFIG_THREAD_MONITOR=y</span><br><span class="line">CONFIG_THREAD_STACK_INFO=y</span><br><span class="line"></span><br><span class="line"># 消息队列配置</span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=256</span><br></pre></td></tr></table></figure><h3 id="2-1-信号量"><a href="#2-1-信号量" class="headerlink" title="2.1 信号量"></a>2.1 信号量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_PRIORITY 7</span></span><br><span class="line"></span><br><span class="line">K_SEM_DEFINE(my_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">K_THREAD_STACK_DEFINE(producer_stack, STACK_SIZE);</span><br><span class="line">K_THREAD_STACK_DEFINE(consumer_stack, STACK_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">producer_thread_data</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">consumer_thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">producer_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">        printk(<span class="string">&quot;Giving semaphore\n&quot;</span>);</span><br><span class="line">        k_sem_give(&amp;my_sem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">consumer_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Taking semaphore\n&quot;</span>);</span><br><span class="line">        k_sem_take(&amp;my_sem, K_FOREVER);</span><br><span class="line">        printk(<span class="string">&quot;Got semaphore\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    k_thread_create(&amp;producer_thread_data, producer_stack,</span><br><span class="line">                    STACK_SIZE, producer_entry,</span><br><span class="line">                    <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    THREAD_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    k_thread_create(&amp;consumer_thread_data, consumer_stack,</span><br><span class="line">                    STACK_SIZE, consumer_entry,</span><br><span class="line">                    <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    THREAD_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-消息队列"><a href="#2-2-消息队列" class="headerlink" title="2.2 消息队列"></a>2.2 消息队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_PRIORITY 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_MSG_SIZE 32</span></span><br><span class="line"></span><br><span class="line">K_MSGQ_DEFINE(my_msgq, MAX_MSG_SIZE, <span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">K_THREAD_STACK_DEFINE(producer_stack, STACK_SIZE);</span><br><span class="line">K_THREAD_STACK_DEFINE(consumer_stack, STACK_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">producer_thread_data</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">consumer_thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">producer_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tx_str[MAX_MSG_SIZE];</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(tx_str, <span class="keyword">sizeof</span>(tx_str), <span class="string">&quot;message %d&quot;</span>, count++);</span><br><span class="line">        k_msgq_put(&amp;my_msgq, tx_str, K_FOREVER);</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">consumer_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> rx_str[MAX_MSG_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_msgq_get(&amp;my_msgq, &amp;rx_str, K_FOREVER);</span><br><span class="line">        printk(<span class="string">&quot;Received: %s\n&quot;</span>, rx_str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    k_thread_create(&amp;producer_thread_data, producer_stack,</span><br><span class="line">                    STACK_SIZE, producer_entry,</span><br><span class="line">                    <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    THREAD_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    k_thread_create(&amp;consumer_thread_data, consumer_stack,</span><br><span class="line">                    STACK_SIZE, consumer_entry,</span><br><span class="line">                    <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    THREAD_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-硬件操作示例"><a href="#3-硬件操作示例" class="headerlink" title="3. 硬件操作示例"></a>3. 硬件操作示例</h2><h3 id="3-0-硬件操作配置"><a href="#3-0-硬件操作配置" class="headerlink" title="3.0 硬件操作配置"></a>3.0 硬件操作配置</h3><h4 id="GPIO示例-prj-conf"><a href="#GPIO示例-prj-conf" class="headerlink" title="GPIO示例 prj.conf"></a>GPIO示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># GPIO配置</span><br><span class="line">CONFIG_GPIO=y</span><br><span class="line"></span><br><span class="line"># 设备树配置</span><br><span class="line">CONFIG_GPIO_INIT_PRIORITY=40</span><br></pre></td></tr></table></figure><h4 id="UART示例-prj-conf"><a href="#UART示例-prj-conf" class="headerlink" title="UART示例 prj.conf"></a>UART示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># UART配置</span><br><span class="line">CONFIG_UART_INTERRUPT_DRIVEN=y</span><br><span class="line">CONFIG_UART_LINE_CTRL=y</span><br></pre></td></tr></table></figure><h3 id="3-1-GPIO控制"><a href="#3-1-GPIO控制" class="headerlink" title="3.1 GPIO控制"></a>3.1 GPIO控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取LED设备树信息 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led</span> =</span> GPIO_DT_SPEC_GET(DT_ALIAS(led0), gpios);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(led.port)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error: LED device %s is not ready\n&quot;</span>, led.port-&gt;name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;led, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error %d: Failed to configure LED pin\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        gpio_pin_toggle_dt(&amp;led);</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-UART通信"><a href="#3-2-UART通信" class="headerlink" title="3.2 UART通信"></a>3.2 UART通信</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">uart_dev</span> =</span> DEVICE_DT_GET(DT_CHOSEN(zephyr_console));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(uart_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;UART device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> tx_buf[] = <span class="string">&quot;Hello World!\r\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_buf); i++) &#123;</span><br><span class="line">        uart_poll_out(uart_dev, tx_buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-传感器示例"><a href="#4-传感器示例" class="headerlink" title="4. 传感器示例"></a>4. 传感器示例</h2><h3 id="4-0-传感器配置"><a href="#4-0-传感器配置" class="headerlink" title="4.0 传感器配置"></a>4.0 传感器配置</h3><h4 id="温度传感器示例-prj-conf"><a href="#温度传感器示例-prj-conf" class="headerlink" title="温度传感器示例 prj.conf"></a>温度传感器示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># I2C配置（如果传感器使用I2C）</span><br><span class="line">CONFIG_I2C=y</span><br><span class="line"></span><br><span class="line"># 传感器配置</span><br><span class="line">CONFIG_SENSOR=y</span><br><span class="line">CONFIG_BME280=y</span><br><span class="line">CONFIG_BME280_MODE_FORCED=y</span><br></pre></td></tr></table></figure><h3 id="4-1-温度传感器"><a href="#4-1-温度传感器" class="headerlink" title="4.1 温度传感器"></a>4.1 温度传感器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">dev</span> =</span> DEVICE_DT_GET_ANY(bosch_bme280);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Device %s is not ready\n&quot;</span>, dev-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">temp</span>;</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> ret = sensor_sample_fetch(dev);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;sensor_sample_fetch failed: %d\n&quot;</span>, ret);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ret = sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &amp;temp);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;sensor_channel_get failed: %d\n&quot;</span>, ret);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printk(<span class="string">&quot;Temperature: %.2f °C\n&quot;</span>, sensor_value_to_double(&amp;temp));</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-网络示例"><a href="#5-网络示例" class="headerlink" title="5. 网络示例"></a>5. 网络示例</h2><h3 id="5-0-网络配置"><a href="#5-0-网络配置" class="headerlink" title="5.0 网络配置"></a>5.0 网络配置</h3><h4 id="TCP-Echo服务器示例-prj-conf"><a href="#TCP-Echo服务器示例-prj-conf" class="headerlink" title="TCP Echo服务器示例 prj.conf"></a>TCP Echo服务器示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 网络配置</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_IPV6=y</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line">CONFIG_NET_SOCKETS=y</span><br><span class="line">CONFIG_NET_SOCKETS_POSIX_NAMES=y</span><br><span class="line"></span><br><span class="line"># 网络缓冲区配置</span><br><span class="line">CONFIG_NET_PKT_RX_COUNT=16</span><br><span class="line">CONFIG_NET_PKT_TX_COUNT=16</span><br><span class="line">CONFIG_NET_BUF_RX_COUNT=64</span><br><span class="line">CONFIG_NET_BUF_TX_COUNT=64</span><br><span class="line"></span><br><span class="line"># 网络shell（可选，用于调试）</span><br><span class="line">CONFIG_NET_SHELL=y</span><br><span class="line"></span><br><span class="line"># DHCP客户端（可选）</span><br><span class="line">CONFIG_NET_DHCPV4=y</span><br><span class="line"></span><br><span class="line"># 日志配置</span><br><span class="line">CONFIG_NET_LOG=y</span><br><span class="line">CONFIG_NET_SOCKETS_LOG_LEVEL_DBG=y</span><br></pre></td></tr></table></figure><h3 id="5-1-TCP-Echo服务器"><a href="#5-1-TCP-Echo服务器" class="headerlink" title="5.1 TCP Echo服务器"></a>5.1 TCP Echo服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 4242</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> serv_sock, client_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="type">char</span> rx_buf[BUFFER_SIZE];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建socket */</span></span><br><span class="line">    serv_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (serv_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket: %d\n&quot;</span>, errno);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置服务器地址 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    ret = bind(serv_sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">               <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind: %d\n&quot;</span>, errno);</span><br><span class="line">        close(serv_sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = listen(serv_sock, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to listen: %d\n&quot;</span>, errno);</span><br><span class="line">        close(serv_sock);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;TCP server listening on port %d\n&quot;</span>, PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        client_sock = accept(serv_sock, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">                           &amp;client_addr_len);</span><br><span class="line">        <span class="keyword">if</span> (client_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Accept failed: %d\n&quot;</span>, errno);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printk(<span class="string">&quot;Client connected\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            ret = recv(client_sock, rx_buf, <span class="keyword">sizeof</span>(rx_buf), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                printk(<span class="string">&quot;Receive failed: %d\n&quot;</span>, errno);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">                printk(<span class="string">&quot;Client disconnected\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ret = send(client_sock, rx_buf, ret, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                printk(<span class="string">&quot;Send failed: %d\n&quot;</span>, errno);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        close(client_sock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(serv_sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-蓝牙示例"><a href="#6-蓝牙示例" class="headerlink" title="6. 蓝牙示例"></a>6. 蓝牙示例</h2><h3 id="6-0-蓝牙配置"><a href="#6-0-蓝牙配置" class="headerlink" title="6.0 蓝牙配置"></a>6.0 蓝牙配置</h3><h4 id="BLE广播示例-prj-conf"><a href="#BLE广播示例-prj-conf" class="headerlink" title="BLE广播示例 prj.conf"></a>BLE广播示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_CONSOLE=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 蓝牙配置</span><br><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr&quot;</span><br><span class="line">CONFIG_BT_DEVICE_NAME_DYNAMIC=n</span><br><span class="line">CONFIG_BT_DEVICE_APPEARANCE=0</span><br><span class="line">CONFIG_BT_MAX_CONN=1</span><br><span class="line"></span><br><span class="line"># 蓝牙服务配置</span><br><span class="line">CONFIG_BT_DIS=y</span><br><span class="line">CONFIG_BT_DIS_PNP=n</span><br><span class="line">CONFIG_BT_DIS_MODEL=&quot;Zephyr Model&quot;</span><br><span class="line">CONFIG_BT_DIS_MANUF=&quot;Zephyr Manufacturer&quot;</span><br><span class="line"></span><br><span class="line"># 调试配置（可选）</span><br><span class="line">#CONFIG_BT_DEBUG_LOG=y</span><br></pre></td></tr></table></figure><h3 id="6-1-BLE广播"><a href="#6-1-BLE广播" class="headerlink" title="6.1 BLE广播"></a>6.1 BLE广播</h3><h4 id="prj-conf"><a href="#prj-conf" class="headerlink" title="prj.conf"></a>prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_CONSOLE=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 蓝牙配置</span><br><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr Test&quot;</span><br><span class="line"></span><br><span class="line"># 调试配置（可选）</span><br><span class="line">CONFIG_BT_DEBUG_LOG=y</span><br></pre></td></tr></table></figure><h4 id="src-main-c"><a href="#src-main-c" class="headerlink" title="src&#x2F;main.c"></a>src&#x2F;main.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_NAME_COMPLETE, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">start_advertising</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Advertising successfully started\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Starting Bluetooth Peripheral example\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化蓝牙 */</span></span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开始广播 */</span></span><br><span class="line">    start_advertising();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CONFIG_BT_DIS&#x3D;y<br>CONFIG_BT_DIS_PNP&#x3D;n<br>CONFIG_BT_DIS_MODEL&#x3D;”Zephyr Model”<br>CONFIG_BT_DIS_MANUF&#x3D;”Zephyr Manufacturer”</p><h1 id="调试配置（可选）"><a href="#调试配置（可选）" class="headerlink" title="调试配置（可选）"></a>调试配置（可选）</h1><p>CONFIG_BT_DEBUG_LOG&#x3D;y</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### src/main.c</span><br><span class="line">```c</span><br><span class="line">#include &lt;zephyr/kernel.h&gt;</span><br><span class="line">#include &lt;zephyr/bluetooth/bluetooth.h&gt;</span><br><span class="line">#include &lt;zephyr/bluetooth/hci.h&gt;</span><br><span class="line">#include &lt;zephyr/bluetooth/conn.h&gt;</span><br><span class="line">#include &lt;zephyr/bluetooth/uuid.h&gt;</span><br><span class="line">#include &lt;zephyr/bluetooth/gatt.h&gt;</span><br><span class="line"></span><br><span class="line">static const struct bt_data ad[] = &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_UUID16_ALL, BT_UUID_16_ENCODE(BT_UUID_DIS_VAL)),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static const struct bt_data sd[] = &#123;</span><br><span class="line">    BT_DATA(BT_DATA_NAME_COMPLETE, CONFIG_BT_DEVICE_NAME, sizeof(CONFIG_BT_DEVICE_NAME) - 1),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static void bt_ready(int err)</span><br><span class="line">&#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        printk(&quot;Bluetooth init failed (err %d)\n&quot;, err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(&quot;Bluetooth initialized\n&quot;);</span><br><span class="line"></span><br><span class="line">    /* 开始广播 */</span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), NULL, 0);</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        printk(&quot;Advertising failed to start (err %d)\n&quot;, err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(&quot;Advertising successfully started\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void connected(struct bt_conn *conn, uint8_t err)</span><br><span class="line">&#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        printk(&quot;Connection failed (err 0x%02x)\n&quot;, err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printk(&quot;Connected\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void disconnected(struct bt_conn *conn, uint8_t reason)</span><br><span class="line">&#123;</span><br><span class="line">    printk(&quot;Disconnected (reason 0x%02x)\n&quot;, reason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BT_CONN_CB_DEFINE(conn_callbacks) = &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">    .disconnected = disconnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int err;</span><br><span class="line"></span><br><span class="line">    printk(&quot;Starting Bluetooth Peripheral example\n&quot;);</span><br><span class="line"></span><br><span class="line">    /* 初始化蓝牙 */</span><br><span class="line">    err = bt_enable(bt_ready);</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        printk(&quot;Bluetooth init failed (err %d)\n&quot;, err);</span><br><span class="line">        return err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 等待事件 */</span><br><span class="line">    while (1) &#123;</span><br><span class="line">        k_msleep(1000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-BLE-GATT服务"><a href="#6-2-BLE-GATT服务" class="headerlink" title="6.2 BLE GATT服务"></a>6.2 BLE GATT服务</h3><h4 id="prj-conf-1"><a href="#prj-conf-1" class="headerlink" title="prj.conf"></a>prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_CONSOLE=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 蓝牙配置</span><br><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr GATT&quot;</span><br><span class="line">CONFIG_BT_DEVICE_APPEARANCE=0</span><br><span class="line">CONFIG_BT_MAX_CONN=1</span><br><span class="line"></span><br><span class="line"># GATT配置</span><br><span class="line">CONFIG_BT_GATT_DYNAMIC_DB=y</span><br><span class="line">CONFIG_BT_GATT_SERVICE_CHANGED=y</span><br><span class="line"></span><br><span class="line"># 调试配置</span><br><span class="line">CONFIG_BT_DEBUG_LOG=y</span><br></pre></td></tr></table></figure><h4 id="src-main-c-1"><a href="#src-main-c-1" class="headerlink" title="src&#x2F;main.c"></a>src&#x2F;main.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/conn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自定义服务 UUID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_SERVICE_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自定义特征 UUID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_CHRC_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef1)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_uuid_128</span> <span class="title">custom_service_uuid</span> =</span> BT_UUID_INIT_128(</span><br><span class="line">    BT_UUID_CUSTOM_SERVICE_VAL);</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_uuid_128</span> <span class="title">custom_characteristic_uuid</span> =</span> BT_UUID_INIT_128(</span><br><span class="line">    BT_UUID_CUSTOM_CHRC_VAL);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> custom_value[] = &#123; <span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">read_custom_characteristic</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                                        <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                                        <span class="type">void</span> *buf,</span></span><br><span class="line"><span class="params">                                        <span class="type">uint16_t</span> len,</span></span><br><span class="line"><span class="params">                                        <span class="type">uint16_t</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> bt_gatt_attr_read(conn, attr, buf, len, offset,</span><br><span class="line">                            custom_value, <span class="keyword">sizeof</span>(custom_value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">write_custom_characteristic</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                                         <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                                         <span class="type">const</span> <span class="type">void</span> *buf,</span></span><br><span class="line"><span class="params">                                         <span class="type">uint16_t</span> len,</span></span><br><span class="line"><span class="params">                                         <span class="type">uint16_t</span> offset,</span></span><br><span class="line"><span class="params">                                         <span class="type">uint8_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset + len &gt; <span class="keyword">sizeof</span>(custom_value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(custom_value + offset, buf, len);</span><br><span class="line">    printk(<span class="string">&quot;Received data: 0x%02x\n&quot;</span>, custom_value[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GATT服务定义 */</span></span><br><span class="line">BT_GATT_SERVICE_DEFINE(custom_svc,</span><br><span class="line">    BT_GATT_PRIMARY_SERVICE(&amp;custom_service_uuid),</span><br><span class="line">    BT_GATT_CHARACTERISTIC(&amp;custom_characteristic_uuid.uuid,</span><br><span class="line">                          BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE,</span><br><span class="line">                          BT_GATT_PERM_READ | BT_GATT_PERM_WRITE,</span><br><span class="line">                          read_custom_characteristic,</span><br><span class="line">                          write_custom_characteristic,</span><br><span class="line">                          custom_value),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">    BT_DATA(BT_DATA_NAME_COMPLETE, CONFIG_BT_DEVICE_NAME, <span class="keyword">sizeof</span>(CONFIG_BT_DEVICE_NAME) - <span class="number">1</span>),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_CUSTOM_SERVICE_VAL),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connection failed (err 0x%02x)\n&quot;</span>, err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disconnected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Disconnected (reason 0x%02x)\n&quot;</span>, reason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BT_CONN_CB_DEFINE(conn_callbacks) = &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">    .disconnected = disconnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">bt_ready</span><span class="params">(<span class="type">int</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开始广播 */</span></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Advertising successfully started\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Starting Bluetooth GATT Service example\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化蓝牙 */</span></span><br><span class="line">    err = bt_enable(bt_ready);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待事件 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prj-conf-2"><a href="#prj-conf-2" class="headerlink" title="prj.conf"></a>prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_CONSOLE=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 蓝牙配置</span><br><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_BT_PERIPHERAL=y</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr&quot;</span><br><span class="line">CONFIG_BT_DEVICE_APPEARANCE=0</span><br><span class="line">CONFIG_BT_MAX_CONN=1</span><br><span class="line"></span><br><span class="line"># 调试配置（可选）</span><br><span class="line">CONFIG_BT_DEBUG_LOG=y</span><br></pre></td></tr></table></figure><h4 id="src-main-c-2"><a href="#src-main-c-2" class="headerlink" title="src&#x2F;main.c"></a>src&#x2F;main.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/conn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME     CONFIG_BT_DEVICE_NAME</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME_LEN (sizeof(DEVICE_NAME) - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 广播数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">    BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 扫描响应数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">sd</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_UUID16_ALL, BT_UUID_16_ENCODE(BT_UUID_DIS_VAL))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">bt_ready</span><span class="params">(<span class="type">int</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开始广播 */</span></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad),</span><br><span class="line">                         sd, ARRAY_SIZE(sd));</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Advertising successfully started\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connection failed (err %u)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disconnected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Disconnected (reason %u)\n&quot;</span>, reason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BT_CONN_CB_DEFINE(conn_callbacks) = &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">    .disconnected = disconnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Starting Bluetooth Peripheral example\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化蓝牙 */</span></span><br><span class="line">    err = bt_enable(bt_ready);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 无限循环等待事件 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">find_package</span>(Zephyr REQUIRED HINTS $ENV&#123;ZEPHYR_BASE&#125;)</span><br><span class="line"><span class="keyword">project</span>(bluetooth_peripheral)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_sources</span>(app PRIVATE src/main.c)</span><br></pre></td></tr></table></figure><h3 id="6-2-BLE服务示例"><a href="#6-2-BLE服务示例" class="headerlink" title="6.2 BLE服务示例"></a>6.2 BLE服务示例</h3><h4 id="src-main-c-3"><a href="#src-main-c-3" class="headerlink" title="src&#x2F;main.c"></a>src&#x2F;main.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/conn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME     CONFIG_BT_DEVICE_NAME</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEVICE_NAME_LEN (sizeof(DEVICE_NAME) - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自定义服务 UUID */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_SERVICE_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_CHAR_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef1)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_uuid_128</span> <span class="title">custom_service_uuid</span> =</span> BT_UUID_INIT_128(</span><br><span class="line">    BT_UUID_CUSTOM_SERVICE_VAL);</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_uuid_128</span> <span class="title">custom_char_uuid</span> =</span> BT_UUID_INIT_128(</span><br><span class="line">    BT_UUID_CUSTOM_CHAR_VAL);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> custom_value[] = &#123; <span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 广播数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">    BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_CUSTOM_SERVICE_VAL)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 特征值读取回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">read_custom_value</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                               <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                               <span class="type">void</span> *buf, <span class="type">uint16_t</span> len, <span class="type">uint16_t</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> bt_gatt_attr_read(conn, attr, buf, len, offset,</span><br><span class="line">                            custom_value, <span class="keyword">sizeof</span>(custom_value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 特征值写入回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">write_custom_value</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                                <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                                <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">uint16_t</span> len,</span></span><br><span class="line"><span class="params">                                <span class="type">uint16_t</span> offset, <span class="type">uint8_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (offset + len &gt; <span class="keyword">sizeof</span>(custom_value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(custom_value + offset, buf, len);</span><br><span class="line">    printk(<span class="string">&quot;Value updated: %02x\n&quot;</span>, custom_value[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义GATT服务 */</span></span><br><span class="line">BT_GATT_SERVICE_DEFINE(custom_svc,</span><br><span class="line">    BT_GATT_PRIMARY_SERVICE(&amp;custom_service_uuid),</span><br><span class="line">    BT_GATT_CHARACTERISTIC(&amp;custom_char_uuid.uuid,</span><br><span class="line">                          BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE,</span><br><span class="line">                          BT_GATT_PERM_READ | BT_GATT_PERM_WRITE,</span><br><span class="line">                          read_custom_value, write_custom_value,</span><br><span class="line">                          custom_value),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connection failed (err %u)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disconnected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Disconnected (reason %u)\n&quot;</span>, reason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BT_CONN_CB_DEFINE(conn_callbacks) = &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">    .disconnected = disconnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">bt_ready</span><span class="params">(<span class="type">int</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开始广播 */</span></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad),</span><br><span class="line">                         <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Advertising successfully started\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Starting Bluetooth GATT Service example\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化蓝牙 */</span></span><br><span class="line">    err = bt_enable(bt_ready);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 无限循环等待事件 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-文件系统示例"><a href="#7-文件系统示例" class="headerlink" title="7. 文件系统示例"></a>7. 文件系统示例</h2><h3 id="7-0-文件系统配置"><a href="#7-0-文件系统配置" class="headerlink" title="7.0 文件系统配置"></a>7.0 文件系统配置</h3><h4 id="文件操作示例-prj-conf"><a href="#文件操作示例-prj-conf" class="headerlink" title="文件操作示例 prj.conf"></a>文件操作示例 prj.conf</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 基础配置</span><br><span class="line">CONFIG_PRINTK=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br><span class="line"></span><br><span class="line"># 文件系统配置</span><br><span class="line">CONFIG_FILE_SYSTEM=y</span><br><span class="line">CONFIG_FILE_SYSTEM_LITTLEFS=y</span><br><span class="line"></span><br><span class="line"># Flash驱动配置</span><br><span class="line">CONFIG_FLASH=y</span><br><span class="line">CONFIG_FLASH_MAP=y</span><br><span class="line">CONFIG_FLASH_PAGE_LAYOUT=y</span><br><span class="line"></span><br><span class="line"># 日志配置</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3</span><br><span class="line"></span><br><span class="line"># 文件系统分区配置示例（需要在设备树中定义具体分区）</span><br><span class="line">CONFIG_FLASH_MAP=y</span><br></pre></td></tr></table></figure><h4 id="文件系统分区示例-boards-xxx-overlay"><a href="#文件系统分区示例-boards-xxx-overlay" class="headerlink" title="文件系统分区示例 (boards&#x2F;xxx.overlay)"></a>文件系统分区示例 (boards&#x2F;xxx.overlay)</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">fstab</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,fstab&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        lfs1:</span> <span class="title class_">lfs1</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;zephyr,fstab,littlefs&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">mount-point</span> <span class="operator">=</span> <span class="string">&quot;/lfs&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">partition</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;lfs1_part</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">read-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">prog-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">lookahead-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">32</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">block-cycles</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">512</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;flash0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">partitions</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;fixed-partitions&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">        <span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">        lfs1_part:</span> <span class="title class_">partition@70000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;storage&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x70000</span> <span class="number">0x10000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="7-1-文件操作"><a href="#7-1-文件操作" class="headerlink" title="7.1 文件操作"></a>7.1 文件操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    <span class="type">ssize_t</span> written, read;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化文件对象 */</span></span><br><span class="line">    fs_file_t_init(&amp;file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写文件 */</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs/test.txt&quot;</span>, FS_O_CREATE | FS_O_WRITE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to open file for writing: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    written = fs_write(&amp;file, <span class="string">&quot;Hello, Zephyr!&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="keyword">if</span> (written &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to write file: %d\n&quot;</span>, written);</span><br><span class="line">        fs_close(&amp;file);</span><br><span class="line">        <span class="keyword">return</span> written;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = fs_close(&amp;file);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to close file: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读文件 */</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs/test.txt&quot;</span>, FS_O_READ);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to open file for reading: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    read = fs_read(&amp;file, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">if</span> (read &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to read file: %d\n&quot;</span>, read);</span><br><span class="line">        fs_close(&amp;file);</span><br><span class="line">        <span class="keyword">return</span> read;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buf[read] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Read from file: %s\n&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = fs_close(&amp;file);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to close file: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>固件管理流程</title>
      <link href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E5%9B%BA%E4%BB%B6%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E5%9B%BA%E4%BB%B6%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script><script>mermaid.initialize({startOnLoad:true});</script><h1 id="固件管理流程"><a href="#固件管理流程" class="headerlink" title="固件管理流程"></a>固件管理流程</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>创建时间：2025年03月17日 12:20</li><li>创建者：拉琪雅(Lakia)</li><li>状态：从流程图.md提取</li></ul><h2 id="1-固件更新流程"><a href="#1-固件更新流程" class="headerlink" title="1. 固件更新流程"></a>1. 固件更新流程</h2><div class="mermaid">graph TD    A[开始更新] --> B[备份当前固件]    B --> C[校验新固件]    C --> D{校验结果}    D -->|失败| E[更新失败]    D -->|成功| F[进入更新模式]    F --> G[擦除目标区域]    G --> H[写入新固件]    H --> I[验证写入]    I --> J{验证结果}    J -->|成功| K[更新完成]    J -->|失败| L[回滚到备份]    L --> M[恢复完成]</div><h2 id="2-电源管理流程"><a href="#2-电源管理流程" class="headerlink" title="2. 电源管理流程"></a>2. 电源管理流程</h2><div class="mermaid">graph TD    A[电源管理请求] --> B{请求类型}    B -->|进入低功耗| C[保存当前状态]    B -->|恢复运行| D[加载保存的状态]    B -->|系统挂起| E[进入深度睡眠]    C --> F[配置低功耗模式]    F --> G[设置唤醒条件]    G --> H[进入低功耗状态]    D --> I[恢复寄存器配置]    I --> J[重新初始化传感器]    J --> K[恢复正常运行]    E --> L[关闭非必要功能]    L --> M[配置唤醒源]    M --> N[等待系统唤醒]</div><h2 id="3-工作模式切换流程"><a href="#3-工作模式切换流程" class="headerlink" title="3. 工作模式切换流程"></a>3. 工作模式切换流程</h2><div class="mermaid">graph TD    A[当前模式] --> B{目标模式}    B -->|切换到活动模式| C[配置扫描控制寄存器]    B -->|切换到睡眠模式| D[配置中断和唤醒]    B -->|切换到深度睡眠| E[保存状态]    C --> F[设置AFE配置]    C --> G[启用数据采集]    F --> H[模式切换完成]    G --> H    D --> I[降低扫描频率]    D --> J[配置唤醒源]    I --> K[进入睡眠模式]    J --> K    E --> L[关闭非必要模块]    E --> M[配置唤醒引脚]    L --> N[进入深度睡眠]    M --> N</div><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1/">二进制解析模块设计</a></li><li><a href="/2025/03/16/nodic/doc/04_%E6%8C%87%E5%8D%97/%E5%9B%BA%E4%BB%B6%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%9B%B4%E6%96%B0/">固件加载与更新</a></li><li><a href="/2025/03/16/nodic/doc/02_%E5%AE%9E%E7%8E%B0%E6%96%87%E6%A1%A3/%E9%98%B6%E6%AE%B53_%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97/">阶段3_二进制解析模块</a></li></ul><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul><li>V1.0 (2025-03-17): 初始版本，从流程图.md提取固件管理相关流程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 传感器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试与优化流程</title>
      <link href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E8%B0%83%E8%AF%95%E4%B8%8E%E4%BC%98%E5%8C%96%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E8%B0%83%E8%AF%95%E4%B8%8E%E4%BC%98%E5%8C%96%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script><script>mermaid.initialize({startOnLoad:true});</script><h1 id="调试与优化流程"><a href="#调试与优化流程" class="headerlink" title="调试与优化流程"></a>调试与优化流程</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>创建时间：2025年03月17日 12:15</li><li>创建者：拉琪雅(Lakia)</li><li>状态：从流程图.md提取</li></ul><h2 id="1-调试和日志流程"><a href="#1-调试和日志流程" class="headerlink" title="1. 调试和日志流程"></a>1. 调试和日志流程</h2><div class="mermaid">graph TD    A[触发调试事件] --> B{日志级别}    B -->|错误| C[记录错误信息]    B -->|警告| D[记录警告信息]    B -->|信息| E[记录一般信息]    B -->|调试| F[记录详细信息]    C --> G[更新错误计数]    D --> H[更新警告计数]    G --> I{是否需要处理?}    I -->|是| J[触发错误处理]    I -->|否| K[继续运行]    F --> L[记录寄存器状态]    L --> M[记录传感器数据]    M --> N[更新调试信息]</div><h2 id="2-性能优化流程"><a href="#2-性能优化流程" class="headerlink" title="2. 性能优化流程"></a>2. 性能优化流程</h2><div class="mermaid">graph TD    A[开始性能优化] --> B[采集性能数据]    B --> C[分析响应时间]    C --> D[检查中断延迟]    D --> E[评估功耗水平]    E --> F{是否需要优化?}    F -->|是| G[识别瓶颈]    F -->|否| H[保持当前配置]    G --> I{优化类型}    I -->|响应时间| J[调整扫描频率]    I -->|功耗| K[优化工作模式]    I -->|准确性| L[调整检测阈值]    J --> M[验证优化效果]    K --> M    L --> M    M --> N{效果评估}    N -->|达标| O[应用新配置]    N -->|未达标| P[回退修改]    O --> Q[记录优化结果]    P --> G</div><h2 id="3-自检流程"><a href="#3-自检流程" class="headerlink" title="3. 自检流程"></a>3. 自检流程</h2><div class="mermaid">graph TD    A[开始自检] --> B[检查芯片通信]    B --> C[验证寄存器访问]    C --> D[测试中断功能]    D --> E[检查传感器状态]    E --> F{自检结果}    F -->|全部通过| G[自检成功]    F -->|部分失败| H[记录失败项]    H --> I[评估影响]    I --> J{是否影响核心功能?}    J -->|否| K[继续运行]    J -->|是| L[进入安全模式]</div><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/">核心功能分析</a></li><li><a href="/2025/03/16/nodic/doc/03_API%E6%96%87%E6%A1%A3/API%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">API使用指南</a></li><li><a href="/2025/03/16/nodic/doc/03_API%E6%96%87%E6%A1%A3/%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83/">配置参考</a></li></ul><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul><li>V1.0 (2025-03-17): 初始版本，从流程图.md提取调试与优化相关流程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 传感器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误处理流程</title>
      <link href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script><script>mermaid.initialize({startOnLoad:true});</script><h1 id="错误处理流程"><a href="#错误处理流程" class="headerlink" title="错误处理流程"></a>错误处理流程</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>创建时间：2025年03月17日 12:10</li><li>创建者：拉琪雅(Lakia)</li><li>状态：从流程图.md提取</li></ul><h2 id="1-错误处理流程图"><a href="#1-错误处理流程图" class="headerlink" title="1. 错误处理流程图"></a>1. 错误处理流程图</h2><div class="mermaid">graph TDA[检测到错误] --> B{错误类型}B -->|通信错误| C[重试通信]B -->|参数错误| D[使用默认参数]B -->|硬件错误| E[尝试硬件复位]B -->|其他错误| F[记录错误日志]C --> G{重试成功?}G -->|是| H[恢复正常操作]G -->|否| I[增加重试计数]I --> J{超过最大重试次数?}J -->|是| K[报告严重错误]J -->|否| CD --> L[记录参数错误]E --> M{复位成功?}M -->|是| N[重新初始化设备]M -->|否| O[报告硬件故障]F --> P[评估错误严重性]P --> Q{是否可恢复?}Q -->|是| R[执行恢复操作]Q -->|否| S[报告不可恢复错误]H --> T[错误处理完成]K --> TL --> TN --> TO --> TR --> TS --> T</div><h2 id="2-自动恢复机制流程"><a href="#2-自动恢复机制流程" class="headerlink" title="2. 自动恢复机制流程"></a>2. 自动恢复机制流程</h2><div class="mermaid">graph TDA[检测到系统异常] --> B[保存当前状态]B --> C[记录错误信息]C --> D[执行自动恢复]D --> E{恢复类型判断}E -->|软件复位| F[重新初始化驱动]E -->|硬件复位| G[执行硬件复位]E -->|参数恢复| H[加载默认参数]F --> I[验证驱动状态]G --> IH --> II --> J{验证结果}J -->|成功| K[恢复正常运行]J -->|失败| L[尝试下一级恢复]L --> M{是否还有恢复方案?}M -->|是| EM -->|否| N[报告不可恢复错误]</div><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/">核心功能分析</a></li><li><a href="/2025/03/16/nodic/doc/03_API%E6%96%87%E6%A1%A3/API%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">API使用指南</a></li><li><a href="/2025/03/16/nodic/doc/03_API%E6%96%87%E6%A1%A3/%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E/">错误代码说明</a></li></ul><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul><li>V1.0 (2025-03-17): 初始版本，从流程图.md提取错误处理相关流程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 传感器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件处理流程</title>
      <link href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script><script>mermaid.initialize({startOnLoad:true});</script><h1 id="事件处理流程"><a href="#事件处理流程" class="headerlink" title="事件处理流程"></a>事件处理流程</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>创建时间：2025年03月17日 12:05</li><li>创建者：拉琪雅(Lakia)</li><li>状态：从流程图.md提取</li></ul><h2 id="1-事件处理流程图"><a href="#1-事件处理流程图" class="headerlink" title="1. 事件处理流程图"></a>1. 事件处理流程图</h2><div class="mermaid">graph TD    A[中断触发] --> B[读取中断源]    B --> C{中断类型判断}    C -->|触摸中断| D[读取触摸状态]    C -->|释放中断| E[读取释放状态]    C -->|其他中断| F[处理其他状态]    D --> G{触摸类型判断}    G -->|按钮触摸| H[处理按钮事件]    G -->|滑动触摸| I[处理滑动事件]    H --> J[启动定时器]    J --> K{持续按压检测}    K -->|短按释放| L[触发点击事件]    K -->|持续按压| M{长按阈值检测}    M -->|达到阈值| N[触发长按事件]    M -->|未达阈值| K    I --> O[计算初始位置]    O --> P[跟踪位置变化]    P --> Q{方向判断}    Q -->|上滑| R[触发上滑事件]    Q -->|下滑| S[触发下滑事件]    Q -->|左滑| T[触发左滑事件]    Q -->|右滑| U[触发右滑事件]</div><h2 id="2-中断处理流程"><a href="#2-中断处理流程" class="headerlink" title="2. 中断处理流程"></a>2. 中断处理流程</h2><div class="mermaid">graph TD    A[中断触发] --> B[禁用中断]    B --> C[读取中断源寄存器]    C --> D{中断类型}    D -->|触摸事件| E[处理触摸事件]    D -->|释放事件| F[处理释放事件]    D -->|其他事件| G[处理其他事件]    E --> H[清除中断标志]    F --> H    G --> H    H --> I[执行数据采集]    I --> J[更新设备状态]    J --> K[触发用户回调]    K --> L[启用中断]    L --> M[中断处理完成]</div><h2 id="3-数据采集流程"><a href="#3-数据采集流程" class="headerlink" title="3. 数据采集流程"></a>3. 数据采集流程</h2><div class="mermaid">graph TD    A[开始数据采集] --> B[读取状态寄存器]    B --> C[遍历启用的通道]    C --> D[读取差值寄存器]    D --> E{差值 > 触摸阈值?}    E -->|是| F[更新通道状态为触摸]    E -->|否| G[更新通道状态为释放]    F --> H{所有通道处理完毕?}    G --> H    H -->|否| C    H -->|是| I[更新设备数据结构]    I --> J[触发数据就绪回调]    J --> K[采集完成]</div><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/">事件处理系统设计</a></li><li><a href="/2025/03/16/nodic/doc/02_%E5%AE%9E%E7%8E%B0%E6%96%87%E6%A1%A3/%E9%98%B6%E6%AE%B54_%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/">阶段4_事件处理</a></li></ul><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul><li>V1.0 (2025-03-17): 初始版本，从流程图.md提取事件处理相关流程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 传感器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础功能流程</title>
      <link href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="基础功能流程图"><a href="#基础功能流程图" class="headerlink" title="基础功能流程图"></a>基础功能流程图</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.1</li><li>更新时间：2025年03月16日 10:20</li></ul><h2 id="1-初始化流程"><a href="#1-初始化流程" class="headerlink" title="1. 初始化流程"></a>1. 初始化流程</h2><div class="mermaid">graph TDA[开始初始化] --> B[获取I2C设备]B --> C{设备就绪检查}C -->|不就绪| D[返回错误]C -->|就绪| E[执行芯片ID验证]E --> F{ID验证结果}F -->|验证失败| G[返回错误]F -->|验证成功| H[加载默认参数配置]H --> I[配置AFE寄存器]I --> J[配置DSP寄存器]J --> K[设置中断和触发条件]K --> L[配置工作模式]L --> M[初始化成功]</div><h2 id="2-芯片ID验证流程"><a href="#2-芯片ID验证流程" class="headerlink" title="2. 芯片ID验证流程"></a>2. 芯片ID验证流程</h2><div class="mermaid">graph TDA[开始验证] --> B[读取CHIP_ID寄存器]B --> C[获取32位芯片ID]C --> D{匹配芯片型号}D -->|0xA9630340| E[AW93303FDR]D -->|0xA9630520| F[AW93305DNR]D -->|0xA9330710| G[AW93307QNR]D -->|0xA9331010| H[AW93310QNR]D -->|0xA9331210| I[AW93312QNR]D -->|其他| J[未知芯片]E --> K[验证成功]F --> KG --> KH --> KI --> KJ --> L[验证失败]</div><h2 id="3-I2C通信流程"><a href="#3-I2C通信流程" class="headerlink" title="3. I2C通信流程"></a>3. I2C通信流程</h2><div class="mermaid">graph TDA[开始I2C操作] --> B{读或写?}B -->|读取| C[准备16位寄存器地址]B -->|写入| D[准备寄存器地址和数据]C --> E[执行I2C写后读]D --> F[执行I2C写入]E --> G[组合4字节数据]F --> H[检查写入结果]G --> I[返回32位值]H --> J[返回操作状态]</div><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>初始化流程中，确保每个步骤都有适当的错误处理机制。</li><li>芯片ID验证流程应该考虑到未来可能添加的新芯片型号。</li><li>I2C通信流程应该包含超时处理和重试机制。</li><li>所有流程都应该考虑到并发操作的可能性，确保线程安全。</li></ol><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/">错误处理流程</a></li><li><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E5%9B%BA%E4%BB%B6%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B/#%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B">参数配置流程</a></li></ul><h2 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h2><ul><li>V1.0 (2025-03-16 08:30): 初始创建</li><li>V1.1 (2025-03-16 10:20): 移动到新的目录结构，添加注意事项和相关文档链接</li></ul>]]></content>
      
      
      <categories>
          
          <category> 传感器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流程图总览</title>
      <link href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%80%BB%E8%A7%88/"/>
      <url>/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="AW933XX驱动程序流程图总览"><a href="#AW933XX驱动程序流程图总览" class="headerlink" title="AW933XX驱动程序流程图总览"></a>AW933XX驱动程序流程图总览</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月16日 10:15</li></ul><h2 id="流程图文档组织"><a href="#流程图文档组织" class="headerlink" title="流程图文档组织"></a>流程图文档组织</h2><p>本文档是AW933XX驱动程序所有流程图的总览索引。为了便于管理和阅读，我们将流程图按功能分类组织在以下文件中：</p><ol><li><p><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E6%B5%81%E7%A8%8B/">基础功能流程</a></p><ul><li>初始化流程</li><li>芯片ID验证流程</li><li>I2C通信流程</li></ul></li><li><p><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/">事件处理流程</a></p><ul><li>事件处理主流程</li><li>数据采集流程</li><li>中断处理流程</li><li>工作模式切换流程</li></ul></li><li><p><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/">错误处理流程</a></p><ul><li>错误处理主流程</li><li>自动恢复机制流程</li><li>自检流程</li></ul></li><li><p><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E8%B0%83%E8%AF%95%E4%B8%8E%E4%BC%98%E5%8C%96%E6%B5%81%E7%A8%8B/">调试与优化流程</a></p><ul><li>调试和日志流程</li><li>电源管理流程</li><li>性能优化流程</li></ul></li><li><p><a href="/2025/03/16/nodic/doc/01_%E8%A7%84%E5%88%92%E4%B8%8E%E5%88%86%E6%9E%90/%E6%B5%81%E7%A8%8B%E5%9B%BE/%E5%9B%BA%E4%BB%B6%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B/">固件管理流程</a></p><ul><li>固件更新流程</li><li>参数配置流程</li></ul></li></ol><h2 id="流程图分类说明"><a href="#流程图分类说明" class="headerlink" title="流程图分类说明"></a>流程图分类说明</h2><h3 id="基础功能流程"><a href="#基础功能流程" class="headerlink" title="基础功能流程"></a>基础功能流程</h3><p>包含驱动程序的基本操作流程，是其他所有功能的基础。这些流程描述了驱动程序如何与硬件交互，以及基本的初始化和通信机制。</p><h3 id="事件处理流程"><a href="#事件处理流程" class="headerlink" title="事件处理流程"></a>事件处理流程</h3><p>描述了驱动程序如何处理各种触控事件，包括数据采集、中断处理和不同工作模式之间的切换。这些流程是驱动程序的核心功能部分。</p><h3 id="错误处理流程"><a href="#错误处理流程" class="headerlink" title="错误处理流程"></a>错误处理流程</h3><p>涵盖了驱动程序在遇到各种错误情况时的处理机制，包括错误检测、恢复和自检机制。这些流程保证了驱动程序的稳定性和可靠性。</p><h3 id="调试与优化流程"><a href="#调试与优化流程" class="headerlink" title="调试与优化流程"></a>调试与优化流程</h3><p>包含了用于调试、监控和优化驱动程序性能的各种流程。这些流程帮助开发者诊断问题并提升驱动程序的性能。</p><h3 id="固件管理流程"><a href="#固件管理流程" class="headerlink" title="固件管理流程"></a>固件管理流程</h3><p>描述了固件更新和参数配置的相关流程，确保驱动程序可以正确地更新和配置芯片。</p><h2 id="流程图更新记录"><a href="#流程图更新记录" class="headerlink" title="流程图更新记录"></a>流程图更新记录</h2><h3 id="基础功能流程-1"><a href="#基础功能流程-1" class="headerlink" title="基础功能流程"></a>基础功能流程</h3><ul><li>V1.0 (2025-03-16 08:15): 初始创建</li><li>V1.1 (2025-03-16 10:15): 移动到新的目录结构</li></ul><h3 id="事件处理流程-1"><a href="#事件处理流程-1" class="headerlink" title="事件处理流程"></a>事件处理流程</h3><ul><li>V1.0 (2025-03-16 08:15): 初始创建</li><li>V1.1 (2025-03-16 10:15): 移动到新的目录结构</li></ul><h3 id="错误处理流程-1"><a href="#错误处理流程-1" class="headerlink" title="错误处理流程"></a>错误处理流程</h3><ul><li>V1.0 (2025-03-16 08:15): 初始创建</li><li>V1.1 (2025-03-16 10:15): 移动到新的目录结构</li></ul><h3 id="调试与优化流程-1"><a href="#调试与优化流程-1" class="headerlink" title="调试与优化流程"></a>调试与优化流程</h3><ul><li>V1.0 (2025-03-16 08:15): 初始创建</li><li>V1.1 (2025-03-16 10:15): 移动到新的目录结构</li></ul><h3 id="固件管理流程-1"><a href="#固件管理流程-1" class="headerlink" title="固件管理流程"></a>固件管理流程</h3><ul><li>V1.0 (2025-03-16 08:15): 初始创建</li><li>V1.1 (2025-03-16 10:15): 移动到新的目录结构</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>所有流程图使用Mermaid语法编写，确保在支持Markdown的查看器中可以正确显示</li><li>流程图的更新需要同步更新版本历史</li><li>如需添加新的流程图，请在相应的分类文件中添加，并更新本总览文档</li><li>保持流程图的简洁性和可读性，必要时可以将复杂流程拆分为多个子流程</li></ol>]]></content>
      
      
      <categories>
          
          <category> 传感器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 传感器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nRF52832开发入门【三】MPU6050六轴传感器应用</title>
      <link href="/2025/03/14/nodic/3_nodic_MPU6050/"/>
      <url>/2025/03/14/nodic/3_nodic_MPU6050/</url>
      
        <content type="html"><![CDATA[<h1 id="1-说明"><a href="#1-说明" class="headerlink" title="1 说明"></a>1 说明</h1><p>MPU6050是一款广泛使用的6轴运动跟踪设备，由InvenSense公司开发。它集成了3轴加速度计和3轴陀螺仪，能够精确测量物体的加速度和角速度。</p><p>在Zephyr RTOS中的实现：</p><ul><li>驱动文件位置：<code>zephyr/drivers/sensor/tdk/mpu6050/</code></li><li>主要文件：<ul><li><code>mpu6050.c</code>：主驱动实现</li><li><code>mpu6050.h</code>：头文件定义</li><li><code>mpu6050_trigger.c</code>：中断触发相关功能</li><li><code>Kconfig</code>：驱动配置选项</li></ul></li></ul><p>官方有MPU6050的示例demo，路径如下:</p><p>C:\ncs\v2.9.1\zephyr\samples\sensor\mpu6050</p><p>拿到这个代码，在这个代码的基础上创建创建自己的工程文件。</p><p>代码结构很简单,其中多一个boards文件夹，下面有个nrf52dk_nrf52832.overlay文件，方便我们对自己板子的内容进行重构.</p><p>目标是剥离出6050的相关驱动，使得main.c中仅仅保留干净的代码</p><h1 id="2-引脚配置"><a href="#2-引脚配置" class="headerlink" title="2 引脚配置"></a>2 引脚配置</h1><p>官方默认的dts配置是</p><table><thead><tr><th>i2c0</th><th></th></tr></thead><tbody><tr><td>SDA</td><td>P0.26</td></tr><tr><td>SCL</td><td>P0.27</td></tr></tbody></table><p>详细的dts路劲和内容如下:</p><p><img src="https://s3.bmp.ovh/imgs/2025/03/14/13f20d95ff33c829.png"></p><p>根据实际上自己板子上的外设连接的GPIO脚进行修改后保存</p><p><img src="https://s3.bmp.ovh/imgs/2025/03/14/75c2423959e4eabd.png"></p><p>对应的dts文件</p><p>nrf52dk_nrf52832.overlay 也会新增相关的内容如下:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019 Nordic Semiconductor ASA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="title class_">mpu6050@68</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;invensense,mpu6050&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x68</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">int-gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">11</span> GPIO_ACTIVE_HIGH&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0_default</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">group1</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">psels</span> <span class="operator">=</span> <span class="params">&lt;NRF_PSEL(TWIM_SDA, <span class="number">0</span>, <span class="number">27</span>)&gt;</span>, <span class="params">&lt;NRF_PSEL(TWIM_SCL, <span class="number">0</span>, <span class="number">25</span>)&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>因为我的外设连接SDA是P027,SCL是P025,所以做如上的修改.</p><h1 id="3-项目配置"><a href="#3-项目配置" class="headerlink" title="3 项目配置"></a>3 项目配置</h1><p>我只是做个demo看数据，先把触发模式关掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_MPU6050_TRIGGER_NONE=y</span><br></pre></td></tr></table></figure><h1 id="4-项目说明"><a href="#4-项目说明" class="headerlink" title="4 项目说明"></a>4 项目说明</h1><p>官方demo是直接放在</p><p>process_mpu6050 函数中获取不同通道的数据.</p><p>直接看我重构后的代码</p><p>mpu6050.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mpu6050.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">now_str</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> buf[<span class="number">16</span>]; <span class="comment">/* ...HH:MM:SS.MMM */</span></span><br><span class="line">    <span class="type">uint32_t</span> now = k_uptime_get_32();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ms = now % MSEC_PER_SEC;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> s;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> min;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> h;</span><br><span class="line"></span><br><span class="line">    now /= MSEC_PER_SEC;</span><br><span class="line">    s = now % <span class="number">60U</span>;</span><br><span class="line">    now /= <span class="number">60U</span>;</span><br><span class="line">    min = now % <span class="number">60U</span>;</span><br><span class="line">    now /= <span class="number">60U</span>;</span><br><span class="line">    h = now;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">&quot;%u:%02u:%02u.%03u&quot;</span>,</span><br><span class="line">             h, min, s, ms);</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">process_mpu6050</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">temperature</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">accel</span>[3];</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">gyro</span>[3];</span></span><br><span class="line">    <span class="type">int</span> rc = sensor_sample_fetch(dev);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rc = sensor_channel_get(dev, SENSOR_CHAN_ACCEL_XYZ,</span><br><span class="line">                                accel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rc = sensor_channel_get(dev, SENSOR_CHAN_GYRO_XYZ,</span><br><span class="line">                                gyro);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rc = sensor_channel_get(dev, SENSOR_CHAN_DIE_TEMP,</span><br><span class="line">                                &amp;temperature);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%s]:%g Cel\n&quot;</span></span><br><span class="line">               <span class="string">&quot;  accel %f %f %f m/s/s\n&quot;</span></span><br><span class="line">               <span class="string">&quot;  gyro  %f %f %f rad/s\n&quot;</span>,</span><br><span class="line">               now_str(),</span><br><span class="line">               sensor_value_to_double(&amp;temperature),</span><br><span class="line">               sensor_value_to_double(&amp;accel[<span class="number">0</span>]),</span><br><span class="line">               sensor_value_to_double(&amp;accel[<span class="number">1</span>]),</span><br><span class="line">               sensor_value_to_double(&amp;accel[<span class="number">2</span>]),</span><br><span class="line">               sensor_value_to_double(&amp;gyro[<span class="number">0</span>]),</span><br><span class="line">               sensor_value_to_double(&amp;gyro[<span class="number">1</span>]),</span><br><span class="line">               sensor_value_to_double(&amp;gyro[<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sample fetch/get failed: %d\n&quot;</span>, rc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MPU6050_TRIGGER</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sensor_trigger</span> <span class="title">trigger</span>;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handle_mpu6050_drdy</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="keyword">struct</span> sensor_trigger *trig)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = process_mpu6050(dev);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;cancelling trigger due to failure: %d\n&quot;</span>, rc);</span><br><span class="line">        (<span class="type">void</span>)sensor_trigger_set(dev, trig, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* CONFIG_MPU6050_TRIGGER */</span></span></span><br></pre></td></tr></table></figure><p>mpu6050.h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __MPU6050_H__</span><br><span class="line">#define __MPU6050_H__</span><br><span class="line"></span><br><span class="line">#include &lt;zephyr/types.h&gt;</span><br><span class="line">#include &lt;zephyr/kernel.h&gt;</span><br><span class="line">#include &lt;zephyr/device.h&gt;</span><br><span class="line">#include &lt;zephyr/drivers/sensor.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">const char *now_str(void);</span><br><span class="line">int process_mpu6050(const struct device *dev);</span><br><span class="line">#ifdef CONFIG_MPU6050_TRIGGER</span><br><span class="line">extern struct sensor_trigger trigger;</span><br><span class="line">void handle_mpu6050_drdy(const struct device *dev,const struct sensor_trigger *trig);</span><br><span class="line">#endif</span><br><span class="line">#endif /* __MPU6050_H__ */</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2019 Nordic Semiconductor ASA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mpu6050.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">mpu6050</span> =</span> DEVICE_DT_GET_ONE(invensense_mpu6050);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(mpu6050))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Device %s is not ready\n&quot;</span>, mpu6050-&gt;name);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MPU6050_TRIGGER</span></span><br><span class="line">    trigger = (<span class="keyword">struct</span> sensor_trigger)&#123;</span><br><span class="line">        .type = SENSOR_TRIG_DATA_READY,</span><br><span class="line">        .chan = SENSOR_CHAN_ALL,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (sensor_trigger_set(mpu6050, &amp;trigger,</span><br><span class="line">                           handle_mpu6050_drdy) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Cannot configure trigger\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printk(<span class="string">&quot;Configured for triggered sampling.\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!IS_ENABLED(CONFIG_MPU6050_TRIGGER))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> rc = process_mpu6050(mpu6050);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rc != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* triggered runs with its own thread after exit */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-驱动说明"><a href="#5-驱动说明" class="headerlink" title="5 驱动说明"></a>5 驱动说明</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOG_MODULE_REGISTER(MPU6050, CONFIG_SENSOR_LOG_LEVEL);</span><br></pre></td></tr></table></figure><p>这是官方内部配置的驱动.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mpu6050_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mpu6050_data</span> *<span class="title">drv_data</span> =</span> dev-&gt;data;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">mpu6050_config</span> *<span class="title">cfg</span> =</span> dev-&gt;config;</span><br><span class="line"><span class="type">uint8_t</span> id, i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(cfg-&gt;i2c.bus)) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;Bus device is not ready&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -ENODEV;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check chip ID */</span></span><br><span class="line"><span class="keyword">if</span> (i2c_reg_read_byte_dt(&amp;cfg-&gt;i2c, MPU6050_REG_CHIP_ID, &amp;id) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;Failed to read chip ID.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id == MPU6050_CHIP_ID || id == MPU9250_CHIP_ID || id == MPU6880_CHIP_ID) &#123;</span><br><span class="line">LOG_DBG(<span class="string">&quot;MPU6050/MPU9250/MPU6880 detected&quot;</span>);</span><br><span class="line">drv_data-&gt;device_type = DEVICE_TYPE_MPU6050;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == MPU6500_CHIP_ID) &#123;</span><br><span class="line">LOG_DBG(<span class="string">&quot;MPU6500 detected&quot;</span>);</span><br><span class="line">drv_data-&gt;device_type = DEVICE_TYPE_MPU6500;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;Invalid chip ID.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* wake up chip */</span></span><br><span class="line"><span class="keyword">if</span> (i2c_reg_update_byte_dt(&amp;cfg-&gt;i2c, MPU6050_REG_PWR_MGMT1,</span><br><span class="line">   MPU6050_SLEEP_EN, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;Failed to wake up chip.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* set accelerometer full-scale range */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0U</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (BIT(i+<span class="number">1</span>) == CONFIG_MPU6050_ACCEL_FS) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">4U</span>) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;Invalid value for accel full-scale range.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i2c_reg_write_byte_dt(&amp;cfg-&gt;i2c, MPU6050_REG_ACCEL_CFG,</span><br><span class="line">  i &lt;&lt; MPU6050_ACCEL_FS_SHIFT) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;Failed to write accel full-scale range.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drv_data-&gt;accel_sensitivity_shift = <span class="number">14</span> - i;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* set gyroscope full-scale range */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0U</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (BIT(i) * <span class="number">250</span> == CONFIG_MPU6050_GYRO_FS) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">4U</span>) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;Invalid value for gyro full-scale range.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i2c_reg_write_byte_dt(&amp;cfg-&gt;i2c, MPU6050_REG_GYRO_CFG,</span><br><span class="line">  i &lt;&lt; MPU6050_GYRO_FS_SHIFT) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;Failed to write gyro full-scale range.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drv_data-&gt;gyro_sensitivity_x10 = mpu6050_gyro_sensitivity_x10[i];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MPU6050_TRIGGER</span></span><br><span class="line"><span class="keyword">if</span> (cfg-&gt;int_gpio.port) &#123;</span><br><span class="line"><span class="keyword">if</span> (mpu6050_init_interrupt(dev) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">LOG_DBG(<span class="string">&quot;Failed to initialize interrupts.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="干净点的重构说明"><a href="#干净点的重构说明" class="headerlink" title="干净点的重构说明"></a>干净点的重构说明</h1><p>仅保留main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/printk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_MODULE_NAME i2c_module</span></span><br><span class="line"></span><br><span class="line">LOG_MODULE_REGISTER(i2c_module, LOG_LEVEL_INF);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MPU6050_ADDR 0x68</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MPU_PWR_MGMT1_REG 0x6B</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Starting MPU6050 application&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取MPU6050设备</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">mpu</span> =</span> DEVICE_DT_GET_ONE(invensense_mpu6050);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(mpu))</span><br><span class="line">    &#123;</span><br><span class="line">        LOG_ERR(<span class="string">&quot;MPU6050 device not ready&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOG_INF(<span class="string">&quot;MPU6050 device %s is ready&quot;</span>, mpu-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取传感器数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">accel</span>[3], <span class="title">gyro</span>[3], <span class="title">temp</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取传感器数据</span></span><br><span class="line">        <span class="keyword">if</span> (sensor_sample_fetch(mpu) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LOG_ERR(<span class="string">&quot;Failed to fetch sensor data&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取加速度数据</span></span><br><span class="line">        sensor_channel_get(mpu, SENSOR_CHAN_ACCEL_XYZ, accel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取陀螺仪数据</span></span><br><span class="line">        sensor_channel_get(mpu, SENSOR_CHAN_GYRO_XYZ, gyro);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取温度数据</span></span><br><span class="line">        sensor_channel_get(mpu, SENSOR_CHAN_DIE_TEMP, &amp;temp);</span><br><span class="line"></span><br><span class="line">        LOG_INF(<span class="string">&quot;Accel (m/s^2): X=%d.%06d, Y=%d.%06d, Z=%d.%06d&quot;</span>,</span><br><span class="line">                accel[<span class="number">0</span>].val1, accel[<span class="number">0</span>].val2, accel[<span class="number">1</span>].val1, accel[<span class="number">1</span>].val2, accel[<span class="number">2</span>].val1, accel[<span class="number">2</span>].val2);</span><br><span class="line"></span><br><span class="line">        LOG_INF(<span class="string">&quot;Gyro (dps): X=%d.%06d, Y=%d.%06d, Z=%d.%06d&quot;</span>,</span><br><span class="line">                gyro[<span class="number">0</span>].val1, gyro[<span class="number">0</span>].val2, gyro[<span class="number">1</span>].val1, gyro[<span class="number">1</span>].val2, gyro[<span class="number">2</span>].val1, gyro[<span class="number">2</span>].val2);</span><br><span class="line"></span><br><span class="line">        LOG_INF(<span class="string">&quot;Temperature (Celsius): %d.%06d&quot;</span>, temp.val1, temp.val2);</span><br><span class="line"></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nRF52832开发入门【二】模块化</title>
      <link href="/2025/03/09/nodic/2_nodic%E6%9E%B6%E6%9E%84%E5%8C%96/"/>
      <url>/2025/03/09/nodic/2_nodic%E6%9E%B6%E6%9E%84%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>我们实际开发过程中往往会很复杂，为了更好的管理代码，我们需要模块化。模块化的好处有很多，比如：</p><ol><li>降低耦合度：模块化可以降低模块间的耦合度，使得代码更容易维护和修改。</li><li>复用性：模块化可以提高代码的复用性，可以节省开发时间。</li><li>降低成本：模块化可以降低开发成本，可以节省开发成本。</li></ol><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h1><p>VCode安装插件:<br>1.nRF Connect for VS Code<br>2.CMake<br>先创建一个空的工程文件<br><img src="https://s3.bmp.ovh/imgs/2025/03/09/b636b2557bf0f419.png"></p><p>创建完,默认会创建一些最基础的配置文件</p><p>CMakeLists.txt和prj.conf</p><p>然后给这个app添加build配置</p><p><img src="https://s3.bmp.ovh/imgs/2025/03/09/c14f1a613b73d198.png"></p><p>除了板子是你对应的手上的板子，其他一路默认即可</p><p><img src="https://s3.bmp.ovh/imgs/2025/03/09/8cf7a733fee00a46.png"></p><p>然后开始build即可.</p><p><img src="https://s3.bmp.ovh/imgs/2025/03/09/0ceb7b5e3a3cc9fb.png"></p><p>插上对应的板子 烧录build flash即可</p><p><img src="https://s3.bmp.ovh/imgs/2025/03/09/e4904e2310b08942.png"></p><p>提供的默认空工程没啥东西，我这边按照我的自己的习惯对齐进行分模块，有的人习惯是把c文件放一块,h文件放一块,也可以每个模块都单独一个文件夹</p><p>我是习惯后者.前者是可以省去CMakeList.txt文件添加的麻烦，但是我觉得这就不算真正意义上的模块化了.</p><p>将src文件中的main.c挪出来，删掉src文件，并且添加自己想要添加的模块内容如下示例:</p><p><img src="https://s3.bmp.ovh/imgs/2025/03/09/230c1b8e5b9dbd41.png"></p><p>另外再CMakeLists.txt中添加相关的编译说明:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aux_source_directory (led/ led_path)</span><br><span class="line">aux_source_directory (button/ button_path)</span><br><span class="line">aux_source_directory (bluetooth/ bluetooth_path)</span><br><span class="line"></span><br><span class="line">target_sources(app PRIVATE main.c</span><br><span class="line">                    $&#123;led_path&#125;</span><br><span class="line">                    $&#123;button_path&#125;</span><br><span class="line">                    $&#123;bluetooth_path&#125;)</span><br></pre></td></tr></table></figure><p>这样就能把每个模块单独分开,互相解藕</p><h1 id="3-输出"><a href="#3-输出" class="headerlink" title="3 输出"></a>3 输出</h1><p>输出一般单片或者嵌入式都是以led作为参考的示例.</p><p>非常的简单操作就是对led的节点 做dts检查后初始化,然后就可以输出高低电平了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gpio_is_ready_dt(&amp;led1);</span><br><span class="line">gpio_pin_configure_dt(&amp;led0, GPIO_OUTPUT);</span><br><span class="line">gpio_pin_set_dt(&amp;led0, <span class="number">1</span>);<span class="comment">//高电平</span></span><br><span class="line">gpio_pin_set_dt(&amp;led0, <span class="number">0</span>);<span class="comment">//低电平</span></span><br></pre></td></tr></table></figure><p>更详细gpio定制化dts可以参考这个工程<strong>custom_dts_binding</strong></p><h1 id="4-输入"><a href="#4-输入" class="headerlink" title="4 输入"></a>4 输入</h1><p>输出拿按钮button举例:</p><p>输入和输出相似 也是先做ready_dt check 然后配置成输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gpio_is_ready_dt(&amp;button0);</span><br><span class="line">gpio_pin_configure_dt(&amp;button0, GPIO_INPUT);</span><br><span class="line"><span class="comment">//设置中断配置</span></span><br><span class="line">gpio_pin_interrupt_configure_dt(&amp;button,GPIO_INT_EDGE_TO_ACTIVE);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nRF52832开发入门【一】</title>
      <link href="/2025/03/07/nodic/1_nodic%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/03/07/nodic/1_nodic%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Zephyr简要说明"><a href="#1-Zephyr简要说明" class="headerlink" title="1 Zephyr简要说明"></a>1 Zephyr简要说明</h1><p>官方没有log 加载的机制说明</p><p>只能自己对着代码看了,mark下做个记录</p><p>Zephyr 是一个开源的实时操作系统（RTOS），专为资源受限的设备和物联网应用设计。它支持多种硬件平台，并提供了丰富的功能和模块来简化嵌入式开发。以下是一些关于 Zephyr 的关键点和使用技巧：</p><h3 id="1-Zephyr-基本概念"><a href="#1-Zephyr-基本概念" class="headerlink" title="1. Zephyr 基本概念"></a>1. Zephyr 基本概念</h3><ul><li><strong>内核</strong>：Zephyr 提供了一个轻量级的实时内核，支持多线程、中断处理、定时器等功能。</li><li><strong>模块</strong>：Zephyr 包含了大量的模块，如蓝牙、Wi-Fi、USB、文件系统等，方便开发者快速集成各种功能。</li><li><strong>配置系统</strong>：Zephyr 使用 Kconfig 和 CMake 来管理项目的配置和构建过程。</li></ul><h3 id="2-日志系统"><a href="#2-日志系统" class="headerlink" title="2. 日志系统"></a>2. 日志系统</h3><p>Zephyr 提供了强大的日志系统，可以帮助开发者调试和监控应用程序。以下是使用日志系统的步骤：</p><h4 id="2-1-配置日志系统"><a href="#2-1-配置日志系统" class="headerlink" title="2.1 配置日志系统"></a>2.1 配置日志系统</h4><p>在 <code>prj.conf</code> 文件中启用日志功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=4  # 4 表示信息级别 (INFO)</span><br><span class="line">CONFIG_LOG_BACKEND_UART=y   # 使用 UART 输出日志</span><br><span class="line">CONFIG_UART_CONSOLE=y       # 启用 UART 控制台</span><br></pre></td></tr></table></figure><h4 id="2-2-注册日志模块"><a href="#2-2-注册日志模块" class="headerlink" title="2.2 注册日志模块"></a>2.2 注册日志模块</h4><p>在源文件中注册日志模块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_MODULE_NAME my_module</span></span><br><span class="line">LOG_MODULE_REGISTER(LOG_MODULE_NAME);</span><br></pre></td></tr></table></figure><h4 id="2-3-使用日志宏"><a href="#2-3-使用日志宏" class="headerlink" title="2.3 使用日志宏"></a>2.3 使用日志宏</h4><p>在代码中使用不同的日志宏输出信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOG_INF(<span class="string">&quot;This is an info message&quot;</span>);</span><br><span class="line">LOG_DBG(<span class="string">&quot;This is a debug message&quot;</span>);</span><br><span class="line">LOG_ERR(<span class="string">&quot;This is an error message&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-蓝牙功能"><a href="#3-蓝牙功能" class="headerlink" title="3. 蓝牙功能"></a>3. 蓝牙功能</h3><p>Zephyr 支持蓝牙低功耗（BLE）协议栈，可以用于开发各种蓝牙设备。以下是一个简单的 BLE 外设示例：</p><h4 id="3-1-初始化蓝牙"><a href="#3-1-初始化蓝牙" class="headerlink" title="3.1 初始化蓝牙"></a>3.1 初始化蓝牙</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">    printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="3-2-广播设置"><a href="#3-2-广播设置" class="headerlink" title="3.2 广播设置"></a>3.2 广播设置</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_GAP_APPEARANCE,</span><br><span class="line">                  (CONFIG_BT_DEVICE_APPEARANCE &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xff</span>,</span><br><span class="line">                  (CONFIG_BT_DEVICE_APPEARANCE &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_UUID16_ALL, BT_UUID_16_ENCODE(BT_UUID_HIDS_VAL),</span><br><span class="line">                                  BT_UUID_16_ENCODE(BT_UUID_BAS_VAL)),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">sd</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-3-连接回调"><a href="#3-3-连接回调" class="headerlink" title="3.3 连接回调"></a>3.3 连接回调</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span> &#123;</span><br><span class="line">    <span class="type">char</span> addr[BT_ADDR_LE_STR_LEN];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connection failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    printk(<span class="string">&quot;Connected to %s\n&quot;</span>, addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BT_CONN_CB_DEFINE(conn_callbacks) = &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-工作队列和消息队列"><a href="#4-工作队列和消息队列" class="headerlink" title="4. 工作队列和消息队列"></a>4. 工作队列和消息队列</h3><p>Zephyr 提供了工作队列和消息队列机制，方便任务调度和异步处理。</p><h4 id="4-1-定义和初始化工作队列"><a href="#4-1-定义和初始化工作队列" class="headerlink" title="4.1 定义和初始化工作队列"></a>4.1 定义和初始化工作队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_work</span> <span class="title">hids_work</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mouse_handler</span><span class="params">(<span class="keyword">struct</span> k_work *work)</span> &#123;</span><br><span class="line">    <span class="comment">// 处理鼠标事件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 main 函数中初始化工作队列</span></span><br><span class="line">k_work_init(&amp;hids_work, mouse_handler);</span><br></pre></td></tr></table></figure><h4 id="4-2-消息队列"><a href="#4-2-消息队列" class="headerlink" title="4.2 消息队列"></a>4.2 消息队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">K_MSGQ_DEFINE(hids_queue, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> mouse_pos), HIDS_QUEUE_SIZE, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mouse_pos</span> <span class="title">pos</span>;</span></span><br><span class="line">pos.x_val = <span class="number">10</span>;</span><br><span class="line">pos.y_val = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息到队列</span></span><br><span class="line">k_msgq_put(&amp;hids_queue, &amp;pos, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队列中获取消息</span></span><br><span class="line">k_msgq_get(&amp;hids_queue, &amp;pos, K_NO_WAIT);</span><br></pre></td></tr></table></figure><h3 id="5-配置系统"><a href="#5-配置系统" class="headerlink" title="5. 配置系统"></a>5. 配置系统</h3><p>Zephyr 使用 Kconfig 和 CMake 来管理项目的配置和构建过程。</p><h4 id="5-1-Kconfig-配置"><a href="#5-1-Kconfig-配置" class="headerlink" title="5.1 Kconfig 配置"></a>5.1 Kconfig 配置</h4><p>在 <code>prj.conf</code> 文件中添加或修改配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_BT=y</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=4</span><br><span class="line">CONFIG_UART_CONSOLE=y</span><br></pre></td></tr></table></figure><h4 id="5-2-CMake-构建"><a href="#5-2-CMake-构建" class="headerlink" title="5.2 CMake 构建"></a>5.2 CMake 构建</h4><p>在 <code>CMakeLists.txt</code> 文件中指定项目名称和源文件：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.13</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Zephyr REQUIRED HINTS $ENV&#123;ZEPHYR_BASE&#125;)</span><br><span class="line"><span class="keyword">project</span>(my_project)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_sources</span>(app PRIVATE src/main.c)</span><br></pre></td></tr></table></figure><h3 id="6-常见问题排查"><a href="#6-常见问题排查" class="headerlink" title="6. 常见问题排查"></a>6. 常见问题排查</h3><ul><li><strong>日志无法输出</strong>：检查 <code>prj.conf</code> 中的日志配置是否正确，确保日志模块已注册并初始化。</li><li><strong>蓝牙连接失败</strong>：检查广播数据和连接回调函数是否正确配置，确保蓝牙已成功初始化。</li><li><strong>内存不足</strong>：优化代码，减少不必要的内存分配，检查堆栈大小配置。</li></ul><p>通过以上介绍，你应该对 Zephyr 有了更深入的了解，并能够更好地利用其功能进行嵌入式开发。如果遇到具体问题，可以根据上述步骤进行排查和解决。</p><p>官方基础示例的代码路径如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ncs\v2.9.1\zephyr\samples\basic</span><br></pre></td></tr></table></figure><h1 id="2-实操"><a href="#2-实操" class="headerlink" title="2 实操"></a>2 实操</h1><p>按照如下的步骤先建立一个新的干净的工程.</p><p><img src="https://s3.bmp.ovh/imgs/2025/03/07/eb96cab6ffd0eee0.png"></p><p><img src="https://s3.bmp.ovh/imgs/2025/03/07/dd1c851959223afa.png"></p><p>先创建一个空的工程</p><h4 id="2-1-配置日志系统-1"><a href="#2-1-配置日志系统-1" class="headerlink" title="2.1 配置日志系统"></a>2.1 配置日志系统</h4><p>在 <code>prj.conf</code> 文件中启用日志功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3  # 4 表示信息级别 (INFO)</span><br><span class="line">CONFIG_LOG_BACKEND_UART=y   # 使用 UART 输出日志</span><br><span class="line">CONFIG_UART_CONSOLE=y       # 启用 UART 控制台</span><br></pre></td></tr></table></figure><h4 id="2-2-注册日志模块-1"><a href="#2-2-注册日志模块-1" class="headerlink" title="2.2 注册日志模块"></a>2.2 注册日志模块</h4><p>在源文件中注册日志模块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_MODULE_NAME my_module</span></span><br><span class="line">LOG_MODULE_REGISTER(LOG_MODULE_NAME);</span><br></pre></td></tr></table></figure><h4 id="2-3-使用日志宏-1"><a href="#2-3-使用日志宏-1" class="headerlink" title="2.3 使用日志宏"></a>2.3 使用日志宏</h4><p>在代码中使用不同的日志宏输出信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_INF(<span class="string">&quot;This is an info message&quot;</span>);</span><br><span class="line">LOG_DBG(<span class="string">&quot;This is a debug message&quot;</span>);</span><br><span class="line">LOG_ERR(<span class="string">&quot;This is an error message&quot;</span>);</span><br></pre></td></tr></table></figure><p>添加如上信息后发现日志打不完整<br>[00:00:00.384,246] <dbg> os: k_sched_unlock: scheduler unlocked (0x20000b30:0)<br>[00:00:00.384,246] <inf> my_module: This is an info1 message<br>[00:00:00.384,246] <inf> my_module: This is [0m</p><p>然后我修改下log等级,并且添加缓冲区，就能正确打印log了.</p><p>CONFIG_LOG_DEFAULT_LEVEL&#x3D;3 # 等级3为LOG_INF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_LOG_BUFFER_SIZE=4096</span><br></pre></td></tr></table></figure><p>在 Zephyr 中，日志级别通常定义如下（数值越小，级别越低，日志输出少）：</p><ul><li>0: OFF（关闭日志）</li><li>1: ERROR（错误日志）</li><li>2: WARNING（警告日志）</li><li>3: INFO（信息日志）</li><li>4: DEBUG（调试日志）</li></ul><h1 id="3-LED"><a href="#3-LED" class="headerlink" title="3 LED"></a>3 LED</h1><p>由于到鼠标之前 还要掌握不少的内容，就边写 边加(注意这边prj.conf已经添加了log相关使能)</p><p>先load 官方demo <strong>blinky</strong></p><h2 id="3-1-官方demo"><a href="#3-1-官方demo" class="headerlink" title="3.1 官方demo"></a>3.1 官方demo</h2><p>官方的路径默认在:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ncs\v2.9.1\zephyr\samples\basic\blinky</span><br></pre></td></tr></table></figure><p>这边看了官方默认的例子就是单led的闪烁,还是比较简单的 ，可以根据相关的dts，把其他led补上去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_NODE DT_ALIAS(led0)</span></span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">led0 = <span class="variable">&amp;led0</span><span class="punctuation">;</span></span><br><span class="line">led1 = <span class="variable">&amp;led1</span><span class="punctuation">;</span></span><br><span class="line">led2 = <span class="variable">&amp;led2</span><span class="punctuation">;</span></span><br><span class="line">led3 = <span class="variable">&amp;led3</span><span class="punctuation">;</span></span><br><span class="line">pwm-led0 = <span class="variable">&amp;pwm_led0</span><span class="punctuation">;</span></span><br><span class="line">sw0 = <span class="variable">&amp;button0</span><span class="punctuation">;</span></span><br><span class="line">sw1 = <span class="variable">&amp;button1</span><span class="punctuation">;</span></span><br><span class="line">sw2 = <span class="variable">&amp;button2</span><span class="punctuation">;</span></span><br><span class="line">sw3 = <span class="variable">&amp;button3</span><span class="punctuation">;</span></span><br><span class="line">bootloader-led0 = <span class="variable">&amp;led0</span><span class="punctuation">;</span></span><br><span class="line">mcuboot-button0 = <span class="variable">&amp;button0</span><span class="punctuation">;</span></span><br><span class="line">mcuboot-led0 = <span class="variable">&amp;led0</span><span class="punctuation">;</span></span><br><span class="line">watchdog0 = <span class="variable">&amp;wdt0</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>led相关dts配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">17</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 0&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">led1:</span> <span class="title class_">led_1</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">18</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 1&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">led2:</span> <span class="title class_">led_2</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">19</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 2&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">led3:</span> <span class="title class_">led_3</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">20</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 3&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>修修改改完整的led代码如下,可以同时使用四盏灯</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2016 Intel Corporation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1000 msec = 1 sec */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLEEP_TIME_MS   1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The devicetree node identifier for the &quot;led0&quot; alias. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_NODE DT_ALIAS(led0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_NODE DT_ALIAS(led1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_NODE DT_ALIAS(led2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED3_NODE DT_ALIAS(led3)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_MODULE_NAME my_module</span></span><br><span class="line">LOG_MODULE_REGISTER(LOG_MODULE_NAME);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A build error on this line means your board is unsupported.</span></span><br><span class="line"><span class="comment"> * See the sample documentation for information on how to fix this.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led0</span> =</span> GPIO_DT_SPEC_GET(LED0_NODE, gpios);</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led1</span> =</span> GPIO_DT_SPEC_GET(LED1_NODE, gpios);</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led2</span> =</span> GPIO_DT_SPEC_GET(LED2_NODE, gpios);</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led3</span> =</span> GPIO_DT_SPEC_GET(LED3_NODE, gpios);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> led_state = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!gpio_is_ready_dt(&amp;led0)||!gpio_is_ready_dt(&amp;led1)||!gpio_is_ready_dt(&amp;led2)||!gpio_is_ready_dt(&amp;led3)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gpio_pin_configure_dt(&amp;led0, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    gpio_pin_configure_dt(&amp;led1, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    gpio_pin_configure_dt(&amp;led2, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    gpio_pin_configure_dt(&amp;led3, GPIO_OUTPUT_ACTIVE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">gpio_pin_toggle_dt(&amp;led0);</span><br><span class="line">        gpio_pin_toggle_dt(&amp;led1);</span><br><span class="line">        gpio_pin_toggle_dt(&amp;led2); </span><br><span class="line">        gpio_pin_toggle_dt(&amp;led3);</span><br><span class="line"></span><br><span class="line">led_state = !led_state;</span><br><span class="line">printk(<span class="string">&quot;LED state: %s\n&quot;</span>, led_state ? <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>);</span><br><span class="line">k_msleep(SLEEP_TIME_MS);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是上面的函数并不知道.详细的操作，只是依样画葫芦</p><h2 id="3-2-GPIO"><a href="#3-2-GPIO" class="headerlink" title="3.2 GPIO"></a>3.2 GPIO</h2><p>然后这边是我问AI的回答</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设gpio_dev是你的GPIO设备指针，pin_number是你想要控制的引脚号</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">gpio_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(gpio0)); <span class="comment">// 根据你的设备树配置获取设备指针</span></span><br><span class="line"><span class="type">gpio_pin_t</span> pin_number = <span class="number">13</span>; <span class="comment">// 引脚号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置引脚为输出</span></span><br><span class="line"><span class="type">int</span> ret = gpio_pin_configure(gpio_dev, pin_number, GPIO_OUTPUT);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置引脚输出高电平（逻辑1）</span></span><br><span class="line">ret = gpio_pin_set(gpio_dev, pin_number, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置引脚输出低电平（逻辑0）</span></span><br><span class="line">ret = gpio_pin_set(gpio_dev, pin_number, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对着AI的回复，能看懂基本的信息，然后我这边使用的是led1，是已经配置好相关的Dts,</p><p>所以直接看代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2016 Intel Corporation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The devicetree node identifier for the &quot;led1&quot; alias. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> led1_NODE DT_ALIAS(led1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_MODULE_NAME my_module</span></span><br><span class="line">LOG_MODULE_REGISTER(LOG_MODULE_NAME);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A build error on this line means your board is unsupported.</span></span><br><span class="line"><span class="comment"> * See the sample documentation for information on how to fix this.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led1</span> =</span> GPIO_DT_SPEC_GET(led1_NODE, gpios);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!gpio_is_ready_dt(&amp;led1))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//因为已经官方已经配置好dts这边使用的gpio_pin_configure_dt函数</span></span><br><span class="line">    <span class="comment">//gpio_pin_configure是要指定对应的gpio脚</span></span><br><span class="line">    gpio_pin_configure_dt(&amp;led1, GPIO_OUTPUT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        gpio_pin_set_dt(&amp;led1, <span class="number">1</span>);</span><br><span class="line">        k_msleep(<span class="number">1000</span>);</span><br><span class="line">        gpio_pin_set_dt(&amp;led1, <span class="number">0</span>);</span><br><span class="line">        k_msleep(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-PWM"><a href="#3-3-PWM" class="headerlink" title="3.3 PWM"></a>3.3 PWM</h2><p>灯的基本操作看完了，这边直接看pwm相关的操作.</p><p>pwm就不赘述了.</p><p>官网的例子路径如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ncs\v2.9.1\zephyr\samples\drivers\led\pwm</span><br></pre></td></tr></table></figure><p>官方写的内容有好几个，我这边专注pwm的实现，所以删了不少的内容</p><p>下面是对<code>main.c</code>文件中每个地方的注释的详细解释：</p><h3 id="包含头文件"><a href="#包含头文件" class="headerlink" title="包含头文件"></a>包含头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/led.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/util.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(main, CONFIG_LOG_DEFAULT_LEVEL);</span><br></pre></td></tr></table></figure><ul><li>**<code>&lt;zephyr/device.h&gt;</code>**：包含设备驱动程序的通用接口。</li><li>**<code>&lt;zephyr/devicetree.h&gt;</code>**：包含设备树相关的宏和函数。</li><li>**<code>&lt;errno.h&gt;</code>**：包含错误号定义。</li><li>**<code>&lt;zephyr/drivers/led.h&gt;</code>**：包含LED驱动程序的API。</li><li>**<code>&lt;zephyr/sys/util.h&gt;</code>**：包含一些通用的系统工具宏。</li><li>**<code>&lt;zephyr/kernel.h&gt;</code>**：包含内核相关的API。</li><li>**<code>&lt;zephyr/logging/log.h&gt;</code>**：包含日志记录相关的API。</li><li>**<code>LOG_MODULE_REGISTER(main, CONFIG_LOG_DEFAULT_LEVEL);</code>**：注册日志模块，设置日志级别为默认级别。</li></ul><h3 id="定义LED-PWM节点"><a href="#定义LED-PWM节点" class="headerlink" title="定义LED PWM节点"></a>定义LED PWM节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LED_PWM_NODE_ID DT_COMPAT_GET_ANY_STATUS_OKAY(pwm_leds)</span></span><br></pre></td></tr></table></figure><ul><li>**<code>LED_PWM_NODE_ID</code>**：使用设备树宏<code>DT_COMPAT_GET_ANY_STATUS_OKAY</code>获取兼容性为<code>pwm_leds</code>且状态为<code>okay</code>的节点ID。</li></ul><h3 id="定义LED标签数组"><a href="#定义LED标签数组" class="headerlink" title="定义LED标签数组"></a>定义LED标签数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *led_label[] = &#123;</span><br><span class="line">DT_FOREACH_CHILD_SEP_VARGS(LED_PWM_NODE_ID, DT_PROP_OR, (,), label, <span class="literal">NULL</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num_leds = ARRAY_SIZE(led_label);</span><br></pre></td></tr></table></figure><ul><li>**<code>led_label</code>**：使用设备树宏<code>DT_FOREACH_CHILD_SEP_VARGS</code>遍历<code>LED_PWM_NODE_ID</code>的所有子节点，获取每个子节点的<code>label</code>属性，并将其存储在数组中。</li><li>**<code>num_leds</code>**：计算<code>led_label</code>数组的大小，即LED的数量。</li></ul><h3 id="定义亮度和延迟"><a href="#定义亮度和延迟" class="headerlink" title="定义亮度和延迟"></a>定义亮度和延迟</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BRIGHTNESS 100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FADE_DELAY_MS 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FADE_DELAY K_MSEC(FADE_DELAY_MS)</span></span><br></pre></td></tr></table></figure><ul><li>**<code>MAX_BRIGHTNESS</code>**：定义LED的最大亮度为100。</li><li>**<code>FADE_DELAY_MS</code>**：定义亮度变化的延迟时间为10毫秒。</li><li>**<code>FADE_DELAY</code>**：将<code>FADE_DELAY_MS</code>转换为内核时间单位（毫秒）。</li></ul><h3 id="运行LED测试函数"><a href="#运行LED测试函数" class="headerlink" title="运行LED测试函数"></a>运行LED测试函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Run tests on a single LED using the LED API syscalls.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param led_pwm LED PWM device.</span></span><br><span class="line"><span class="comment"> * @param led Number of the LED to test.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">run_led_test</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *led_pwm, <span class="type">uint8_t</span> led)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"><span class="type">uint16_t</span> level;</span><br><span class="line"><span class="comment">/* Increase LED brightness gradually up to the maximum level. */</span></span><br><span class="line">LOG_INF(<span class="string">&quot;  Increasing brightness gradually&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (level = <span class="number">0</span>; level &lt;= MAX_BRIGHTNESS; level++) &#123;</span><br><span class="line">err = led_set_brightness(led_pwm, led, level);</span><br><span class="line"><span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;err=%d brightness=%d\n&quot;</span>, err, level);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">k_sleep(FADE_DELAY);</span><br><span class="line">&#125;</span><br><span class="line">k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>函数说明</strong>：<code>run_led_test</code>函数用于对单个LED进行测试。</li><li><strong>参数</strong>：<ul><li><code>led_pwm</code>：LED PWM设备指针。</li><li><code>led</code>：要测试的LED编号。</li></ul></li><li><strong>功能</strong>：<ul><li>使用<code>led_set_brightness</code>函数逐渐增加LED的亮度，直到达到最大亮度。</li><li>每次设置亮度后，使用<code>k_sleep(FADE_DELAY)</code>延迟一段时间。</li><li>达到最大亮度后，再延迟1000毫秒。</li></ul></li></ul><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">led_pwm</span>;</span></span><br><span class="line"><span class="type">uint8_t</span> led;</span><br><span class="line"></span><br><span class="line">led_pwm = DEVICE_DT_GET(LED_PWM_NODE_ID);</span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(led_pwm)) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;Device %s is not ready&quot;</span>, led_pwm-&gt;name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!num_leds) &#123;</span><br><span class="line">LOG_ERR(<span class="string">&quot;No LEDs found for %s&quot;</span>, led_pwm-&gt;name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//我这边打印看了 只做了一个led支持pwm，需要自己看实际demo添加，实际demo我晚点研究</span></span><br><span class="line">        LOG_ERR(<span class="string">&quot;num_leds %d&quot;</span>,num_leds);</span><br><span class="line"><span class="keyword">for</span> (led = <span class="number">0</span>; led &lt; num_leds; led++) &#123;</span><br><span class="line">run_led_test(led_pwm, led);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：<ul><li>获取LED PWM设备指针<code>led_pwm</code>。</li><li>检查设备是否准备好，如果未准备好则记录错误日志并退出。</li><li>检查是否有LED，如果没有找到LED则记录错误日志并退出。</li><li>使用<code>do-while</code>循环无限循环地对每个LED进行测试。</li><li>调用<code>run_led_test</code>函数对每个LED进行亮度变化测试。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个文件的主要功能是对通过PWM控制的LED进行亮度变化测试。通过设备树获取LED设备和标签信息，并使用LED API设置LED的亮度，实现亮度的逐渐变化效果。</p><h1 id="4-Button"><a href="#4-Button" class="headerlink" title="4 Button"></a>4 Button</h1><p>led作为输出的入门,输入的入门当然是按钮。</p><p>官方示例代码路径:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ncs\v2.9.1\zephyr\samples\basic\button</span><br></pre></td></tr></table></figure><p>按键官方默认映射了四个脚别名，可以直接使用,相关路径如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ncs\v2.9.1\zephyr\boards\nordic\nrf52dk\nrf52dk_nrf52832-pinctrl.dtsi</span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">led0 = <span class="variable">&amp;led0</span><span class="punctuation">;</span></span><br><span class="line">led1 = <span class="variable">&amp;led1</span><span class="punctuation">;</span></span><br><span class="line">led2 = <span class="variable">&amp;led2</span><span class="punctuation">;</span></span><br><span class="line">led3 = <span class="variable">&amp;led3</span><span class="punctuation">;</span></span><br><span class="line">pwm-led0 = <span class="variable">&amp;pwm_led0</span><span class="punctuation">;</span></span><br><span class="line">sw0 = <span class="variable">&amp;button0</span><span class="punctuation">;</span></span><br><span class="line">sw1 = <span class="variable">&amp;button1</span><span class="punctuation">;</span></span><br><span class="line">sw2 = <span class="variable">&amp;button2</span><span class="punctuation">;</span></span><br><span class="line">sw3 = <span class="variable">&amp;button3</span><span class="punctuation">;</span></span><br><span class="line">bootloader-led0 = <span class="variable">&amp;led0</span><span class="punctuation">;</span></span><br><span class="line">mcuboot-button0 = <span class="variable">&amp;button0</span><span class="punctuation">;</span></span><br><span class="line">mcuboot-led0 = <span class="variable">&amp;led0</span><span class="punctuation">;</span></span><br><span class="line">watchdog0 = <span class="variable">&amp;wdt0</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>看下buttons的引脚定义</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">buttons</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-keys&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">button0:</span> <span class="title class_">button_0</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> (GPIO_PULL_UP | GPIO_ACTIVE_LOW)&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Push button switch 0&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">zephyr,code</span> <span class="operator">=</span> <span class="params">&lt;INPUT_KEY_0&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">button1:</span> <span class="title class_">button_1</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">14</span> (GPIO_PULL_UP | GPIO_ACTIVE_LOW)&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Push button switch 1&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">zephyr,code</span> <span class="operator">=</span> <span class="params">&lt;INPUT_KEY_1&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">button2:</span> <span class="title class_">button_2</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">15</span> (GPIO_PULL_UP | GPIO_ACTIVE_LOW)&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Push button switch 2&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">zephyr,code</span> <span class="operator">=</span> <span class="params">&lt;INPUT_KEY_2&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">button3:</span> <span class="title class_">button_3</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">16</span> (GPIO_PULL_UP | GPIO_ACTIVE_LOW)&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Push button switch 3&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">zephyr,code</span> <span class="operator">=</span> <span class="params">&lt;INPUT_KEY_3&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>以下是 <code>main.c</code> 文件的流程解释，跳过了文件开头的版本信息部分：</p><hr><h3 id="1-引入头文件"><a href="#1-引入头文件" class="headerlink" title="1. 引入头文件"></a><strong>1. 引入头文件</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/util.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>引入了 Zephyr RTOS 的核心头文件和 GPIO 驱动相关的头文件。</li><li>用于操作设备、GPIO 配置、日志记录等功能。</li></ul><hr><h3 id="2-定义常量和模块名称"><a href="#2-定义常量和模块名称" class="headerlink" title="2. 定义常量和模块名称"></a><strong>2. 定义常量和模块名称</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SLEEP_TIME_MS1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_MODULE_NAME my_module</span></span><br><span class="line">LOG_MODULE_REGISTER(LOG_MODULE_NAME);</span><br></pre></td></tr></table></figure><ul><li>定义了休眠时间（1 毫秒）。</li><li>注册了一个日志模块，名称为 <code>my_module</code>，用于调试和日志输出。</li></ul><hr><h3 id="3-获取按钮配置"><a href="#3-获取按钮配置" class="headerlink" title="3. 获取按钮配置"></a><strong>3. 获取按钮配置</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SW0_NODEDT_ALIAS(sw0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !DT_NODE_HAS_STATUS_OKAY(SW0_NODE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;Unsupported board: sw0 devicetree alias is not defined&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">button</span> =</span> GPIO_DT_SPEC_GET_OR(SW0_NODE, gpios, &#123;<span class="number">0</span>&#125;);</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">button_cb_data</span>;</span></span><br></pre></td></tr></table></figure><ul><li>使用 Devicetree (<code>sw0</code> 别名) 获取按钮的 GPIO 配置。</li><li>如果 <code>sw0</code> 别名未定义，则编译报错。</li><li>将按钮的 GPIO 配置存储在 <code>button</code> 变量中，并初始化一个 GPIO 回调数据结构 <code>button_cb_data</code>。</li></ul><hr><h3 id="4-获取-LED-配置（可选）"><a href="#4-获取-LED-配置（可选）" class="headerlink" title="4. 获取 LED 配置（可选）"></a><strong>4. 获取 LED 配置（可选）</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led</span> =</span> GPIO_DT_SPEC_GET_OR(DT_ALIAS(led0), gpios, &#123;<span class="number">0</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用 Devicetree (<code>led0</code> 别名) 获取 LED 的 GPIO 配置。</li><li>如果 <code>led0</code> 别名未定义，则默认值为 <code>&#123;0&#125;</code>，表示不使用 LED。</li></ul><hr><h3 id="5-按钮按下回调函数"><a href="#5-按钮按下回调函数" class="headerlink" title="5. 按钮按下回调函数"></a><strong>5. 按钮按下回调函数</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">button_pressed</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> gpio_callback *cb, <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Button pressed at %&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, k_cycle_get_32());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当按钮被按下时，触发此回调函数。</li><li>记录按钮按下的时间戳（以 CPU 周期为单位）。</li></ul><hr><h3 id="6-主函数逻辑"><a href="#6-主函数逻辑" class="headerlink" title="6. 主函数逻辑"></a><strong>6. 主函数逻辑</strong></h3><h4 id="6-1-初始化按钮"><a href="#6-1-初始化按钮" class="headerlink" title="6.1 初始化按钮"></a><strong>6.1 初始化按钮</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!gpio_is_ready_dt(&amp;button)) &#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Error: button device %s is not ready\n&quot;</span>, button.port-&gt;name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = gpio_pin_configure_dt(&amp;button, GPIO_INPUT);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Error %d: failed to configure %s pin %d\n&quot;</span>, ret, button.port-&gt;name, button.pin);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>检查按钮的 GPIO 设备是否可用。</li><li>配置按钮引脚为输入模式。</li></ul><h4 id="6-2-配置中断"><a href="#6-2-配置中断" class="headerlink" title="6.2 配置中断"></a><strong>6.2 配置中断</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ret = gpio_pin_interrupt_configure_dt(&amp;button, GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Error %d: failed to configure interrupt on %s pin %d\n&quot;</span>, ret, button.port-&gt;name, button.pin);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置按钮引脚的中断，检测边沿触发事件（按钮按下）。</li></ul><h4 id="6-3-添加回调函数"><a href="#6-3-添加回调函数" class="headerlink" title="6.3 添加回调函数"></a><strong>6.3 添加回调函数</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gpio_init_callback(&amp;button_cb_data, button_pressed, BIT(button.pin));</span><br><span class="line">gpio_add_callback(button.port, &amp;button_cb_data);</span><br><span class="line">LOG_INF(<span class="string">&quot;Set up button at %s pin %d\n&quot;</span>, button.port-&gt;name, button.pin);</span><br></pre></td></tr></table></figure><ul><li>初始化并注册按钮的回调函数 <code>button_pressed</code>。</li><li>将回调函数绑定到按钮的 GPIO 引脚。</li></ul><h4 id="6-4-初始化-LED（如果存在）"><a href="#6-4-初始化-LED（如果存在）" class="headerlink" title="6.4 初始化 LED（如果存在）"></a><strong>6.4 初始化 LED（如果存在）</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (led.port &amp;&amp; !gpio_is_ready_dt(&amp;led)) &#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Error %d: LED device %s is not ready; ignoring it\n&quot;</span>, ret, led.port-&gt;name);</span><br><span class="line">    led.port = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (led.port) &#123;</span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;led, GPIO_OUTPUT);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        LOG_INF(<span class="string">&quot;Error %d: failed to configure LED device %s pin %d\n&quot;</span>, ret, led.port-&gt;name, led.pin);</span><br><span class="line">        led.port = <span class="literal">NULL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LOG_INF(<span class="string">&quot;Set up LED at %s pin %d\n&quot;</span>, led.port-&gt;name, led.pin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>检查 LED 的 GPIO 设备是否可用。</li><li>如果可用，配置 LED 引脚为输出模式。</li></ul><h4 id="6-5-主循环"><a href="#6-5-主循环" class="headerlink" title="6.5 主循环"></a><strong>6.5 主循环</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LOG_INF(<span class="string">&quot;Press the button\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (led.port) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> val = gpio_pin_get_dt(&amp;button);</span><br><span class="line">        <span class="keyword">if</span> (val &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            gpio_pin_set_dt(&amp;led, val);</span><br><span class="line">        &#125;</span><br><span class="line">        k_msleep(SLEEP_TIME_MS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提示用户按下按钮。</li><li>如果存在 LED：<ul><li>在主循环中读取按钮的状态。</li><li>根据按钮状态设置 LED 的亮灭。</li><li>每次循环休眠 1 毫秒。</li></ul></li></ul><hr><h3 id="7-返回值"><a href="#7-返回值" class="headerlink" title="7. 返回值"></a><strong>7. 返回值</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>主函数正常结束返回 0。</li></ul><hr><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>该程序的主要功能是：</p><ol><li>监听按钮的按下事件，并通过中断触发回调函数记录事件。</li><li>如果存在 LED，则将 LED 的状态与按钮的状态同步（按钮按下时点亮 LED，松开时熄灭 LED）。</li></ol><h2 id="修改练习"><a href="#修改练习" class="headerlink" title="修改练习"></a>修改练习</h2><p>我这边按照我对代码的理解补充一个按键控制另外一个灯的操作,</p><p>完整的代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/util.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SLEEP_TIME_MS1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_MODULE_NAME my_module</span></span><br><span class="line">LOG_MODULE_REGISTER(LOG_MODULE_NAME);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Get button configuration from the devicetree sw0 alias. This is mandatory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SW0_NODEDT_ALIAS(sw0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SW1_NODEDT_ALIAS(sw1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !DT_NODE_HAS_STATUS_OKAY(SW0_NODE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;Unsupported board: sw0 devicetree alias is not defined&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">button0</span> =</span> GPIO_DT_SPEC_GET_OR(SW0_NODE, gpios,&#123;<span class="number">0</span>&#125;);</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">button1</span> =</span> GPIO_DT_SPEC_GET_OR(SW1_NODE, gpios,&#123;<span class="number">0</span>&#125;);</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">button_cb_data0</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">button_cb_data1</span>;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The led0 devicetree alias is optional. If present, we&#x27;ll use it</span></span><br><span class="line"><span class="comment"> * to turn on the LED whenever the button is pressed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led0</span> =</span> GPIO_DT_SPEC_GET_OR(DT_ALIAS(led0), gpios,&#123;<span class="number">0</span>&#125;);</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led1</span> =</span> GPIO_DT_SPEC_GET_OR(DT_ALIAS(led1), gpios,&#123;<span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">button_pressed0</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">    <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">LOG_INF(<span class="string">&quot;Button pressed at %&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, k_cycle_get_32());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">button_pressed1</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">    <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">LOG_INF(<span class="string">&quot;Button pressed at %&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, k_cycle_get_32());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!gpio_is_ready_dt(&amp;button0)) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> gpio_pin_configure_dt(&amp;button0, GPIO_INPUT);</span><br><span class="line"></span><br><span class="line"> gpio_pin_interrupt_configure_dt(&amp;button0,GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!gpio_is_ready_dt(&amp;button1)) </span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gpio_pin_configure_dt(&amp;button1, GPIO_INPUT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gpio_pin_interrupt_configure_dt(&amp;button1, GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">gpio_init_callback(&amp;button_cb_data0, button_pressed0, BIT(button0.pin));</span><br><span class="line">gpio_add_callback(button0.port, &amp;button_cb_data0);</span><br><span class="line">LOG_INF(<span class="string">&quot;Set up button at %s pin %d\n&quot;</span>, button0.port-&gt;name, button0.pin);</span><br><span class="line"></span><br><span class="line">    gpio_init_callback(&amp;button_cb_data1, button_pressed1, BIT(button1.pin));</span><br><span class="line">gpio_add_callback(button1.port, &amp;button_cb_data1);</span><br><span class="line">LOG_INF(<span class="string">&quot;Set up button at %s pin %d\n&quot;</span>, button1.port-&gt;name, button1.pin);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (led0.port &amp;&amp; !gpio_is_ready_dt(&amp;led0)) &#123;</span><br><span class="line">led0.port = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (led0.port) </span><br><span class="line">    &#123;</span><br><span class="line">gpio_pin_configure_dt(&amp;led0, GPIO_OUTPUT);</span><br><span class="line">LOG_INF(<span class="string">&quot;Set up LED at %s pin %d\n&quot;</span>, led0.port-&gt;name, led0.pin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (led1.port &amp;&amp; !gpio_is_ready_dt(&amp;led1)) &#123;</span><br><span class="line">led1.port = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (led1.port) </span><br><span class="line">    &#123;</span><br><span class="line">gpio_pin_configure_dt(&amp;led1, GPIO_OUTPUT);</span><br><span class="line">LOG_INF(<span class="string">&quot;Set up LED at %s pin %d\n&quot;</span>, led1.port-&gt;name, led1.pin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LOG_INF(<span class="string">&quot;Press the button\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* If we have an LED, match its state to the button&#x27;s. */</span></span><br><span class="line">        <span class="type">int</span> val  = gpio_pin_get_dt(&amp;button0);</span><br><span class="line">        <span class="keyword">if</span> (val &gt;= <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            gpio_pin_set_dt(&amp;led0, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If we have an LED, match its state to the button&#x27;s. */</span></span><br><span class="line">        <span class="type">int</span> val1 = gpio_pin_get_dt(&amp;button1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(val1 &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            gpio_pin_set_dt(&amp;led1, val1);</span><br><span class="line">        &#125;</span><br><span class="line">        k_msleep(SLEEP_TIME_MS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-Thread"><a href="#5-Thread" class="headerlink" title="5 Thread"></a>5 Thread</h1><p>在做完led(输出)和button(输入)后，我们也看下线程相关的内容,实际项目操作中，非常依赖各个线程之间的操作.咱都用上实时操作系统了,避免不了线程的.</p><p>把基础过完后再去看蓝牙相关的内容.</p><p>官方的线程非常简单,没什么难度.</p><p>当然，以下是详细的代码梳理，并附带详细的说明：</p><h3 id="文件流程梳理"><a href="#文件流程梳理" class="headerlink" title="文件流程梳理"></a>文件流程梳理</h3><h3 id="1-头文件和宏定义"><a href="#1-头文件和宏定义" class="headerlink" title="1. 头文件和宏定义"></a>1. 头文件和宏定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/printk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/__assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* size of stack area used by each thread */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACKSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* scheduling priority used by each thread */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRIORITY 7</span></span><br></pre></td></tr></table></figure><ul><li><strong>头文件</strong>：包含了Zephyr RTOS所需的库文件，用于设备驱动、内核功能、GPIO操作、打印输出等。</li><li><strong>宏定义</strong>：定义了每个线程的堆栈大小为1024字节，优先级为7。</li></ul><h3 id="2-设备树检查"><a href="#2-设备树检查" class="headerlink" title="2. 设备树检查"></a>2. 设备树检查</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_NODE DT_ALIAS(led0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_NODE DT_ALIAS(led1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !DT_NODE_HAS_STATUS_OKAY(LED0_NODE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;Unsupported board: led0 devicetree alias is not defined&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !DT_NODE_HAS_STATUS_OKAY(LED1_NODE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;Unsupported board: led1 devicetree alias is not defined&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>设备树别名</strong>：通过设备树别名获取<code>led0</code>和<code>led1</code>节点。</li><li><strong>检查设备树节点</strong>：确保设备树中定义了<code>led0</code>和<code>led1</code>节点，否则编译报错。</li></ul><h3 id="3-数据结构定义"><a href="#3-数据结构定义" class="headerlink" title="3. 数据结构定义"></a>3. 数据结构定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">printk_data_t</span> &#123;</span></span><br><span class="line"><span class="type">void</span> *fifo_reserved; <span class="comment">/* 1st word reserved for use by fifo */</span></span><br><span class="line"><span class="type">uint32_t</span> led;</span><br><span class="line"><span class="type">uint32_t</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">K_FIFO_DEFINE(printk_fifo);</span><br></pre></td></tr></table></figure><ul><li><strong>结构体定义</strong>：<code>printk_data_t</code>用于存储LED编号和计数器信息。</li><li><strong>FIFO队列</strong>：定义了一个FIFO队列<code>printk_fifo</code>，用于线程间通信。</li></ul><h3 id="4-LED初始化"><a href="#4-LED初始化" class="headerlink" title="4. LED初始化"></a>4. LED初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">led</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">spec</span>;</span></span><br><span class="line"><span class="type">uint8_t</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">led</span> <span class="title">led0</span> =</span> &#123;</span><br><span class="line">.spec = GPIO_DT_SPEC_GET_OR(LED0_NODE, gpios, &#123;<span class="number">0</span>&#125;),</span><br><span class="line">.num = <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">led</span> <span class="title">led1</span> =</span> &#123;</span><br><span class="line">.spec = GPIO_DT_SPEC_GET_OR(LED1_NODE, gpios, &#123;<span class="number">0</span>&#125;),</span><br><span class="line">.num = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>结构体定义</strong>：<code>led</code>结构体用于封装LED的GPIO配置信息。</li><li><strong>LED初始化</strong>：<code>led0</code>和<code>led1</code>是两个常量结构体，分别初始化了两个LED的GPIO配置。</li></ul><h3 id="5-LED闪烁函数-blink"><a href="#5-LED闪烁函数-blink" class="headerlink" title="5. LED闪烁函数 (blink)"></a>5. LED闪烁函数 (<code>blink</code>)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">blink</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> led *led, <span class="type">uint32_t</span> sleep_ms, <span class="type">uint32_t</span> id)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> *<span class="title">spec</span> =</span> &amp;led-&gt;spec;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(spec-&gt;port)) &#123;</span><br><span class="line">printk(<span class="string">&quot;Error: %s device is not ready\n&quot;</span>, spec-&gt;port-&gt;name);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = gpio_pin_configure_dt(spec, GPIO_OUTPUT);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">printk(<span class="string">&quot;Error %d: failed to configure pin %d (LED &#x27;%d&#x27;)\n&quot;</span>,</span><br><span class="line">ret, spec-&gt;pin, led-&gt;num);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">gpio_pin_set(spec-&gt;port, spec-&gt;pin, cnt % <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">printk_data_t</span> <span class="title">tx_data</span> =</span> &#123; .led = id, .cnt = cnt &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> <span class="type">printk_data_t</span>);</span><br><span class="line"><span class="type">char</span> *mem_ptr = k_malloc(size);</span><br><span class="line">__ASSERT_NO_MSG(mem_ptr != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(mem_ptr, &amp;tx_data, size);</span><br><span class="line"></span><br><span class="line">k_fifo_put(&amp;printk_fifo, mem_ptr);</span><br><span class="line"></span><br><span class="line">k_msleep(sleep_ms);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>函数功能</strong>：<code>blink</code>函数接受一个LED结构体指针、延时时间和LED标识作为参数。</li><li><strong>设备检查</strong>：检查对应的GPIO设备是否准备好。</li><li><strong>GPIO配置</strong>：将GPIO配置为输出模式。</li><li><strong>无限循环</strong>：在无限循环中切换LED状态，并将当前状态（LED编号和计数器）放入FIFO队列中。</li><li><strong>延时</strong>：每次切换后休眠指定的时间。</li></ul><h3 id="6-线程函数定义"><a href="#6-线程函数定义" class="headerlink" title="6. 线程函数定义"></a>6. 线程函数定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">blink0</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">blink(&amp;led0, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">blink1</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">blink(&amp;led1, <span class="number">1000</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uart_out</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">printk_data_t</span> *<span class="title">rx_data</span> =</span> k_fifo_get(&amp;printk_fifo,</span><br><span class="line">   K_FOREVER);</span><br><span class="line">printk(<span class="string">&quot;Toggled led%d; counter=%d\n&quot;</span>,</span><br><span class="line">       rx_data-&gt;led, rx_data-&gt;cnt);</span><br><span class="line">k_free(rx_data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>blink0</code>函数</strong>：调用<code>blink</code>函数控制<code>led0</code>，每100ms切换一次。</li><li><strong><code>blink1</code>函数</strong>：调用<code>blink</code>函数控制<code>led1</code>，每1000ms切换一次。</li><li><strong><code>uart_out</code>函数</strong>：从FIFO队列中获取数据并打印到串口。</li></ul><h3 id="7-线程创建"><a href="#7-线程创建" class="headerlink" title="7. 线程创建"></a>7. 线程创建</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">K_THREAD_DEFINE(blink0_id, STACKSIZE, blink0, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">PRIORITY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">K_THREAD_DEFINE(blink1_id, STACKSIZE, blink1, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">PRIORITY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">K_THREAD_DEFINE(uart_out_id, STACKSIZE, uart_out, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">PRIORITY, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>线程定义</strong>：使用<code>K_THREAD_DEFINE</code>宏定义了三个线程：<ul><li><code>blink0_id</code>：控制<code>led0</code>，每100ms切换一次。</li><li><code>blink1_id</code>：控制<code>led1</code>，每1000ms切换一次。</li><li><code>uart_out_id</code>：负责从FIFO队列中读取数据并通过串口打印。</li></ul></li></ul><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>该文件实现了一个简单的多线程应用程序，使用Zephyr RTOS管理多个线程来控制两个LED的闪烁，并通过FIFO队列和串口输出LED的状态信息。每个线程都有明确的功能，确保系统的模块化和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> nodic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nRF52832开发环境的搭建</title>
      <link href="/2025/03/06/nodic/%E6%90%AD%E5%BB%BA/"/>
      <url>/2025/03/06/nodic/%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>由于工作的原因，需要搭建这个相关的开发环境，于是边写边做呗<br>本文参考的内容:<br> <a href="https://gitee.com/mingkjl/ncs_setup_note">https://gitee.com/mingkjl/ncs_setup_note</a><br> 准备工作要安装<br>    1 安装 VSCode<br>    2 安装 nRF Command Line Tools<br>    3 安装 nRF Connect for Desktop<br>    4 下载 nRF Connect SDK<br>    5 安装 nRF Connect for VS Code插件</p><h2 id="1-1-安装-VSCode"><a href="#1-1-安装-VSCode" class="headerlink" title="1.1 安装 VSCode"></a>1.1 安装 VSCode</h2><p>VSCode 官方下载的地址如下:<br><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a><br>安装对应的系统版本即可</p><h2 id="1-2-安装-nRF-Command-Line-Tools"><a href="#1-2-安装-nRF-Command-Line-Tools" class="headerlink" title="1.2 安装 nRF Command Line Tools"></a>1.2 安装 nRF Command Line Tools</h2><p>nRF Command Line Tools 是一个命令行工具，用于在 Windows、macOS 和 Linux 上安装和配置 nRF Connect SDK。<br>官方的下载地址如下:<br><a href="https://docs.nordicsemi.com/bundle/ug_nrf_cltools/page/UG/cltools/nrf_command_line_tools_lpage.html">https://docs.nordicsemi.com/bundle/ug_nrf_cltools/page/UG/cltools/nrf_command_line_tools_lpage.html</a><br>笔者这边下的文件是:<br>nrf-command-line-tools-10.24.2-x64.exe<br>这个安装的时候会把Jlink驱动也给安装了。</p><h2 id="1-3-安装-nRF-Connect-for-Desktop"><a href="#1-3-安装-nRF-Connect-for-Desktop" class="headerlink" title="1.3 安装 nRF Connect for Desktop"></a>1.3 安装 nRF Connect for Desktop</h2><p>nRF Connect for Desktop 是基于 Electron 的桌面应用程序，用于连接 nRF52832 设备并进行固件升级、调试等操作。<br>官方的下载地址如下:<br><a href="https://www.nordicsemi.com/Software-and-Tools/Development-Tools/nRF-Connect-for-desktop">https://www.nordicsemi.com/Software-and-Tools/Development-Tools/nRF-Connect-for-desktop</a></p><h2 id="1-4-下载-nRF-Connect-SDK"><a href="#1-4-下载-nRF-Connect-SDK" class="headerlink" title="1.4 下载 nRF Connect SDK"></a>1.4 下载 nRF Connect SDK</h2><p>nRF Connect SDK 是用于开发基于 nRF52832 芯片的应用程序的软件开发包。<br>官方的下载地址如下:<br><a href="https://www.nordicsemi.com/Software-and-Tools/Software/nRF-Connect-SDK">https://www.nordicsemi.com/Software-and-Tools/Software/nRF-Connect-SDK</a><br>我建议是用百度云别人下好的然后替换过去，再使用west命令进行更新，这样可以避免很多不必要的麻烦。</p><h1 id="1-5安装-nRF-Connect-for-VS-Code插件"><a href="#1-5安装-nRF-Connect-for-VS-Code插件" class="headerlink" title="1.5安装 nRF Connect for VS Code插件"></a>1.5安装 nRF Connect for VS Code插件</h1><p>nRF Connect for VS Code 是一款基于 Visual Studio Code 的插件，用于在 VS Code 中进行 nRF52832 设备的固件升级、调试等操作。<br>官方的下载地址如下:<br><a href="https://www.nordicsemi.com/Software-and-Tools/Development-Tools/nRF-Connect-for-VS-Code">https://www.nordicsemi.com/Software-and-Tools/Development-Tools/nRF-Connect-for-VS-Code</a></p><h1 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2.配置环境"></a>2.配置环境</h1><p>nRF Connect for Desktop 安装完成后需要下载相关的APPS.<br>如果嫌弃麻烦可以所有APP都下载，也可以只下载需要的APP。<br>最主要下载的额APP是:Toolchain Manager<br>在Toolchain Manager中下载对应的SDK版本。<br>然后在VSCode中安装nRF Connect for VS Code和nRF Connect for VS Code Extension Pack插件.<br>前者是主要的插件，后者是一些辅助包插件其中包括专用终端和DTS工具。</p>]]></content>
      
      
      <categories>
          
          <category> nodic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【水果】【水果营养成分速查】</title>
      <link href="/2024/12/29/%E6%A4%8D%E7%89%A9/%E6%B0%B4%E6%9E%9C/"/>
      <url>/2024/12/29/%E6%A4%8D%E7%89%A9/%E6%B0%B4%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="热量"><a href="#热量" class="headerlink" title="热量"></a>热量</h1><h2 id="热量有三大来源"><a href="#热量有三大来源" class="headerlink" title="热量有三大来源"></a>热量有三大来源</h2><p>  热量，即食物中含有的能量，主要来源于食物中的三大营养物质:碳水化合物,脂类，蛋白质</p><ul><li>碳水化合物:主要是碳水化合物，如水果、蔬菜、肉类、蛋类等。</li><li>脂类:主要是脂肪、胆固醇、维生素等。</li><li>蛋白质:主要是蛋白质，如蔬菜蛋白、肉蛋白、蛋黄等。</li></ul><h2 id="热量是人类生命活动的基础"><a href="#热量是人类生命活动的基础" class="headerlink" title="热量是人类生命活动的基础"></a>热量是人类生命活动的基础</h2><p>  热量是人类生命活动的基础，是人体赖以存活的能量。<br>  富含热量的水果:</p><ol><li><strong>香蕉</strong>：香蕉富含碳水化合物，尤其是天然糖分，能够快速提供能量。</li><li><strong>牛油果</strong>：牛油果含有丰富的健康脂肪，尤其是单不饱和脂肪酸，热量较高。</li><li><strong>椰子</strong>：椰子的果肉和椰子油都含有较高的脂肪，热量丰富。</li><li><strong>榴莲</strong>：榴莲被称为“水果之王”，含有较高的碳水化合物和脂肪，热量非常高。</li><li><strong>枣</strong>：枣类水果如红枣、椰枣等，含有丰富的天然糖分，热量较高。</li><li><strong>葡萄</strong>：葡萄尤其是葡萄干，含有较高的糖分，能够提供较多的能量。</li><li><strong>芒果</strong>：芒果含有丰富的碳水化合物和天然糖分，热量较高。</li><li><strong>柠檬</strong>：柠檬含有丰富的碳水化合物和脂肪酸，热量较高。</li></ol><p>这些水果在日常饮食中可以作为能量补充的来源，但也要注意适量摄入，避免过量导致热量过剩。</p><h1 id="蛋白质"><a href="#蛋白质" class="headerlink" title="蛋白质"></a>蛋白质</h1><h2 id="蛋白质的作用"><a href="#蛋白质的作用" class="headerlink" title="蛋白质的作用"></a>蛋白质的作用</h2><p>蛋白质是人体必需的营养物质，它能够帮助人体进行代谢、组织形成、免疫调节、免疫功能、免疫诱导等功能。</p><ol><li><strong>牛油果</strong>：每100克牛油果约含2克蛋白质，同时还富含健康脂肪。</li><li><strong>番石榴</strong>：每100克番石榴约含2.6克蛋白质，是水果中蛋白质含量较高的选择。</li><li><strong>黑莓</strong>：每100克黑莓约含1.4克蛋白质，同时富含纤维和抗氧化剂。</li><li><strong>猕猴桃</strong>：每100克猕猴桃约含1.1克蛋白质，还含有丰富的维生素C。</li><li><strong>杏子</strong>：每100克杏子约含1.4克蛋白质，尤其是干杏的蛋白质含量更高。</li></ol><p>虽然这些水果的蛋白质含量相对较高，但若想补充蛋白质，仍需依赖豆类、坚果、肉类、鱼类和乳制品等更丰富的蛋白质来源。</p><h1 id="脂肪"><a href="#脂肪" class="headerlink" title="脂肪"></a>脂肪</h1><p>脂肪中的热量是蛋白质的2倍多<br>脂肪的主要作用是存储能量，并为人体提供必要的营养素。</p><ol><li><p><strong>牛油果（鳄梨）</strong><br>牛油果是脂肪含量最高的水果之一，富含健康的不饱和脂肪酸，尤其是单不饱和脂肪酸，对心脏健康有益。</p></li><li><p><strong>椰子</strong><br>椰子肉和椰子油中含有较高的饱和脂肪，但同时也富含中链脂肪酸，易于消化和吸收。</p></li><li><p><strong>橄榄</strong><br>橄榄（尤其是橄榄油）富含单不饱和脂肪酸，是地中海饮食的重要组成部分。</p></li><li><p><strong>榴莲</strong><br>榴莲虽然以高热量著称，但其脂肪含量也相对较高，同时富含多种营养素。</p></li></ol><p>这些水果虽然脂肪含量较高，但大多含有健康的脂肪酸，适量食用对身体有益。</p><h1 id="碳水化合物"><a href="#碳水化合物" class="headerlink" title="碳水化合物"></a>碳水化合物</h1><p>碳水化合物是能量的供应源.<br>碳水化合物是构成细胞的主要成分。<br>富含碳水化合物的水果:</p><ol><li><p><strong>香蕉</strong>：香蕉是碳水化合物含量较高的水果之一，尤其是成熟的香蕉，含有较多的天然糖分。</p></li><li><p><strong>葡萄</strong>：葡萄中的碳水化合物主要来自葡萄糖和果糖，尤其是干葡萄（葡萄干）的碳水化合物含量更高。</p></li><li><p><strong>芒果</strong>：芒果不仅富含维生素和矿物质，碳水化合物含量也较高。</p></li><li><p><strong>无花果</strong>：无花果的碳水化合物含量较高，尤其是干无花果。</p></li><li><p><strong>枣</strong>：枣类水果（如红枣、椰枣）的碳水化合物含量非常高，尤其是干枣。</p></li><li><p><strong>菠萝</strong>：菠萝含有较多的碳水化合物，尤其是其天然糖分。</p></li><li><p><strong>苹果</strong>：苹果的碳水化合物含量适中，尤其是甜度较高的品种。</p></li><li><p><strong>梨</strong>：梨的碳水化合物含量也较高，尤其是成熟的梨。</p></li><li><p><strong>柿子</strong>：柿子的碳水化合物含量较高，尤其是甜柿。</p></li><li><p><strong>榴莲</strong>：榴莲不仅热量高，碳水化合物含量也较高。</p></li></ol><p>这些水果虽然富含碳水化合物，但同时也含有丰富的维生素、矿物质和膳食纤维，适量食用对健康有益。不过，对于需要控制碳水化合物摄入的人群（如糖尿病患者），应注意适量食用。</p><h1 id="膳食纤维"><a href="#膳食纤维" class="headerlink" title="膳食纤维"></a>膳食纤维</h1><p>膳食纤维对人体健康至关重要，它有助于维持肠道健康、降低胆固醇水平、控制体重等。<br>富含膳食纤维的水果:</p><ol><li><strong>牛油果</strong>：虽然牛油果含有较高的脂肪和热量，但其膳食纤维含量也很高，尤其是未成熟的绿色部分。</li><li><strong>番石榴</strong>：番石榴是一种热带水果，其皮和果实都富含膳食纤维。</li><li><strong>黑莓</strong>：黑莓不仅含有丰富的维生素C和抗氧化剂，还富含膳食纤维。</li><li><strong>梨</strong>：梨的果肉中含有较多的膳食纤维，特别是成熟的梨。</li><li><strong>苹果</strong>：苹果是膳食纤维的良好来源，尤其是带皮的苹果。</li><li><strong>无花果</strong>：无花果的膳食纤维含量较高，尤其是干无花果。</li><li><strong>枣</strong>：枣类水果（如红枣）的膳食纤维含量也相对较高。</li><li><strong>菠萝</strong>：菠萝的果肉中含有一部分的膳食纤维。</li><li><strong>芒果</strong>：芒果的果肉中也含有一定的膳食纤维。</li></ol><p>这些水果在提供丰富营养的同时，也能帮助增加膳食纤维的摄入量，对维护肠道健康非常有益。不过，对于需要控制膳食纤维摄入的人群（如高血脂患者），应注意适量食用。</p><h1 id="维生素A"><a href="#维生素A" class="headerlink" title="维生素A"></a>维生素A</h1><p>维生素A对人体健康至关重要，它有助于维持皮肤和眼睛的健康。<br>富含维生素A的水果:<br>富含维生素A的水果包括：</p><ol><li><strong>芒果</strong>：芒果是维生素A的丰富来源，尤其是成熟的芒果。</li><li><strong>哈密瓜</strong>：哈密瓜含有大量的维生素A，对眼睛健康特别有益。</li><li><strong>杏</strong>：杏子不仅美味，还富含维生素A。</li><li><strong>木瓜</strong>：木瓜中的维生素A含量较高，有助于皮肤和眼睛健康。</li><li><strong>柿子</strong>：柿子也是维生素A的良好来源，尤其是成熟的柿子。</li></ol><p>这些水果不仅美味，还能帮助补充维生素A，对维持皮肤和眼睛健康非常有益。</p><h1 id="胡萝卜素"><a href="#胡萝卜素" class="headerlink" title="胡萝卜素"></a>胡萝卜素</h1><p>富含胡萝卜素的水果包括：</p><ol><li><strong>芒果</strong>：芒果不仅富含维生素A，还含有丰富的胡萝卜素，有助于保护视力和皮肤健康。</li><li><strong>哈密瓜</strong>：哈密瓜中的胡萝卜素含量较高，对眼睛和免疫系统有益。</li><li><strong>杏</strong>：杏子中的胡萝卜素有助于维持皮肤和眼睛的健康。</li><li><strong>木瓜</strong>：木瓜不仅含有维生素A，还富含胡萝卜素，对皮肤和眼睛健康有显著效果。</li><li><strong>柿子</strong>：柿子中的胡萝卜素含量丰富，有助于增强免疫力和保护视力。</li></ol><p>这些水果不仅美味，还能帮助补充胡萝卜素，对维持皮肤和眼睛健康非常有益。</p><h1 id="维生素B1"><a href="#维生素B1" class="headerlink" title="维生素B1"></a>维生素B1</h1><p>维生素B1对人体健康至关重要，它有助于维持骨骼健康、抗氧化作用、抗癌作用。<br>富含维生素B1的水果:</p><ol><li><strong>橙子</strong>：橙子不仅富含维生素C，还含有一定量的维生素B1，有助于维持神经系统健康。</li><li><strong>香蕉</strong>：香蕉是维生素B1的良好来源，有助于能量代谢和神经系统功能。</li><li><strong>菠萝</strong>：菠萝中含有维生素B1，有助于消化和免疫系统的健康。</li><li><strong>草莓</strong>：草莓不仅美味，还含有维生素B1，有助于维持心脏和神经系统的健康。</li><li><strong>猕猴桃</strong>：猕猴桃富含维生素B1，有助于提高免疫力和促进新陈代谢。</li></ol><p>这些水果不仅美味，还能帮助补充维生素B1，对维持身体健康非常有益。</p><h1 id="维生素B2"><a href="#维生素B2" class="headerlink" title="维生素B2"></a>维生素B2</h1><p> 维生素B2对人体健康至关重要，它有助于维持骨骼健康、抗氧化作用、抗癌作用。<br> 富含维生素B2的水果:<br> 富含维生素B2的水果包括：</p><ol><li><strong>鳄梨（牛油果）</strong>：鳄梨不仅富含健康脂肪，还含有丰富的维生素B2，有助于维持皮肤和眼睛健康。</li><li><strong>香蕉</strong>：香蕉除了是维生素B1的良好来源外，也含有一定量的维生素B2，有助于能量代谢和细胞功能。</li><li><strong>猕猴桃</strong>：猕猴桃不仅富含维生素C和B1，还含有维生素B2，有助于提高免疫力和促进新陈代谢。</li><li><strong>草莓</strong>：草莓不仅美味，还含有维生素B2，有助于维持皮肤和眼睛健康。</li><li><strong>橙子</strong>：橙子不仅富含维生素C，还含有一定量的维生素B2，有助于维持皮肤和眼睛健康。</li></ol><p>这些水果不仅美味，还能帮助补充维生素B2，对维持身体健康非常有益。</p><p>水果主要是上述的一些营养成分，还有一些烟酸，维生素c,钙的以后再去做整理。</p>]]></content>
      
      
      <categories>
          
          <category> 植物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 植物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串相等</title>
      <link href="/2024/12/15/CPP/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89/"/>
      <url>/2024/12/15/CPP/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p>在C和C++中判断字符串是否相等的方法有所不同。</p><h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><p>在C语言中，字符串是以字符数组的形式存储的，比较字符串是否相等通常使用 <code>strcmp</code> 函数。该函数在 <code>&lt;string.h&gt;</code> 头文件中声明。</p><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;字符串相等\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;字符串不相等\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-语言"><a href="#C-语言" class="headerlink" title="C++语言"></a>C++语言</h1><p>在C++中，可以使用标准库中的 <code>std::string</code> 类来处理字符串，这提供了更方便和直观的方法来比较字符串。</p><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    std::string str2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (str1 == str2) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;字符串相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;字符串不相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>在C中使用 <code>strcmp</code> 函数比较字符串。</li><li>在C++中可以直接使用 <code>==</code> 运算符比较 <code>std::string</code> 对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidBp</title>
      <link href="/2024/12/15/Android/AndroidBp/"/>
      <url>/2024/12/15/Android/AndroidBp/</url>
      
        <content type="html"><![CDATA[<p>Android.bp 是 Android Build System 中使用的一种构建描述文件格式，类似于 Makefile，但以更简洁的方式定义构建模块。以下是一个基本的 Android.bp 文件示例，展示了其基本语法和用法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个库模块</span><br><span class="line">cc_library &#123;</span><br><span class="line">    name: &quot;my_library&quot;,  # 模块名称</span><br><span class="line">    srcs: [</span><br><span class="line">        &quot;file1.cpp&quot;,      # 源文件</span><br><span class="line">        &quot;file2.cpp&quot;,</span><br><span class="line">    ],</span><br><span class="line">    cflags: [            # 编译选项</span><br><span class="line">        &quot;-Wall&quot;,</span><br><span class="line">        &quot;-Werror&quot;,</span><br><span class="line">    ],</span><br><span class="line">    shared_libs: [      # 依赖的共享库</span><br><span class="line">        &quot;liblog&quot;,       # 依赖的库名称</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 定义一个可执行程序模块</span><br><span class="line">cc_binary &#123;</span><br><span class="line">    name: &quot;my_executable&quot;,  # 执行文件名称</span><br><span class="line">    srcs: [</span><br><span class="line">        &quot;main.cpp&quot;,           # 主源文件</span><br><span class="line">    ],</span><br><span class="line">    static_libs: [</span><br><span class="line">        &quot;my_library&quot;,        # 依赖的静态库</span><br><span class="line">    ],</span><br><span class="line">    cflags: [</span><br><span class="line">        &quot;-O2&quot;,               # 优化选项</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 定义一个测试模块</span><br><span class="line">cc_test &#123;</span><br><span class="line">    name: &quot;my_library_test&quot;,  # 测试模块名称</span><br><span class="line">    srcs: [</span><br><span class="line">        &quot;my_library_test.cpp&quot;,  # 测试源文件</span><br><span class="line">    ],</span><br><span class="line">    static_libs: [</span><br><span class="line">        &quot;my_library&quot;,           # 被测试的库</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol><li><strong>模块类型</strong>：可以定义多种类型的模块，比如 <code>cc_library</code>（C++库），<code>cc_binary</code>（可执行程序），<code>cc_test</code>（测试）等。</li><li><strong>name</strong>：每个模块都有一个唯一的名称。</li><li><strong>srcs</strong>：指定源文件列表，可以是相对路径。</li><li><strong>cflags</strong>：编译标志，用于设置编译时的选项。</li><li><strong>shared_libs&#x2F;static_libs</strong>：分别指定依赖的共享库和静态库。</li></ol><p>了解这些基本组件后，你可以根据自己的项目需求，进一步扩展和修改 Android.bp 文件。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP生成so</title>
      <link href="/2024/12/14/CPP/CPP%E7%94%9F%E6%88%90so/"/>
      <url>/2024/12/14/CPP/CPP%E7%94%9F%E6%88%90so/</url>
      
        <content type="html"><![CDATA[<p>在C++中生成共享库（.so文件）并使用它，涉及到以下几个步骤。假设我们要创建一个简单的共享库并在一个主程序中调用它。</p><h1 id="1-创建共享库"><a href="#1-创建共享库" class="headerlink" title="1: 创建共享库"></a>1: 创建共享库</h1><ol><li><strong>创建头文件</strong>（例如 <code>example.h</code>）:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> EXAMPLE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// EXAMPLE_H</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建实现文件</strong>（例如 <code>example.cpp</code>）:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;example.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>编译生成共享库</strong>:</li></ol><p>使用以下命令编译 <code>example.cpp</code> 为共享库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -fPIC -shared example.cpp -o libexample.so</span><br></pre></td></tr></table></figure><ul><li><code>-fPIC</code> 表示生成位置无关代码（Position Independent Code），适合共享库。</li><li><code>-shared</code> 指定生成共享库。</li></ul><h1 id="2-使用共享库"><a href="#2-使用共享库" class="headerlink" title="2: 使用共享库"></a>2: 使用共享库</h1><ol><li><strong>创建主程序文件</strong>（例如 <code>main.cpp</code>）:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;example.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">hello</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>编译并链接共享库</strong>:</li></ol><p>使用以下命令编译 <code>main.cpp</code> 并链接到生成的共享库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ main.cpp -L. -lexample -o main</span><br></pre></td></tr></table></figure><ul><li><code>-L.</code> 指定当前目录为查找库的目录。</li><li><code>-lexample</code> 指定链接名为 <code>libexample.so</code> 的库（省略 <code>lib</code> 和 <code>.so</code>）。</li></ul><ol start="3"><li><strong>运行程序</strong>:</li></ol><p>在运行时，可能需要设置 <code>LD_LIBRARY_PATH</code> 环境变量，以便程序能够找到共享库。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=.:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">./main</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上述步骤，你可以成功创建并使用一个简单的共享库。在实际应用中，可能会有更多的复杂性，比如处理多个源文件，或者使用构建工具（如 CMake）来管理构建流程。希望这个示例对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串包含</title>
      <link href="/2024/12/14/CPP/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%85%E5%90%AB/"/>
      <url>/2024/12/14/CPP/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<p>在实际项目应用中我们经常要去做一些字符相关的判断.<br>比较常用的是判断字符串是否包含另外一个字符串的内容<br>在cpp中有不少可以直接拿来使用的<br>直接添加头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><p>然后写个判断的函数即可如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">contains</span><span class="params">(<span class="type">const</span> std::string&amp; str, <span class="type">const</span> std::string&amp; substr)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="built_in">find</span>(substr) != std::string::npos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的作用是判断str是否包含substr,如果包含则返回true,否则返回false.<br>完整的使用demo如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">contains</span><span class="params">(<span class="type">const</span> std::string&amp; str, <span class="type">const</span> std::string&amp; substr)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="built_in">find</span>(substr) != std::string::npos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    std::string substr = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">contains</span>(str, substr)) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;字符串包含子字符串&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;字符串不包含子字符串&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在c中我们没有这些类的概念，可以参考如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">contains</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>* substr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strstr</span>(str, substr) != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* substr = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">contains</span>(str, substr)) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;字符串包含子字符串\n&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;字符串不包含子字符串\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CPP基础】【四】【申请释放】</title>
      <link href="/2024/11/24/CPP/CPP%E5%9F%BA%E7%A1%80_4_%E7%94%B3%E8%AF%B7%E9%87%8A%E6%94%BE/"/>
      <url>/2024/11/24/CPP/CPP%E5%9F%BA%E7%A1%80_4_%E7%94%B3%E8%AF%B7%E9%87%8A%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<p>在C++中，<code>new</code>和<code>delete</code>是用于动态内存分配和释放的运算符。它们与堆内存相关，允许程序在运行时分配和管理内存。</p><h1 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h1><p><code>new</code>运算符用于在堆上分配内存。它可以用于分配单个对象或对象数组，并返回指向所分配内存的指针。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><p><strong>分配单个对象：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyClass* obj = <span class="keyword">new</span> <span class="built_in">MyClass</span>();</span><br></pre></td></tr></table></figure><p>这行代码在堆上分配一个<code>MyClass</code>对象，并调用其构造函数。返回值是指向这个对象的指针。</p></li><li><p><strong>分配数组：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>这里在堆上分配了一个包含10个整数的数组，返回指向数组首元素的指针。</p></li><li><p><strong>初始化：</strong><br><code>new</code>还可以用来初始化对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* num = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">5</span>); <span class="comment">// 分配内存并将其初始化为5</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="delete-运算符"><a href="#delete-运算符" class="headerlink" title="delete 运算符"></a>delete 运算符</h1><p><code>delete</code>运算符用于释放之前使用<code>new</code>分配的内存。它可以释放单个对象或对象数组。</p><h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><ol><li><p><strong>释放单个对象：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj;</span><br></pre></td></tr></table></figure><p>这行代码会调用<code>obj</code>指向的对象的析构函数，并释放该对象占用的内存。</p></li><li><p><strong>释放数组：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span>[] arr;</span><br></pre></td></tr></table></figure><p>这里使用<code>delete[]</code>来释放使用<code>new[]</code>分配的数组。需要注意，使用<code>delete[]</code>和<code>delete</code>不可以互换。</p></li></ol><h2 id="悬挂指针"><a href="#悬挂指针" class="headerlink" title="悬挂指针"></a>悬挂指针</h2><p>在释放内存后，将指针设置为<code>nullptr</code>是一个良好的编程习惯。这可以防止悬挂指针问题，即指针仍然指向已经被释放的内存区域。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p><strong>配对使用：</strong> 每个由<code>new</code>分配的内存都应该用<code>delete</code>释放，每个<code>new[]</code>分配的数组都应该用<code>delete[]</code>释放，以避免内存泄漏。</p></li><li><p><strong>避免重复释放：</strong> 在释放指针后，应该清楚指针的状态，避免重复释放同一内存区域。</p></li><li><p><strong>自定义析构函数：</strong> 如果类中有动态内存分配的成员，确保在类的析构函数中适当释放这些资源，避免内存泄漏。</p></li></ol><p>通过正确使用<code>new</code>和<code>delete</code>，可以有效地管理C++程序中的动态内存。<br>详细demo代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; <span class="comment">/* 构造函数代码 */</span> &#125;</span><br><span class="line">    <span class="comment">// 如果需要，可以添加析构函数、其他成员函数和数据成员</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="type">int</span>;        <span class="comment">// 为一个整数分配内存</span></span><br><span class="line">    <span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];    <span class="comment">// 为一个整数数组分配内存</span></span><br><span class="line"></span><br><span class="line">    MyClass* obj = <span class="keyword">new</span> <span class="built_in">MyClass</span>();  <span class="comment">// 调用构造函数</span></span><br><span class="line"></span><br><span class="line">    *ptr = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">delete</span> ptr;    <span class="comment">// 释放单个对象 这边释放后ptr指向的内存区域将被释放，,详细debug看ptr指向的值以及变成其他值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] arr;  <span class="comment">// 释放数组</span></span><br><span class="line">    ptr = <span class="literal">nullptr</span>; <span class="comment">// 防止悬挂指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果MyClass有自定义的析构函数，也应该在此处释放obj</span></span><br><span class="line">    <span class="keyword">delete</span> obj;</span><br><span class="line">    obj = <span class="literal">nullptr</span>; <span class="comment">// 防止悬挂指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串常见操作</title>
      <link href="/2024/11/24/CPP/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/11/24/CPP/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="常用字符串操作函数"><a href="#常用字符串操作函数" class="headerlink" title="常用字符串操作函数"></a>常用字符串操作函数</h1><ol><li><p>**<code>strcpy</code>**：用于将源字符串复制到目标字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> dest[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(dest, src);  <span class="comment">// dest 现在包含 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>strncpy</code>**：用于复制指定长度的源字符串到目标字符串，防止缓冲区溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> dest[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> src[] = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="built_in">strncpy</span>(dest, src, <span class="number">5</span>);  <span class="comment">// dest 现在包含 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>strlen</code>**：用于计算字符串的长度（不包括终止字符 <code>\0</code>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">size_t</span> length = <span class="built_in">strlen</span>(str);  <span class="comment">// length 现在是 5</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>strcat</code>**：用于将源字符串连接到目标字符串的末尾。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> dest[<span class="number">20</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> src[] = <span class="string">&quot; World!&quot;</span>;</span><br><span class="line"><span class="built_in">strcat</span>(dest, src);  <span class="comment">// dest 现在包含 &quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>strncat</code>**：用于将指定长度的源字符串连接到目标字符串的末尾。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> dest[<span class="number">20</span>] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> src[] = <span class="string">&quot; World!&quot;</span>;</span><br><span class="line"><span class="built_in">strncat</span>(dest, src, <span class="number">3</span>);  <span class="comment">// dest 现在包含 &quot;Hello Wo&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>strcmp</code>**：用于比较两个字符串。如果相等返回0，如果第一个字符串小于第二个字符串返回负数，大于返回正数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">strcmp</span>(str1, str2);  <span class="comment">// result 为 0</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>strncmp</code>**：用于比较指定长度的两个字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[] = <span class="string">&quot;abcdx&quot;</span>;</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">strncmp</span>(str1, str2, <span class="number">4</span>);  <span class="comment">// result 为 0 (前4个字符相等)</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>strchr</code>**：用于查找字符在字符串中第一次出现的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> *ptr = <span class="built_in">strchr</span>(str, <span class="string">&#x27;e&#x27;</span>);  <span class="comment">// ptr 指向 &#x27;e&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>**<code>strstr</code>**：用于查找一个字符串在另一个字符串中首次出现的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> haystack[] = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="type">char</span> needle[] = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="type">char</span> *ptr = <span class="built_in">strstr</span>(haystack, needle);  <span class="comment">// ptr 指向 &quot;World!&quot;</span></span><br></pre></td></tr></table></figure></li></ol><p>这些函数是处理C语言字符串时非常有用的工具，掌握它们可以让你的字符串操作更加得心应手。注意在使用这些函数时，要确保目标字符数组够大，以防止发生缓冲区溢出。</p><h1 id="字符串相等判断"><a href="#字符串相等判断" class="headerlink" title="字符串相等判断"></a>字符串相等判断</h1><p>在C++中，判断字符串相等一般使用 <code>std::string</code> 类的 <code>==</code> 运算符或者 <code>compare</code> 方法。以下是这两种方法的示例：</p><ol><li><p><strong>使用 <code>==</code> 运算符</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    std::string str2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    std::string str3 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1 == str2) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;str1 和 str2 相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;str1 和 str2 不相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1 == str3) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;str1 和 str3 相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;str1 和 str3 不相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 <code>compare</code> 方法</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    std::string str2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    std::string str3 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str<span class="number">1.</span><span class="built_in">compare</span>(str2) == <span class="number">0</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;str1 和 str2 相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;str1 和 str2 不相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str<span class="number">1.</span><span class="built_in">compare</span>(str3) == <span class="number">0</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;str1 和 str3 相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;str1 和 str3 不相等&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在这两种方法中，使用 <code>==</code> 运算符更为简洁和直观，因此在日常编程中更为常用。 <code>compare</code> 方法则提供了更丰富的比较功能，例如可以用于比较字符串的部分内容和不同的比较规则。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidMk基础</title>
      <link href="/2024/11/24/Android/AndroidMk%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/11/24/Android/AndroidMk%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Android.mk 文件是 Android 系统中用于描述构建过程的文件，主要用在 Android NDK（Native Development Kit）中。它们是用来定义模块的构建规则和依赖关系。以下是 Android.mk 文件的基础和常用语法：</p><h1 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h1><ol><li><p><strong>变量定义</strong>：</p><ul><li>可以使用 <code>:=</code>、<code>+=</code> 等方式定义变量。</li><li>例如：<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>模块类型</strong>：</p><ul><li>使用 <code>LOCAL_MODULE</code> 来指定模块名称。</li><li>使用 <code>include</code> 来包含其他 mk 文件。</li></ul></li><li><p><strong>模块的属性</strong>：</p><ul><li><code>LOCAL_SRC_FILES</code>：指定源文件。</li><li><code>LOCAL_C_INCLUDES</code>：指定 C&#x2F;C++ 头文件的搜索路径。</li><li><code>LOCAL_LDLIBS</code>：链接时需要的库。</li></ul></li></ol><h1 id="常见语法"><a href="#常见语法" class="headerlink" title="常见语法"></a>常见语法</h1><ol><li><p><strong>定义静态库</strong>：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := my_static_lib</span><br><span class="line">LOCAL_SRC_FILES := my_static_lib.cpp</span><br><span class="line">LOCAL_C_INCLUDES := <span class="variable">$(LOCAL_PATH)</span>/<span class="keyword">include</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_LIBRARY)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>定义动态库</strong>：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := my_shared_lib</span><br><span class="line">LOCAL_SRC_FILES := my_shared_lib.cpp</span><br><span class="line">LOCAL_LDLIBS := -llog</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>定义可执行文件</strong>：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := my_executable</span><br><span class="line">LOCAL_SRC_FILES := main.cpp</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_EXECUTABLE)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>清理变量</strong>：</p><ul><li>使用 <code>include $(CLEAR_VARS)</code> 可以清除之前定义的变量，避免冲突。</li></ul></li><li><p><strong>依赖关系</strong>：</p><ul><li>可以使用 <code>LOCAL_WHOLE_STATIC_LIBRARIES</code> 来定义静态库的依赖。</li></ul></li></ol><h1 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h1><ul><li><p><strong>链接库</strong>：</p><ul><li><code>LOCAL_LDLIBS</code> 用于定义需要链接的库，例如 <code>-lc</code>、<code>-lm</code>等。</li></ul></li><li><p><strong>编译选项</strong>：</p><ul><li>还可以使用 <code>LOCAL_CPPFLAGS</code> 和 <code>LOCAL_CFLAGS</code> 来添加编译选项。</li></ul></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Android.mk 文件通过模块定义和构建规则来构建 C&#x2F;C++ 代码。在编写文件时，需要注意规范和模块间的依赖关系。随着 Android 的发展，渐渐地 CMake 也被广泛使用作为构建系统，但 Android.mk 仍然是一个重要的部分，特别是在 NDK 项目中。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CPP基础】【三】【继承多态封装】</title>
      <link href="/2024/11/24/CPP/CPP%E5%9F%BA%E7%A1%80_3_%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81%E5%B0%81%E8%A3%85/"/>
      <url>/2024/11/24/CPP/CPP%E5%9F%BA%E7%A1%80_3_%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>在C++中，继承、多态和封装是面向对象编程的三大基本特性。下面我将分别介绍这三者，并给出相应的示例。</p><h1 id="1-封装（Encapsulation）"><a href="#1-封装（Encapsulation）" class="headerlink" title="1. 封装（Encapsulation）"></a>1. 封装（Encapsulation）</h1><p>封装是指将数据（成员变量）和操作数据的方法（成员函数）放在一起，形成一个类，通过访问控制来限制对类内部数据的直接访问，从而保护数据的完整性。</p><p><strong>示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> balance; <span class="comment">// 私有成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BankAccount</span>(<span class="type">double</span> initialBalance) &#123;</span><br><span class="line">        balance = initialBalance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deposit</span><span class="params">(<span class="type">double</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span> &amp;&amp; amount &lt;= balance) &#123;</span><br><span class="line">            balance -= amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getBalance</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">BankAccount <span class="title">account</span><span class="params">(<span class="number">1000</span>)</span></span>;</span><br><span class="line">    account.<span class="built_in">deposit</span>(<span class="number">500</span>);</span><br><span class="line">    account.<span class="built_in">withdraw</span>(<span class="number">200</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前余额: &quot;</span> &lt;&lt; account.<span class="built_in">getBalance</span>() &lt;&lt; endl; <span class="comment">// 输出: 当前余额: 1300</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-继承（Inheritance）"><a href="#2-继承（Inheritance）" class="headerlink" title="2. 继承（Inheritance）"></a>2. 继承（Inheritance）</h1><p>继承是指一个类可以从另一个类中继承成员变量和方法，从而实现代码的重用。子类（派生类）可以扩展或重写父类（基类）的行为。</p><p><strong>示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;动物发声&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal &#123; <span class="comment">// Dog类继承自Animal类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123; <span class="comment">// 重写父类的方法</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;汪汪&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Animal animal;</span><br><span class="line">    animal.<span class="built_in">speak</span>(); <span class="comment">// 输出: 动物发声</span></span><br><span class="line"></span><br><span class="line">    Dog dog;</span><br><span class="line">    dog.<span class="built_in">speak</span>(); <span class="comment">// 输出: 汪汪</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-多态（Polymorphism）"><a href="#3-多态（Polymorphism）" class="headerlink" title="3. 多态（Polymorphism）"></a>3. 多态（Polymorphism）</h1><p>多态是指同一个操作可以作用于不同的对象上，不同的对象可以根据其具体类型表现出不同的行为。C++中的多态通常通过虚函数实现。</p><p><strong>示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; <span class="comment">// 虚函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;绘制形状&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 重写父类的虚函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;绘制圆形&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 重写父类的虚函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;绘制正方形&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">render</span><span class="params">(Shape* shape)</span> </span>&#123; <span class="comment">// 接受基类指针</span></span><br><span class="line">    shape-&gt;<span class="built_in">draw</span>(); <span class="comment">// 调用虚函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Circle circle;</span><br><span class="line">    Square square;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">render</span>(&amp;circle); <span class="comment">// 输出: 绘制圆形</span></span><br><span class="line">    <span class="built_in">render</span>(&amp;square); <span class="comment">// 输出: 绘制正方形</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>封装通过访问控制保护数据，提供了安全性。</li><li>继承实现了代码的复用，允许子类扩展父类的功能。</li><li>多态让程序更加灵活，同一操作可以作用于多个类型，增强了代码的可扩展性和可维护性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kernel加时间戳</title>
      <link href="/2024/11/18/Android/Kernel%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/"/>
      <url>/2024/11/18/Android/Kernel%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/</url>
      
        <content type="html"><![CDATA[<hr><p>添加对应的头文件和包装函数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ktime.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">thermal_get_current_time_ms</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> temp;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timespec64</span> t;</span><br><span class="line">    <span class="built_in">ktime_get_ts64</span>(&amp;t);</span><br><span class="line">    temp = (((<span class="type">long</span> <span class="type">long</span>) t.tv_sec) * <span class="number">1000000</span> + (<span class="type">long</span>)t.tv_nsec/<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> (temp/<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c中static 受到编译器的影响 禁止使用long long类型.所以debug的时候还是去掉static的申明.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> time_diff,start_timestamp,end_timestamp;</span><br><span class="line"></span><br><span class="line">start_timestamp = <span class="built_in">thermal_get_current_time_ms</span>();</span><br><span class="line"></span><br><span class="line">end_timestamp = <span class="built_in">thermal_get_current_time_ms</span>();</span><br><span class="line">time_diff = end_timestamp - start_timestamp;</span><br><span class="line"><span class="built_in">printk</span>(<span class="string">&quot;[time] timestamp_diff = %lld ms&quot;</span>,time_diff);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CPP基础】【二】【设计模式】</title>
      <link href="/2024/11/17/CPP/CPP%E5%9F%BA%E7%A1%80_2_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_1/"/>
      <url>/2024/11/17/CPP/CPP%E5%9F%BA%E7%A1%80_2_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我其实是想把指针当做我学习的第二部分，奈何指针很麻烦，智能指针一时半会也说不完.<br>于是先整理下设计模式<br>因为我在实际项目中开发用到不少的工厂模式，就先以工厂模式为主要的研究内容开始进行复习和拓展。</p><p>设计模式是一种在软件开发中常用的解决方案，旨在帮助开发者解决常见问题，提高软件的可维护性、可重用性和可扩展性。设计模式通常分为三大类：创建型模式、结构型模式和行为型模式。</p><ol><li><p><strong>创建型模式</strong>：这些模式主要关注对象的创建机制，以适应不同的需求和场景。</p><ul><li><strong>单例模式</strong>：确保一个类只有一个实例，并提供一个全局访问点。</li><li><strong>工厂方法模式</strong>：定义一个创建对象的接口，让子类决定实例化哪一个类。</li><li><strong>抽象工厂模式</strong>：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们的具体类。</li></ul></li><li><p><strong>结构型模式</strong>：这些模式主要关注对象之间的组合关系。</p><ul><li><strong>适配器模式</strong>：将一个类的接口转换成客户端期望的另一个接口，从而使不兼容的接口能够合作。</li><li><strong>装饰者模式</strong>：动态地给一个对象添加额外的职责，就增加功能来说，这种模式比生成子类更为灵活。</li><li><strong>代理模式</strong>：为其他对象提供一种代理以控制对这个对象的访问。</li></ul></li><li><p><strong>行为型模式</strong>：这些模式主要关注对象之间的交互和职责分配。</p><ul><li><strong>观察者模式</strong>：定义了一种一对多的依赖关系，使得一当一个对象改变状态时，所有依赖于它的对象都得到通知并被自动更新。</li><li><strong>策略模式</strong>：定义一系列算法，把它们一个个封装起来，并且使它们可以互相替换，策略模式让算法的变化独立于使用算法的客户。</li><li><strong>命令模式</strong>：将一个请求封装成一个对象，从而使你能够使用不同的请求、队列或日志请求，并支持可撤销的操作。</li></ul></li></ol><p>设计模式是软件开发的宝贵经验积累，通过运用这些模式，可以有效地解决许多普遍存在的问题，使代码更加简洁、清晰和易于维护。</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>这个在我是实际开发中用到的比较多</p><p>单例模式是一种创建型设计模式，它的主要目的是确保一个类只有一个实例，并提供一个全局访问点。这种模式在需要控制对某些资源的访问时尤其有用，比如数据库连接或配置管理等。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li><strong>唯一性</strong>：单例模式确保任何时候都只有一个类的实例存在。</li><li><strong>全局访问</strong>：提供一个静态方法，让用户可以获取到这个唯一实例。</li><li><strong>延迟初始化</strong>：可以实现懒汉式单例，只有在第一次使用时才创建实例。</li></ol><h3 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h3><p>单例模式的实现方式有多种，以下是最常见的几种：</p><ol><li><p><strong>懒汉式</strong>：</p><ul><li>在需要时才创建实例，在多线程环境下需要加锁以保证线程安全。</li><li>完整的代码如下:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Singleton* instance;</span><br><span class="line">    <span class="type">static</span> std::mutex mutex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="built_in">Singleton</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton created&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取单例实例的方法</span></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">nullptr</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>; <span class="comment">// 加锁以保证线程安全</span></span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">nullptr</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化静态成员变量</span></span><br><span class="line">Singleton* Singleton::instance = <span class="literal">nullptr</span>;</span><br><span class="line">std::mutex Singleton::mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Singleton* singleton = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>饿汉式</strong>：</p><ul><li>在类加载时就创建实例，线程安全，但不支持延迟加载。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 提供一个静态方法来获取单例对象</span></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton &amp;<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">static</span> Singleton instance; <span class="comment">// 在第一次调用时创建实例</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除拷贝构造函数和赋值运算符，以防意外复制</span></span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singleton &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">someMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello from Singleton!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="built_in">Singleton</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton instance created!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有析构函数</span></span><br><span class="line">    ~<span class="built_in">Singleton</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton instance destroyed!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取单例对象并调用方法</span></span><br><span class="line">    Singleton::<span class="built_in">getInstance</span>().<span class="built_in">someMethod</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>双重检查锁定</strong>：</p><ul><li>在懒汉式的基础上，使用双重检查加锁，减少了同步的性能开销。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 提供一个静态方法来获取单例对象</span></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton *<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 首次检查</span></span><br><span class="line">        <span class="keyword">if</span> (!instance)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 对共享资源加锁</span></span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">            <span class="comment">// 再次检查</span></span><br><span class="line">            <span class="keyword">if</span> (!instance)</span><br><span class="line">            &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>(); <span class="comment">// 创建实例</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除拷贝构造函数和赋值运算符，以防意外复制</span></span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singleton &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">someMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello from Singleton!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="built_in">Singleton</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton instance created!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有析构函数</span></span><br><span class="line">    ~<span class="built_in">Singleton</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton instance destroyed!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> Singleton *instance; <span class="comment">// 单例指针</span></span><br><span class="line">    <span class="type">static</span> std::mutex mutex_;   <span class="comment">// 互斥锁</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员变量初始化</span></span><br><span class="line">Singleton *Singleton::instance = <span class="literal">nullptr</span>;</span><br><span class="line">std::mutex Singleton::mutex_;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取单例对象并调用方法</span></span><br><span class="line">    Singleton::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">someMethod</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li>配置管理：一个应用程序通常只需要一个配置对象来管理配置参数。</li><li>日志记录：通常使用单例模式来管理日志记录，以确保日志的统一性。</li><li>数据库连接或线程池：避免创建多个连接，节省资源。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>单例模式通过控制实例的创建，提供了对共享资源的管理，避免了资源浪费和状态不一致的问题。在实际应用中，选择合适的实现方式以满足线程安全、性能和资源利用的需求非常重要。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式是一种常见的设计模式，其主要目的是通过创建一个工厂来集中创建对象。工厂模式的主要类型包括：</p><ol><li><p><strong>简单工厂模式</strong>：</p><ul><li>定义一个工厂类，根据传入的参数决定创建哪一种产品类的实例。虽然简单工厂模式本身不是GoF设计模式，但它在很多项目中得到了广泛应用。</li></ul></li><li><p><strong>工厂方法模式</strong>：</p><ul><li>定义一个接口用于创建对象，但将实例化的工作推迟到子类中。每个子类都实现了自己的工厂方法，负责创建特定类型的对象。</li></ul></li><li><p><strong>抽象工厂模式</strong>：</p><ul><li>提供一个接口，用于创建一系列相关或依赖的对象，而不需要指定具体类。这种模式通常用于创建一组相关产品，适用于产品族的设计。</li></ul></li><li><p><strong>静态工厂方法</strong>：</p><ul><li>工厂方法被定义为静态方法，可以在没有创建工厂类实例的情况下调用。通常用于简单的对象创建操作。</li></ul></li></ol><p>这些工厂模式各有优缺点，根据具体需求选择合适的模式可以提高代码的可维护性和可扩展性。</p><h3 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1. 简单工厂模式"></a>1. 简单工厂模式</h3><p>简单工厂模式使用一个工厂类根据给定的信息返回不同类型的对象。这个模式不推荐用于复杂的系统，因为它违反了开闭原则，但对于简单的应用场景非常有用。</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品A&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品B&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Product* <span class="title">createProduct</span><span class="params">(<span class="type">const</span> std::string&amp; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;B&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Product* productA = SimpleFactory::<span class="built_in">createProduct</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    productA-&gt;<span class="built_in">use</span>();</span><br><span class="line">    <span class="keyword">delete</span> productA;</span><br><span class="line"></span><br><span class="line">    Product* productB = SimpleFactory::<span class="built_in">createProduct</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    productB-&gt;<span class="built_in">use</span>();</span><br><span class="line">    <span class="keyword">delete</span> productB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2. 工厂方法模式"></a>2. 工厂方法模式</h3><p>工厂方法模式定义一个用于创建产品的接口，但由子类来决定实例化哪一个产品。这样可以更好地遵循开闭原则。</p><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品A&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品B&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Creator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product* <span class="title">factoryMethod</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">someOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product* product = <span class="built_in">factoryMethod</span>();</span><br><span class="line">        product-&gt;<span class="built_in">use</span>();</span><br><span class="line">        <span class="keyword">delete</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCreatorA</span> : <span class="keyword">public</span> Creator &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product* <span class="title">factoryMethod</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCreatorB</span> : <span class="keyword">public</span> Creator &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product* <span class="title">factoryMethod</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Creator* creatorA = <span class="keyword">new</span> <span class="built_in">ConcreteCreatorA</span>();</span><br><span class="line">    creatorA-&gt;<span class="built_in">someOperation</span>();</span><br><span class="line">    <span class="keyword">delete</span> creatorA;</span><br><span class="line"></span><br><span class="line">    Creator* creatorB = <span class="keyword">new</span> <span class="built_in">ConcreteCreatorB</span>();</span><br><span class="line">    creatorB-&gt;<span class="built_in">someOperation</span>();</span><br><span class="line">    <span class="keyword">delete</span> creatorB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3. 抽象工厂模式"></a>3. 抽象工厂模式</h3><p>抽象工厂模式提供一个接口，用于创建一系列相关或相互依赖的对象，而无需指定具体的类。这种模式非常适合用于需要创建多个不同类型的产品的场景。</p><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA1</span> : <span class="keyword">public</span> ProductA &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品A1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA2</span> : <span class="keyword">public</span> ProductA &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品A2&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB1</span> : <span class="keyword">public</span> ProductB &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品B1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB2</span> : <span class="keyword">public</span> ProductB &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品B2&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ProductA* <span class="title">createProductA</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ProductB* <span class="title">createProductB</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory1</span> : <span class="keyword">public</span> AbstractFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ProductA* <span class="title">createProductA</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProductB* <span class="title">createProductB</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory2</span> : <span class="keyword">public</span> AbstractFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ProductA* <span class="title">createProductA</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProductB* <span class="title">createProductB</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AbstractFactory* factory1 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory1</span>();</span><br><span class="line">    ProductA* productA1 = factory1-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">    ProductB* productB1 = factory1-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line">    </span><br><span class="line">    productA1-&gt;<span class="built_in">use</span>();</span><br><span class="line">    productB1-&gt;<span class="built_in">use</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> productA1;</span><br><span class="line">    <span class="keyword">delete</span> productB1;</span><br><span class="line">    <span class="keyword">delete</span> factory1;</span><br><span class="line"></span><br><span class="line">    AbstractFactory* factory2 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory2</span>();</span><br><span class="line">    ProductA* productA2 = factory2-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">    ProductB* productB2 = factory2-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line">    </span><br><span class="line">    productA2-&gt;<span class="built_in">use</span>();</span><br><span class="line">    productB2-&gt;<span class="built_in">use</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> productA2;</span><br><span class="line">    <span class="keyword">delete</span> productB2;</span><br><span class="line">    <span class="keyword">delete</span> factory2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>简单工厂模式</strong>适合用于简单的对象创建，便于使用和管理。</li><li><strong>工厂方法模式</strong>通过子类化来实现扩展功能，更符合面向对象的原则。</li><li><strong>抽象工厂模式</strong>能够创建一系列相关的产品，适用性更广。</li></ul><p>这些工厂模式在软件开发中非常常见，尤其在需要解耦对象创建与使用逻辑时，能够有效提高代码的可维护性和可扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CPP基础】【一】</title>
      <link href="/2024/11/17/CPP/CPP%E5%9F%BA%E7%A1%80_1/"/>
      <url>/2024/11/17/CPP/CPP%E5%9F%BA%E7%A1%80_1/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这是对c++的泛式编程的梳理<br>c++的基础就那边点,无非就是流程控制和对象继承等<br>剩下的就是STL的内容。<br>所以我觉得还是有必要深究下来，一来就是我这个人的性格是这样的.<br>学习链接:<br><a href="https://www.learncpp.com/">https://www.learncpp.com/</a></p><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>整型: int, long, long long</li><li>浮点型: float, double, long double</li><li>字符型: char, wchar_t</li><li>布尔型: bool</li><li>指针型: pointer, reference</li><li>数组型: array</li><li>枚举型: enum</li><li>结构体型: struct</li><li>类型: class</li></ul><table><thead><tr><th>类型</th><th>关键字</th></tr></thead><tbody><tr><td>布尔型</td><td>bool</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>整型</td><td>int</td></tr><tr><td>浮点型</td><td>float</td></tr><tr><td>双浮点型</td><td>double</td></tr><tr><td>无类型</td><td>void</td></tr><tr><td>宽字符型</td><td>wchar_t</td></tr></tbody></table><p>补充表格</p><table><thead><tr><th>类型</th><th>位</th><th>范围</th></tr></thead><tbody><tr><td>char</td><td>1字节</td><td>-128~127</td></tr><tr><td>unsigned char</td><td>1字节</td><td>0~255</td></tr><tr><td>signed char</td><td>1字节</td><td>-128~127</td></tr><tr><td>int</td><td>4字节</td><td>-2^31~2^31-1</td></tr><tr><td>unsigned int</td><td>4字节</td><td></td></tr><tr><td>signed int</td><td>4字节</td><td></td></tr><tr><td>short int</td><td>2字节</td><td></td></tr><tr><td>unsigned short int</td><td>2字节</td><td></td></tr><tr><td>signed short int</td><td>2字节</td><td></td></tr><tr><td>long int</td><td>8字节</td><td></td></tr><tr><td>signed long int</td><td>8字节</td><td></td></tr><tr><td>unsigned long int</td><td>8字节</td><td></td></tr><tr><td>float</td><td>4字节</td><td></td></tr><tr><td>double</td><td>8字节</td><td></td></tr><tr><td>long long</td><td>8字节</td><td></td></tr><tr><td>long double</td><td>16字节</td><td></td></tr></tbody></table><p>typedef 使用格式如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> type newname;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INT;</span><br><span class="line">INT INI16;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="静态转换"><a href="#静态转换" class="headerlink" title="静态转换"></a>静态转换</h3><p>静态转换是将一种数据类型的值强制转换为另一种数据类型的值。</p><p>静态转换通常用于比较类型相似的对象之间的转换，例如将 int 类型转换为 float 类型。</p><p>静态转换不进行任何运行时类型检查，因此可能会导致运行时错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(i); <span class="comment">// 静态将int类型转换为float类型</span></span><br></pre></td></tr></table></figure><h3 id="动态转换"><a href="#动态转换" class="headerlink" title="动态转换"></a>动态转换</h3><p>动态转换通常用于将一个基类指针或引用转换为派生类指针或引用。动态转换在运行时进行类型检查，如果不能进行转换则返回空指针或引发异常。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;&#125;;</span><br><span class="line">Base* ptr_base = <span class="keyword">new</span> Derived;</span><br><span class="line">Derived* ptr_derived = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(ptr_base); <span class="comment">// 将基类指针转换为派生类指针</span></span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Base* ptr_base = <span class="keyword">new</span> Derived;</span><br><span class="line">    Derived* ptr_derived = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(ptr_base); <span class="comment">// 将基类指针转换为派生类指针</span></span><br><span class="line">    ptr_derived-&gt;<span class="built_in">func</span>(); <span class="comment">// 调用派生类函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常量转换"><a href="#常量转换" class="headerlink" title="常量转换"></a>常量转换</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; r = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>&amp;&gt;(i); <span class="comment">// 常量转换，将const int转换为int</span></span><br></pre></td></tr></table></figure><h3 id="重新解释转换"><a href="#重新解释转换" class="headerlink" title="重新解释转换"></a>重新解释转换</h3><p>重新解释转换将一个数据类型的值重新解释为另一个数据类型的值，通常用于在不同的数据类型之间进行转换。</p><p>重新解释转换不进行任何类型检查，因此可能会导致未定义的行为。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">float</span>&amp;&gt;(i); <span class="comment">// 重新解释将int类型转换为float类型</span></span><br></pre></td></tr></table></figure><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>一般来说有三个地方可以定义变量：</p><ul><li>在函数或一个代码块内部声明的变量，称为<strong>局部变量</strong>。</li><li>在函数参数的定义中声明的变量，称为<strong>形式参数</strong>。</li><li>在所有函数外部声明的变量，称为<strong>全局变量</strong>。</li></ul><p>作用域是程序的一个区域，变量的作用域可以分为以下几种：</p><ul><li><strong>局部作用域</strong>：在函数内部声明的变量具有局部作用域，它们只能在函数内部访问。局部变量在函数每次被调用时被创建，在函数执行完后被销毁。</li><li><strong>全局作用域</strong>：在所有函数和代码块之外声明的变量具有全局作用域，它们可以被程序中的任何函数访问。全局变量在程序开始时被创建，在程序结束时被销毁。</li><li><strong>块作用域</strong>：在代码块内部声明的变量具有块作用域，它们只能在代码块内部访问。块作用域变量在代码块每次被执行时被创建，在代码块执行完后被销毁。</li><li><strong>类作用域</strong>：在类内部声明的变量具有类作用域，它们可以被类的所有成员函数访问。类作用域变量的生命周期与类的生命周期相同。</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>常用的几个如下</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><strong>strcpy(s1,s2)</strong></td><td>复制字符串s2到字符串s1</td></tr><tr><td><strong>strcat(s1, s2);</strong></td><td>连接字符串 s2 到字符串 s1 的末尾。连接字符串也可以用 <strong>+</strong> 号，例如:<br/>string str1 &#x3D; “demo1”;<br/>string str2 &#x3D; “demo2”;<br/>string str &#x3D; str1 + str2;</td></tr><tr><td><strong>strlen(s1);</strong></td><td>返回字符串 s1 的长度。</td></tr><tr><td><strong>strcmp(s1, s2);</strong></td><td>如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回值小于 0；如果 s1&gt;s2 则返回值大于 0。</td></tr><tr><td><strong>strchr(s1, ch);</strong></td><td>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td><strong>strstr(s1, s2);</strong></td><td>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span>  var1 = <span class="number">10</span>;</span><br><span class="line">   <span class="type">char</span> var2[<span class="number">12</span>] = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;var1 变量的地址： &quot;</span>;</span><br><span class="line">   cout &lt;&lt; &amp;var1 &lt;&lt; <span class="string">&quot;value: &quot;</span> &lt;&lt; var1 &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;var2 变量的地址： &quot;</span>;</span><br><span class="line">   cout &lt;&lt; &amp;var2 &lt;&lt; <span class="string">&quot;value: &quot;</span> &lt;&lt; var2 &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 声明简单的变量</span></span><br><span class="line">   <span class="type">int</span>    i;</span><br><span class="line">   <span class="type">double</span> d;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 声明引用变量</span></span><br><span class="line">   <span class="type">int</span>&amp;    r = i;</span><br><span class="line">   <span class="type">double</span>&amp; s = d;</span><br><span class="line">   </span><br><span class="line">   i = <span class="number">5</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of i : &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of i reference : &quot;</span> &lt;&lt; r  &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   d = <span class="number">11.7</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of d : &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of d reference : &quot;</span> &lt;&lt; s  &lt;&lt; endl;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>直接放代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">// 提供接口框架的纯虚函数</span></span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setWidth</span><span class="params">(<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      width = w;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setHeight</span><span class="params">(<span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      height = h;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="type">int</span> width;</span><br><span class="line">   <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>: <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> (width * height); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>: <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> (width * height)/<span class="number">2</span>; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Rectangle Rect;</span><br><span class="line">   Triangle  Tri;</span><br><span class="line"> </span><br><span class="line">   Rect.<span class="built_in">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">   Rect.<span class="built_in">setHeight</span>(<span class="number">7</span>);</span><br><span class="line">   <span class="comment">// 输出对象的面积</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total Rectangle area: &quot;</span> &lt;&lt; Rect.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   Tri.<span class="built_in">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">   Tri.<span class="built_in">setHeight</span>(<span class="number">7</span>);</span><br><span class="line">   <span class="comment">// 输出对象的面积</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total Triangle area: &quot;</span> &lt;&lt; Tri.<span class="built_in">getArea</span>() &lt;&lt; endl; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>C++11 提供了对匿名函数的支持,称为 Lambda 函数(也叫 Lambda 表达式)。</p><p>Lambda 表达式把函数看作对象。Lambda 表达式可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值。</p><p>Lambda 表达式本质上与函数声明非常类似。Lambda 表达式具体形式如下:</p><p>格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[capture](parameters)-&gt;return-type&#123;body&#125;</span><br></pre></td></tr></table></figure><p>举例如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[](<span class="type">int</span> x, <span class="type">int</span> y)&#123; <span class="keyword">return</span> x &lt; y ; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp标准</title>
      <link href="/2024/11/14/CPP/cpp%E6%A0%87%E5%87%86/"/>
      <url>/2024/11/14/CPP/cpp%E6%A0%87%E5%87%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>‌C++标准‌是C++编程语言的规范，由国际标准化组织（ISO）制定。<br>C++标准的发展历程可以追溯到1998年,<br>当时ISO&#x2F;IEC 14882:1998标准被发布，这被认为是第一个C++标准，常被称为C++98。<br>随后，C++标准经历了多次更新和修订，<br>包括C++03（2003年）、C++11（2011年）、C++14（2014年）和C++17（2017年）。最新的C++标准是C++20，于2020年发布，引入了许多新特性，如概念（concepts）、范围库（ranges）、协程（coroutines）等。此外，C++23标准也在2023年确定，但目前支持完整的编译器较少。<br>C++标准的发展历程</p><p>‌C++98‌：1998年发布的第一个C++标准，常被称为C++98。<br>‌C++03‌：2003年发布的修订版，增加了对自动存储期变量的支持等新特性。<br>‌C++11‌：2011年发布的版本，增加了lambda表达式、自动类型推导等功能。<br>‌C++14‌：2014年发布的版本，增加了基于范围的for循环、constexpr等功能。<br>‌C++17‌：2017年发布的版本，增加了结构化绑定、文件系统库等功能。<br>‌C++20‌：2020年发布的版本，引入了概念（concepts）、范围库（ranges）、协程（coroutines）等新特性。<br>‌C++23‌：2023年确定的版本，目前支持完整的编译器较少。<br>目前按照我接触的标准来说.<br>市面上大部分项目都是以C++11&#x2F;14&#x2F;17&#x2F;20为主, 而C++98&#x2F;03则是少数.  这主要是因为一些老项目的历史原因, 也有一些公司的项目使用C++98&#x2F;03, 这也是C++标准的发展历程.<br>本文先介绍个大概,后续再介绍C++11&#x2F;14&#x2F;17&#x2F;20的详细新特性。</p><h1 id="2-C-11-新特性"><a href="#2-C-11-新特性" class="headerlink" title="2 C++11 新特性"></a>2 C++11 新特性</h1><p>C++11标准引入了许多新特性，以下是一些重要的特性及其代码示例：</p><ol><li><p><strong>自动类型推导（auto）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">1</span>;      <span class="comment">// x 被推导为 int</span></span><br><span class="line"><span class="keyword">auto</span> y = <span class="number">2.5</span>;    <span class="comment">// y 被推导为 double</span></span><br></pre></td></tr></table></figure></li><li><p><strong>范围for循环（for each）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; val : vec) </span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 输出每个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>新类型：nullptr</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="literal">nullptr</span>; <span class="comment">// nullptr 是类型安全的空指针</span></span><br></pre></td></tr></table></figure><p>早期一直用的是NULL, 后来发现NULL是int类型, 所以就引入了nullptr, 它是一个空指针常量, 类型安全, 避免了类型转换错误。这使得代码更加安全和可读性更高。</p></li><li><p><strong>右值引用和移动语义</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Constructor&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    <span class="built_in">MyClass</span>(MyClass&amp;&amp; other) &#123; std::cout &lt;&lt; <span class="string">&quot;Move Constructor&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">const</span> MyClass&amp; other) &#123; std::cout &lt;&lt; <span class="string">&quot;Copy Constructor&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyClass obj1;</span><br><span class="line">MyClass obj2 = std::<span class="built_in">move</span>(obj1); <span class="comment">// 使用移动构造函数</span></span><br></pre></td></tr></table></figure></li><li><p><strong>lambda表达式</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> lambda = [](<span class="type">int</span> x) &#123; <span class="keyword">return</span> x * x; &#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">lambda</span>(<span class="number">5</span>); <span class="comment">// 输出25</span></span><br></pre></td></tr></table></figure><p><strong>注意lambda是最后使用发射的,在用QT的时候,我经常会使用connect函数, 它会自动生成一个lambda表达式, 这个时候要注意局部变量和全局变量的生命周期，如果在外层申明了一个局部变量，在lambda表达式中使用这个变量，就会出现未定义行为导致程序崩溃。</strong></p></li><li><p><strong>智能指针（std::unique_ptr和std::shared_ptr）</strong><br>智能指针单独开一个章节说明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>; <span class="comment">// 独占所有权的智能指针</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">20</span>))</span></span>; <span class="comment">// 共享所有权的智能指针</span></span><br></pre></td></tr></table></figure></li><li><p><strong>线程支持库（std::thread）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadFunction</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Thread is running&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(threadFunction)</span></span>;</span><br><span class="line">t.<span class="built_in">join</span>(); <span class="comment">// 等待线程结束</span></span><br></pre></td></tr></table></figure></li><li><p><strong>静态断言（static_assert）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) == <span class="number">4</span>, <span class="string">&quot;Size of int is not 4 bytes!&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>变长模板（Variadic templates）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Args... args)</span> </span>&#123;</span><br><span class="line">    (std::cout &lt;&lt; ... &lt;&lt; args) &lt;&lt; std::endl; <span class="comment">// 使用折叠表达式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;text&quot;</span>); <span class="comment">// 输出: 123text</span></span><br></pre></td></tr></table></figure></li><li><p><strong>枚举类（enum class）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">Color</span> &#123; Red, Green, Blue &#125;;</span><br><span class="line">Color c = Color::Red; <span class="comment">// 强类型枚举</span></span><br></pre></td></tr></table></figure></li></ol><p>以上是C++11引入的一些主要新特性及其简单示例，这些特性极大地增强了C++的功能和灵活性。</p><h1 id="3-C-14-新特性"><a href="#3-C-14-新特性" class="headerlink" title="3 C++14 新特性"></a>3 C++14 新特性</h1><h2 id="1-二进制字面量"><a href="#1-二进制字面量" class="headerlink" title="1. 二进制字面量"></a>1. 二进制字面量</h2><p>C++14 引入了二进制字面量，允许使用 <code>0b</code> 或 <code>0B</code> 前缀来表示二进制数字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> binaryNum = <span class="number">0b101010</span>; <span class="comment">// 二进制 101010 等于十进制 42</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;二进制 101010 的十进制值是: &quot;</span> &lt;&lt; binaryNum &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 使用二进制字面量时，必须在编译器开启 C++14 标准的情况下编译代码。</p><h2 id="2-泛型-Lambda-表达式"><a href="#2-泛型-Lambda-表达式" class="headerlink" title="2. 泛型 Lambda 表达式"></a>2. 泛型 Lambda 表达式</h2><p>在 C++14 中，Lambda 表达式支持模板参数，可以使用 <code>auto</code> 作为参数类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> print = [](<span class="keyword">auto</span> n) &#123; std::cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">        <span class="built_in">print</span>(num); <span class="comment">// 调用 泛型 Lambda</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 泛型 Lambda 可能在某些老旧的编译器上不被支持，请确认编译器版本。</p><h2 id="3-std-make-unique"><a href="#3-std-make-unique" class="headerlink" title="3. std::make_unique"></a>3. std::make_unique</h2><p>C++14 引入了 <code>std::make_unique</code> 来简化 <code>std::unique_ptr</code> 的创建，避免手动使用 <code>new</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> ptr = std::<span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">42</span>); <span class="comment">// 创建一个 unique_ptr 并初始化</span></span><br><span class="line">    std::cout &lt;&lt; *ptr &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 使用 <code>std::make_unique</code> 可以防止内存泄漏，但是请确保使用 C++14 或更高版本编译。</p><h2 id="4-返回类型推导"><a href="#4-返回类型推导" class="headerlink" title="4. 返回类型推导"></a>4. 返回类型推导</h2><p>C++14 允许推导函数的返回类型，可以使用 <code>auto</code> 关键字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b; <span class="comment">// 返回类型自动推导</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;3 + 5 = &quot;</span> &lt;&lt; <span class="built_in">add</span>(<span class="number">3</span>, <span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 使用返回类型推导时，确保函数体简单，编译器能够清晰推导出返回类型。</p><h2 id="5-std-shared-timed-mutex-和-std-shared-lock"><a href="#5-std-shared-timed-mutex-和-std-shared-lock" class="headerlink" title="5. std::shared_timed_mutex 和 std::shared_lock"></a>5. std::shared_timed_mutex 和 std::shared_lock</h2><p>C++14 引入了 <code>std::shared_timed_mutex</code> 和 <code>std::shared_lock</code>，支持更灵活的多线程锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shared_mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::shared_timed_mutex mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::shared_lock&lt;std::shared_timed_mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Reading data&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::shared_timed_mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Writing data&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(read)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(write)</span></span>;</span><br><span class="line"></span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 当在多线程环境下使用锁时，确保正确地管理锁的生命周期，避免死锁和资源竞争。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C++14 引入了多项新特性，增强了语言的灵活性和表达能力。在使用这些特性时，请注意兼容性和编译器支持情况，以确保代码的可移植性和稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【uiautomator】自动化测试camera【一】</title>
      <link href="/2024/11/11/Python/uiautomator2%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95camera_1/"/>
      <url>/2024/11/11/Python/uiautomator2%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95camera_1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>本文档是自己写andorid camera自动化测试的随笔<br>测试机器为<br>OPPO Find x7<br>测试Apk为oppo的系统相机.</p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h1><p>我电脑是有装conda环境的,所以我直接用conda创建虚拟环境专门用于相关的测试.<br>官网下的巨慢，直接去清华大学的镜像源下载速度快很多.<br><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a><br>下载对应的系统版本即可<br>linux对应sh文件.<br>windows直接双击exe文件安装即可.<br>我不是很喜欢直接破坏本机电脑的python环境,所以我创建了一个新的虚拟环境. 这种包管理更为安全，pip炸了就炸了 打不了删了重新建一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py3 python=3.7  #创建python3.7的虚拟环境</span><br><span class="line">conda activate  py3             #激活虚拟环境</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">conda deactivate               <span class="comment">#退出虚拟环境</span></span></span><br><span class="line">conda info --envs               #查看虚拟环境</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">conda environments:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">py2                      C:\Users\Admin\.conda\envs\py2</span></span><br><span class="line">py3                      C:\Users\Admin\.conda\envs\py3</span><br><span class="line">base                     D:\conda</span><br></pre></td></tr></table></figure><p>激活后会显示当前所在的环境名字，比如我这边是py3.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(py3) D:\Pr\demo&gt;</span><br></pre></td></tr></table></figure><p>安装需要的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install uiautomator2</span><br><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure><p>电脑要提前安装好相关的adb.直接去谷歌官网下就行，linux下直接apt-get install adb就行.<br>如果adb 版本有问题，可以到<a href="https://developer.android.com/studio/releases/platform-tools%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88.%E7%84%B6%E5%90%8E%E6%B7%BB%E5%8A%A0%E5%88%B0">https://developer.android.com/studio/releases/platform-tools下载最新版.然后添加到</a><br>我需要先获得测试apk的包名,本质上我都去调用一些api接口.<br>这个包名可以替换的.<br>清下log,然后开始抓log.开始抓log后打开你所用的camera app.<br>adb logcat -c<br>adb logcat -G 20M<br>adb logcat -b all &gt;main.txt<br>打开main.txt log<br>过滤log 关键字connect call<br>看到我这边打印的一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11-11 21:42:43.435  1458  8995 I CameraService: CameraService::connect call (PID 6159 &quot;com.oplus.camera&quot;, camera ID 5) and Camera API version 2</span><br></pre></td></tr></table></figure><p>com.oplus.camera 就是我用的测试apk的包名,对应的camera ID 5 就是我打开的相机的ID.<br>话说为什么是5,我记得后摄一般项目都是做成0.<br>一般remosaic的相机ID是会做别的映射，我打了好多不同模式的，没明白他的映射id是怎么做的.<br>等有机会我自己写个apk，给这个手机hal的信息慢慢剖出来看下人家产品是怎么做的.<br>11-11 21:53:24.108  1458 10185 I CameraService: CameraService::connect call (PID 6159 “com.oplus.camera”, camera ID 5) and Camera API version 2<br>11-11 21:53:27.274  1458  9223 I CameraService: CameraService::connect call (PID 6159 “com.oplus.camera”, camera ID 1) and Camera API version 2<br>11-11 21:53:46.899  1458  2400 I CameraService: CameraService::connect call (PID 6159 “com.oplus.camera”, camera ID 2) and Camera API version 2<br>扯远了.</p><h1 id="3-写个demo"><a href="#3-写个demo" class="headerlink" title="3 写个demo"></a>3 写个demo</h1><p>新建一个python文件,名字为oppoCam.py<br>写个简单的demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uiautomator2 <span class="keyword">as</span> u2</span><br><span class="line"><span class="keyword">import</span> yaml                         <span class="comment"># 引入yaml模块 预留我后续用这个做基本配置文件</span></span><br><span class="line"><span class="keyword">import</span> time                         <span class="comment"># 引入time模块 预留我后续用这个做延时</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    package = <span class="string">&quot;com.mediatek.camera&quot;</span> <span class="comment"># 设置需要运行的包名</span></span><br><span class="line"></span><br><span class="line">    sn = <span class="string">&#x27;YD9HVGXGZLA6ZHCQ&#x27;</span>         <span class="comment"># 设置手机序列号 adb devices -l 获取</span></span><br><span class="line"></span><br><span class="line">    d = u2.connect(sn)              <span class="comment"># 连接手机</span></span><br><span class="line">    d.app_start(package)            <span class="comment"># 启动app</span></span><br><span class="line">    <span class="built_in">print</span>(d.info)                   <span class="comment"># 打印手机信息</span></span><br></pre></td></tr></table></figure><p>第一次运行好像还会从github上下载ATX和uiautomator2的包,下载完后就可以运行了.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python oppoCam.py</span><br></pre></td></tr></table></figure><p>第二次运行就很快了.<br>我这边打印出来了一些信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(py3) D:\Pr\demo\py&gt;python oppoCam.py</span><br><span class="line">&#123;&#x27;currentPackageName&#x27;: &#x27;com.android.launcher&#x27;, &#x27;displayHeight&#x27;: 2256, &#x27;displayRotation&#x27;: 0, &#x27;displaySizeDpX&#x27;: 360, &#x27;displaySizeDpY&#x27;: 792, &#x27;displayWidth&#x27;: 1080, &#x27;productName&#x27;: &#x27;PHZ110&#x27;, &#x27;screenOn&#x27;: True, &#x27;sdkInt&#x27;: 34, &#x27;naturalOrientation&#x27;: True&#125;</span><br></pre></td></tr></table></figure><p>自此相关的准备工作都已经完成可以做后续的拍照&#x2F;切换&#x2F;录像等操作了.<br>剩余部分另外整理</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidCamera架构</title>
      <link href="/2024/11/10/Android/AndroidCamera%E6%9E%B6%E6%9E%84/"/>
      <url>/2024/11/10/Android/AndroidCamera%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>分层：将各层的接口和实现分开<br>Camera架构</p><h1 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h1><p>所在位置<br>    架构最顶层<br>作用<br>    负责跟用户交互<br>流程<br>    接受到用户上的UI操作<br>    将UI操作通过request操作下发<br>    接收到底层返回的信息并反馈给用户</p><h1 id="CameraFramework-Service"><a href="#CameraFramework-Service" class="headerlink" title="CameraFramework&#x2F;Service"></a>CameraFramework&#x2F;Service</h1><p>CameraFramework<br>    作用<br>        以jar包的形式运行在APP进程中<br>    流程<br>        暴露接口供app调用<br>        接收app的请求<br>        通过调用Camera AIDL跨进程接口将请求发送到camera service进行处理<br>        将相关的结果返回至app<br>Camera Service<br>    作用<br>        封装Camera AIDL跨进程接口<br>        独立进程 Android 系统启动初期运行起来</p><h1 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h1><p>内部加载Camera Hal Module<br>    遵循谷歌制定的标准Camera Hal3接口<br>    由OEM&#x2F;ODM实现Module</p><h1 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h1><p>CameraSensor 驱动&#x2F;AF&#x2F;otp等相关驱动。用于实现其基本逻辑</p><h1 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h1><p>camera最底层V4L2<br>物理实现部分&#x2F;dts&#x2F;相关设备树供电<br><img src="https://s2.loli.net/2024/11/10/iAr8ZIY4FcgGkMp.png" alt="camera架构.png"></p>]]></content>
      
      
      <categories>
          
          <category> camera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> camera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装完后操作</title>
      <link href="/2024/11/10/Linux/linux%E5%AE%89%E8%A3%85%E5%AE%8C%E5%90%8E%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/11/10/Linux/linux%E5%AE%89%E8%A3%85%E5%AE%8C%E5%90%8E%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基础操作"><a href="#1-基础操作" class="headerlink" title="1 基础操作"></a>1 基础操作</h1><p>ftp工具下载:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install filezilla</span><br><span class="line">sudo apt-get install filezilla-locales #工具包</span><br></pre></td></tr></table></figure><p>dpkg 警告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --reinstall install `dpkg --get-selections | grep &#x27;[[:space:]]install&#x27; | cut -f1`</span><br></pre></td></tr></table></figure><p>这些错误是说add-apt-repository的远程仓库没有这个文件，这个IP也是ping不通的。</p><p>添加的仓库保存在 &#x2F;etc&#x2F;apt&#x2F;sources.list.d目录下。删除对应的错误仓库文件即可</p><p>阿里镜像源</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted universe multiverse</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted universe multiverse</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted universe multiverse</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-proposed main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-proposed main restricted universe multiverse</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-backports main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-backports main restricted universe multiverse</p><p>运行权限chmod +x qt-opensource-linux-x64-android-5.8.0.run</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/apt/</span><br><span class="line">sudo cp sources.list sources.list.bak</span><br><span class="line">sudo cp sources.list sources.list.bak #更换镜像源</span><br></pre></td></tr></table></figure><p>ctrl + alt +t :打开终端</p><p>ctrl + d :关闭终端</p><p>ctrl + c:终止进程</p><p>win +e : 打开计算机</p><p>ctrl+s:阻断向终端输出</p><p>ctrl+q:恢复向终端输出</p><p>文件基本操作</p><p>-r 就是向下递归，不管有多少级目录，一并删除</p><p> -f 就是直接强行删除，不作任何提示的意思</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir test1 #创建文件夹</span><br><span class="line">rm -f main2.cpp #直接删除文件</span><br></pre></td></tr></table></figure><p>sudo apt-get autoclean                清理旧版本的软件缓存 sudo apt-get clean                    清理所有软件缓存 </p><p>sudo apt-get autoremove             删除系统不再使用的孤立软件 这三个命令主要清理升级缓存以及无用包的。</p><p>cpu:</p><p>查看物理cpu个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep &quot;physical id&quot;|sort |uniq|wc -l</span><br></pre></td></tr></table></figure><p>查看逻辑cpu个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep &quot;processor&quot;|wc -l</span><br></pre></td></tr></table></figure><p>查看cpu是几核的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep &quot;cores&quot;|uniq</span><br></pre></td></tr></table></figure><p>查看cpu的主频</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep MHz|uniq</span><br></pre></td></tr></table></figure><p>查看操作系统的内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">8  Intel(R) Core(TM) i5-8300H CPU @ 2.30GHz</span></span><br><span class="line">cat /proc/cpuinfo | grep physical | uniq -c</span><br><span class="line">getconf LONG_BIT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出64 当前工作在64位</span></span><br></pre></td></tr></table></figure><p>find命令如果出现   umount: &#x2F;run&#x2F;user&#x2F;1000&#x2F;gvfs: 权限不够</p><p>直接下面命令卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umount /run/user/1000/gvfs    // 卸载该文件</span><br><span class="line">rm -rf /run/user/1000/gvfs    // 删除该文件</span><br></pre></td></tr></table></figure><p>meld 比较工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meld main1.cpp main2.cpp</span><br></pre></td></tr></table></figure><p>解决：Gtk-Message: Failed to load module “canberra-gtk-module”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcanberra-gtk-module</span><br></pre></td></tr></table></figure><p>cp 复制操作</p><p>mv指令  mv before.txt after.txt</p><h2 id="1-1-vim"><a href="#1-1-vim" class="headerlink" title="1.1 vim"></a>1.1 vim</h2><p>按i进入插入模式</p><p>命令模式直接输入</p><p>语法高亮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntax enable</span><br></pre></td></tr></table></figure><p>显示行数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set nu</span><br></pre></td></tr></table></figure><p>突出当前行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set cursorline  </span><br></pre></td></tr></table></figure><p> 如何把另外一个文件的内容拷贝到你文件内容下</p><p>例子:把main.cpp的内容拷贝到光标所在的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r!cat main.cpp</span><br></pre></td></tr></table></figure><p>按下数字 0 光标移动到行首</p><p>ctrl + u :向上翻页</p><p>ctrl + d :向下翻页</p><p>H ：光标移至屏幕首行大写</p><p>M ：光标移至屏幕中间</p><p>L ：光标移至屏幕最末行</p><p>：数字 光标移动到指定行</p><p>跳转到文件末尾:shift+g  或在G</p><p>跳转到最后一行最后一个字符 shitf+g $</p><p>跳转到第一行的第一个字符:俩下g</p><p>复制粘贴:</p><p>:reg 查看粘贴板子</p><p>其他地方的内容复制过来”+p</p><p>要选中内容进行复制，先在命令模式下按 v 进入 Visual Mode，然后用方向键 或 hjkl 选择文本，再按 y 进行复制。</p><h2 id="1-2-apt-get"><a href="#1-2-apt-get" class="headerlink" title="1.2 apt-get"></a>1.2 apt-get</h2><p>ubuntun</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:apt-fast/stable</span><br><span class="line">sudo apt-get install apt-fast</span><br></pre></td></tr></table></figure><hr><p>sudo add-apt-repository ppa:apt-fast&#x2F;stable</p><p>sudo add-apt-repository ppa:saiarcot895&#x2F;myppa</p><p>是可以直接使用的，格式为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install/delete package</span><br><span class="line">sudo apt-get -f install                                   #修复安装</span><br><span class="line">sudo apt-get dist-upgrade                                 #升级系统</span><br><span class="line">sudo apt-get upgrade                                      #更新已安装的包</span><br><span class="line">apt-get source package                                    #下载该包的源代码</span><br><span class="line">sudo apt-get build-dep package                            #安装相关的编译环境</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean              #清理无用的包</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pip需要安装才能使用，配合virtualenvwrapper会锦上添花。安装过程如下（适用Ubuntu 10.10及以上版本），#使用格式为：pip install package。</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install python-pip python-dev build-essential</span><br><span class="line">sudo pip install --upgrade pip</span><br><span class="line">sudo pip install --upgrade virtualenv</span><br></pre></td></tr></table></figure><h2 id="1-3-工具"><a href="#1-3-工具" class="headerlink" title="1.3 工具"></a>1.3 工具</h2><p>liunx 下载哪些:</p><ol><li><p>视频:vlc ,ffmepg</p></li><li><p>编程:      g++,    gcc,     clion ,   Go ,   goland,    pycharm,  qt,   vscode     cmake</p></li><li><p>工具:       meld(比较),     obs-studio(录屏),   typora  (md笔记),   teamviewer,   火狐浏览器,plank</p></li><li><p>交流:       Tim  ,Wechat</p></li><li><p>网易云音乐</p></li><li><p>apt-fast </p><p>注意:clion&#x2F;goland&#x2F;pycharm若build卡顿，找到安装文件clion.vmoptions更改-Xmx1024m 将数字改大一点就行</p></li></ol><p>最小化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings set org.gnome.shell.extensions.dash-to-dock click-action &#x27;minimize&#x27;</span><br></pre></td></tr></table></figure><p>   apt-fast安装</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aria2    </span><br><span class="line">wget https://github.com/ilikenwf/apt-fast/archive/master.zip    </span><br><span class="line">unzip master.zip    </span><br><span class="line">cd apt-fast-master    </span><br><span class="line">sudo cp apt-fast /usr/bin    </span><br><span class="line">sudo cp apt-fast.conf /etc    </span><br><span class="line">sudo cp ./man/apt-fast.8 /usr/share/man/man8    </span><br><span class="line">sudo gzip /usr/share/man/man8/apt-fast.8   </span><br><span class="line">sudo cp ./man/apt-fast.conf.5 /usr/share/man/man5    </span><br><span class="line">sudo gzip /usr/share/man/man5/apt-fast.conf.5</span><br></pre></td></tr></table></figure><p>   安装wechat不能发送截图</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libjpeg62:i386</span><br></pre></td></tr></table></figure><p>画图工具：sudo apt-get install kolourpaint4</p><h1 id="2-python"><a href="#2-python" class="headerlink" title="2 python"></a>2 python</h1><p>sudo pip3 install安装软件的时候出现sudo: pip3找不到命令的解决方法如下图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>PIL 是一个 Python 图像处理库，是本课程使用的重要工具，使用下面的命令来安装 pillow（PIL）库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install --upgrade pip</span><br><span class="line">sudo pip3 install pillow</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install jieba</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir work &amp;&amp; cd work</span><br><span class="line">mkdir gephi &amp;&amp; cd gephi</span><br><span class="line">wget http://labfile.oss.aliyuncs.com/courses/677/gephi-0.9.1-linux.tar.gz                         #下载</span><br><span class="line">tar -zxvf gephi-0.9.1-linux.tar.gz     #解压 </span><br></pre></td></tr></table></figure><p>运行py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ascii.py ascii_dora.png</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;分析人物关系</p><h1 id="3-C"><a href="#3-C" class="headerlink" title="3 C++"></a>3 C++</h1><p>liunx下编译</p><p>g++ -o main main.cpp</p><h2 id="3-1-zlib"><a href="#3-1-zlib" class="headerlink" title="3.1 zlib"></a>3.1 zlib</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境:"></a>搭建环境:</h3><p>win10下有编译好的源码，直接添加lib和dll就能使用(cmakeGUI搭建vs项目build all,最后两个项目一个是动态库，一个是静态库)</p><p>liunx 下下载好zlib源码，进入源码目录执行以下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make </span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>安装成功后，可以在&#x2F;usr&#x2F;local&#x2F;lib下找到libz.a</p><p>libz.a是一个静态库，为了使用zlib的接口，我们必须在连接我们的程序时，libz.a链接进来。  只需在 链接命令后加<code>-lz /usr/llocal/lib/libz.a</code> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-lz /usr/local/lib/libz.a</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//原始数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> pchSrc[] = <span class="string">&quot;xxx....&quot;</span> ;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nSrcLen = <span class="built_in">sizeof</span>(pchSrc);</span><br><span class="line">    <span class="comment">//压缩之后的数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> achComp[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nCompLen = <span class="number">1024</span> ;</span><br><span class="line">    <span class="comment">//解压缩之后的数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> achUncomp[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nUncompLen = <span class="number">1024</span> ;</span><br><span class="line">    <span class="comment">//压缩</span></span><br><span class="line">    <span class="built_in">compress</span>(achComp,&amp;nCompLen, pchSrc,nSrcLen);</span><br><span class="line">    <span class="comment">//解压缩</span></span><br><span class="line">    <span class="built_in">uncompress</span>(achUncomp,&amp;nUncompLen, achComp,nCompLen);</span><br><span class="line">    <span class="comment">//显示原始数据信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数据(%d):\n%s\n\n&quot;</span>, nSrcLen,pchSrc);</span><br><span class="line">    <span class="comment">//显示压缩之后的数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;压缩数据(%d):\n%s\n\n&quot;</span>, nCompLen,achComp);</span><br><span class="line">    <span class="comment">//显示解压缩之后的数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解压数据(%d):\n%s\n\n&quot;</span>, nUncompLen,achUncomp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#clion配置中需要在CMakeLists.txt添加以下内容</span></span><br><span class="line"><span class="keyword">SET</span>(CMAKE_EXE_LINKER_FLAGS</span><br><span class="line">        <span class="string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -Wl,-rpath -Wl,/usr/local/lib&quot;</span>)</span><br><span class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(/usr/local/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">TARGET_LINK_LIBRARIES</span>(<span class="keyword">test</span> libz.a)<span class="comment">#test为项目名称</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基础压缩"><a href="#基础压缩" class="headerlink" title="基础压缩"></a>基础压缩</h4><p><strong>compress</strong>和<strong>uncompress</strong>是最基本的两个,分别用于压缩和解压</p><p>函数原型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ZEXTERN <span class="type">int</span> ZEXPORT compress <span class="title">OF</span><span class="params">((Bytef *dest, uLongf *destLen,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 <span class="type">const</span> Bytef *source, uLong sourceLen))</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ZEXTERN <span class="type">int</span> ZEXPORT uncompress <span class="title">OF</span><span class="params">((Bytef *dest, uLongf *destLen,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="type">const</span> Bytef *source, uLong sourceLen))</span></span>;</span><br></pre></td></tr></table></figure><p>参数类型<code>Bytef</code>表示字节流，它与字符串有所不同，字节流没有结束符，因而需要配备长度信息，处理字符串的时候需要把结束符也当成一个普通的字节。 而<code>uLongf</code>则用于指明长度信息了， 其实相当于<code>unsigned long</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改后demo</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//原始数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> pchSrc[] = <span class="string">&quot;xxx....&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nSrcLen = <span class="built_in">sizeof</span>(pchSrc);</span><br><span class="line">    <span class="comment">//压缩之后的数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> achComp[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nCompLen = <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">//解压缩之后的数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> achUncomp[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nUncompLen = <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">//压缩</span></span><br><span class="line">    <span class="built_in">compress</span>(achComp, &amp;nCompLen, pchSrc, nSrcLen);</span><br><span class="line">    <span class="comment">//解压缩</span></span><br><span class="line">    <span class="built_in">uncompress</span>(achUncomp, &amp;nUncompLen, achComp, nCompLen);</span><br><span class="line">    <span class="comment">//显示原始数据信息</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原始数据:&quot;</span> &lt;&lt; pchSrc &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;压缩数据:&quot;</span> &lt;&lt; achComp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解压缩数据:&quot;</span> &lt;&lt; achUncomp &lt;&lt; endl;</span><br><span class="line"><span class="comment">//    printf(&quot;原始数据(%d):\n%s\n&quot;, nSrcLen,pchSrc);</span></span><br><span class="line"><span class="comment">//    //显示压缩之后的数据</span></span><br><span class="line"><span class="comment">//    printf(&quot;压缩数据(%d):\n%s\n&quot;, nCompLen,achComp);</span></span><br><span class="line"><span class="comment">//    //显示解压缩之后的数据</span></span><br><span class="line"><span class="comment">//    printf(&quot;解压数据(%d):\n%s\n&quot;, nUncompLen,achUncomp);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-cmake"><a href="#3-2-cmake" class="headerlink" title="3.2 cmake"></a>3.2 cmake</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>) <span class="comment">#cmkae最低版本</span></span><br><span class="line"><span class="keyword">project</span>(leetcode)<span class="comment">#项目名字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)<span class="comment">#c++14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(leetcode main.cpp)<span class="comment">#往项目中添加文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定头文件目录</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定CMake编译最低要求版本</span></span><br><span class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">3.14</span>)</span><br><span class="line"><span class="comment">#给项目命名</span></span><br><span class="line"><span class="keyword">PROJECT</span>(MYPRINT)</span><br><span class="line"><span class="comment">#收集c/c++文件并赋值给变量SRC_LIST_CPP  $&#123;PROJECT_SOURCE_DIR&#125;代表区当前项目录</span></span><br><span class="line"><span class="keyword">FILE</span>(GLOB SRC_LIST_CPP <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">FILE</span>(GLOB SRC_LIST_C <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.c)</span><br><span class="line"><span class="comment">#指定头文件目录</span></span><br><span class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment">#指定生成库文件的目录</span></span><br><span class="line"><span class="keyword">SET</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment">#去变量SRC_LIST_CPP 与SRC_LIST_C 指定生成libmyprint 动态库   默认生成静态库  SHARED指定生成库类型为动态库</span></span><br><span class="line"><span class="keyword">ADD_LIBRARY</span>(myprint SHARED <span class="variable">$&#123;SRC_LIST_CPP&#125;</span> <span class="variable">$&#123;SRC_LIST_C&#125;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-3-thread"><a href="#3-3-thread" class="headerlink" title="3.3 thread"></a>3.3 thread</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//liunx 下线程需要在cmake文件下添加库</span></span><br><span class="line"><span class="built_in">find_package</span>(Threads REQUIRED)</span><br><span class="line"><span class="built_in">target_link_libraries</span>(Test1 Threads::Threads)</span><br></pre></td></tr></table></figure><p>测试代码：创建5个线程&#x2F;&#x2F;非11标准以上的写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NUM_THREADS = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">say_hello</span><span class="params">(<span class="type">void</span>* args)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义线程的id变量，多个变量使用数组</span></span><br><span class="line">    <span class="type">pthread_t</span> tids[NUM_THREADS];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_THREADS ;++i)&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;tids[i], <span class="literal">NULL</span>,say_hello, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret !=<span class="number">0</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;pthread_create error: error_code=&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>  NUM_THREADS = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">PrintHello</span><span class="params">(<span class="type">void</span> *threadid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 对传入的参数进行强制类型转换，由无类型指针变为整形数指针，然后再读取</span></span><br><span class="line">    <span class="type">int</span> tid = *((<span class="type">int</span>*)threadid);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello Runoob! 线程 ID, &quot;</span> &lt;&lt; tid &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> threads[NUM_THREADS];</span><br><span class="line">    <span class="type">int</span> indexes[NUM_THREADS];<span class="comment">// 用数组来保存i的值</span></span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; NUM_THREADS; i++ )&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;main() : 创建线程, &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        indexes[i] = i; <span class="comment">//先保存i的值</span></span><br><span class="line">        <span class="comment">// 传入的时候必须强制转换为void* 类型，即无类型指针</span></span><br><span class="line">        rc = <span class="built_in">pthread_create</span>(&amp;threads[i], <span class="literal">NULL</span>,</span><br><span class="line">                            PrintHello, (<span class="type">void</span> *)&amp;(indexes[i]));</span><br><span class="line">        <span class="keyword">if</span> (rc)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Error:无法创建线程,&quot;</span> &lt;&lt; rc &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程传递信息:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">conts <span class="type">int</span> NUM_THREADS = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">thread_data</span> &#123;</span><br><span class="line">    <span class="type">int</span> thread_id;</span><br><span class="line">    <span class="type">char</span> *message;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">PrintHello</span><span class="params">(<span class="type">void</span> *threadarg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">thread_data</span> *my_data;</span><br><span class="line"></span><br><span class="line">    my_data = (<span class="keyword">struct</span> thread_data *) threadarg;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Thread ID : &quot;</span> &lt;&lt; my_data-&gt;thread_id;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; Message : &quot;</span> &lt;&lt; my_data-&gt;message &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> threads[NUM_THREADS];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">thread_data</span> td[NUM_THREADS];</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM_THREADS; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;main() : creating thread, &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        td[i].thread_id = i;</span><br><span class="line">        td[i].message = (<span class="type">char</span> *) <span class="string">&quot;This is message&quot;</span>;</span><br><span class="line">        rc = <span class="built_in">pthread_create</span>(&amp;threads[i], <span class="literal">NULL</span>,</span><br><span class="line">                            PrintHello, (<span class="type">void</span> *) &amp;td[i]);</span><br><span class="line">        <span class="keyword">if</span> (rc) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Error:unable to create thread,&quot;</span> &lt;&lt; rc &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-OpenGl"><a href="#4-OpenGl" class="headerlink" title="4 OpenGl"></a>4 OpenGl</h1><p>下载OpenGL需要的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libgl1-mesa-dev  </span><br><span class="line">sudo apt-get install freeglut3-dev  </span><br><span class="line">sudo apt-get install libglew-dev libsdl2-dev libsdl2-image-dev libglm-dev libfreetype6-dev</span><br></pre></td></tr></table></figure><p>需要在cmake中添加如下内容</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(OpenGL REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(GLUT REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OPENGL_INCLUDE_DIRS&#125;</span> <span class="variable">$&#123;GLUT_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;OPENGL_LIBRARIES&#125;</span> <span class="variable">$&#123;GLUT_LIBRARY&#125;</span>)</span><br></pre></td></tr></table></figure><p>demo代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="built_in">glMatrixMode</span>(GL_PROJECTION);</span><br><span class="line">    <span class="built_in">glOrtho</span>(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="built_in">glMatrixMode</span>(GL_MODELVIEW);</span><br><span class="line">    <span class="built_in">gluLookAt</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="built_in">glColor3f</span>(<span class="number">1.0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">glutWireTeapot</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">glFlush</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glutInit</span>(&amp;argc, argv);</span><br><span class="line">    <span class="built_in">glutInitDisplayMode</span>(GLUT_RGB | GLUT_SINGLE);</span><br><span class="line">    <span class="built_in">glutInitWindowPosition</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">glutInitWindowSize</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    <span class="built_in">glutCreateWindow</span>(<span class="string">&quot;OpenGL 3D View&quot;</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">glutDisplayFunc</span>(display);</span><br><span class="line">    <span class="built_in">glutMainLoop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-ncurses"><a href="#5-ncurses" class="headerlink" title="5 ncurses"></a>5 ncurses</h1><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev</span><br></pre></td></tr></table></figure><p>测试demo</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ncurses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">initscr</span>();</span><br><span class="line">    <span class="built_in">raw</span>();</span><br><span class="line">    <span class="built_in">noecho</span>();</span><br><span class="line">    <span class="built_in">curs_set</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* c = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="built_in">mvprintw</span>(LINES/<span class="number">2</span>,(COLS-<span class="built_in">strlen</span>(c))/<span class="number">2</span>,c);</span><br><span class="line">    <span class="built_in">refresh</span>();</span><br><span class="line">    <span class="built_in">getch</span>();</span><br><span class="line">    <span class="built_in">endwin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -o test -lncurses</span><br></pre></td></tr></table></figure><h1 id="6-Opencv"><a href="#6-Opencv" class="headerlink" title="6 Opencv"></a>6 Opencv</h1><h2 id="6-1-环境搭建"><a href="#6-1-环境搭建" class="headerlink" title="6.1 环境搭建"></a>6.1 环境搭建</h2><p>先装好依赖项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev</span><br><span class="line">sudo apt-get install libopencv-dev</span><br></pre></td></tr></table></figure><p>下载好源码后进入到源码目录</p><p>创建一个目录编译opencv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure><p>cmake一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure><p>执行编译过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j8</span><br></pre></td></tr></table></figure><p>将make生成的文件安装到系统目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install </span><br></pre></td></tr></table></figure><p>配置环境</p><p>打开文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>再打开的文件添加makefile安装路劲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure><p>再运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>cmakelist.txt添加如下内容</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(/usr/local/<span class="keyword">include</span>/opencv4/opencv2)</span><br><span class="line"><span class="keyword">set</span> (OpenCV_LIBS /usr/local/lib)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(helloCV <span class="variable">$&#123;OpenCV_LIBS&#125;</span>) <span class="comment">#helloCV 工程名字</span></span><br></pre></td></tr></table></figure><p>demon代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;../test.jpeg&quot;</span>);</span><br><span class="line"> <span class="comment">//   cout&lt;&lt;img;</span></span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;My picture: &quot;</span>&lt;&lt; img.<span class="built_in">size</span>() &lt;&lt;endl;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;image&quot;</span>,img);</span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现报错：<br>Gtk-Message: 21:57:35.293: Failed to load module “canberra-gtk-module”<br>则安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcanberra-gtk-module</span><br></pre></td></tr></table></figure><p>查看opencv安装的库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv --libs</span><br></pre></td></tr></table></figure><p>查看opencv安装的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv --modversion</span><br></pre></td></tr></table></figure><p>查看opencv安装路劲</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -iname &quot;*opencv*&quot; &gt; /home/xtt/Desktop/opencv_find.txt</span><br></pre></td></tr></table></figure><h1 id="7-SDL2"><a href="#7-SDL2" class="headerlink" title="7 SDL2"></a>7 SDL2</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sdl2</span></span><br><span class="line">sudo apt-get install libsdl2-2.0</span><br><span class="line">sudo apt-get install libsdl2-dev</span><br><span class="line">sudo apt-get install libsdl2-mixer-dev</span><br><span class="line">sudo apt-get install libsdl2-image-dev</span><br><span class="line">sudo apt-get install libsdl2-ttf-dev</span><br><span class="line">sudo apt-get install libsdl2-gfx-dev</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sdl1.1</span></span><br><span class="line">sudo apt-get install libsdl1.2-dev</span><br><span class="line">sudo apt-get install libsdl-image1.2-dev</span><br><span class="line">sudo apt-get install libsdl-mixer1.2-dev</span><br><span class="line">sudo apt-get install libsdl-ttf2.0-dev</span><br><span class="line">sudo apt-get install libsdl-gfx1.2-dev</span><br></pre></td></tr></table></figure><p>检测SDL装上了没有：</p><p>sdl-config –exec-prefix –version –cflag</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL/SDL.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    res = <span class="built_in">SDL_Init</span>(SDL_INIT_EVENTTHREAD);</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;SDL init success!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;SDL init fail!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译  </p><p>-lSDL</p><h1 id="8-个人博客"><a href="#8-个人博客" class="headerlink" title="8 个人博客"></a>8 个人博客</h1><h2 id="8-1-下载nodejs"><a href="#8-1-下载nodejs" class="headerlink" title="8.1 下载nodejs"></a>8.1 下载nodejs</h2><p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>解压进入到bin文件夹下运行.&#x2F;node -v</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/xtt/nodejs/bin/npm /usr/local/bin/</span><br><span class="line">sudo ln -s /home/xtt/nodejs/bin/node /usr/local/bin/</span><br></pre></td></tr></table></figure><p>在别的目录下  确认是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v  </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载cnpm</span></span><br><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br><span class="line">sudo ln -s /home/xtt/nodejs/bin/cnpm /usr/local/bin/cnpm  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载cnpm</span></span><br></pre></td></tr></table></figure><p>hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/xtt/nodejs/bin/hexo /usr/local/bin/hexo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>hexo -v 验证</p><p>进入创建好的博客目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>需要退出后创建新</p><p>hexo n “第一篇博客”</p><p>博客的md文件会自动生产放在下面路劲</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd source/_posts/</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">sudo cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>设置_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line"></span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/JoeNero/JoeNero.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>hexo d</p><p>创建博客md</p><p>hexo n “博客”</p><p>清空数据库</p><p>hexo clean</p><p>生产数据库</p><p>hexo g</p><p>推送</p><p>hexo d </p><h1 id="9-github"><a href="#9-github" class="headerlink" title="9 github"></a>9 github</h1><p>下载git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>检查下载版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><p>下载ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh  </span><br></pre></td></tr></table></figure><p>检查ssh服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示sshd的话表示ssh-server已经启动</span></span><br></pre></td></tr></table></figure><p>使用  命令查看 ssh key 是否存在，若存在则忽略这一步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;526988861@qq.com&quot;</span><br></pre></td></tr></table></figure><p>clone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 网址</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add readme.md #将文件添加到暂存区域</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;add readme file&quot; #提交本次修改</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master#推送到远程仓库</span><br></pre></td></tr></table></figure><h1 id="10-服务器"><a href="#10-服务器" class="headerlink" title="10 服务器"></a>10 服务器</h1><p>ssh 链接服务器<br>sudo ssh <a href="mailto:&#x77;&#101;&#x69;&#x62;&#111;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#46;&#x31;&#57;&#49;&#x2e;&#50;&#51;&#x31;">&#x77;&#101;&#x69;&#x62;&#111;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#46;&#x31;&#57;&#49;&#x2e;&#50;&#51;&#x31;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@IP</span><br></pre></td></tr></table></figure><p>ssh <a href="mailto:&#x72;&#x6f;&#111;&#116;&#x40;&#x31;&#48;&#x36;&#x2e;&#x31;&#x34;&#x2e;&#x32;&#56;&#x2e;&#49;&#51;&#x37;">&#x72;&#x6f;&#111;&#116;&#x40;&#x31;&#48;&#x36;&#x2e;&#x31;&#x34;&#x2e;&#x32;&#56;&#x2e;&#49;&#51;&#x37;</a><br>客户端到服务器<br>scp .&#x2F;filename username@IP:&#x2F;home&#x2F;bio321&#x2F;Desktop<br>服务器到客户端<br>scp .&#x2F;filename username@IP:&#x2F;home&#x2F;bio321&#x2F;Desktop<br>&#x2F;&#x2F;客户端<br>scp -r Kail <a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#x31;&#x30;&#x36;&#46;&#x31;&#x34;&#46;&#x32;&#x38;&#46;&#49;&#x33;&#x37;">&#114;&#111;&#111;&#x74;&#x40;&#x31;&#x30;&#x36;&#46;&#x31;&#x34;&#46;&#x32;&#x38;&#46;&#49;&#x33;&#x37;</a>:&#x2F;root&#x2F;liunx</p><p>teamviewer</p><p>1569607240</p><p>647emx</p><p>美化主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:numix/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install numix-gtk-theme numix-icon-theme-circle</span><br></pre></td></tr></table></figure><p>shell 美化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh #安装zsh</span><br><span class="line"></span><br><span class="line">zsh --version #确认是否安装成功</span><br><span class="line"></span><br><span class="line">sudo chsh -s $(which zsh)  #设置zsh为默认shell</span><br></pre></td></tr></table></figure><h1 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h1><p>右键添加运行终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere]</span><br><span class="line">&quot;ShowBasedOnVelocityId&quot;=dword:00639bc8</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere\command]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt随笔【一】</title>
      <link href="/2024/11/10/Qt/Qt%E9%9A%8F%E7%AC%94_1/"/>
      <url>/2024/11/10/Qt/Qt%E9%9A%8F%E7%AC%94_1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-linux-下注意点"><a href="#1-linux-下注意点" class="headerlink" title="1 linux 下注意点"></a>1 linux 下注意点</h1><p>找不到mysql.h文件</p><p>sudo apt-get install libmysqlclient-dev</p><p>编译太慢,更改</p><p>-j 4       4为线程 &lt;&#x3D; cpu的线程</p><p>缺少:-1: error: 找不到 -lGL<br>sudo apt-get install libgl1-mesa-dev</p><p>使用以下模块需要 实现下载这个 qt会自动查找</p><p>sudo apt-get install qtmultimedia5-dev</p><p>如果不行则加:</p><p>sudo apt-get install libpul se-dev</p><p>视频相关控件需要安装如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libpulse-dev</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT       += multimedia</span><br></pre></td></tr></table></figure><p>libusbzhic库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libusb-dev</span><br><span class="line">sudo apt-get install libusb-1.0-0-dev</span><br></pre></td></tr></table></figure><h1 id="2-布局管理"><a href="#2-布局管理" class="headerlink" title="2 布局管理"></a>2 布局管理</h1><h2 id="2-1-QGridLayout网格布局"><a href="#2-1-QGridLayout网格布局" class="headerlink" title="2.1 QGridLayout网格布局"></a>2.1 QGridLayout网格布局</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout-&gt;<span class="built_in">setRowStretch</span>(<span class="type">int</span> row, <span class="type">int</span> stretch);<span class="comment">//设置行比例系数</span></span><br><span class="line">layout-&gt;<span class="built_in">setColumnStretch</span>(<span class="type">int</span> column, <span class="type">int</span> stretch);<span class="comment">//设置列比例系数</span></span><br></pre></td></tr></table></figure><p>布局示意如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">layout-&gt;<span class="built_in">addWidget</span>(&amp;TestBtn1, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//往网格的不同坐标添加不同的组件</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(&amp;TestBtn2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(&amp;TestBtn3, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(&amp;TestBtn4, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h1 id="3-控件："><a href="#3-控件：" class="headerlink" title="3 控件："></a>3 控件：</h1><h2 id="QLable"><a href="#QLable" class="headerlink" title="QLable"></a>QLable</h2><p>显示数字</p><p>setText ( const QString &amp; )setText参数必须是QString类型才可以 你的变量如果是整形，可以直接转换，比如QString()::number( int num).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;labelTime-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(times));</span><br></pre></td></tr></table></figure><h2 id="QLCDNumber："><a href="#QLCDNumber：" class="headerlink" title="QLCDNumber："></a>QLCDNumber：</h2><p>lcd是直接通过方法value来获取当前显示的值，通过方法display来显示</p><p>QLCDNumber有以下几种模式：</p><p><a href="https://blog.csdn.net/xuancailinggan/article/details/qlcdnumber.html#setHexMode">setHexMode</a>()-十六进制</p><p><a href="https://blog.csdn.net/xuancailinggan/article/details/qlcdnumber.html#setDecMode">setDecMode</a>()-十进制</p><p><a href="https://blog.csdn.net/xuancailinggan/article/details/qlcdnumber.html#setOctMode">setOctMode</a>()-八进制</p><p><a href="https://blog.csdn.net/xuancailinggan/article/details/qlcdnumber.html#setBinMode">setBinMode</a>()-二进制</p><p>lcdNum-&gt;setDecMode();</p><h2 id="QTimer"><a href="#QTimer" class="headerlink" title="QTimer"></a>QTimer</h2><p>Q_DECL_OVERRIDE也就是c++的override</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># define Q_DECL_OVERRIDE override</span><br></pre></td></tr></table></figure><p>在重写虚函数时会用到，</p><p>作用是防止写错虚函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void keyPressEvent(QKeyEvent *event) Q_DECL_OVERRIDE;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件在QTimer文件下</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line">...</span><br><span class="line">QTimer *m_pTimer;</span><br><span class="line">m_pTimer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 设置超时间隔</span></span><br><span class="line">m_pTimer-&gt;<span class="built_in">setInterval</span>(<span class="number">100</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">connect</span>(m_pTimer, <span class="built_in">SIGNAL</span>(<span class="built_in">timeout</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">updateProgress</span>()));</span><br><span class="line">m_pTimer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);<span class="comment">//这一步会覆盖之前设置的时间间隔</span></span><br></pre></td></tr></table></figure><p>start()之后，每秒都会调用update()</p><p>可以通过设置setSingleShot(true)来让定时器只执行一次。也可以使用静态函数QTimer::singleShot()：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QTimer::singleShot(200, this, SLOT(updateCaption()));</span><br></pre></td></tr></table></figure><p>QTimer和lable配合显示系统时间</p><p>头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br></pre></td></tr></table></figure><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期/时间显示</span></span><br><span class="line">QTimer *timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(timer,<span class="built_in">SIGNAL</span>(<span class="built_in">timeout</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">timerUpdate</span>()));</span><br><span class="line">timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>定义成员函数timerUpdate()实现用户界面显示时间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">userwindow::timerUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QDateTime time = QDateTime::<span class="built_in">currentDateTime</span>();</span><br><span class="line"></span><br><span class="line">    QString str = time.<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss dddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ui-&gt;dateTime-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-QChart"><a href="#4-QChart" class="headerlink" title="4 QChart"></a>4 QChart</h1><p>.pro文件添加模块</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT +=charts</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用charts模板需要加入命名控件或者宏</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Qtcharts</span><br><span class="line">或者一个宏 QT_CHARTS_USE_NAMESPACE</span><br><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QChart&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QChartView&gt;</span></span></span><br><span class="line">...</span><br><span class="line">QChart *chart;</span><br><span class="line">QChartView *chartView;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//坐标系</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QValueAxis&gt;</span></span></span><br><span class="line">...</span><br><span class="line">QValueAxis *axisX;</span><br><span class="line">QValueAxis *axisY;</span><br><span class="line">...</span><br><span class="line">axisX-&gt;<span class="built_in">setRange</span>(<span class="number">0</span>, <span class="number">20</span>);    <span class="comment">//设置范围</span></span><br><span class="line">axisX-&gt;<span class="built_in">setLabelFormat</span>(<span class="string">&quot;%u&quot;</span>);   <span class="comment">//设置刻度的格式 y轴同理</span></span><br><span class="line">axisX-&gt;<span class="built_in">setTitleText</span>(<span class="string">&quot;X&quot;</span>);           <span class="comment">//设置描述</span></span><br><span class="line">axisY-&gt;<span class="built_in">setTitleText</span>(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line"><span class="comment">/************************************</span></span><br><span class="line"><span class="comment">    %u 无符号十进制整数</span></span><br><span class="line"><span class="comment">    %s 字符串</span></span><br><span class="line"><span class="comment">    %A 浮点数、十六进制数字和p-记法</span></span><br><span class="line"><span class="comment">    %c 一个字符</span></span><br><span class="line"><span class="comment">    %d 有符号十进制整数</span></span><br><span class="line"><span class="comment">    %e 浮点数、e-记数法</span></span><br><span class="line"><span class="comment">    %E 浮点数、E-记数法</span></span><br><span class="line"><span class="comment">    %f 浮点数、十进制记数法</span></span><br><span class="line"><span class="comment">    %g 根据数值不同自动选择％f或％e．</span></span><br><span class="line"><span class="comment">    %G 根据数值不同自动选择％f或％e.</span></span><br><span class="line"><span class="comment">    %i 有符号十进制数（与％d相同）</span></span><br><span class="line"><span class="comment">    %o 无符号八进制整数</span></span><br><span class="line"><span class="comment">    %p 指针</span></span><br><span class="line"><span class="comment">    %s 字符串</span></span><br><span class="line"><span class="comment">    %x/%X 使用十六进制数字0f的无符号十六进制整数</span></span><br><span class="line"><span class="comment">****************************************/</span></span><br><span class="line"><span class="comment">//标记的个数</span></span><br><span class="line">    axisX-&gt;<span class="built_in">setTickCount</span>(<span class="number">11</span>);           </span><br><span class="line">    axisY-&gt;<span class="built_in">setTickCount</span>(<span class="number">11</span>);</span><br><span class="line"><span class="comment">//次标记的个数</span></span><br><span class="line">axisX-&gt;<span class="built_in">setMinorTickCount</span>(<span class="number">1</span>);        <span class="comment">//设置每个大格里面小刻度线的数目</span></span><br><span class="line"><span class="comment">//    axisY-&gt;setMinorTickCount(1);</span></span><br><span class="line">chart-&gt;<span class="built_in">createDefaultAxes</span>(); <span class="comment">//建立默认坐标轴，不需要QValueAxis 默认是4x4大格子</span></span><br><span class="line"><span class="comment">//chart-&gt;axisY()-&gt;setRange(0, 10);//默认坐标轴限定范围</span></span><br><span class="line">chart-&gt;<span class="built_in">addAxis</span>(axisX, Qt::AlignBottom); <span class="comment">//下：Qt::AlignBottom  上：Qt::AlignTop</span></span><br><span class="line">chart-&gt;<span class="built_in">addAxis</span>(axisY, Qt::AlignLeft);   <span class="comment">//左：Qt::AlignLeft    右：Qt::AlignRight</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chart-&gt;<span class="built_in">setTitle</span>(<span class="string">&quot;曲线图实例&quot;</span>);</span><br><span class="line">chart-&gt;<span class="built_in">setAnimationOptions</span>(QChart::SeriesAnimations);<span class="comment">//设置曲线动画模式</span></span><br><span class="line">chart-&gt;<span class="built_in">legend</span>()-&gt;<span class="built_in">hide</span>(); <span class="comment">//隐藏图例</span></span><br><span class="line">chart-&gt;<span class="built_in">addSeries</span>(splineSeries);<span class="comment">//输入数据</span></span><br><span class="line">chart-&gt;<span class="built_in">setAxisX</span>(axisX, splineSeries);</span><br><span class="line">chart-&gt;<span class="built_in">setAxisY</span>(axisY, splineSeries);</span><br></pre></td></tr></table></figure><p>需要将chart添加到chartView</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chartView-&gt;<span class="built_in">show</span>();</span><br><span class="line">chartView-&gt;<span class="built_in">setChart</span>(chart);</span><br><span class="line">chartView-&gt;<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);<span class="comment">//防止图形走样</span></span><br></pre></td></tr></table></figure><h2 id="曲线图"><a href="#曲线图" class="headerlink" title="曲线图"></a>曲线图</h2><p>QSplineSeries</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSplineSeries&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">splineSeries = <span class="keyword">new</span> QSplineSeries;</span><br><span class="line"><span class="comment">//添加数据的两周方式</span></span><br><span class="line">splineSeries-&gt;<span class="built_in">append</span>(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">*splineSeries &lt;&lt; <span class="built_in">QPointF</span>(<span class="number">11</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">QPointF</span>(<span class="number">13</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">QPointF</span>(<span class="number">17</span>, <span class="number">6</span>)&lt;&lt; <span class="built_in">QPointF</span>(<span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//源数据添加到图表上</span></span><br><span class="line">chart-&gt;<span class="built_in">addSeries</span>(splineSeries);<span class="comment">//输入数据</span></span><br><span class="line">chart-&gt;<span class="built_in">setAxisX</span>(axisX, splineSeries);</span><br><span class="line">chart-&gt;<span class="built_in">setAxisY</span>(axisY, splineSeries);</span><br></pre></td></tr></table></figure><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>先包含头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QBarSet&gt;</span> </span></span><br></pre></td></tr></table></figure><p>QBarSet类表示条形图中的一组条形。<br>一个bar集包含每个类别的一个数据值。<br>假设集合的第一个值属于第一个类别，<br>第二个属于第二个类别，依此类推。<br>如果集合的值小于类别的值，则假设缺失值位于集合的末尾。对于位于集合中间的缺失值，则使用0的数值。<br>没有显示零值集的标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QBarSeries&gt;</span><br></pre></td></tr></table></figure><p>QBarSeries类表示的是柱状图数据，需要将相应的QBarSet添加进来</p><p>柱状图关系示意如下:</p><h2 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCharts/QPieSeries&gt;</span></span></span><br></pre></td></tr></table></figure><p>QPieSeries是一块饼图</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCharts/QPieSlice&gt;</span></span></span><br></pre></td></tr></table></figure><p>QPieSlice是饼图上的碎片</p><h1 id="5-QCustomPlot"><a href="#5-QCustomPlot" class="headerlink" title="5 QCustomPlot"></a>5 QCustomPlot</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT       += core gui printsupport</span><br></pre></td></tr></table></figure><p>选择项目的.pro文件，添加printsupport，如图，QCustomPlot包含了一些打印的东西，如果没有这一步，程序会报错</p><p>基类为QWidget：提升为<code>QCustomPlot</code></p><p>这里强调一下：Qt提升控件时，通常提升的类名称中，每个单词的首字母必须大写与Qt控件命名规则保持一致，各种第三方控件都采用这种命名格式，否则无法识别，如这里必须写成<code>QCustomPlot</code>而不能写成<code>Qcustomplot</code>或<code>qcustomplot</code></p><h1 id="动态库的调用"><a href="#动态库的调用" class="headerlink" title="动态库的调用"></a>动态库的调用</h1><h2 id="liunx"><a href="#liunx" class="headerlink" title="liunx"></a>liunx</h2><p>详细图例见dll文件</p><p>创建c++库，添加代码生成对应的.so文件</p><p>在debug文件下将.so文件后缀的复制到新建工程的debug文件下</p><p>并将相应的头文件添加到目标工程中</p><p>在.pro里面添加 如下 格式 -L.&#x2F;lib -l(文件名)  因为直接放在debug文件下所以直接 在该文件夹下找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIBS +=  -L -llibdll</span><br></pre></td></tr></table></figure><h1 id="Linux-下opencv的搭建"><a href="#Linux-下opencv的搭建" class="headerlink" title="Linux 下opencv的搭建"></a>Linux 下opencv的搭建</h1><p>在.pro文件中添加如下内容,根据个人情况,就是你opencv的安裝路勁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += /usr/local/include \</span><br><span class="line">                /usr/local/include/opencv4 \</span><br><span class="line"></span><br><span class="line">LIBS += /usr/local/lib/libopencv*</span><br></pre></td></tr></table></figure><p>有的人是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += /usr/local/include \</span><br><span class="line">                /usr/local/include/opencv \</span><br><span class="line">                /usr/local/include/opencv2</span><br><span class="line"></span><br><span class="line">LIBS += /usr/local/lib/lib*</span><br></pre></td></tr></table></figure><p>出现这个错误，只需要在对应的文件中添加头文件<br>#include &lt;opencv2&#x2F;highgui&#x2F;highgui_c.h&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/home/xtt/prj/Qt/pack/OpenNCC_View/OpenNCC_View/widget.cpp:330: error: ~~‘cvGetWindowHandle’~~ was not declared in this scope</span><br><span class="line">                 if (!cvGetWindowHandle(&quot;OpenNCC&quot;))</span><br><span class="line">                      ^~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><h1 id="Linux-下qt的打包"><a href="#Linux-下qt的打包" class="headerlink" title="Linux 下qt的打包"></a>Linux 下qt的打包</h1><p>将release 版本下的hi可执行文件拷到你新建的bin文件夹下</p><p>新建一个打包的脚本pack.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">exe=&quot;OpenNCC_View&quot; #需发布的程序名称</span><br><span class="line">des=&quot;/home/xtt/Qt/OpenNCC_View/bin&quot; #新建目录的完整路径</span><br><span class="line">deplist=$(ldd $exe|awk &#x27;&#123;if (match($3,&quot;/&quot;))&#123;printf(&quot;%s &quot;),$3&#125;&#125;&#x27;)</span><br><span class="line">cp $deplist $des</span><br></pre></td></tr></table></figure><p>运行脚本 sh pack.sh会在该文件夹下添加一些.so动态库</p><p>然后编写一个部署脚本</p><p>文件名和你的项目名字一致，这里的项目名字是OpenNCC_View，所以部署脚本是OpenNCC_View.sh</p><p>以下是该脚本的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span>  </span><br><span class="line">appname=`basename $0 | sed s,\.sh$,,`  </span><br><span class="line">dirname=`dirname $0`  </span><br><span class="line">tmp=&quot;$&#123;dirname#?&#125;&quot;  </span><br><span class="line">if [ &quot;$&#123;dirname%$tmp&#125;&quot; != &quot;/&quot; ]; then  </span><br><span class="line">dirname=$PWD/$dirname  </span><br><span class="line">fi  </span><br><span class="line">LD_LIBRARY_PATH=$dirname  </span><br><span class="line">export LD_LIBRARY_PATH  </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">dirname</span>/<span class="variable">$appname</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用軟件打包</p><h1 id="Window下打包程序"><a href="#Window下打包程序" class="headerlink" title="Window下打包程序"></a>Window下打包程序</h1><p>Win+r 打开dos命令 cmd</p><p>输入命令：</p><p>cd &#x2F;d H:\QT\Test\release</p><p>必须要加&#x2F;d 不然没办法进入目录</p><p>Qt Quick Application版本:</p><p>windeployqt  Test.exe</p><p>Test.exe 为release版本的exe</p>]]></content>
      
      
      <categories>
          
          <category> qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andoird编译文件mk说明</title>
      <link href="/2024/11/10/Android/Andoird%E7%BC%96%E8%AF%91%E6%96%87%E4%BB%B6mk%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/11/10/Android/Andoird%E7%BC%96%E8%AF%91%E6%96%87%E4%BB%B6mk%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="1-语法"><a href="#1-语法" class="headerlink" title="1 语法"></a>1 语法</h1><p>Android.mk 文件必须先定义 LOCAL_PATH 变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH :=$(call my-dir)</span><br></pre></td></tr></table></figure><p>此变量表示源文件在开发树中的位置。<br>在这行代码中，编译系统提供的宏函数 my-dir 将返回当前目录（Android.mk 文件本身所在的目录）的路径。<br>下一行声明 <code>CLEAR_VARS</code> 变量，其值由编译系统提供。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br></pre></td></tr></table></figure><p>CLEAR_VARS 变量指向一个特殊的 GNU Makefile，后者会清除许多 LOCAL_XXX 变量，例如 LOCAL_MODULE、LOCAL_SRC_FILES 和 LOCAL_STATIC_LIBRARIES。请注意，GNU Makefile 不会清除 LOCAL_PATH。此变量必须保留其值，因为系统在单一 GNU Make 执行环境（其中的所有变量都是全局变量）中解析所有编译控制文件。在描述每个模块之前，必须声明（重新声明）此变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := hello-jni</span><br></pre></td></tr></table></figure><p>每个模块名称必须唯一，且不含任何空格。编译系统在生成最终共享库文件时，会对您分配给 LOCAL_MODULE 的名称自动添加正确的前缀和后缀。例如，上述示例会生成名为 libhello-jni.so的库。<br>注意：如果模块名称的开头已经是 lib，则编译系统不会附加额外的 lib 前缀；而是按原样采用模块名称，并添加 .so 扩展名。因此，比如原来名为 libfoo.c 的源文件仍会生成名为 libfoo.so 的共享对象文件。此行为是为了支持 Android 平台源文件根据 Android.mk 文件生成的库；所有这些库的名称都以 lib 开头。<br>下一行会列举源文件，以空格分隔多个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_SRC_FILED :=hello-jni.c</span><br></pre></td></tr></table></figure><p>LOCAL_SRC_FILES 变量必须包含要编译到模块中的 C 和&#x2F;或 C++ 源文件列表。<br>最后一行帮助系统将所有的内容连接到一起:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure><p>BUILD_SHARED_LIBRARY 变量指向一个 GNU Makefile 脚本，该脚本会收集您自最近 include 以来在 LOCAL_XXX 变量中定义的所有信息。此脚本确定要编译的内容以及编译方式</p><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><h2 id="2-1-CLEAR-VARS"><a href="#2-1-CLEAR-VARS" class="headerlink" title="2.1 CLEAR_VARS"></a>2.1 CLEAR_VARS</h2><p>此变量指向的编译脚本用于取消定义下文“开发者定义的变量”部分中列出的几乎所有 LOCAL_XXX 变量。在描述新模块之前，请使用此变量来包含此脚本。使用它的语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br></pre></td></tr></table></figure><h2 id="2-2-BUILD-SHARED-LIBRARY"><a href="#2-2-BUILD-SHARED-LIBRARY" class="headerlink" title="2.2 BUILD_SHARED_LIBRARY"></a>2.2 BUILD_SHARED_LIBRARY</h2><p>此变量指向的编译脚本用于收集您在 LOCAL_XXX 变量中提供的模块的所有相关信息，以及确定如何根据您列出的源文件编译目标共享库。请注意，使用此脚本要求您至少已经为 LOCAL_MODULE 和 LOCAL_SRC_FILES 赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure><h2 id="2-3-BUILD-STATIC-LIBRARY"><a href="#2-3-BUILD-STATIC-LIBRARY" class="headerlink" title="2.3 BUILD_STATIC_LIBRARY"></a>2.3 BUILD_STATIC_LIBRARY</h2><p>用于编译静态库的 BUILD_SHARED_LIBRARY 的变体。编译系统不会将静态库复制到您的项目&#x2F;软件包中，但可以使用静态库编译共享库（请参阅下文的 LOCAL_STATIC_LIBRARIES 和 LOCAL_WHOLE_STATIC_LIBRARIES）。使用此变量的语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(BUILD_STATIC_LIBRARY)</span><br></pre></td></tr></table></figure><p>静态库变量会导致编译系统生成扩展名为 .a 的库</p><h2 id="2-4-PREBUILT-SHARED-LIBRARY"><a href="#2-4-PREBUILT-SHARED-LIBRARY" class="headerlink" title="2.4 PREBUILT_SHARED_LIBRARY"></a>2.4 PREBUILT_SHARED_LIBRARY</h2><p>指向用于指定预编译共享库的编译脚本。与 BUILD_SHARED_LIBRARY 和 BUILD_STATIC_LIBRARY的情况不同，这里的 LOCAL_SRC_FILES 值不能是源文件，而必须是指向预编译共享库的一个路径，例如 foo&#x2F;libfoo.so。使用此变量的语法为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure><h2 id="2-5-PREBUILT-STATIC-LIBRARY"><a href="#2-5-PREBUILT-STATIC-LIBRARY" class="headerlink" title="2.5 PREBUILT_STATIC_LIBRARY"></a>2.5 PREBUILT_STATIC_LIBRARY</h2><h1 id="3-目标信息变量"><a href="#3-目标信息变量" class="headerlink" title="3 目标信息变量"></a>3 目标信息变量</h1><h2 id="3-1-TARGET-ARCH"><a href="#3-1-TARGET-ARCH" class="headerlink" title="3.1 TARGET_ARCH"></a>3.1 TARGET_ARCH</h2><p>编译系统解析此 <code>Android.mk</code> 文件时面向的 CPU 系列。此变量是 <code>arm</code>、<code>arm64</code>、<code>x86</code> 或 <code>x86_64</code>之一。<br>编译系统解析此 Android.mk 文件时面向的 Android API 级别编号。例如，Android 5.1 系统映像对应于 Android API 级别 22：android-22。如需平台名称和对应 Android 系统映像的完整列表，请参阅 Android NDK 原生 API。以下示例演示了使用此变量的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifeq ($(TARGET_PLATFORM),android-22)</span><br><span class="line">        # ... do something ...</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>编译系统解析此 Android.mk 文件时面向的 Android API 级别编号。例如，Android 5.1 系统映像对应于 Android API 级别 22：android-22。如需平台名称和对应 Android 系统映像的完整列表，请参阅 Android NDK 原生 API。以下示例演示了使用此变量的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifeq ($(TARGET_ARCH_ABI),arm64-v8a)</span><br><span class="line">      # ... do something ...</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><table><thead><tr><th>CPU和架构</th><th>设置</th></tr></thead><tbody><tr><td>ARMv7</td><td>armeabi-v7a</td></tr><tr><td>ARMv8 AArch64</td><td>arm64-v8a</td></tr><tr><td>i686</td><td>x86</td></tr><tr><td>x86-64</td><td>x86_64</td></tr></tbody></table><h1 id="4-模块描述变量"><a href="#4-模块描述变量" class="headerlink" title="4 模块描述变量"></a>4 模块描述变量</h1><p>每个模块描述都应遵守以下基本流程：</p><ol><li>使用 CLEAR_VARS 变量初始化或取消定义与模块相关的变量。</li><li>   为用于描述模块的变量赋值。</li><li>   使用 BUILD_XXX 变量设置 NDK 编译系统，使其将适当的编译脚本用于该模块。</li></ol><p>LOCAL_PATH<br>此变量用于指定当前文件的路径，必须在Andorid.mk文件开头定义此变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH :=$(call my-dir)</span><br></pre></td></tr></table></figure><p>此变量用于存储模块名称。指定的名称必须唯一，并且不得包含任何空格。必须在包含任何脚本（CLEAR_VARS 的脚本除外）之前定义此变量。无需添加 lib 前缀或者 .so 或 .a 文件扩展名；编译系统会自动进行这些修改。在整个 Android.mk 和 Application.mk 文件中，请通过未经修改的名称引用模块。例如，以下行会导致生成名为 libfoo.so 的共享库模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := &quot;foo&quot;</span><br></pre></td></tr></table></figure><p>如果希望生成的模块使用除“lib + LOCAL_MODULE 的值”以外的名称，您可使用 LOCAL_MODULE_FILENAME 变量为生成的模块指定自己选择的名称。<br>此可选变量使您能够替换编译系统为其生成的文件默认使用的名称。例如，如果 LOCAL_MODULE 的名称为 foo，您可以强制系统将它生成的文件命名为 libnewfoo。以下示例演示了如何完成此操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := foo</span><br><span class="line">    LOCAL_MODULE_FILENAME := libnewfoo</span><br></pre></td></tr></table></figure><p>对于共享库模块，此示例将生成一个名为 libnewfoo.so 的文件。<br>注意：您无法替换文件路径或文件扩展名<br><strong>LOCAL_SRC_FILES</strong><br>此变量包含编译系统生成模块时所用的源文件列表。只列出编译系统实际传递到编译器的文件，因为编译系统会自动计算所有相关的依赖关系。请注意，您可以使用相对（相对于 LOCAL_PATH）和绝对文件路径。<br>注意：务必在编译文件中使用 Unix 样式的正斜杠 (&#x2F;)。编译系统无法正确处理 Windows 样式的反斜杠 ()。<br><strong>LOCAL_CPP_EXTENSION</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_CPP_EXTENSION := .cxx</span><br><span class="line">LOCAL_CPP_EXTENSION := .cxx .cpp .cc</span><br></pre></td></tr></table></figure><p>例如，要指明您的代码使用 RTTI（运行时类型信息），请输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_CPP_FEATURES := rtti</span><br></pre></td></tr></table></figure><p>要指明您的代码使用 C++ 异常，请输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_CPP_FEATURES := exceptions</span><br></pre></td></tr></table></figure><p>您还可以为此变量指定多个值。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">您还可以为此变量指定多个值。例如：</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2024/11/10/%E6%90%AD%E5%BB%BA/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/11/10/%E6%90%AD%E5%BB%BA/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>hexo 博客的搭建要依赖nodejs的组件<br>直接去官网nodejs.org下载即可<br>在浏览器中输入<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a><br>下载添加到环境变量中即可<br>win10 用户的环境变量和系统变量都添加然后重启就行.<br>因为我也不知道怎么让win10的环境变量生效,对于linux来说只要bash一下就可以了.</p><p>下载完验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">v22.11.0</span><br><span class="line">npm -v</span><br><span class="line">10.9.0</span><br></pre></td></tr></table></figure><p>打印出来node的版本信息,然后更换镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>用cnpm代替npm安装hexo架构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli  </span><br></pre></td></tr></table></figure><p>查看hexo的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>准备工作做的差不多了,该开始搭建了<br>创建一个你自己的文件，我这边是直接创建了blog文件<br>然后进入到这个文件中做初始化即可,这个要等等,不一定能拉全或者拉下来，可能还要改host文件.忘了以后再说</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>基础操作<br>启动默认端口是本地的4000端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>访问即可<a href="http://localhost:4000/">http://localhost:4000/</a><br>hexo init的时候回创建一个默认的markdown文件.<br>最常用的就是hexo g 生成静态文件<br>在hexo g之前先hexo clean一下,清除静态文件<br>然后hexo s查看改动后的效果</p><h1 id="托管"><a href="#托管" class="headerlink" title="托管"></a>托管</h1><p>github pages 托管<br>自检一个githu仓库，然后命名为username.github.io<br>hexo d 部署<br>要用hexo d部署的话,需要配置_config.yml文件,并且<br>要安装hexo-deployer-git<br>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件<br>这样子后我们再去配置_config.yml文件<br>在如下的位置添加自己部署的仓库和分支,然后hexo d部署即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span>  <span class="string">https://github.com/JoeForkYou/JoeForkYou.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>hexo d部署后,需要等待一段时间才能生效.<br>要访问的话直接输入类似我这种格式:<br><a href="https://joeforkyou.github.io/">https://joeforkyou.github.io/</a><br>自此一个简单的静态博客就搭建好了<br>搭建完后续的工作就是建立分类和搜索索引,这个我打算单独写一篇文章</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mtk_fd参数说明</title>
      <link href="/2024/11/10/Android/mtk-fd%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/11/10/Android/mtk-fd%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="1-参数说明"><a href="#1-参数说明" class="headerlink" title="1 参数说明"></a>1 参数说明</h1><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;custom&#x2F;mt6765&#x2F;hal&#x2F;camera&#x2F;camera_custom_fd.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;camera_custom_fd.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_fd_CustomizeData</span><span class="params">(FD_Customize_PARA  *FDDataOut)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FDDataOut-&gt;FDThreadNum = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;FDThreshold = <span class="number">256</span>;</span><br><span class="line">    FDDataOut-&gt;MajorFaceDecision = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;OTRatio = <span class="number">1088</span>;</span><br><span class="line">    FDDataOut-&gt;SmoothLevel = <span class="number">8</span>;</span><br><span class="line">    FDDataOut-&gt;Momentum = <span class="number">0</span>;</span><br><span class="line">    FDDataOut-&gt;MaxTrackCount = <span class="number">10</span>;</span><br><span class="line">    FDDataOut-&gt;FDSkipStep = <span class="number">2</span>;</span><br><span class="line">    FDDataOut-&gt;FDRectify = <span class="number">10</span>;</span><br><span class="line">    FDDataOut-&gt;FDRefresh = <span class="number">3</span>;</span><br><span class="line">    FDDataOut-&gt;SDThreshold = <span class="number">69</span>;</span><br><span class="line">    FDDataOut-&gt;SDMainFaceMust = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;SDMaxSmileNum = <span class="number">3</span>;</span><br><span class="line">    FDDataOut-&gt;GSensor = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;FDModel = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;OTFlow = <span class="number">1</span>;  <span class="comment">//0:Original Flow (FDRefresh:60)  , 1:New Flow (FDRefresh:3)</span></span><br><span class="line">    FDDataOut-&gt;UseCustomScale = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;FDSizeRatio = <span class="number">0.0</span>;  <span class="comment">// float:0~1</span></span><br><span class="line">    FDDataOut-&gt;SkipPartialFD = <span class="number">0</span>;</span><br><span class="line">    FDDataOut-&gt;SkipAllFD = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较常客制化的一些值及其意义：</p><p><strong>FDThreshold</strong> ： tune FD detection rate and false positive rate 。值越大代表检测的越严格。</p><p><strong>MajorFaceDecision</strong> ： 决定 face 排列方式。 value &#x3D; 0 or 1，value &#x3D; 0，则以Face Size的大小作为检测标准，也就是优先检测最大的人脸。value &#x3D; 1，优先检测在画面中心的人脸。Face AE,AF会参考Major Face资讯 。</p><p><strong>SmoothLevel</strong>：  决定人脸框的移动速度。value: 8~16 。值越大，跟随感越慢。 会把前面value的值平均作为下一次移动的参考。value值越大，人脸框移动会smooth，若人脸移动速度太快，则会出现人脸框跳动的情形。</p><p><strong>MaxTrackCount</strong>： 当人脸 lose 时，会用 tracking 机制继续 keep 的帧数。 </p><p><strong>GSensor</strong>： 是否使用 GSensor 资讯(AP带下来)。如果为0，则会做四个角度轮流侦测，initial detection time 会变慢。</p><p><strong>OTFlow</strong>： 只能是 1 且必须是 1 。</p><p><strong>FDSizeRatio</strong>： 用来设置过滤图中某个比例 以下的人脸。</p><p><strong>FDThreadNum</strong>：value 值增大时时会加大cpuloading，相对的检测Face的速度也快，该Thread主要跑的是FD Algo 。</p><p><strong>OTRatio</strong>:value越大，当周围环境change时，人脸框越不容易fail，缺点是可能追踪到不是人脸的物体 。</p><p><strong>Momentum</strong>:值可以是 0~3 。 0 &#x3D; force to project direction ；3 &#x3D; no reference project direction</p><p><strong>FDSkipStep</strong>:跳点，为了提高SW FD的performance 。</p><p><strong>FDRefresh</strong>:不是每一帧都做FD，若检测到Face后，接下来会做Face Tracking，若value &#x3D; 3，则做3次FaceTracking（几毫秒可以做</p><p>一次）。</p><p><strong>SDMainFaceMust</strong> :value &#x3D; 0 or 1，为0则会检测前面三张Face；为1，则需要根据MajorFaceDecision 的值确定，可能不会起作用 。</p><p><strong>FDModel</strong> :FD的核心是用某种算法training出来的model，不同的database或参数就会training出不同的model，也可以理解为侧重点不同。 </p><p>建议不要修改 OTRatio 、SmoothLevel 、FDRectify ，会影响 tracking。</p>]]></content>
      
      
      <categories>
          
          <category> camera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> camera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyton基础速通</title>
      <link href="/2024/11/10/Python/pyton%E5%9F%BA%E7%A1%80%E9%80%9F%E9%80%9A/"/>
      <url>/2024/11/10/Python/pyton%E5%9F%BA%E7%A1%80%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h1><h2 id="1-1-输出"><a href="#1-1-输出" class="headerlink" title="1.1 输出"></a>1.1 输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字是%s,我的国籍是%s&quot;</span>%(<span class="string">&quot;JoeNero&quot;</span>,<span class="string">&quot;中国&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a=%d&quot;</span>%age)</span><br></pre></td></tr></table></figure><h2 id="1-2-输入"><a href="#1-2-输入" class="headerlink" title="1.2 输入"></a>1.2 输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您刚才输入的密码是&quot;</span>,password)</span><br></pre></td></tr></table></figure><h2 id="1-3-注释"><a href="#1-3-注释" class="headerlink" title="1.3 注释"></a>1.3 注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单行注释</span></span><br></pre></td></tr></table></figure><h2 id="1-4-流程控制"><a href="#1-4-流程控制" class="headerlink" title="1.4 流程控制"></a>1.4 流程控制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">  执行语句</span><br><span class="line"><span class="keyword">elif</span> 条件:</span><br><span class="line">  执行语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> 执行语句</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">10</span></span><br><span class="line">  a++</span><br><span class="line">  <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line">  a = [<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;dd&quot;</span>]</span><br><span class="line"> <span class="keyword">for</span>  i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="built_in">print</span>(i,a[i])</span><br></pre></td></tr></table></figure><h1 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2 字符串"></a>2 字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">&quot;I said \&quot;I like you \&quot;&quot;</span> <span class="comment">#   \&quot;转义输出&quot;</span></span><br><span class="line"><span class="built_in">print</span>(my_str)</span><br></pre></td></tr></table></figure><p>输出打印字符串的片段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;chengdu&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">7</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">6</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>+<span class="string">&quot;123&quot;</span>) <span class="comment">#字符串链接</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cheng</span><br><span class="line">cheng</span><br><span class="line">hnd</span><br><span class="line">u</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello\n&quot;</span>)  <span class="comment">#\n转义字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;hello\n&quot;</span>) <span class="comment">#加r使转义字符失效</span></span><br></pre></td></tr></table></figure><h1 id="3-元组"><a href="#3-元组" class="headerlink" title="3 元组"></a>3 元组</h1><p>元组是不允许修改的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tup1 = () <span class="comment">#创建空的元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tup1))</span><br><span class="line"></span><br><span class="line">tup2 =(<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tup2))</span><br></pre></td></tr></table></figure><h1 id="4-函数"><a href="#4-函数" class="headerlink" title="4 函数"></a>4 函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h1 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h1><h2 id="5-1-打开"><a href="#5-1-打开" class="headerlink" title="5.1 打开"></a>5.1 打开</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;test.txt&quot;,&quot;w&quot;) #打开文件.w模式，写模式</span><br><span class="line"></span><br><span class="line">f.write(&quot;hello world JoeNero&quot;)  #将字符串写入文件中哦</span><br><span class="line"></span><br><span class="line">f = open(&quot;test.txt&quot;,&quot;r&quot;) #打开文件.r模式，</span><br><span class="line">content = f.read(5) #读取五个字符</span><br><span class="line">print(content)</span><br><span class="line">f.close() #关闭文件</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th></th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件.文件的指针会放在文件的开头。这是默认模式</td></tr><tr><td>w</td><td>打开一个文件只用于写入.如果该文件已存在则将其覆盖.如果该文件不存在.则创建新文件</td></tr><tr><td>a</td><td>打开一个文件用于追加.如果该文件已经存在.文件指针会放在文件的结尾<br>如果该文件不存在,创建新文件进行写入</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于写入.文件指针会放在文件的开头.这是默认模式</td></tr><tr><td>wb</td><td>以二进制的格式打开一个文件只用于写入.如果该文件存在，则会将其覆盖.如果文件不存在，创建新文件</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加.<br>如果该文件存在，文件指针将会放在文件的结尾.也就是说新的内容会被写入到以有内容之后.如果文件不存在,创建新文件进行写入</td></tr><tr><td>r+</td><td>打开一个文件用于读写.文件指针将会放在文件的开头</td></tr><tr><td>w+</td><td>打开一个文件用于读写.如果该文件已经存在，则覆盖.如果该文件不存在.创建新文件</td></tr><tr><td>a+</td><td>打开一个文件用于读写.如果该文件已经存在.文件指针将会放在文件的结尾.<br>文件打开时会追加模式.如果该文件不存在,创建新文件用于读写</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写.文件指针将会放在文件的开头</td></tr></tbody></table><h2 id="5-2-读取"><a href="#5-2-读取" class="headerlink" title="5.2 读取"></a>5.2 读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">content = f.readlines() <span class="comment">#一次性读取全部文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> content:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d:%s&quot;</span>%(i,temp))</span><br><span class="line">    i +=<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.rename(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test1.txt&quot;</span>) <span class="comment">#重命名</span></span><br></pre></td></tr></table></figure><h1 id="6-错误和异常"><a href="#6-错误和异常" class="headerlink" title="6 错误和异常"></a>6 错误和异常</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">except</span> IOErrpr:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">except</span> IOErrpr:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件关闭&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用基础命令</title>
      <link href="/2024/11/10/Linux/linux%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/11/10/Linux/linux%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>这个文件为系统apt 管理软件包的文件.图形化界面操作多了,就差不多忘记终端的以下基础.</p><p>知道这个文件就好,可以更改,也可以图形界面更改.</p><p>我们所使用的ubuntu系统是有自带的系统终端的. 我们平时操作都是在其中的桌面终端上操作的.一般是GNOME和KDA这种.</p><pre><code>/etc/apt/sources.list</code></pre><h1 id="1-内存"><a href="#1-内存" class="headerlink" title="1 内存"></a>1 内存</h1><pre><code>df -h #查看系统各个磁盘的占用情况</code></pre><p>du 是disk usage 的简称 用来显示目录或文件的大小,查找文件和目录的磁盘使用情况的命令.</p><pre><code>du -sh 查看当前文件所占用的空间du -sh * 查看当前文件夹下所有文件夹所占用的空间</code></pre><h1 id="2-adb"><a href="#2-adb" class="headerlink" title="2 adb"></a>2 adb</h1><p>adb (Android Debug Bridge)是一种允许模拟器或已经连接的Android设备进行通信的命令行共军,它可以为各种设备操作提供便利.如安装和调试应用.</p><p>查询已经连接的设备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>adb 调佣图片命令。 前提要在此路径下存在对应的图. 不然会调用起损坏的图片</p><pre><code>adb shell am start -a android.intent.action.VIEW -t image/png -d file://mnt/sdcard/Download/scene1_1.png</code></pre><p>拍照,拍照时间的keyevent 为27,所以 输入以下的命令就可以实现拍照.</p><pre><code>adb shell input keyevent 27</code></pre><p>adb 查看当前包名和activity.  这个可以配合调apk来使用.我们一般要先确定调用的是哪个apk和activity</p><pre><code>adb shell dumpsys window |grep mCurrentFocus</code></pre><p>输出打出以下的信息</p><pre><code>  mCurrentFocus=Window&#123;90dd2d3 u0 com.sec.android.app.camera/com.sec.android.app.camera.Camera&#125;</code></pre><p>那么adb 启动apk的方式</p><pre><code>adb shell am start -n com.sec.android.app.camera/com.sec.android.app.camera.Camera</code></pre><p>adb 回到home</p><pre><code>adb shell input keyevent 3</code></pre><p>查看设备安装的第三方应用</p><pre><code>adb shell pm list packages -3</code></pre><p>查看系统安装的应用</p><pre><code>adb shell pm list packages -s</code></pre><p>adb install</p><pre><code>-l 将应用安装到保护目录/mnt/asec-r 允许覆盖安装-t 允许安装AndroidManifest.xml里application 指定android:testOnly=&quot;true&quot;的应用-s 将应用安装到sdcard-d 允许降级覆盖安装</code></pre><p>adb install 实际分三步完成:<br>1.push apk 文件到&#x2F;data&#x2F;local&#x2F;tmp<br>2.调用pm install 安装<br>3.删除&#x2F;data&#x2F;local&#x2F;tmp 下的对应apk文件</p><p>与install 相反的是uninstall</p><p>adb uninstall  -k package-name</p><p>清楚应用缓存</p><p>adb shell pm clear &lt;package-name&gt;</p><p>查看应用安装路径</p><p>adb shell pm path &lt;package-name&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 26 #控制电源键，一般来控制息屏和亮屏</span><br><span class="line">adb shell input keyevent 82 #菜单键,用户版本才用到</span><br><span class="line">adb shell input keyevent 4 #返回键</span><br><span class="line">adb shell input keyevent 24 #增加音量</span><br><span class="line">adb shell input keyevent 25 #降低音量</span><br><span class="line">adb shell input keyevent 164 #静音</span><br><span class="line">adb shell input keyevent 224 #亮屏</span><br><span class="line">adb shell input keyevent 223 #熄屏</span><br></pre></td></tr></table></figure><p>查看屏幕分辨率</p><pre><code>adb shell wm size</code></pre><p>查看屏幕设备密度</p><pre><code>adb shell wm density</code></pre><h1 id="3-CP"><a href="#3-CP" class="headerlink" title="3 CP"></a>3 CP</h1><p>cp 是拷贝命令.</p><p>要是要拷贝文件只要加cp -r 即可</p><h1 id="4-VIM"><a href="#4-VIM" class="headerlink" title="4 VIM"></a>4 VIM</h1><p>vim 是一个比较好用的文本编辑器</p><p>正常调用vim 就即可. vim 后面接对应的文件,并且vim 打开文件时会在本地创建一个bak文件,用于奔溃的时候的备份.</p><p>而且vim 可以更改到系统级别的文件.意味着 什么文件都能改,</p><p>vim 的模式有很多种</p><p>一般我们用到插入(可编辑)模式和命令模式</p><p>输入i 就进去插入模式,可以进行文本编辑</p><p>输入o 插入到当前光标下行并且进入到插入模式.</p><p>输入esc就退出当前的模式，回到命令模式</p><p>在命令模式下直接输入,就会查找对应的文本. 按n 即可查找下一个  ,以下是一些常用的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/文本内容</span><br><span class="line">:wq  #保存并退出</span><br><span class="line">:w!  #强制保存</span><br><span class="line">:q   #退出</span><br><span class="line">:q!  #强制退出</span><br><span class="line">:w ! sudo tee # 保存只读文件</span><br><span class="line">:u  #撤掉当前的修改</span><br><span class="line">:行数 #跳转到对应的行数</span><br><span class="line">dd #删除当前行的内容</span><br></pre></td></tr></table></figure><h1 id="5-快捷键"><a href="#5-快捷键" class="headerlink" title="5 快捷键"></a>5 快捷键</h1><p>快捷键可以自己定义</p><p>当然系统默认好用快捷键如下:</p><pre><code>ctrl + shift +c #复制ctrl + shift +v #粘贴ctrl + shift + t #在当前终端栏边上打开终端  一般我不用ctrl +alt + t  那样打开的终端 很乱 ctrl + c #中断终端操作ctrl + d #退出当前窗口ctrl + q #关ctrl + r #查询调用历史输入的命令</code></pre><h1 id="6-shell"><a href="#6-shell" class="headerlink" title="6 shell"></a>6 shell</h1><p>我们这边提到的是<strong>命令行式shell</strong>,不是gnome KDE那种桌面式终端.</p><p>shell类似于DOS下的COMMAND.COM和后来的cmd.exe。它接收用户命令，然后调用相应的应用程序.</p><p>创建后缀为.sh</p><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><p>业界所说的 shell 通常都是指 shell 脚本，但要知道，shell 和 shell script 是两个不同的概念。</p><p>由于习惯的原因，简洁起见，都是指 shell 脚本编程，不是指开发 shell 自身。</p><pre><code>#!/bin/bashecho &quot;Hello World !&quot;</code></pre><p>#!  是一个约定的标记,它告诉系统这个脚本需要用什么解释器来执行,即使用哪一种shell</p><p>echo 命令用于向窗口输出文本.</p><p>作为可执行程序运行</p><pre><code>chmod +x ./test.sh #使脚本具有执行权限./test.sh #执行脚本</code></pre><h2 id="6-1-变量"><a href="#6-1-变量" class="headerlink" title="6.1 变量"></a>6.1 变量</h2><pre><code>your_name=&quot;somethings&quot;echo $your_nameecho$&#123;your_name&#125;</code></pre><p>循环打印变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for skill in JOJO nONONONO AMAZON java;do</span><br><span class="line">echo &quot;I am good at $&#123;skill&#125; Script&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="6-2-字符"><a href="#6-2-字符" class="headerlink" title="6.2 字符"></a>6.2 字符</h2><p>单引号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=&#x27;this is a string&#x27;</span><br></pre></td></tr></table></figure><p>双引号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=&quot;JoeNero&quot;</span><br><span class="line">str=&quot;hello ,I know you are \&quot;$your_name\&quot;! \n&quot;</span><br><span class="line">echo -e $str</span><br></pre></td></tr></table></figure><p>拼接字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用双引号拼接</span></span><br><span class="line">your_name=&#x27;JoeNero&#x27;</span><br><span class="line">greeting=&quot;hello ,&quot;$your_name&quot;!&quot;</span><br><span class="line">greeting_1=&quot;hello,$&#123;your_name&#125;!&quot;</span><br><span class="line">echo $greeting $greeting_1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用单引号拼接</span></span><br><span class="line">greeting_2=&#x27;hello ,&#x27;$your_name&#x27;!&#x27;</span><br><span class="line">greeting_3=&#x27;hello,$&#123;your_name&#125;!&#x27;</span><br><span class="line">echo $greeting_2 $greeting_3</span><br></pre></td></tr></table></figure><p>获取字符串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;abcd&quot;</span><br><span class="line"><span class="meta prompt_">echo$</span><span class="language-bash">&#123;#string&#125;</span></span><br></pre></td></tr></table></figure><p>提取子字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;runoob is a great site&quot;</span><br><span class="line">echo $&#123;string:1:4&#125;#输出unoo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意第一个字符的索引值为0</span></span><br></pre></td></tr></table></figure><p>查找字字符串</p><p>查找字符i或o的位置(哪个字母先出现就计算哪个)</p><pre><code>string=&quot;runoob is a great site&quot;echo `expr index &quot;$string&quot; io`</code></pre><h2 id="6-3-数组"><a href="#6-3-数组" class="headerlink" title="6.3 数组"></a>6.3 数组</h2><p>用括号来表示数组,数组元素用空格符号来分割.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">array_name=(1 2 3 4 5 6)</span><br><span class="line">array_name1=(</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">)</span><br><span class="line">array_name[0]=0</span><br><span class="line">array_name[1]=1</span><br><span class="line">array_name[2]=2</span><br></pre></td></tr></table></figure><p>读取数组的格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;数组名[下标]&#125;</span></span><br><span class="line">echo $&#123;array_name[@]&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取得数组元素的个数</span></span><br><span class="line">length=$&#123;#array_name[@]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">length=$&#123;#array_name[*]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span></span><br><span class="line">lengthn=$&#123;#array_name[n]&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-流控制"><a href="#6-4-流控制" class="headerlink" title="6.4 流控制"></a>6.4 流控制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num1=100</span><br><span class="line">num2=100</span><br><span class="line">if test $[num1] -eq $[num2]</span><br><span class="line">then</span><br><span class="line">    echo &#x27;两个数相等！&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &#x27;两个数不相等！&#x27;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>for 循环</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for loop in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">    echo &quot;The value is: $loop&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>while语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">int=1</span><br><span class="line">while(( $int&lt;=5 ))</span><br><span class="line">do</span><br><span class="line">    echo $int</span><br><span class="line">    let &quot;int++&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>无线循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while:</span><br><span class="line">do </span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><pre><code>while truedo     commanddone</code></pre><p>输入输出重定向文件在此不赘述</p><h1 id="7-LS"><a href="#7-LS" class="headerlink" title="7 LS"></a>7 LS</h1><p>ls 是list files的缩写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ll -t # 按照时间排序呈现当前目录下的文件内容</span><br><span class="line">ll -a # 显示隐藏文件</span><br><span class="line">ll -Sh # 按照文件大小排序显示当前目录下的文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XTS基础汇总</title>
      <link href="/2024/11/10/GMS/XTS%E6%B1%87%E6%80%BB%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/11/10/GMS/XTS%E6%B1%87%E6%80%BB%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>参考谷歌官网：<br><a href="https://source.android.google.cn/compatibility/tests/development">https://source.android.google.cn/compatibility/tests/development</a></p><h1 id="1-XTS-概述"><a href="#1-XTS-概述" class="headerlink" title="1 XTS 概述"></a>1 XTS 概述</h1><p>GMS全称为GoogleMobile Service，即谷歌移动服务。我们常说的XTS其实就谷歌认证<br>GMS是Google所提供的一系列移动服务，包括开发用的一系列服务和用户所用的Google Apps。<br>Maps与Location：地理位置相关服务，AOSP也包括一个简易的Location服务，这是升级版，有用但并非必要，国内也有百度、高德等提供了类似的API；<br>Games、Play Services、In-app Billing、Play Distribution：与Google Play相关的服务，毫无疑问这个在国内是用不到的，但如果要在Google Play上发布应用，则非常有用；**(GL和IN做大量测试的原因)** （GL 国外发型的版本: IN :印度发型的版本  有的项目是发往欧美或者东南亚的，都需要经过认证）<br>Google+、Drive、Cloud Platform、Cloud Messaging：与Google的社交网络和云平台相关的服务，前三个在国内也基本上用不到，第四个是推送服务对开发者非常有用，但国内有很多类似的第三方服务可替代；<br>Cast、Wallet、Ads：这里是Google推出的与Android平台关系不大的服务，Ads广告对开发者有用，但国内也有很多的移动广告平台和服务。<br>这些服务不是构建一个Android App所必需的，也可以使用其他的服务替代，因此，没有GMS对国内手机厂商影响没有想象那么大。**(CN少测的原因)**<br>Google Apps则包括Gmail、Google Maps等Google官方应用，这些系统应用对于一个完善的Android设备是很重要的，但是手机厂商也可以使用自己的或者第三方应用替代。<br>整个Android平台可以看成是：AOSP+GMS，AOSP（安卓开源项目）是所有手机厂商可以免费获得的开源代码，但GMS则需要Google同意授权才行。<br>Google给GMS认证设置了比较高的门槛。首先要通过CTS兼容性测试（Compatible Test Suite），一般而言所有的Android厂商都必须通过这个认证，否则会出现兼容性问题。这个认证一般由手机厂商自己做，然后提交结果给Google。<br><strong>AOSP是工具，GMS则是服务</strong></p><h2 id="1-1-CTS"><a href="#1-1-CTS" class="headerlink" title="1.1 CTS"></a>1.1 CTS</h2><p>谷歌官网:<br><a href="https://source.android.google.cn/compatibility/cts">https://source.android.google.cn/compatibility/cts</a></p><p>CTS是Compatibility Test Suite的缩写,即兼容测试，是Google为Android设备制造商免费提供的兼容性测试套件。</p><p>CTS 是一个自动化测试套件，包括两个主要的软件组件：</p><p>1.CTS Trade Federation</p><p>自动化测试框架会在桌面设备上运行，并管理测试执行情况。此框架可实现对多个被测设备 (DUT) 进行分片测试。您还可以利用套件重试功能仅重试失败的测试而不是完整的套件，从而大大减少重新运行所花的时间。</p><p>2.单独的测试用例会在 DUT 上执行。</p><p>测试用例采用 Java 语言编写为 JUnit 测试，并打包为 Android .apk 文件，以在实际目标设备上运行。</p><p>APP层跟Framework层在设计上是分开的，但通过CTS测试，确保了APP无Android Framework之间有一致的调用接口（API），这使得APP开发者编写的同一款程序可以运行在不同系统版本（向前兼容）、不同硬件平台、不同产商制造的不同设备上。<strong>如这个示例图.</strong></p><p><img src="https://i.loli.net/2021/11/13/UbfqzP8gvRhTpOy.png" alt="1.png"></p><p>CTS定义了众多Android设备必须满足的技术指标，以确保每台通过CTS认证的设备，都可以顺利运行Google Play中出售的软件。（并不是每个软件都可以在所有Android设备上运行，Google Play仅显示可以运行在该Android设备上的应用，并且还受到当地法律法规的限制。）<br><strong>CTS的目的就是让Android设备开发商能够开发出兼容性更好的Android设备。</strong></p><p>通过以上概述可以知道这些认证的本意是：</p><p>1.让APP提供更好的用户体验。用户可以选择更多的适合自己设备的APP。让APP更稳定。</p><p>2.让开发者设计更高质量的APP。</p><h2 id="1-2-GTS"><a href="#1-2-GTS" class="headerlink" title="1.2 GTS"></a>1.2 GTS</h2><p>GTS的全称是Google Mobile Services Test Suite，所谓的Google Mobile Services即谷歌移动服务<br>谷歌移动服务提供了Search、 Search by Voice、Gmail、Contact Sync、 Calendar Sync、Talk、 Maps、 Steet View、 YouTube、 Android Market (Play store)等服务，当用户使用谷歌时，谷歌可以把各种广告嵌入到谷歌的服务中。<br>这些服务依赖于网络.</p><h2 id="1-3-VTS"><a href="#1-3-VTS" class="headerlink" title="1.3 VTS"></a>1.3 VTS</h2><p>Android 目前有一个比较明显的缺点是<strong>设备升级到新版本系统所要花费的时间太长（比如从 Android 6.0 升级到 Android 7.0）</strong>。通常在由 Google 发布新版本的 AOSP 之后，还需要 SoC 厂商对 HAL 进行升级，以及 OEM 厂商对 HAL 和 Framework  进行升级后，用户才能在设备上收到 OTA 升级包的推送。低端一点的产品甚至在出厂后就不会再进行系统升级了。用户对此抱怨良多。反观竞争对手 iOS 在这方面就做得比较好（但这不代表我支持 iOS)<br> <strong>为了解决这个问题，于是 Google 发起了 Project  Treble 项目</strong>2017 年 5 月 12 日，官方在”Developers Blog”上向公众介绍了这一项目并宣布 Android  8.0 中将引入它，但从目前我拿到的描述 Project Treble 的相关文档的修订记录来看，这些文档最早的起草时间可以追溯到 2015 年 10 月 30 日。<br> 　　<strong>而 Project Treble 中最重要的就是新增了 Vendor Interface 这一概念，以及相应的 Vendor Test Suite (VTS) 测试。</strong></p><hr><p>Project Treble 中引入 Vendor Interface 的目的是将 Android Framework 与 HAL 分开，通过对Vendor Interface进行测试，确保同一个版本的Android Framework可以运行在不同的HAL上，或者Android Framework可以运行在同一个HAL，即保证HAL的向前兼容性。通过这样的Framework&#x2F;HAL分离设计和接口一致性保证，这就使得8.0版本之后的Android系统在进行升级时，可以直接对Framework进行升级而不用考虑HAL层的改动，从而缩短了用户手上设备得到系统升级OTA推送的时间。</p><h2 id="1-4-GSI"><a href="#1-4-GSI" class="headerlink" title="1.4 GSI"></a>1.4 GSI</h2><p>GSI是在VTS环境下用google img测试CTS用例,从andorid 11版本后面迁移道cts环境下跑测，是替换掉自己framework相关的内容，用谷歌原生的system.img</p><h2 id="1-5-CTS-V"><a href="#1-5-CTS-V" class="headerlink" title="1.5 CTS-V"></a>1.5 CTS-V</h2><p>CTS Verifier是CTS兼容性测试的补充。CTS检查的是可以自动化的API和功能，而CTS Verifier是测试在没有手动输入的静态设备上测试这些API和功能，例如音频质量，触摸屏，加速度计，相机等等.这边可以重点关注FOV和尺寸video相关的测试项.</p><h2 id="1-6-ITS"><a href="#1-6-ITS" class="headerlink" title="1.6 ITS"></a>1.6 ITS</h2><p>Android 相机图像测试套件 (ITS) 是 Android 兼容性测试套件 (CTS) 验证程序的一部分，其中包含用于验证图像内容的测试</p><p><code>scenes=sensor_fusion</code> </p><p>在传感器融合测试中，将分别针对 AR 和 VR 应用，测试相机和陀螺仪之间的时间戳差异，因此需要按特定轨迹移动相机。<br><code>REALTIME</code> 功能标记和 VR&#x2F;AR 应用要求相机&#x2F;陀螺仪的定时偏差小于 1 毫秒</p><p>ITS测试输出:</p><p>PASS：测试通过</p><p>FAIL：测试失败，必须修复</p><p>SKIP：跳过测试项</p><p>FAIL*：测试失败，目前可以不修复，但可能在未来的测试中变为强制性</p><p>注意:另外还有STS安全补丁包相关的测试,因为和camera无关,就没有提及,GTS大部分依赖的是服务，camera相关性低，也与我们无关,但是有camera测试项目,就顺带一提.</p><p>its测试的图表可以用另外一台平板电脑来提供</p><p><img src="https://i.loli.net/2021/11/29/JcXSDagpFMtvYfn.png" alt="平板要求.png"></p><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2 环境搭建"></a>2 环境搭建</h1><h2 id="2-1-CTS"><a href="#2-1-CTS" class="headerlink" title="2.1 CTS"></a>2.1 CTS</h2><p>CTS环境搭建只需要一个jdk和aapt</p><p>前者这个比较大问相关人员拿吧.<br>或者直接去官网拿对应的jdk:</p><p>这里放一个11版本的下载链接</p><p><a href="https://www.oracle.com/java/technologies/javase/javase11-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase11-archive-downloads.html</a></p><p>andorid 11后面要求的jdk&gt;&#x3D;11  </p><p>然后vim ~&#x2F;.bashrc 把对应的路径配置写入后:wq保存退出,source ~&#x2F;.bashrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">jdk</span></span><br><span class="line">export JAVA_HOME=/home/ubuntu/Jdk11</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><p>然后用以下命令检查jdk版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>输出打印</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version &quot;11&quot; 2018-09-25</span><br><span class="line">OpenJDK Runtime Environment 18.9 (build 11+28)</span><br><span class="line">OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)</span><br></pre></td></tr></table></figure><p>说明jdk配置成功</p><p>cts包下载路径:</p><p><a href="https://source.android.google.cn/compatibility/cts/downloads">https://source.android.google.cn/compatibility/cts/downloads</a></p><p>CTS会使用aapt工具,如下命令安装aapt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install aapt</span><br></pre></td></tr></table></figure><p>aapt 是什么？谷歌官网有很详细的介绍.</p><p><a href="https://developer.android.google.cn/studio/command-line/aapt2?hl=zh-cn">https://developer.android.google.cn/studio/command-line/aapt2?hl=zh-cn</a></p><p>AAPT2（Android 资源打包工具）是一种构建工具. 这里理解下输出的报告就是通过这个工具构建的,当然不仅仅是报告.</p><p>两种皆可以直接命令装.检查是否搭建成功直接看基本操作命令中CTS单跑一项即可</p><h2 id="2-2-ITS-VTS"><a href="#2-2-ITS-VTS" class="headerlink" title="2.2 ITS&#x2F;VTS"></a>2.2 ITS&#x2F;VTS</h2><p>its和vts同样依赖python包.具体另外有个XTS基础有单独的操作说明.还有GTS需要连接外网,<br>VTS 不依赖网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br><span class="line">sudo apt-get install python-protobuf</span><br><span class="line">sudo apt-get install protobuf-compiler</span><br><span class="line">sudo apt-get install python-virtualenv</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install python-numpy</span><br><span class="line">sudo apt-get install python-scipy</span><br><span class="line">sudo apt-get install python-matplotlib</span><br><span class="line">sudo apt-get install python-opencv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pip install pyserial</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pip install serial <span class="comment">#如果这两个命令不行就用下面这两个命令.</span></span></span><br><span class="line">sudo apt install python-pyudev</span><br><span class="line">sudo apt install python-serial</span><br></pre></td></tr></table></figure><p>因为ubuntu16和18以及其他系统默认带的python包不一致，请根据实际情况下载其他相关的python</p><p>以上完成后直接看基本操作命令ITS部分</p><p>其他测试项不依赖任何环境.</p><h1 id="3-基本操作命令"><a href="#3-基本操作命令" class="headerlink" title="3 基本操作命令"></a>3 基本操作命令</h1><p>谷歌官网：</p><p><a href="https://source.android.google.cn/compatibility/cts/command-console-v2#ctsv2_reference">https://source.android.google.cn/compatibility/cts/command-console-v2#ctsv2_reference</a></p><p>手机开发者选项打开，永不锁屏，充电不休眠这些打开.因为测试过程中长时间未操作会影响测试结果的</p><h2 id="3-1-CTS"><a href="#3-1-CTS" class="headerlink" title="3.1 CTS"></a>3.1 CTS</h2><p>进入到cts的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd android-cts/tools/</span><br><span class="line">./cts-tradefed   #进入到cts的终端命令里</span><br></pre></td></tr></table></figure><p>相关的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run cts -m CtsCameraTestCases #cts整跑三个abi的命令</span><br></pre></td></tr></table></figure><p>我们一般debug只要跑一个abi,使用的cts-dev,会跑测当前设备对应的abi.</p><p>上述命令会直接跑侧当前环境下所有相关的abi.</p><p>出报告还是要整跑三个abi的</p><p>谷歌原话是:<br><strong>On 64-bit devices, run the test against only the 32-bit or 64-bit ABI</strong></p><p><strong>运行默认的 CTS 计划（即完整的 CTS 调用），但跳过前提条件以缩减运行时间，从而对新测试执行迭代开发。这会绕过对设备配置的验证和设置（例如推送媒体文件或检查 Wi-Fi 连接），就如同使用了 –skip-preconditions 选项。此命令还会跳过设备信息收集和所有系统状态检查工具。它还仅在单个 ABI 上运行测试。对于设备验证，请忽略此优化操作并添加所有前提条件和检查。有关要排除的内容，请参阅 cts-dev.xml。</strong></p><p>在测试过程中，CTS 控制台可以接受其他命令。</p><p>如果没有连接任何设备，CTS 台式机（或主机）会等到设备连接后再启动测试。如果连接了多台设备，则 CTS 主机将自动选择一台设备。</p><p>它还仅在单个 ABI 上运行测试<br>cts-dev 是跑测当前设备默认abi.</p><p>abi(Application Binary Interface，ABI)：<br>应用程序二进制接口<br>默认情况下，CTS 会为设备支持的每个 ABI 运行一次测试。</p><p>只跑一个命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run cts-dev -m CtsCameraTestCases#单跑当前设备默认Module命令</span><br><span class="line">run cts-dev -m CtsCameraTestCase --shard-count 3 -s sn1 -s sn2 -s sn3 #多台设备跑测一个报告</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Android12 以后建议用subplan的方式创建计划表 去跑测试，别用cts-dev的方式.</span></span><br></pre></td></tr></table></figure><p>单跑一个测试项命令.加参数-t -s -m 还有list(l d) 这些相关的命令其他XTS测试是一样的.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run cts-dev -m CtsCameraTestCases -t</span><br><span class="line">android.hardware.camera2.cts.RecordingTest#testVideoSnapshot</span><br></pre></td></tr></table></figure><p>如果有多个设备挂跑的时候, 用以下命令 加-s 设备序列号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run cts-dev -m CtsCameraTestCases -s 141190ce0312</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb device #查看设备序列号</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l r #list result查看报告结果状态,如下图能看到session 为O(记住要考)</span><br><span class="line">Pass测试项为569</span><br><span class="line">Fail项目为0 </span><br><span class="line">完成测试Module为1</span><br><span class="line">报告结果时间和名字以及其他一些相关信息.</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/ZifKRjmh5V7pa6r.png" alt="ITS.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l d #list device列举设备信息，主要关注Allocation 下设备的状态Available为可以使用的状态.</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/PQeURF45zWOZxEw.png" alt="ld.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l c #查看运行的command命令</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/4NfjRGVbmiqvDtW.png" alt="lc.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l i #查看当前命令运行的时间</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/G7Pbes18xp3vKqC.png" alt="li.png"></p><p>一般跑测没有那么快一下子全PASS,很有可能受到环境或者其他因素影响导致Fail,所以需要retry</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run retry --retry &lt;session-number&gt; #retry 格式</span><br><span class="line">run retry --retry 0 #这个就是l r 里面报告里面的session,重跑你fail的报告即可，注意版本和机器设备必须是之前出报告的同一个，不然重跑不起来.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当然你有了这个报告,也可以在其他电脑上重跑</span></span><br></pre></td></tr></table></figure><p>生成的报告路径在android-cts&#x2F;results</p><p>subplan的方式进行跑测:</p><p>什么是subplan? 是自己创建的跑测计划,一般用于跑测.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add subplan --session 10 -n cts_dev --result-type failed #创建一个名未cts_dev的 session10中跑测失败的计划表</span><br></pre></td></tr></table></figure><pre><code>#这是参数说明add s[ubplan]: create a subplan from a previous session    Available Options:        --session &lt;session_id&gt;: The session used to create a subplan        --name/-n &lt;subplan_name&gt;: The name of the new subplan        --result-type &lt;status&gt;: Which results to include in the subplan. One of passed, failed, not_executed. Repeatable</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run cts --subplan cts_dev -s 81926A8J00072 #这是subplan的使用说明,在上述已经创建了一个名未cts_dev的计划，跑测该计划中的内容</span><br></pre></td></tr></table></figure><p>打开test_result.html即可,其他测试项除ITS外都是在相似的文件路劲下</p><p>一般cts debug都是到这个路劲android-cts&#x2F;testcases</p><p>-t -g 强制下载并且打开相关权限.打开这个可以不用去操作打开apk的权限了.可以直接运行相关的命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install -t -g CtsCameraTestCases.apk</span><br></pre></td></tr></table></figure><p>然后需要进入到setting里面</p><p><img src="https://i.loli.net/2021/07/15/lEU6eTQmrWdApjN.png" alt="01.png"></p><p>选择app&amp;notifications</p><img src="https://i.loli.net/2021/07/16/CE4vAgwNjIbLpSR.png" alt="01.png" style="zoom: 66%;" />选择App info<img src="https://i.loli.net/2021/07/16/UKrLbaGpwHCf5XO.png" alt="01.png" style="zoom:67%;" /><p>找到我们cts 测试apk,  android.camera.cts<br><img src="https://i.loli.net/2021/07/16/iAgW2XIExwnlsmz.png" alt="01.png" style="zoom:67%;" /></p><p>把所有的权限都打开</p><img src="https://i.loli.net/2021/07/16/d6lYgqXWzbNLv2a.png" alt="01.png" style="zoom:67%;" /><p>然后在终端上运行以下类似格式的命令就可以了.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell am instrument -e class android.hardware.camera2.cts.RecordingTest#testVideoSnapshot --abi arm64-v8a -w android.camera.cts/androidx.test.runner.AndroidJUnitRunner</span><br><span class="line"></span><br><span class="line">adb shell am instrument -e class 对应的测试项目 --abi arm64-v8a -w android.camera.cts/androidx.test.runner.AndroidJUnitRunner</span><br></pre></td></tr></table></figure><p>运行结果如下即便就是PASS,否则为Fail</p><p><img src="https://i.loli.net/2021/07/16/vtLFJ5Ec73OlX4Z.png" alt="01.png"></p><h2 id="3-2-VTS"><a href="#3-2-VTS" class="headerlink" title="3.2 VTS"></a>3.2 VTS</h2><p>vts需要连接外网,再一次强调.<br>查看gsi版本日期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strings system.img | grep ro.build.version.security_patch</span><br><span class="line">adb shell getprop ro.build.version.security_patch</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/Srp6vI2cX3RAb1O.png" alt="补丁包的时间.png"><br>预备准备好对应的system.img 和boot-debug.img</p><p>要刷入这两个镜像要先解锁设备.一般默认是上锁的无法烧录镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader # 进入fastboot模式</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">有的项目解锁方式</span></span><br><span class="line">fastboot oem unlock</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">有的项目解锁方式</span></span><br><span class="line">fastboot flashing unlock</span><br></pre></td></tr></table></figure><p>解锁完就能烧录对应的镜像,以下命令往下跑就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fastboot reboot fastboot</span><br><span class="line">fastboot flash system system.img # 需要进入fastboot 下烧录.bootloader下没有system的分区</span><br><span class="line">fastboot reboot bootloader</span><br><span class="line">fastboot flash boot boot-debug.img #boot 分区在bootloader模式下.</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>进入到vts的tool目录下运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vts-tradefed</span><br></pre></td></tr></table></figure><p>vts整跑命令,vts 我们就关注这三个模块的部分</p><p>注意，并不是三个都一定存在的项目.需要根据实际项目来看.</p><p>比如展讯平台上没有2_5的接口，所以实际无法跑测.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run vts --include-filter VtsHalCameraProviderV2_4Target --include-filter VtsHalCameraProviderV2_5Target --include-filter VtsHalCameraServiceV2_0Target --skip-preconditions</span><br><span class="line"></span><br><span class="line">run vts --skip-preconditions  --include-filter -m VtsHalCameraServiceV2_0TargetTest VtsHalCameraServiceV2_0Target</span><br></pre></td></tr></table></figure><p>单跑对应的模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run vts -m VtsHalCameraProviderV2_4Target -s 1769E47E</span><br><span class="line">run vts -m VtsHalCameraProviderV2_5Target -s 1769E47E</span><br><span class="line">run vts -m VtsHalCameraServiceV2_0Target -s 1769E47E</span><br></pre></td></tr></table></figure><p>单跑单个测试项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run vts -m VtsHalCameraProviderV2_4Target -t CameraHidlTest.processCaptureRequestBurstISO(legacy/0)_64bit</span><br></pre></td></tr></table></figure><p>其他操作命令和CTS一样</p><h2 id="3-3-GSI"><a href="#3-3-GSI" class="headerlink" title="3.3 GSI"></a>3.3 GSI</h2><p>GSI也是要刷入system.img.但是不用刷boot.img.&#x2F;(andorid11后都要刷.)</p><p>一般system分区会做在fastboot 模式下，但是后来有的项目好像是得进bootloader刷system.这个要确定好，不然刷进去就无法<br>进入系统了.</p><p>GSI刷镜像按照如下的操作即可.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader #刷入对应的谷歌镜像system.img</span><br><span class="line">fastboot devices</span><br><span class="line">fastboot flashing unlock</span><br><span class="line">fastboot reboot fastboot</span><br><span class="line">fastboot erase system</span><br><span class="line">fastboot flash system system.img #谷歌官网获取</span><br><span class="line">fastboot -w</span><br><span class="line">fastboot reboot bootloader</span><br><span class="line">fastboot flashing unlock</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按音量上键</span></span><br><span class="line">fastboot flashing lock </span><br><span class="line">fastboot flashing unlock</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>打开开发者选项 , 打开 stay awake 和 USB debugging<br>andorid 11 后 gsi 在 cts&#x2F;vts 的运行环境中跑测。</p><p>android10以前以及10版本都是在vts的运行环境中跑测试.11以及11以后谷歌将测试挪到了11中</p><p>GSI整跑命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run cts-on-gsi -m CtsCameraTestCases</span><br></pre></td></tr></table></figure><h2 id="3-4-ITS"><a href="#3-4-ITS" class="headerlink" title="3.4 ITS"></a>3.4 ITS</h2><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1 准备"></a>1 准备</h3><p>我们可以编译对应的项目生成CtsVerifier.apk或者直接在ITS包里面把测试apk下载到手机中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mk -p 项目名字 -s -v userdebug -m mma -o cts/apps/CtsVerifier</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install CtsVerifier.apk</span><br></pre></td></tr></table></figure><p>进入到手机apk，所有的权限都打开.</p><p>操作步骤如下:</p><p><img src="https://i.loli.net/2021/07/15/lEU6eTQmrWdApjN.png" alt="01.png"></p><p>选择app&amp;notifications</p><img src="https://i.loli.net/2021/07/16/CE4vAgwNjIbLpSR.png" alt="01.png" style="zoom: 66%;" /><img src="https://i.loli.net/2021/07/16/UKrLbaGpwHCf5XO.png" alt="01.png" style="zoom:67%;" /><p>找到CTS Verifer 测试apk,</p><p><img src="https://i.loli.net/2021/07/16/2BM7Imz5KJV8pH1.png" alt="01.png"></p><p>打开其所有的权限即可<br><img src="https://i.loli.net/2021/07/16/ZsL7hkT2zERSu1v.png" alt="01.png"></p><h3 id="2-场景说明"><a href="#2-场景说明" class="headerlink" title="2 场景说明"></a>2 场景说明</h3><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>场景0</td><td>无任何要求</td></tr><tr><td>场景1</td><td>相机位于三脚架上, 指向一个静态场景, 其中包含灰色卡和白色背景, 在恒定 (稳定) 相对明亮的光照源下。这是 CTS 验证程序物理设置上面描述的场景。镜头视野中，灰卡大致放在中间，周围为白色背景</td></tr><tr><td>场景 2</td><td>这是测试人脸检测的场景。相机位于三脚架上, 指向一张包含3人脸的静态图片, 在恒定 (稳定) 相对明亮的照明光源下。</td></tr><tr><td>场景3</td><td>这是测试图像清晰度的场景。相机位于三脚架上, 指向包含某些边缘的静态图片, 如打印的 ISO 12233 图表。现场应在一个恒定 (稳定) 相对明亮的照明源。</td></tr><tr><td>场景4</td><td>这是测试纵横比的场景。相机位于三脚架上, 指向一个静态测试页, 其中包含一个黑色圆圈和一个方块。现场应在一个恒定 (稳定) 相对明亮的照明源</td></tr><tr><td>场景5</td><td>这是测试镜头着色和颜色均匀性的场景。在摄像机前放置一个扩散器(毛玻璃)。相机位于三脚架上，指向恒定的 (稳定) 相对地明亮的照明源。<br/>我们这边就用的一张白色餐巾纸(A4纸也可以，只要白色)代替了扩散器，将镜头对着光源，用餐巾纸挡住镜头即可。</td></tr><tr><td>sensor_fusion</td><td>马达灯箱</td></tr></tbody></table><p>注意，在andorid 11后这些场景会进一步细分和增加，具体看对应的CTSVerfier的包里面,路劲如下,这个路劲下面也有对应场景的图片.pdf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~/GMS/r4/CameraITS/tests</span><br></pre></td></tr></table></figure><h3 id="3-命令"><a href="#3-命令" class="headerlink" title="3 命令"></a>3 命令</h3><p>终端需要source its的环境.只要source一次，终端没有关闭不用再次source.新开终端要重新source</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh </span><br></pre></td></tr></table></figure><p>ITS 整跑命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python tools/run_all_tests.py device=008bcdcf0405   camera=1 scenes=5 #更改成对应的camera和场景即可</span><br><span class="line">python tools/run_all_tests.py device=008bcdcf0405   camera=1 scenes=scenes_fusion #如果只有一台机器可以不加device参数</span><br><span class="line">python tools/run_all_tests.py camera=0 scenes=sensor_fusion rot_rig=04d8:fc73:1 #rot_rig后面加马达相关的参数，这个用默认即可不用更改</span><br><span class="line"></span><br><span class="line">python tools/run_all_tests.py camera=0 scenes=0 tmp_dir=~/XTS/CtsVerifier_r6/CameraITS/outfile/ </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置输出的路径</span></span><br></pre></td></tr></table></figure><p>整跑会在&#x2F;tmp&#x2F;xxx 目录下创建对应的跑测相关的文件.其中summary.txt文件记录了整跑的结果，如果没有则PASS，如果有fail项目,需要单跑检查</p><p>单跑命令,python 运行对应的场景，对应的测试项即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tests/scene1_1/test_ev_compensation_advanced.py camera=0</span><br></pre></td></tr></table></figure><p>关于sensor_fusion 场景，如果马达不会转动，则需要赋予马达权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /dev/ttyACM0</span><br></pre></td></tr></table></figure><h3 id="4-创建报告"><a href="#4-创建报告" class="headerlink" title="4 创建报告"></a>4 创建报告</h3><p>单跑是空的,显示在终端上。创建报告需要全 pass ,有一项没跑或者 fail, 报告出来都是 fail ,并且没有详<br>细的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">its 跑测全部PASS后要点击绿色√后往下操作</span></span><br><span class="line">adb shell settings put global hidden_api_policy 1</span><br><span class="line">adb shell appops set com.android.cts.verifier android:read_device_identifiers allow</span><br><span class="line">adb shell appops set com.android.cts.verifier MANAGE_EXTERNAL_STORAGE 0 (保存报告之前)</span><br><span class="line">在cts界面点击右上角保存报告</span><br><span class="line">adb pull /storage/emulated/0/verifierReports ~/桌面/</span><br></pre></td></tr></table></figure><p>注意这个报告的结果只能用ie浏览器打开.</p><h2 id="3-5-GTS"><a href="#3-5-GTS" class="headerlink" title="3.5 GTS"></a>3.5 GTS</h2><p>GTS需要电脑和手机都连接外部的网络.</p><p>GTS 跑测命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run gts -m GtsCameraTestCases -s xxx</span><br><span class="line">run gts -m GtsCameraTestCases -s 008bcdcf0405</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> GMS </category>
          
          <category> cts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> GMS </tag>
            
            <tag> cts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>testAfRegions</title>
      <link href="/2024/11/10/GMS/testAfRegions/"/>
      <url>/2024/11/10/GMS/testAfRegions/</url>
      
        <content type="html"><![CDATA[<h1 id="1-测试流程"><a href="#1-测试流程" class="headerlink" title="1 测试流程"></a>1 测试流程</h1><p>测试命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am instrument -e class android.hardware.camera2.cts.StillCaptureTest#testAfRegions[1] --abi arm64-v8a  -w android.camera.cts/androidx.test.runner.AndroidJUnitRunner </span><br></pre></td></tr></table></figure><p>测试代码的位置如下:</p><p>cts&#x2F;tests&#x2F;camera&#x2F;src&#x2F;android&#x2F;hardware&#x2F;camera2&#x2F;cts&#x2F;StillCaptureTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test Af region for still capture.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAfRegions</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">for</span> (String id : mCameraIdsUnderTest) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;Testing AF regions for Camera &quot;</span> + id);</span><br><span class="line">            openDevice(id);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">afRegionsSupported</span> <span class="operator">=</span> isRegionsSupportedFor3A(MAX_REGIONS_AF_INDEX);</span><br><span class="line">            Log.i(TAG,<span class="string">&quot;afRegionsSupported=&quot;</span>+afRegionsSupported); <span class="comment">//可以加这个log. true则继续往下测试,反之直接跳过这个camera</span></span><br><span class="line">            <span class="keyword">if</span> (!afRegionsSupported) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ArrayList&lt;MeteringRectangle[]&gt; afRegionTestCases = get3ARegionTestCasesForCamera();<span class="comment">//看下述这个函数的说明</span></span><br><span class="line">            <span class="keyword">for</span> (MeteringRectangle[] afRegions : afRegionTestCases) &#123; <span class="comment">//遍历afRegionTestCases的内容去测试</span></span><br><span class="line">                takePictureTestByCamera(<span class="comment">/*aeRegions*/</span><span class="literal">null</span>, <span class="comment">/*awbRegions*/</span><span class="literal">null</span>, afRegions);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeDevice();</span><br><span class="line">            closeImageReader();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Get 5 3A region test cases, each with one square region in it.</span></span><br><span class="line"><span class="comment">    * The first one is at center, the other four are at corners of</span></span><br><span class="line"><span class="comment">    * active array rectangle.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> array of test 3A regions</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> ArrayList&lt;MeteringRectangle[]&gt; get3ARegionTestCasesForCamera() </span><br><span class="line">       </span><br><span class="line">       ...</span><br><span class="line">       Log.v(TAG, <span class="string">&quot;Generated test regions are: &quot;</span> + sb.toString()); <span class="comment">//这边可以把这个log打开看这五个区域的坐标分别是多少. 这五个区域的坐标会返回到上述afRegionTestCases,然后遍历去测试takePictureTestByCamera</span></span><br></pre></td></tr></table></figure><p>主要执行的测试内容在这个函数takePictureTestByCamera</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Step 1: trigger an auto focus run, and wait for AF locked.</span><br><span class="line">Step 2: AF is already locked, wait for AWB converged, then lock it.</span><br><span class="line">Step 3: trigger an AE precapture metering sequence and wait for AE converged.</span><br><span class="line">Step 4: take a picture when all 3A are in good state</span><br></pre></td></tr></table></figure><p>我们遇到的报错内容如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mCollector.expectMeteringRegionsAreSimilar(</span><br><span class="line">                    <span class="string">&quot;AF regions in result and request should be similar&quot;</span>,</span><br><span class="line">                    afRegions,</span><br><span class="line">                    resultAfRegions,</span><br><span class="line">                    METERING_REGION_ERROR_PERCENT_DELTA);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>afRegions和resultAfRegions内容不一致.</p><p>resultAfRegions是重新下发上报的: afRegions则上述遍历中传递过来的值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MeteringRectangle[] resultAfRegions =</span><br><span class="line">                    getValueNotNull(result, CaptureResult.CONTROL_AF_REGIONS);</span><br></pre></td></tr></table></figure><h1 id="2-hal-上报"><a href="#2-hal-上报" class="headerlink" title="2 hal 上报"></a>2 hal 上报</h1><p>上报路径:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;aaa&#x2F;source&#x2F;common&#x2F;hal3a&#x2F;v1.0&#x2F;Hal3AAdapter3.cpp</p><p>关注这个值的下发:CaptureResult.CONTROL_AF_REGIONS, mtk平台对andorid 机制的处理都会映射转成对应的mtk标准.</p><p>这个值对应的就是MTK_CONTROL_AF_REGIONS.</p><p>详细的内容见如下的文件:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;include&#x2F;mtkcam&#x2F;utils&#x2F;metadata&#x2F;client&#x2F;TagMap.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_IMP_TAGCONVERT_(    ANDROID_CONTROL_AF_MODE,    MTK_CONTROL_AF_MODE)\</span><br><span class="line">_IMP_TAGCONVERT_(    ANDROID_CONTROL_AF_REGIONS,    MTK_CONTROL_AF_REGIONS)\</span><br></pre></td></tr></table></figure><p>看文件Hal3AAdapter3.cpp内容:这是解析meta的内容.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MUINT8</span><br><span class="line">Hal3AAdapter3::</span><br><span class="line"><span class="built_in">parseMeta</span>(<span class="type">const</span> vector&lt;MetaSet_T*&gt;&amp; requestQ)&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">if</span> ( (!u1RepeatTag) || ReparseMetaForDummy) <span class="comment">// not repeating tag, parse app meta</span></span><br><span class="line">    ...</span><br><span class="line">            <span class="keyword">case</span> MTK_CONTROL_AF_REGIONS:</span><br><span class="line">    ...</span><br><span class="line">        mUpdateMetaResult.<span class="built_in">push</span>(&#123;MTK_CONTROL_AF_REGIONS, entryNew&#125;); <span class="comment">//这里是上报上去的位置.将entryNew的内容上报上去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往上翻看entryNew的内容从哪里来,从rArea处获取.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Left,   <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Top,    <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Right,  <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Bottom, <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Weight, <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br></pre></td></tr></table></figure><p>rArea又是根据rArea和rSclCrop存在以下的逻辑关系.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rArea.i4Left   = <span class="built_in">MIN</span>(<span class="built_in">MAX</span>(rArea.i4Left, rSclCrop[<span class="number">0</span>]), rSclCrop[<span class="number">2</span>]);</span><br><span class="line">rArea.i4Top    = <span class="built_in">MIN</span>(<span class="built_in">MAX</span>(rArea.i4Top, rSclCrop[<span class="number">1</span>]), rSclCrop[<span class="number">3</span>]);</span><br><span class="line">rArea.i4Right  = <span class="built_in">MAX</span>(<span class="built_in">MIN</span>(rArea.i4Right, rSclCrop[<span class="number">2</span>]), rSclCrop[<span class="number">0</span>]);</span><br><span class="line">rArea.i4Bottom = <span class="built_in">MAX</span>(<span class="built_in">MIN</span>(rArea.i4Bottom, rSclCrop[<span class="number">3</span>]), rSclCrop[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>检查rSclCrop的内容.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mi4AppfgCrop = <span class="built_in">QUERY_ENTRY_SINGLE</span>(_appmeta, MTK_SCALER_CROP_REGION, rSclCropRect);</span><br><span class="line">fgCrop = mi4AppfgCrop;</span><br><span class="line"></span><br><span class="line">mAppCropRegion.p.x = rSclCropRect.p.x;</span><br><span class="line">mAppCropRegion.p.y = rSclCropRect.p.y;</span><br><span class="line">mAppCropRegion.s.w = rSclCropRect.s.w;</span><br><span class="line">mAppCropRegion.s.h = rSclCropRect.s.h;</span><br><span class="line">rSclCrop[<span class="number">0</span>] = rSclCropRect.p.x;</span><br><span class="line">rSclCrop[<span class="number">1</span>] = rSclCropRect.p.y;</span><br><span class="line">rSclCrop[<span class="number">2</span>] = rSclCropRect.p.x + rSclCropRect.s.w;</span><br><span class="line">rSclCrop[<span class="number">3</span>] = rSclCropRect.p.y + rSclCropRect.s.h;</span><br></pre></td></tr></table></figure><p>该问题出现的原因是有人误删了 rSclCrop相关的内容导致该相关内容呈现如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mi4AppfgCrop = <span class="built_in">QUERY_ENTRY_SINGLE</span>(_appmeta, MTK_SCALER_CROP_REGION, rSclCropRect);</span><br><span class="line">fgCrop = mi4AppfgCrop;</span><br><span class="line">rSclCrop[<span class="number">3</span>] = rSclCropRect.p.y + rSclCropRect.s.h;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> GMS </category>
          
          <category> cts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> GMS </tag>
            
            <tag> cts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冷启动</title>
      <link href="/2024/11/10/Android/hal/%E5%86%B7%E5%90%AF%E5%8A%A8/"/>
      <url>/2024/11/10/Android/hal/%E5%86%B7%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>冷启动大致可以分成以下几块内容:</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>S0</td><td>(system)</td><td>主要是 Activity 的创建耗时（从 Touch up，即 <code>ptr:up</code> 开始）</td><td>ptr:up</td></tr><tr><td>S1</td><td>App</td><td>从 Activity 创建成功，到下 open camera 的时间（对应 <code>CameraService::connect</code>）； Note：我习惯把 S0 和 S1 算成一大阶段；</td><td></td></tr><tr><td>S2</td><td>HAL</td><td>open camera 到 <code>onOpened</code>（即 connect 调用完成）回调上去的时间；</td><td></td></tr><tr><td>S3</td><td>App</td><td><code>onOpened</code> 回调后，到 App 去 <code>creatSession</code> 的时间；</td><td></td></tr><tr><td>S4</td><td>HAL</td><td><code>creatSession</code> 的耗时（对应整个endConfigure);</td><td></td></tr><tr><td>S5</td><td>App</td><td><code>creatSession</code> 完成到 <code>setRepeatingRequest</code> 的时间；</td><td></td></tr><tr><td>S6</td><td>HAL</td><td><code>setRepeatingRequest</code> 后到底层抛出第一帧（cameraserver 会有一个 <code>first full buffer</code> 的记录）的时间；</td><td></td></tr><tr><td>S7</td><td><strong>App+MultiMedia</strong></td><td>底层出第一帧后，到 App 真正第一次开始 draw 数据，数据送到 surfaceFlinger 显示出来（第二次 <code>onMessageReceived</code> 完成）的时间。</td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell setprop service.adb.root 1</span><br><span class="line">开发者模式关闭再打开</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sched/freq/idle  #这三个tag是cpu　信息,无论如何必须带上</span><br><span class="line">gfx/view/input 　#测试列表滑动.桌面滑动.这种流畅性问题</span><br><span class="line">gfx/view/imput/hwui  #绘图问题</span><br><span class="line">gfx/view/input/res/am/wm #测试app启动</span><br><span class="line">gfx/view/input/dalvik/disk  #GC或者IO导致卡顿</span><br><span class="line">gfx/view/input/res/am/wm/power #亮屏,电量相关</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python systrace.py gfx camera view input sched freq video disk dalvik res am wm -b 20480 -t 5 -o trace.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">S0：Touch Up → ActivityStart</span><br><span class="line"></span><br><span class="line">S1：ActivityStart → open camera | start</span><br><span class="line"></span><br><span class="line">S2：Open camera</span><br><span class="line"></span><br><span class="line">S3：Open camera | end → Configure streams | start</span><br><span class="line"></span><br><span class="line">S4：Configure streams</span><br><span class="line"></span><br><span class="line">S5：Configure streams | end → SetRepeatingRequests</span><br><span class="line"></span><br><span class="line">S6：SetRepeatingRequests → 1st frame out from hal</span><br><span class="line"></span><br><span class="line">S7：1st frame out from hal → Display show 1st frame</span><br></pre></td></tr></table></figure><h1 id="2-S0-S1"><a href="#2-S0-S1" class="headerlink" title="2 S0+S1"></a>2 S0+S1</h1><p>system+app耗时<br>搜索关键字ptr:up<br><img src="https://i.loli.net/2021/02/05/yK8TitEbIUNgmuW.png" alt="1.png"></p><p>可以看到如下的内容:这是按下相机按钮并且抬起的操作<br><img src="https://i.loli.net/2021/02/05/DCQZysUbLd5njHB.png" alt="2.png"><br>从 这里开始计时到connectDevice结束是S0+S1的时间.</p><p>S1的主要时间是activityStart到connectDevice</p><p>S0: AppLaunch_dispatchPtr:Up –&gt; activityStart</p><p>S1: activityStart –&gt; connectDevice</p><p><img src="https://i.loli.net/2021/02/13/vJPn9CIAjFhYcKe.png" alt="1.png"></p><h1 id="3-S2"><a href="#3-S2" class="headerlink" title="3 S2"></a>3 S2</h1><p>hal耗时</p><p>搜索connectDevice<br><img src="https://i.loli.net/2021/02/07/oNEQFBJ8z1tYHLi.png" alt="微信图片_20210207161216.png"></p><p>可以看到 connectDevice的持续时间.这就是S2的耗时<br><img src="https://i.loli.net/2021/02/07/Z5B3GHkUhon2cyj.png" alt="微信图片_20210207161216.png"></p><h1 id="4-S3"><a href="#4-S3" class="headerlink" title="4 S3"></a>4 S3</h1><p>app耗时</p><p>从下图可以看到是从connectDevice的结尾到endConfigure的开始</p><p><img src="https://i.loli.net/2021/02/13/C5EvmfbHDwYlUus.png" alt="1.png"></p><h1 id="5-S4"><a href="#5-S4" class="headerlink" title="5 S4"></a>5 S4</h1><p>hal 耗时<br>endConfigure的持续时间</p><p><img src="https://i.loli.net/2021/02/13/rKZuInyARo9pzmL.png" alt="3.png"></p><h1 id="6-S5"><a href="#6-S5" class="headerlink" title="6 S5"></a>6 S5</h1><p>app耗时</p><p>从endConfigure的结尾到setRepeatingRequest返回完成</p><p><img src="https://i.loli.net/2021/02/13/LRqojJPDYcwM9lB.png" alt="1.png"><br><img src="https://i.loli.net/2021/02/13/7iDupNsqbwOlQnG.png" alt="3.png"></p><h1 id="7-S6"><a href="#7-S6" class="headerlink" title="7 S6"></a>7 S6</h1><p>hal耗时</p><p>直接搜索first full buffer .有的apk会返回多个.一般都是以最后一个收尾为主.<br>这个一般都是和captureRequest返回在一起的.</p><p>耗时是从setRepeatingRequest 计算到first full buffer返回</p><h1 id="8-S7"><a href="#8-S7" class="headerlink" title="8 S7"></a>8 S7</h1><p>app和多媒体耗时</p>]]></content>
      
      
      <categories>
          
          <category> camera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> camera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模式切换</title>
      <link href="/2024/11/10/Android/hal/%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/"/>
      <url>/2024/11/10/Android/hal/%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1 摘要"></a>1 摘要</h1><p>这里提到的mode切换主要是拍照切换到video，或者切换到超夜之类</p><table><thead><tr><th>阶段</th><th>说明</th></tr></thead><tbody><tr><td>S0(App)</td><td>从点击事件到调用 <code>flush</code> 的间隔；</td></tr><tr><td>S1(HAL)</td><td>flush的总耗时</td></tr><tr><td>S2(App)</td><td><code>flush</code> 结束后，到 <code>createSession</code> 的间隔；</td></tr><tr><td>S3(Hal)</td><td><code>createSession</code> 的耗时；</td></tr><tr><td>S4(App)</td><td><code>createSession</code> 结束到 <code>setRepeatingRequests</code> 的间隔；</td></tr><tr><td>S5(HAL)</td><td><code>setRepeatingRequests</code> 到底层出第一帧的时间；</td></tr><tr><td>S6(<strong>App + Multimedia</strong>)</td><td>底层第一帧到真正显示出第一帧的间隔。</td></tr></tbody></table><h1 id="2-S0"><a href="#2-S0" class="headerlink" title="2 S0"></a>2 S0</h1><p>从点击事件到调用 <code>flush</code> 的间隔；</p><p>搜索ptr:up<br>这个是按下抬起的动作<br><img src="https://i.loli.net/2021/04/09/B8yZztXA1hR7urT.png" alt="选区_003.png"><br><img src="https://i.loli.net/2021/04/09/RYChKUed5HTM1IA.png" alt="选区_004.png"><br>然后搜索CameraHal::flush</p><p><img src="https://i.loli.net/2021/04/09/2oaSdCM1zYVxg48.png" alt="选区_006.png"></p><p>上面的间隔时间56.958ms就是s0</p><h1 id="3-S1"><a href="#3-S1" class="headerlink" title="3 S1"></a>3 S1</h1><p>  flush的总耗时,</p><p>搜索CameraHal::flush,这个持续时间就是S1的耗时</p><p><img src="https://i.loli.net/2021/04/09/FiMa7me4VRK2H1h.png" alt="选区_005.png"></p><h1 id="4-S2"><a href="#4-S2" class="headerlink" title="4 S2"></a>4 S2</h1><p><code>flush</code> 结束后，到 <code>createSession</code> 的间隔；</p><p>如下图：</p><p><img src="https://i.loli.net/2021/04/09/Kcr9st7LDgWNmOJ.png"></p><h1 id="5-S3"><a href="#5-S3" class="headerlink" title="5 S3"></a>5 S3</h1><p><code>endConfigure</code> 的总耗时</p><p><img src="https://i.loli.net/2021/04/09/6t3oGNqIkuDz58Z.png" alt="选区_001.png"></p><h1 id="6-S4"><a href="#6-S4" class="headerlink" title="6 S4"></a>6 S4</h1><p>即 <code>endConfigure</code> 结束到下 <code>setRepeatingRequests</code> 的间隔<br><img src="https://i.loli.net/2021/04/09/jg6okQ9WwcMBPLX.png" alt="选区_002.png"></p><h1 id="7-S5"><a href="#7-S5" class="headerlink" title="7 S5"></a>7 S5</h1><p>则是 <code>setRepeatingRequests</code> 到底层出第一帧（cameraserver 收到 <code>first full buffer</code>）的间隔<br><img src="https://i.loli.net/2021/04/09/ZFn2C75TaGAI9ib.png" alt="2021-04-09 09-49-19屏幕截图.png"></p><h1 id="8-S7"><a href="#8-S7" class="headerlink" title="8 S7"></a>8 S7</h1><p>是底层第一帧上传后，到真正显示的第一帧的间隔：</p><p>根据 <code>first full buffer</code> 时间，找到 SurfaceTexture 收到第一帧的时间点，再找到 APP 第一次取用帧数据去 <code>Draw</code> 的时间点</p><p>多媒体画图日后研究，每个项目的机制不一样，需要根据实际去研究</p>]]></content>
      
      
      <categories>
          
          <category> camera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> camera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后摄切换</title>
      <link href="/2024/11/10/Android/hal/%E5%89%8D%E5%90%8E%E6%91%84%E5%88%87%E6%8D%A2/"/>
      <url>/2024/11/10/Android/hal/%E5%89%8D%E5%90%8E%E6%91%84%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1 摘要"></a>1 摘要</h1><p>这里提到的切换主要是前摄&lt;-&gt;后摄的切换<br>总的来说可以分成以下的内容:</p><table><thead><tr><th>阶段</th><th>说明</th></tr></thead><tbody><tr><td>S0(App)</td><td>从点击事件到调用 <code>flush</code> 的间隔</td></tr><tr><td>S1(Hal)</td><td><code>flush</code> + <code>disconnect</code> 的总耗时，即关闭前一个摄像头的整个流程</td></tr><tr><td>S2(App)</td><td><code>disconnect</code> 完成后，到下 open camera 指令的间隔</td></tr><tr><td>S3(Hal)</td><td>open camera 到 <code>onOpened</code> 回调的耗时</td></tr><tr><td>S4(App)</td><td>onOpened<code>回调上来后，间隔多久才开始</code>createSession</td></tr><tr><td>S5(Hal)</td><td><code>createSession</code> 完成的时间，对应 <code>endConfigure</code> 的耗时</td></tr><tr><td>S6(App)</td><td><code>createSession</code> 完成后，到下 <code>setRepeatingRequests</code> 的间隔；</td></tr><tr><td>S7(Hal)</td><td><code>setRepeatingRequests</code> 指令下来后，底层要多久才准备好第一帧上抛</td></tr><tr><td>S8(App + Multimedia)</td><td>第一帧送给 App 后，多久后才真正第一次显示出数据帧</td></tr></tbody></table><h1 id="2-拆解"><a href="#2-拆解" class="headerlink" title="2 拆解"></a>2 拆解</h1><h2 id="2-1-S0-App"><a href="#2-1-S0-App" class="headerlink" title="2.1 S0(App)"></a>2.1 S0(App)</h2><p>App管辖<br>S0:从点击事件到调用 <code>flush</code> 的间隔<br>搜索ptr:up，找到如下的内容:这是按下切换释放的操作.<br>按下和释放分别对应:</p><p>AppLaunch_dispatchPtr:Down</p><p>AppLaunch_dispatchPtr:Up</p><p>我们拆解S0的时候关注up的操作.从这个start开始记录.</p><p><img src="https://img-blog.csdnimg.cn/20210320220203593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">搜索CameraHal::flush<img src="https://img-blog.csdnimg.cn/20210320220715608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>S0的时间就是AppLaunch_dispatchPtr:Up的开始到CameraHal::flush的开始</p><h2 id="2-2-S1-Hal"><a href="#2-2-S1-Hal" class="headerlink" title="2.2 S1(Hal)"></a>2.2 S1(Hal)</h2><p>Hal 管辖<br>closeStart-&gt;CloseDone的过程.<br><img src="https://img-blog.csdnimg.cn/20210320221536995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-3-S2-App"><a href="#2-3-S2-App" class="headerlink" title="2.3 S2(App)"></a>2.3 S2(App)</h2><p>App管辖<br>disconnect 完成后，到下 open camera 指令的间隔<br>关键字:connectDevice</p><p><img src="https://img-blog.csdnimg.cn/2021032022190832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-4-S3-Hal"><a href="#2-4-S3-Hal" class="headerlink" title="2.4 S3(Hal)"></a>2.4 S3(Hal)</h2><p>Hal管辖<br>open camera 到 <code>onOpened</code> 回调的耗时<br>关键字connectDevices<br><img src="https://img-blog.csdnimg.cn/2021032022235337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-5-S4-App"><a href="#2-5-S4-App" class="headerlink" title="2.5 S4(App)"></a>2.5 S4(App)</h2><p>App管辖<br>onOpened<code>回调上来后，间隔多久才开始</code>createSession<br><img src="https://img-blog.csdnimg.cn/20210320222831820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-6-S5-Hal"><a href="#2-6-S5-Hal" class="headerlink" title="2.6 S5(Hal)"></a>2.6 S5(Hal)</h2><p><code>createSession</code> 完成的时间，对应 <code>endConfigure</code> 的耗时<br>内容如下:<br><img src="https://img-blog.csdnimg.cn/20210320223348459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-7-S6-App"><a href="#2-7-S6-App" class="headerlink" title="2.7 S6(App)"></a>2.7 S6(App)</h2><p> <code>createSession</code> 完成后，到下 <code>setRepeatingRequests</code> 的间隔<br> <img src="https://img-blog.csdnimg.cn/20210320224052997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-8-S7-Hal"><a href="#2-8-S7-Hal" class="headerlink" title="2.8 S7(Hal)"></a>2.8 S7(Hal)</h2><p><code>setRepeatingRequests</code> 指令下来后，底层要准备好第一帧上抛<br>搜索关键字:first full buffer<br><img src="https://img-blog.csdnimg.cn/20210320224431766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-9-S8-App-Multimedia"><a href="#2-9-S8-App-Multimedia" class="headerlink" title="2.9 S8(App + Multimedia)"></a>2.9 S8(App + Multimedia)</h2><p>每个手机的绘画机制不一样，有待研究.</p>]]></content>
      
      
      <categories>
          
          <category> camera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> camera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cif</title>
      <link href="/2024/11/10/Android/cif/"/>
      <url>/2024/11/10/Android/cif/</url>
      
        <content type="html"><![CDATA[<h1 id="CIF概述"><a href="#CIF概述" class="headerlink" title="CIF概述"></a>CIF概述</h1><p>cif的给我的感觉就是一个光敏电阻，就是要单独供电，当一个单独的设备看即可。</p><p>我们当前的项目都是通过去读cif的gpio口的状态，然后根据实际情况是否把这个tag上传给app端，在此基础上完成其相关的需求开发.</p><h1 id="1-DTS"><a href="#1-DTS" class="headerlink" title="1 DTS"></a>1 DTS</h1><p>和正常的设备一样都是需要供电的.</p><p>只不过cif模组只要一个io口供电即可.</p><p>拿我做过的项目来举例:</p><p>我做的项目是供电是借在vddcama1上的.</p><p>读取状态的io是接在gpio41上的.所以在对应的dts上需要配置如下相关的内容.</p><p>至于这部分内容可以挂在某些camera上暂时未使用的io口.</p><p>比如我看到前摄马达这个供电没用，我就顺带映射到马达供电，(如果是gpio 供电，建议招gpio定义的mipi switch io或者其他不占用的io使用)而不是单独做一个。虽然不规范，但是很实用.</p><p>同理映射io也建议使用未占用的口. 我读取的io的脚挂在后摄的power-down脚上.</p><pre><code>vddcammot-supply = &lt;&amp;vddcama1&gt;;/*cif power*/power-down-gpios = &lt;&amp;ap_gpio 41 0&gt;;/*cif read io*/</code></pre><p>dts示例代码位置</p><p>bsp&#x2F;kernel5.15&#x2F;kernel5.15&#x2F;arch&#x2F;arm64&#x2F;boot&#x2F;dts&#x2F;sprd&#x2F;ums9230-6h10-overlay.dts</p><h1 id="2-供电"><a href="#2-供电" class="headerlink" title="2 供电"></a>2 供电</h1><h2 id="2-1-hal"><a href="#2-1-hal" class="headerlink" title="2.1 hal"></a>2.1 hal</h2><p>基本配电搞定了,下来要分别上kernel里做读取的操作.还有对应的hal部分做下ioctrl读取的操作.</p><p>由于cif是挂载其他camera上的,当然可以单独做一个设备做，但是我感觉也没啥功能，挂就挂吧，多大点事.</p><p>在对应的sensor 上电和下点的位置做cif的上电和下电.</p><pre><code>hw_sensor_power_down_cif(sns_drv_cxt-&gt;hw_handle,!power_down); //上电hw_sensor_power_down_cif(sns_drv_cxt-&gt;hw_handle,power_down);  //下电//这个power_down=的值随便设置，反正到kernel也是根据读出来的值进行上下电操作的.</code></pre><p>vendor&#x2F;sprd&#x2F;modules&#x2F;libcamera&#x2F;sensor&#x2F;hw_drv&#x2F;hw_sensor_drv.h</p><p>这个文件里做申明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cmr_int <span class="title">hw_sensor_power_down_cif</span><span class="params">(cmr_handle hw_handle, cmr_u32 power_level)</span></span>;</span><br></pre></td></tr></table></figure><p>vendor&#x2F;sprd&#x2F;modules&#x2F;libcamera&#x2F;sensor&#x2F;hw_drv&#x2F;hw_sensor_drv.c</p><p>这个文件里面实现.这个实现会直接通过ioctrl调用到kernel里面.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cmr_int <span class="title">hw_sensor_power_down_cif</span><span class="params">(cmr_handle hw_handle, cmr_u32 power_level)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ATRACE_BEGIN</span>(__FUNCTION__);</span><br><span class="line">    cmr_int ret = HW_SUCCESS;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CHECK_HANDLE</span>(hw_handle);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">hw_drv_cxt</span> *hw_drv_cxt = (<span class="keyword">struct</span> hw_drv_cxt *)hw_handle;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">HW_LOGE</span>(<span class="string">&quot;cif power_level %d&quot;</span>, power_level);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">ioctl</span>(hw_drv_cxt-&gt;fd_sensor, SENSOR_IO_PD_CIF, &amp;power_level); <span class="comment">//这里ioctrl</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != ret) &#123;</span><br><span class="line">        <span class="built_in">HW_LOGE</span>(<span class="string">&quot;cif failed,  power_level = %d, ret=%ld &quot;</span>, power_level, ret);</span><br><span class="line">        ret = HW_FAILED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ATRACE_END</span>();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-kernel"><a href="#2-2-kernel" class="headerlink" title="2.2 kernel"></a>2.2 kernel</h2><p>在此文件内定义</p><p>bsp&#x2F;modules&#x2F;common&#x2F;camera&#x2F;interface&#x2F;sprd_sensor.h</p><p>往上补一个就行了.</p><pre><code>#define SENSOR_IO_PD_CIF       \        _IOW(SENSOR_IOC_MAGIC,  29, uint8_t)</code></pre><p>在这个文件中对应函数中补充下发</p><p>bsp\modules\common\camera\sensor\sprd_sensor_core.c</p><pre><code>static long sprd_sensor_file_ioctl(struct file *file, unsigned int cmd,......    case SENSOR_IO_PD_CIF:        ret = sprd_sensor_io_set_pd_cif(arg);        break;</code></pre><p>实现也在这里一并实现了吧.因为我这边是直接 用cam mot的位置去映射，就没有继续封装了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">sprd_sensor_io_set_pd_cif</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> power_level;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> vdd_val = <span class="number">0</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> sensor_id = <span class="number">1</span>; <span class="comment">//front sensor id = 1 由于我是挂在前摄上的供电，所以要通过前摄的配电节点来访问我下面的供电配置.</span></span><br><span class="line"></span><br><span class="line">        ret = <span class="built_in">copy_from_user</span>(&amp;power_level, (<span class="type">unsigned</span> <span class="type">char</span> *)arg,</span><br><span class="line">                            <span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>));</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vdd_val = <span class="built_in">sprd_sensor_get_voltage_value</span>(power_level);</span><br><span class="line">            <span class="keyword">if</span>(power_level == <span class="number">1</span>)   <span class="comment">//这个和sensor驱动中对应. 看实际上1/0 分别对应的是上电和下电.</span></span><br><span class="line">            &#123;</span><br><span class="line">                vdd_val = <span class="number">2800000</span>; <span class="comment">//CIF供电2.8v 后续记得改. 这个影响功耗</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                vdd_val = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">pr_info</span>(<span class="string">&quot;cif vdd_val=%d power_level=%d&quot;</span>,vdd_val,power_level);</span><br><span class="line">            ret = <span class="built_in">sprd_sensor_set_voltage</span>(sensor_id, vdd_val,SENSOR_REGULATOR_CAMMOT_ID_E); <span class="comment">//实际上下的电压操作</span></span><br><span class="line">            <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">pr_info</span>(<span class="string">&quot;cif set cammot successfully\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">pr_info</span>(<span class="string">&quot;cif set cammot fail\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述我加的log只是为了我方便debug，实际过程都可以直接删点多余的log.</p><p>到此供电已经完成了.</p><p>接下来梳理下读取io口电平的操作</p><h1 id="3-读取"><a href="#3-读取" class="headerlink" title="3 读取"></a>3 读取</h1><h2 id="3-1-hal"><a href="#3-1-hal" class="headerlink" title="3.1 hal"></a>3.1 hal</h2><p>这边我也是从梳理sensor驱动开始，因为这样好理解.</p><p>gc13a0_drv_access_val 中做如下操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cmr_int ret = SENSOR_FAIL;</span><br><span class="line">   SENSOR_VAL_T *param_ptr = (SENSOR_VAL_T *)param;</span><br><span class="line">   <span class="type">int</span> cif_value = <span class="number">0</span>;</span><br><span class="line">   <span class="type">char</span> test[PROPERTY_VALUE_MAX] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">   </span><br><span class="line"><span class="built_in">SENSOR_IC_CHECK_HANDLE</span>(handle);</span><br><span class="line"><span class="built_in">SENSOR_IC_CHECK_PTR</span>(param_ptr);</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">sensor_ic_drv_cxt</span> * sns_drv_cxt = (<span class="keyword">struct</span> sensor_ic_drv_cxt *)handle; </span><br><span class="line">   cif_value = <span class="built_in">hw_sensor_read_cif</span>(sns_drv_cxt-&gt;hw_handle); <span class="comment">//这个是主要的操作</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SENSOR_LOGI</span>(<span class="string">&quot;sensor gc13a0: param_ptr-&gt;type=%x&quot;</span>, param_ptr-&gt;type);</span><br><span class="line">   <span class="keyword">if</span>(cif_value == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">property_set</span>(<span class="string">&quot;persist.vendor.cam.back.cif&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       <span class="built_in">SENSOR_LOGI</span>(<span class="string">&quot;set cif 1&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">property_set</span>(<span class="string">&quot;persist.vendor.cam.back.cif&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">       <span class="built_in">SENSOR_LOGI</span>(<span class="string">&quot;set cif 0&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">property_get</span>(<span class="string">&quot;persist.vendor.cam.back.cif&quot;</span>, test, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">   <span class="built_in">SENSOR_LOGI</span>(<span class="string">&quot;test cif:%s&quot;</span>,test);</span><br></pre></td></tr></table></figure><p>hw_sensor_read_cif在如下位置声明</p><p>vendor&#x2F;sprd&#x2F;modules&#x2F;libcamera&#x2F;sensor&#x2F;hw_drv&#x2F;hw_sensor_drv.h</p><pre><code>cmr_int hw_sensor_read_cif(cmr_handle hw_handle);</code></pre><p>跟供电一样在另外一个位置实现ioctrl下发到kernel</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cmr_int <span class="title">hw_sensor_read_cif</span><span class="params">(cmr_handle hw_handle)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ATRACE_BEGIN</span>(__FUNCTION__);</span><br><span class="line">    cmr_int ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CHECK_HANDLE</span>(hw_handle);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">hw_drv_cxt</span> *hw_drv_cxt = (<span class="keyword">struct</span> hw_drv_cxt *)hw_handle; <span class="comment">//ioctrl下发到kernel上</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">ioctl</span>(hw_drv_cxt-&gt;fd_sensor, SENSOR_IO_READ_CIF, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ATRACE_END</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-kernel"><a href="#3-2-kernel" class="headerlink" title="3.2 kernel"></a>3.2 kernel</h2><p>kernel这部分的逻辑和上述的供电的相似.只不过一个是下电压，一个是读电压.</p><p>bsp&#x2F;modules&#x2F;common&#x2F;camera&#x2F;interface&#x2F;sprd_sensor.h 中补充id</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SENSOR_IO_READ_CIF\</span></span><br><span class="line"><span class="meta">_IOW(SENSOR_IOC_MAGIC,28, uint32_t)</span></span><br></pre></td></tr></table></figure><p>bsp&#x2F;modules&#x2F;common&#x2F;camera&#x2F;sensor&#x2F;sprd_sensor_core.c 中实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> SENSOR_IO_READ_CIF:</span><br><span class="line">        ret = <span class="built_in">sprd_sensor_io_read_cif</span>(); <span class="comment">//通过id下发</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">sprd_sensor_io_read_cif</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = <span class="built_in">sprd_sensor_read_cif_value</span>();</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_info</span>(<span class="string">&quot;read cif successfully\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;read cif fail\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看</p><p>sprd_sensor_read_cif_value</p><p>具体实现在:</p><p>bsp&#x2F;modules&#x2F;common&#x2F;camera&#x2F;sensor&#x2F;sprd_sensor_drv.c</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sprd_sensor_read_cif_value</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> gpio_id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sprd_sensor_dev_info_tag</span> *p_dev;</span><br><span class="line">    p_dev = <span class="built_in">sprd_sensor_get_dev_context</span>(<span class="number">0</span>); <span class="comment">//映射挂在后主摄的dts上.</span></span><br><span class="line">    gpio_id = p_dev-&gt;gpio_tab[SPRD_SENSOR_PWN_GPIO_TAG_E];</span><br><span class="line">    <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309:gpio id =%d&quot;</span>,gpio_id);</span><br><span class="line">    ret = <span class="built_in">gpio_direction_input</span>(gpio_id); </span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309: set gpio in successful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309:set gpio_value fail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = <span class="built_in">gpio_get_value</span>(gpio_id);<span class="comment">// 直接读gpio电压的值</span></span><br><span class="line">    <span class="keyword">if</span>(ret &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309:cif_value = %d&quot;</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309:get gpio_value fail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细的流程图如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">sensor_drv -&gt; hw_sensor_drv: hw_sensor_power_down_cif</span><br><span class="line"></span><br><span class="line">hw_sensor_drv-&gt;sprd_sensor_core:SENSOR_IO_PD_CIF</span><br><span class="line"></span><br><span class="line">sprd_sensor_core-&gt;sprd_sensor_core:sprd_sensor_io_set_pd_cif</span><br><span class="line"></span><br><span class="line">sensor_drv -&gt; hw_sensor_drv: hw_sensor_read_cif</span><br><span class="line"></span><br><span class="line">hw_sensor_drv-&gt;sprd_sensor_core:SENSOR_IO_READ_CIF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sprd_sensor_core-&gt;sprd_sensor_core:sprd_sensor_read_cif_value</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> camera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> camera </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sensor控制另外一个sensor上下电</title>
      <link href="/2024/11/10/Android/hal/sensor%E6%8E%A7%E5%88%B6%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AAsensor%E4%B8%8A%E4%B8%8B%E7%94%B5/"/>
      <url>/2024/11/10/Android/hal/sensor%E6%8E%A7%E5%88%B6%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AAsensor%E4%B8%8A%E4%B8%8B%E7%94%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-描述"><a href="#1-描述" class="headerlink" title="1 描述"></a>1 描述</h1><p>在另外一个sensor驱动中控制另外一个sensor的上电</p><h1 id="2-打开so"><a href="#2-打开so" class="headerlink" title="2 打开so"></a>2 打开so</h1><p>vendor&#x2F;sprd&#x2F;modules&#x2F;libcamera&#x2F;sensor&#x2F;sensor_drv_u.c</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> cmr_int <span class="title">sensor_drv_ic_identify</span><span class="params">(<span class="keyword">struct</span> sensor_drv_context *sensor_cxt,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      cmr_u32 sensor_id, cmr_u32 identify_off)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sensor_drv_lib</span> libPtrsc500cs;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sensor_drv_lib</span> *libPtr = &amp;libPtrsc500cs;</span><br><span class="line">    <span class="type">void</span> *(*sc500cs_power_sequence_for_creepage)(<span class="type">void</span>) = <span class="literal">NULL</span>;   </span><br><span class="line">    </span><br><span class="line">  ...</span><br><span class="line">        <span class="keyword">if</span>((sensor_id == <span class="number">2</span>) &amp;&amp; (<span class="number">0</span> == <span class="built_in">strcmp</span>(slot_sensor_info_list[<span class="number">1</span>].sensor_name, <span class="string">&quot;sc500cs_frontdd&quot;</span>))) &#123;</span><br><span class="line">        libPtr-&gt;drv_lib_handle = <span class="built_in">dlopen</span>(<span class="string">&quot;libsensor_sc500cs_frontdd.so&quot;</span>, RTLD_NOW);</span><br><span class="line">        <span class="keyword">if</span> (!libPtr-&gt;drv_lib_handle) &#123;</span><br><span class="line">            <span class="built_in">SENSOR_LOGE</span>(<span class="string">&quot;sc500cs sensor lib handle failed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *(<span class="type">void</span> **)&amp;sc500cs_power_sequence_for_creepage = <span class="built_in">dlsym</span>(libPtr-&gt;drv_lib_handle, <span class="string">&quot;sc500cs_power_sequence_for_creepage&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!sc500cs_power_sequence_for_creepage) &#123;</span><br><span class="line">                <span class="built_in">SENSOR_LOGE</span>(<span class="string">&quot;sc500cs_power_sequence_for_creepage open lib function failed&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">SENSOR_LOGD</span>(<span class="string">&quot;sc500cs_power_sequence_for_creepage before&quot;</span>);</span><br><span class="line">                <span class="built_in">sc500cs_power_sequence_for_creepage</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dlclose</span>(libPtr-&gt;drv_lib_handle);</span><br><span class="line">        libPtr-&gt;drv_lib_handle = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-调用"><a href="#3-调用" class="headerlink" title="3 调用"></a>3 调用</h1><p>在打开的so中调用对应的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sc500cs_power_sequence_for_creepage</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">SENSOR_LOGD</span>(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sensor_drv_context</span> sns_cxt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sensor_drv_context</span> *sensor_cxt = &amp;sns_cxt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sensor_ic_drv_cxt</span> sensor_drv_cxt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sensor_ic_drv_cxt</span> *sns_drv_cxt = &amp;sensor_drv_cxt;</span><br><span class="line">    cmr_handle hw_drv_handle = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">hw_drv_init_para</span> input_ptr;</span><br><span class="line">    cmr_int fd_sensor = SENSOR_FD_INIT;</span><br><span class="line"></span><br><span class="line">    SENSOR_AVDD_VAL_E dvdd_val = SENSOR_AVDD_1200MV;</span><br><span class="line">    SENSOR_AVDD_VAL_E avdd_val = SENSOR_AVDD_2800MV;</span><br><span class="line">    SENSOR_AVDD_VAL_E iovdd_val = SENSOR_AVDD_1800MV;</span><br><span class="line">    BOOLEAN reset_level = SENSOR_LOW_PULSE_RESET;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sensor_clean_info(sensor_cxt);</span></span><br><span class="line">    input_ptr.sensor_id = <span class="number">1</span>;</span><br><span class="line">    input_ptr.caller_handle = sensor_cxt;</span><br><span class="line">    fd_sensor = <span class="built_in">hw_sensor_drv_create</span>(&amp;input_ptr, &amp;hw_drv_handle);</span><br><span class="line">    <span class="built_in">SENSOR_LOGD</span>(<span class="string">&quot;fd sensor=%d, hw_drv_handle-&gt;fd_sensor=%d&quot;</span>, fd_sensor, hw_drv_handle-&gt;fd_sensor);</span><br><span class="line">    <span class="keyword">if</span> ((SENSOR_FD_INIT == fd_sensor) || (<span class="literal">NULL</span> == hw_drv_handle)) &#123;</span><br><span class="line">        <span class="built_in">SENSOR_LOGE</span>(<span class="string">&quot;sc500cs hw sensor drv create error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sensor_cxt-&gt;fd_sensor = fd_sensor;</span><br><span class="line">        sensor_cxt-&gt;hw_drv_handle = hw_drv_handle;</span><br><span class="line">        sensor_cxt-&gt;sensor_hw_handler = hw_drv_handle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sns_drv_cxt-&gt;hw_handle = (<span class="keyword">struct</span> sensor_ic_drv_cxt *)hw_drv_handle;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">hw_sensor_set_reset_level</span>(sns_drv_cxt-&gt;hw_handle, reset_level);</span><br><span class="line">    <span class="built_in">hw_sensor_set_avdd_val</span>(sns_drv_cxt-&gt;hw_handle, SENSOR_AVDD_CLOSED);</span><br><span class="line">    <span class="built_in">hw_sensor_set_dvdd_val</span>(sns_drv_cxt-&gt;hw_handle, SENSOR_AVDD_CLOSED);</span><br><span class="line">    <span class="built_in">hw_sensor_set_iovdd_val</span>(sns_drv_cxt-&gt;hw_handle, SENSOR_AVDD_CLOSED);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">2</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">hw_sensor_set_iovdd_val</span>(sns_drv_cxt-&gt;hw_handle, iovdd_val);</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">1</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">hw_sensor_set_dvdd_val</span>(sns_drv_cxt-&gt;hw_handle, dvdd_val);</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">1</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">hw_sensor_set_reset_level</span>(sns_drv_cxt-&gt;hw_handle, !reset_level);</span><br><span class="line">    <span class="built_in">hw_sensor_set_avdd_val</span>(sns_drv_cxt-&gt;hw_handle, avdd_val);</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">hw_sensor_set_reset_level</span>(sns_drv_cxt-&gt;hw_handle, reset_level);</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">1</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">hw_sensor_set_dvdd_val</span>(sns_drv_cxt-&gt;hw_handle, SENSOR_AVDD_CLOSED);</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">1</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">hw_sensor_set_iovdd_val</span>(sns_drv_cxt-&gt;hw_handle, SENSOR_AVDD_CLOSED);</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">2</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">hw_sensor_drv_delete</span>(hw_drv_handle);</span><br><span class="line">    <span class="built_in">SENSOR_LOGD</span>(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-说明"><a href="#4-说明" class="headerlink" title="4 说明"></a>4 说明</h1><p>这种方式可以直接cat 对应gpio的高低电平以及PMIC的电位变化</p><p>(GPIO 实际对应GPIO+偏移64)</p><p>例如检查GPIO41则要grep  GPIO 105的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">while true ;do</span><br><span class="line">&#123;</span><br><span class="line">adb shell cat /sys/kernel/debug/gpio |grep 105</span><br><span class="line">sleep 1</span><br><span class="line">adb shell cat /sys/kernel/debug/LDO_VDDCAMD1/enable</span><br><span class="line">&#125;</span><br><span class="line">done</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hal </category>
          
          <category> camera </category>
          
      </categories>
      
      
        <tags>
            
            <tag> camera </tag>
            
            <tag> hal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>meta工具acdk获取camera</title>
      <link href="/2024/11/10/Android/hal/meta%E5%B7%A5%E5%85%B7acdk%E8%8E%B7%E5%8F%96camera/"/>
      <url>/2024/11/10/Android/hal/meta%E5%B7%A5%E5%85%B7acdk%E8%8E%B7%E5%8F%96camera/</url>
      
        <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h1><p>meta工具需要获取到cameraModuleInfo,然后把这个信息给到工具，工具需要字符串匹配检查.(<strong>meta这个工具自检就应该被废弃，太没有用了</strong>)</p><p>对于我们camera驱动来说，要完成的工作无非两点，一个就是创建节点，给予hal和上层ap的权限(selinux),其二就是把这个信息存好给返回给工具.</p><p>对于这个需求的难点.如果对我来说就是camerahalserver要在关机状态下先自启一遍，保证把相关的Camera info先拷贝给节点.因为关机状态下的cameraProvider是不启动的.</p><p>关机下init.rc 去启动cameraProvider的流程，我到现在都懒得去整理，没有好一点的项目练手这部分，找机会再说.</p><h1 id="2-流程"><a href="#2-流程" class="headerlink" title="2 流程"></a>2 流程</h1><p>节点的创建，我这边不想再说了，这边做的节点就是一坨屎.</p><p>老子要是有空就全部删了 重做.</p><p>下面主要描述下meta的工作流程和camera的资源获取.</p><p>meta的路径:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;meta</p><p>我这边主要先关注这个文件<strong>FtModule.cpp</strong></p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;meta&#x2F;common&#x2F;src&#x2F;FtModule.cpp</p><p>获取节点信息的代码非常简单，打开这个节点，获取copy过来就可以了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CAM_INFO_PATH  <span class="string">&quot;/proc/cameraModuleInfo&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> <span class="title">read_cam_info</span><span class="params">(<span class="type">char</span>* peer_buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">255</span>];</span><br><span class="line"><span class="type">ssize_t</span> byte_read = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> inode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (peer_buf == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> META_FAILED;</span><br><span class="line"></span><br><span class="line">inode = <span class="built_in">open</span>(CAM_INFO_PATH, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (inode &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">META_LOG</span>(<span class="string">&quot;[Meta][FT] read_cam_info open %s fail!&quot;</span>, CAM_INFO_PATH);</span><br><span class="line"><span class="keyword">return</span> META_FAILED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">byte_read = <span class="built_in">read</span>(inode, buf, <span class="built_in">sizeof</span>(buf) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">META_LOG</span>(<span class="string">&quot;[Meta][FT] read_cam_info: %s&quot;</span>, buf);</span><br><span class="line"><span class="built_in">close</span>(inode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(peer_buf, <span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line"><span class="keyword">return</span> META_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在这个函数执行对应cmd</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FtModCustomer::exec</span><span class="params">(Frame **pFrm*)</span></span></span><br><span class="line"><span class="function">    ...</span></span><br><span class="line"><span class="function">    <span class="title">switch</span><span class="params">(req-&gt;cmd.m_u1Dummy)</span></span></span><br><span class="line"><span class="function">        ...</span></span><br><span class="line"><span class="function">            <span class="keyword">case</span> 4:</span></span><br><span class="line"><span class="function">META_LOG(<span class="string">&quot;[Meta][FT] read cam info&quot;</span>);</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">acdkIFInit</span>())&#123; <span class="comment">//跟踪这个 </span></span><br><span class="line">    ft_cnf.status = <span class="built_in">read_cam_info</span>(peer_buf); <span class="comment">//获取节点信息</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ft_cnf.status = META_FAILED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>acdkIFInit 中使用了ioctrl 我自定义的ACDK_CMD_SET_HAL_INIT 来完成camerahal 的信息自启动获取.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">acdkIFInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ACDK_FEATURE_INFO_STRUCT rAcdkFeatureInfo;</span><br><span class="line">    <span class="type">bool</span> bRet;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> u4RetLen;</span><br><span class="line">    <span class="type">int</span> srcDev = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//====== Create ACDK Object ======</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Mdk_Open</span>() == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">META_LOG</span>(<span class="string">&quot;Mdk_Open() Fail&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//====== Select Camera Sensor ======</span></span><br><span class="line">    rAcdkFeatureInfo.puParaIn = (MUINT8 *)&amp;srcDev;</span><br><span class="line">    rAcdkFeatureInfo.u4ParaInLen = <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    rAcdkFeatureInfo.puParaOut = <span class="literal">NULL</span>;</span><br><span class="line">    rAcdkFeatureInfo.u4ParaOutLen = <span class="number">0</span>;</span><br><span class="line">    rAcdkFeatureInfo.pu4RealParaOutLen = &amp;u4RetLen;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">META_LOG</span>(<span class="string">&quot;%s : srcDev:%d\n&quot;</span>,__FUNCTION__,srcDev);</span><br><span class="line">    bRet = <span class="built_in">Mdk_IOControl</span>(ACDK_CMD_SET_SRC_DEV, &amp;rAcdkFeatureInfo);</span><br><span class="line">    <span class="keyword">if</span> (!bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">META_LOG</span>(<span class="string">&quot;ACDK_FEATURE_SET_SRC_DEV Fail: %d\n&quot;</span>,srcDev);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bRet = <span class="built_in">Mdk_IOControl</span>(ACDK_CMD_SET_HAL_INIT, &amp;rAcdkFeatureInfo); <span class="comment">//主要是跟踪这个位置的代码</span></span><br><span class="line">    <span class="keyword">if</span> (!bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">META_LOG</span>(<span class="string">&quot;ACDK_CMD_SET_HAL_INIT Fail: %d\n&quot;</span>,srcDev);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">META_LOG</span>(<span class="string">&quot;ACDK_CMD_SET_HAL_INIT ok: srcDev%d\n&quot;</span>,srcDev);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个文件中新添加对应的cmd(<strong>ACDK_COMMAND_END</strong>)</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;include&#x2F;mtkcam&#x2F;main&#x2F;acdk&#x2F;AcdkCommon.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    ++ACDK_CMD_SET_HAL_INIT,</span><br><span class="line">    ACDK_COMMAND_END</span><br><span class="line">&#125;eACDK_COMMAND;</span><br></pre></td></tr></table></figure><p>好了 到这部基本就可以使用这个cmd.</p><p>接下来就是通过这个cmd 做对应的操作了</p><p>这个ioctrl 的cmd的</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;main&#x2F;acdk&#x2F;v4.0&#x2F;src&#x2F;acdk&#x2F;AcdkMain.cpp</p><p><strong>Mdk_IOControl</strong>的实际实现是通过一下的这个函数.直接在里面加我需要的camera hal的操作即可.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">AcdkMain::sendcommand</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+    <span class="keyword">else</span> <span class="keyword">if</span>(a_u4Ioctl == ACDK_CMD_SET_HAL_INIT)</span><br><span class="line">+    &#123;</span><br><span class="line">+        <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] ioctrl a_u4Ioctl=%d&quot;</span>,a_u4Ioctl);</span><br><span class="line">+        err = <span class="built_in">sensorInit</span>();</span><br><span class="line">+        <span class="keyword">if</span> (err != ACDK_RETURN_NO_ERROR)</span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] Sensor setting Fail. err(0x%x)&quot;</span>,err);</span><br><span class="line">+            err = ACDK_RETURN_API_FAIL;</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">else</span></span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] Sensor setting ok&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        err = <span class="built_in">getSensorInfo</span>();</span><br><span class="line">+        <span class="keyword">if</span>(err != ACDK_RETURN_NO_ERROR)</span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] getSensorInfo error(0x%x)&quot;</span>,err);</span><br><span class="line">+            err = ACDK_RETURN_API_FAIL;</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">else</span></span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] getSensorInfo ok&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        <span class="comment">//====== Initialize AcdkMhal ======</span></span><br><span class="line">+        err = m_pAcdkMhalObj-&gt;<span class="built_in">acdkMhalInit</span>();</span><br><span class="line">+        <span class="keyword">if</span>(err != ACDK_RETURN_NO_ERROR)</span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] acdkMhalInit Fail(0x%x)&quot;</span>, err);</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">else</span></span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] acdkMhalInit ok&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        err = m_pAcdkMhalObjEng-&gt;<span class="built_in">acdkMhalInit</span>();</span><br><span class="line">+        <span class="keyword">if</span>(err != ACDK_RETURN_NO_ERROR)</span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] acdkMhalInit eng Fail(0x%x)&quot;</span>, err);</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">else</span></span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] acdkMhalInit eng ok&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(a_u4Ioctl == ACDK_CMD_SET_OPERATION_MODE)</span><br><span class="line">     &#123;</span><br><span class="line">         eACDK_OPERA_MODE eOpMode = ACDK_OPT_NONE_MODE;</span><br></pre></td></tr></table></figure><h1 id="3-编译debug"><a href="#3-编译debug" class="headerlink" title="3 编译debug"></a>3 编译debug</h1><h2 id="3-1-meta"><a href="#3-1-meta" class="headerlink" title="3.1 meta"></a>3.1 meta</h2><p>对于meta部分:直接看这个Android.mk</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;meta&#x2F;common&#x2F;Android.mk</p><pre><code>LOCAL_MODULE:=meta_tst</code></pre><p>目标模块名字是这个.我本来以为是编译出来so或者a文件，结果编译出来一个二进制文件就叫meta_tst.</p><p>直接push到vendor&#x2F;bin&#x2F;中就可以. meta的工具是直接通过这个bin 来下cmd交互的.我也不想研究，早该弃用的东西没什么软用.这一套和车机ais_server和ais_be_server的交互倒是很相似的.</p><pre><code>adb push  meta_tst vendor/bin/meta_tst</code></pre><p>理论上这个meta_tst可以直接在手机上运行. 当然是直接运行其main函数.而不是通过工具来操作的.</p><p>这个我不想梳理，没啥用. 知道改meta路径下的文件push  meta_tst到 vendor&#x2F;bin&#x2F;即可.</p><h2 id="3-2-acdk"><a href="#3-2-acdk" class="headerlink" title="3.2 acdk"></a>3.2 acdk</h2><p>我们本质上是通过acdk已经写好的函数来完成操作的.</p><p>acdk代码路径:</p><p>外部接口头文件说明:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;include&#x2F;mtkcam&#x2F;main&#x2F;acdk</p><p>该so库主要实现代码:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;main&#x2F;acdk</p><p>这边主要用到v4.0(<strong>能观察到mtk源码和很多其他的acdk，那些都是针对单独模块做的.我这个是最源生的</strong>.)</p><p>然后我们看到对应的mk文件:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;main&#x2F;acdk&#x2F;v4.0&#x2F;src&#x2F;Android.mk</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := libacdk</span><br></pre></td></tr></table></figure><p>从这里就能知道编译生成的文件是libacdk.so</p><p>push路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push libacdk.so vendor/lib64/</span><br></pre></td></tr></table></figure><p>同理需要杀掉cameraProvider才能生效.</p><p>mtk对cameraProvider进行了封装,是camerahalserver.所以杀掉camerahalserver即可</p><p>从上述内容基本了解到如何编译，但是怎么debug呢？这是关机的状态.如果一直拿meta工具去debug,要不停地重启和抓log.效率极其低下。因为进meta模式机器经常卡死，要好久才能开机.</p><p>于是乎，这边就用到mtk自己编写的测试文件.平台的专业就专业在每个模块都是可以做单独的测试，都写好了对应的接口，push到vendor&#x2F;bin下运行即可.</p><p>对应的test文件路径也在其对应的模块下.</p><p>示例如下:</p><p><strong>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;main&#x2F;acdk&#x2F;v4.0&#x2F;src&#x2F;test</strong></p><p>main.cpp 函数入口，我自己debug的时候基本删的很干净，一来是方便debug，二来是跑得快.只跑我要的代码块即可.</p><p>main中其他的我不关注.只要关注这个</p><pre><code>ret *=* main_testMdk(argc, argv, &amp;(crcResults[loop]));</code></pre><p>main_testMdk在test_mdk.cpp中实现</p><p>这个编译是生成acdk_camshottest  然后push到vendor&#x2F;bin&#x2F;</p><p>直接在手机里运行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vendor/bin/acdk_camshottest  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hal </category>
          
          <category> camera </category>
          
          <category> meta </category>
          
          <category> acdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> camera </tag>
            
            <tag> hal </tag>
            
            <tag> meta </tag>
            
            <tag> acdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lightroomv</title>
      <link href="/2024/11/10/Android/3rd/lightroomv/"/>
      <url>/2024/11/10/Android/3rd/lightroomv/</url>
      
        <content type="html"><![CDATA[<h1 id="1-lightroomv"><a href="#1-lightroomv" class="headerlink" title="1 lightroomv"></a>1 lightroomv</h1><p>三方apk lightroomv 拍照. 一次性只能拍照4张，无法生成第5张图片.</p><p>很明显能看到异常的时候会有如下的报错log,到这里hal就没有收到任何拍照请求.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上一张拍照请求到hal,下述<span class="built_in">log</span>. pic_req =1 ，拍照请求到hal 查收了</span></span><br><span class="line">05-13 17:32:18.966   560 12747 D Cam3HWI : 2317, processCaptureRequest: camId=0, bufs_num=2, frame_num=49, cap_intent=2, pic_req=1, first_regular_req=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">已经报错</span></span><br><span class="line">05-13 16:53:39.869  8798 12489 W ImageReader_JNI: Unable to acquire a buffer item, very likely client tried to acquire more than maxImages buffers</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下面就无法打印出对应的拍照请求.</span></span><br></pre></td></tr></table></figure><h1 id="2-JNI"><a href="#2-JNI" class="headerlink" title="2 JNI"></a>2 JNI</h1><p>我们camera相关的会涉及如下路径的JNI<br>frameworks&#x2F;base&#x2F;media&#x2F;jni      (这个是多媒体相关的，主要涉及到拍照的image相关的内容)</p><p>编译的so 为libmedia_jni.so</p><p>frameworks&#x2F;base&#x2F;core&#x2F;jni</p><p>编译的so为libandroid_runtime.so</p><p>具体查看编译什么可以去看对应目录文件下Android.bp文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cc_library_shared &#123;</span><br><span class="line">    name: <span class="string">&quot;libandroid_runtime&quot;</span>,</span><br><span class="line">    host_supported: true,</span><br><span class="line">    cflags: [</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cc_library_shared &#123;</span><br><span class="line">    name: <span class="string">&quot;libmedia_jni&quot;</span>,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>举个例子<br>1.android_hardware_Camera.cpp 这个文件中如下的内容:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> JNINativeMethod camMethods[] = &#123;</span><br><span class="line">  &#123; <span class="string">&quot;getNumberOfCameras&quot;</span>,</span><br><span class="line">    <span class="string">&quot;()I&quot;</span>,</span><br><span class="line">    (<span class="type">void</span> *)android_hardware_Camera_getNumberOfCameras &#125;,</span><br></pre></td></tr></table></figure><p>对于java hardware 中的虚函数  getNumberOfCameras使用的实际方法是通过这个JNI的方法映射过来. 实际使用函数是这个文件中的android_hardware_Camera_getNumberOfCameras</p><ol start="2"><li></li></ol><p><code>ImageReader</code>允许应用程序直接获取渲染到<code>surface</code>的图形数据，并转换为图片</p><p>更为详细的内容可以查阅<a href="https://developer.android.google.cn/reference/android/media/ImageReader.html">https://developer.android.google.cn/reference/android/media/ImageReader.html</a></p><p>frameworks&#x2F;base&#x2F;media&#x2F;java&#x2F;android&#x2F;media&#x2F;ImageReader.java中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">nativeImageSetup</span><span class="params">(Image i)</span>;</span><br></pre></td></tr></table></figure><p>实际上调用的是如下位置的内容.下述是其映射关系.</p><p>frameworks&#x2F;base&#x2F;media&#x2F;jni&#x2F;android_media_ImageReader.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> JNINativeMethod gImageReaderMethods[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;nativeClassInit&quot;</span>,        <span class="string">&quot;()V&quot;</span>,                        (<span class="type">void</span>*)ImageReader_classInit &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeInit&quot;</span>,             <span class="string">&quot;(Ljava/lang/Object;IIIIJ)V&quot;</span>,  (<span class="type">void</span>*)ImageReader_init &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeClose&quot;</span>,            <span class="string">&quot;()V&quot;</span>,                        (<span class="type">void</span>*)ImageReader_close &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeReleaseImage&quot;</span>,     <span class="string">&quot;(Landroid/media/Image;)V&quot;</span>,   (<span class="type">void</span>*)ImageReader_imageRelease &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeImageSetup&quot;</span>,       <span class="string">&quot;(Landroid/media/Image;)I&quot;</span>,   (<span class="type">void</span>*)ImageReader_imageSetup &#125;, </span><br><span class="line">    &#123;<span class="string">&quot;nativeGetSurface&quot;</span>,       <span class="string">&quot;()Landroid/view/Surface;&quot;</span>,   (<span class="type">void</span>*)ImageReader_getSurface &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeDetachImage&quot;</span>,      <span class="string">&quot;(Landroid/media/Image;)I&quot;</span>,   (<span class="type">void</span>*)ImageReader_detachImage &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeDiscardFreeBuffers&quot;</span>, <span class="string">&quot;()V&quot;</span>,                      (<span class="type">void</span>*)ImageReader_discardFreeBuffers &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/13/13qiodPny2csMCW.png" alt="JNI.png"></p><h1 id="3-追溯原因"><a href="#3-追溯原因" class="headerlink" title="3 追溯原因"></a>3 追溯原因</h1><p>报错内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">05-13 16:53:39.869  8798 12489 W ImageReader_JNI: Unable to acquire a buffer item, very likely client tried to acquire more than maxImages buffers</span><br></pre></td></tr></table></figure><p>报错位置:frameworks&#x2F;base&#x2F;media&#x2F;jni&#x2F;android_media_ImageReader.cpp.我们可以把相关的logv 都改成可以打印出的loge看具体的差异.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> jint <span class="title">ImageReader_imageSetup</span><span class="params">(JNIEnv* env, jobject thiz, jobject image)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ALOGV</span>(<span class="string">&quot;%s:&quot;</span>, __FUNCTION__);</span><br><span class="line">    JNIImageReaderContext* ctx = <span class="built_in">ImageReader_getContext</span>(env, thiz);</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">jniThrowException</span>(env, <span class="string">&quot;java/lang/IllegalStateException&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ImageReader is not initialized or was already closed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BufferItemConsumer* bufferConsumer = ctx-&gt;<span class="built_in">getBufferConsumer</span>();</span><br><span class="line">    BufferItem* buffer = ctx-&gt;<span class="built_in">getBufferItem</span>();<span class="comment">//看这个函数的调用</span></span><br><span class="line">    <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;Unable to acquire a buffer item, very likely client tried to acquire more than&quot;</span></span><br><span class="line">            <span class="string">&quot; maxImages buffers&quot;</span>); <span class="comment">//这是报错的位置.我们看buffer 为NULL,打印了这个log</span></span><br><span class="line">        <span class="keyword">return</span> ACQUIRE_MAX_IMAGES;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BufferItem* <span class="title">JNIImageReaderContext::getBufferItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mBuffers.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">//&lt;==== 这是实际返回的NULL,说明mBuffers.empty()是为空了.然后往下面的内容看构造函数.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Return a BufferItem pointer and remove it from the list</span></span><br><span class="line">    List&lt;BufferItem*&gt;::iterator it = mBuffers.<span class="built_in">begin</span>();   <span class="comment">//用一块，擦一块</span></span><br><span class="line">    BufferItem* buffer = *it;</span><br><span class="line">    mBuffers.<span class="built_in">erase</span>(it);</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">JNIImageReaderContext::<span class="built_in">JNIImageReaderContext</span>(JNIEnv* env,</span><br><span class="line">        jobject weakThiz, jclass clazz, <span class="type">int</span> maxImages) :</span><br><span class="line">    <span class="built_in">mWeakThiz</span>(env-&gt;<span class="built_in">NewGlobalRef</span>(weakThiz)),</span><br><span class="line">    <span class="built_in">mClazz</span>((jclass)env-&gt;<span class="built_in">NewGlobalRef</span>(clazz)),</span><br><span class="line">    <span class="built_in">mFormat</span>(<span class="number">0</span>),</span><br><span class="line">    <span class="built_in">mDataSpace</span>(HAL_DATASPACE_UNKNOWN),</span><br><span class="line">    <span class="built_in">mWidth</span>(<span class="number">-1</span>),</span><br><span class="line">    <span class="built_in">mHeight</span>(<span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxImages; i++) &#123;   <span class="comment">//这是构造上述BufferItem的内容,只申请了4块空间.</span></span><br><span class="line">        BufferItem* buffer = <span class="keyword">new</span> BufferItem;</span><br><span class="line">        mBuffers.<span class="built_in">push_back</span>(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关路径:frameworks&#x2F;base&#x2F;media&#x2F;java&#x2F;android&#x2F;media&#x2F;ImageReader.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attempts to acquire the next image from the underlying native implementation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note that unexpected failures will throw at the JNI level.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> si A blank SurfaceImage.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> One of the &#123;<span class="doctag">@code</span> ACQUIRE_*&#125; codes that determine success or failure.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #ACQUIRE_MAX_IMAGES</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #ACQUIRE_NO_BUFS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #ACQUIRE_SUCCESS</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">acquireNextSurfaceImage</span><span class="params">(SurfaceImage si)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mCloseLock) &#123;</span><br><span class="line">        <span class="comment">// A null image will eventually be returned if ImageReader is already closed.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> ACQUIRE_NO_BUFS;</span><br><span class="line">        <span class="keyword">if</span> (mIsReaderValid) &#123;</span><br><span class="line">            status = nativeImageSetup(si);<span class="comment">//这边会对应到JNI android_media_ImageReader的对应方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">            <span class="keyword">case</span> ACQUIRE_SUCCESS:</span><br><span class="line">                si.mIsImageValid = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> ACQUIRE_NO_BUFS:</span><br><span class="line">            <span class="keyword">case</span> ACQUIRE_MAX_IMAGES: <span class="comment">//这是JNI 上报的最大值</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Unknown nativeImageSetup return code &quot;</span> + status);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only keep track the successfully acquired image, as the native buffer is only mapped</span></span><br><span class="line">        <span class="comment">// for such case.</span></span><br><span class="line">        <span class="keyword">if</span> (status == ACQUIRE_SUCCESS) &#123;</span><br><span class="line">            mAcquiredImages.add(si);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/16/EXj5iBuNPFo3cy4.png" alt="JNI.png"></p><p>相关log 关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CameraService: CameraService::connect call</span><br><span class="line">Camera2ClientBase: Camera 0: Opened</span><br><span class="line">CameraDeviceClient: CameraDeviceClient</span><br><span class="line">open_: open camera</span><br><span class="line">hal3: Constructor</span><br><span class="line">cap_intent=2</span><br><span class="line">ImageReader_JNI</span><br></pre></td></tr></table></figure><p>这是三方打开相机JNI的相关log.这里我们能清楚看到maxImages的值为4. 这也解释通这个三方apk只能拍4张照片的原因.一旦超过4张照片就不再申请新的buffer去拍照存第5张图片.而我们正常apk  有的设置拍照8张后会立马清空缓冲，然后重新拍照,所以不存在这个问题.也有平台专门对JNI进行更好的兼容,所以也不存在这个问题.但是目前看来这个apk 在mtk 和高通不同的项目上也存在拍照4张后无法拍第5张的情况.说明这个apk 确定很拉胯.而且平板项目这个apk没有拍照的功能.</p><p><img src="https://s2.loli.net/2022/05/16/NLPwStgWZJ1hRi5.png" alt="2022-05-16 14-21-45 的屏幕截图.png"></p><h1 id="4-修改方案"><a href="#4-修改方案" class="headerlink" title="4 修改方案"></a>4 修改方案</h1><p>在acquireNextSurfaceImage拿buffer 满的时候.给它逐一释放关闭.image.close();</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">diff --git a/media/java/android/media/ImageReader.java b/media/java/android/media/ImageReader.java</span></span><br><span class="line"><span class="comment">index 87c3bb9..8b7f8d0 100644</span></span><br><span class="line"><span class="comment">--- a/media/java/android/media/ImageReader.java</span></span><br><span class="line"><span class="comment">+++ b/media/java/android/media/ImageReader.java</span></span><br><span class="line"><span class="meta">@@ -36,6 +36,7 @@</span></span><br><span class="line"> import java.util.List;</span><br><span class="line"> import java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"> import java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"><span class="addition">+import android.util.Log;</span></span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * &lt;p&gt;The ImageReader class allows direct application access to image data</span><br><span class="line"><span class="meta">@@ -58,7 +59,7 @@</span></span><br><span class="line">  * production rate.&lt;/p&gt;</span><br><span class="line">  */</span><br><span class="line"> public class ImageReader implements AutoCloseable &#123;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+    private final static String TAG = &quot;qtf&quot;;</span></span><br><span class="line">     /**</span><br><span class="line">      * Returned by nativeImageSetup when acquiring the image was successful.</span><br><span class="line">      */</span><br><span class="line"><span class="meta">@@ -469,6 +470,10 @@</span></span><br><span class="line">                     si.mIsImageValid = true;</span><br><span class="line">                 case ACQUIRE_NO_BUFS:</span><br><span class="line">                 case ACQUIRE_MAX_IMAGES:</span><br><span class="line"><span class="addition">+                    for(Image image : mAcquiredImages)&#123;  //sprd_qtf</span></span><br><span class="line"><span class="addition">+                        image.close();</span></span><br><span class="line"><span class="addition">+                        &#125;</span></span><br><span class="line"><span class="addition">+                    Log.i(TAG, &quot;imageBuffer has been clear!&quot;);</span></span><br><span class="line">                     break;</span><br><span class="line">                 default:</span><br><span class="line">                     throw new AssertionError(&quot;Unknown nativeImageSetup return code &quot; + status);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 3rd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3rd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下openCV搭建</title>
      <link href="/2024/11/10/%E6%90%AD%E5%BB%BA/linux%E4%B8%8BopenCV%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/11/10/%E6%90%AD%E5%BB%BA/linux%E4%B8%8BopenCV%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="1-依赖项"><a href="#1-依赖项" class="headerlink" title="1 依赖项"></a>1 依赖项</h1><p>先下载好相关的依赖项目.确保编译成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev</span><br><span class="line">sudo apt-get install libopencv-dev</span><br></pre></td></tr></table></figure><h1 id="2-源码编译"><a href="#2-源码编译" class="headerlink" title="2 源码编译"></a>2 源码编译</h1><p>clone 源码,我在gitee上放了一份。但是呢，实际上cmake的时候,部分内容还是会链接到github上。如果某些同学连接不到github的网站,那也没辙。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/joenero/opencv.git</span><br></pre></td></tr></table></figure><p>进入源码目录,创建一个单独文件build</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd opencv</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure><p>cmake 一下到&#x2F;usr&#x2F;local&#x2F;目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure><p>执行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j8</span><br></pre></td></tr></table></figure><p>将make生成的文件下载到系统目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h1><p>用vim打开这个文件。因为这些只读文件。有些文本编辑器可能无法强制修改。但是vim是万能的。强制保存命令为 : w ! sudo tee %</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>在打开的文件添加makefile安装路劲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure><p>再运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h1 id="4示例代码"><a href="#4示例代码" class="headerlink" title="4示例代码"></a>4示例代码</h1><h2 id="4-1-cmake"><a href="#4-1-cmake" class="headerlink" title="4.1 cmake"></a>4.1 cmake</h2><p>cmakelist.txt添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include_directories(/usr/local/include/opencv4/opencv2)</span><br><span class="line">set (OpenCV_LIBS /usr/local/lib)</span><br><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line">target_link_libraries(helloCV $&#123;OpenCV_LIBS&#125;) #helloCV 工程名字</span><br></pre></td></tr></table></figure><p>完整的cmakelist.txt如下:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.17</span>)</span><br><span class="line"><span class="keyword">project</span>(myTool)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(/usr/local/<span class="keyword">include</span>/opencv4/opencv2)</span><br><span class="line"><span class="keyword">set</span> (OpenCV_LIBS /usr/local/lib)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">add_executable</span>(myTool main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(myTool <span class="variable">$&#123;OpenCV_LIBS&#125;</span>) <span class="comment">#helloCV 工程名字</span></span><br></pre></td></tr></table></figure><p>demon代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;../test.jpeg&quot;</span>);</span><br><span class="line"> <span class="comment">//   cout&lt;&lt;img;</span></span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;My picture: &quot;</span>&lt;&lt; img.<span class="built_in">size</span>() &lt;&lt;endl;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;image&quot;</span>,img);</span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现报错： Gtk-Message: 21:57:35.293: Failed to load module “canberra-gtk-module” 则安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcanberra-gtk-module</span><br></pre></td></tr></table></figure><h2 id="4-2-Qt使用"><a href="#4-2-Qt使用" class="headerlink" title="4.2 Qt使用"></a>4.2 Qt使用</h2><p>在.pro文件中添加如下内容,根据个人情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += /usr/local/include \</span><br><span class="line">                /usr/local/include/opencv4 \</span><br><span class="line"></span><br><span class="line">LIBS += /usr/local/lib/libopencv*</span><br></pre></td></tr></table></figure><p>出现这个错误，只需要在对应的文件中添加头文件<br>#include &lt;opencv2&#x2F;highgui&#x2F;highgui_c.h&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenNCC_View/widget.cpp:330: error: ~~‘cvGetWindowHandle’~~ was not declared in this scope</span><br><span class="line">                 if (!cvGetWindowHandle(&quot;OpenNCC&quot;))</span><br><span class="line">                      ^~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令之AWK过滤提取需要的信息</title>
      <link href="/2024/11/10/Linux/Linux-%E5%91%BD%E4%BB%A4%E4%B9%8BAWK%E8%BF%87%E6%BB%A4%E6%8F%90%E5%8F%96%E9%9C%80%E8%A6%81%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
      <url>/2024/11/10/Linux/Linux-%E5%91%BD%E4%BB%A4%E4%B9%8BAWK%E8%BF%87%E6%BB%A4%E6%8F%90%E5%8F%96%E9%9C%80%E8%A6%81%E7%9A%84%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>AWK是一个优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。这种编程及数据操作语言（其名称得自于它的创始人阿尔佛雷德·艾侯、彼得·温伯格和布莱恩·柯林汉姓氏的首个字母）的最大功能取决于一个人所拥有的知识。awk经过改进生成的新的版本nawk,gawk，现在默认linux系统下日常使用的是gawk，用命令可以查看正在应用的awk的来源（ls -l &#x2F;bin&#x2F;awk ）</p><h1 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2 基本用法"></a>2 基本用法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;pattern + action&#125;&#x27;</span> &lt;file&gt;</span><br></pre></td></tr></table></figure><p>pattern表示在数据中要查找的内容</p><p>action是要执行的一系列的命令</p><p>awk 通过指定分隔符，将一行分为多个字段，依次用 $1、$2 … $n 表示第一个字段、第二个字段… 第n个字段。</p><p>举例有以下一个文件。我们已经知道的格式如下。想过滤的PSS和RSS之后的文件，对应的字段是3和6。通过以下命令即可过滤出第3个字段和第6个字段的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TOTAL PSS:   102206            TOTAL RSS:   127132      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102438            TOTAL RSS:   127364      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102494            TOTAL RSS:   127420      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102578            TOTAL RSS:   127504      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102610            TOTAL RSS:   127536      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102558            TOTAL RSS:   127484      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102378            TOTAL RSS:   127304      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102594            TOTAL RSS:   127520      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102554            TOTAL RSS:   127480      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102262            TOTAL RSS:   127188      TOTAL SWAP (KB):        0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print $3, $6&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><h2 id="2-1-分隔符"><a href="#2-1-分隔符" class="headerlink" title="2.1 分隔符"></a>2.1 分隔符</h2><p>awk默认分割符是空格和制表符,上面的例子中,若希望把逗号去掉则加 -F即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F &#x27;:|,&#x27; &#x27;&#123;print $3 $6&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><p>这里制定冒号（:）和逗号（,）作为作为分割符号</p><h2 id="2-2-条件判断"><a href="#2-2-条件判断" class="headerlink" title="2.2 条件判断"></a>2.2 条件判断</h2><p>将第三个字段满足小于102262的数字真与否打印出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print $3&lt;102262&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><p>打印结果为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>将第三个字段满足小于102262的那一行的信息打印出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;$3 &lt;102262 &#123;print $0&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><p>打印结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOTAL PSS:   102206            TOTAL RSS:   127132      TOTAL SWAP (KB):        0</span><br></pre></td></tr></table></figure><h2 id="2-3-统计计算"><a href="#2-3-统计计算" class="headerlink" title="2.3 统计计算"></a>2.3 统计计算</h2><h3 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN &#123;max=0&#125; &#123;if($3&gt;max) max=$3&#125; END &#123;print &quot;max PSS:&quot;, max&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><h3 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN &#123;min=102262&#125; &#123;if($3&lt;min) min=$3&#125; END &#123;print &quot;min PSS:&quot;, min&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><h3 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN &#123;sum=0&#125; &#123;sum+=$3&#125; END &#123;print &quot;mean steer:&quot;, sum/NR&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火焰图抓取</title>
      <link href="/2024/11/10/Android/%E7%81%AB%E7%84%B0%E5%9B%BE%E6%8A%93%E5%8F%96/"/>
      <url>/2024/11/10/Android/%E7%81%AB%E7%84%B0%E5%9B%BE%E6%8A%93%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>Simpleperf 是 Android 的原生 CPU 分析工具。 它可用于分析 Android 应用程序和在 Android 上运行的本机进程。 它可以在 Android 上分析 Java 和 C++ 代码。 simpleperf 可执行文件可以在 Android &gt;&#x3D;L 上运行，而 Python 脚本可以在 Android &gt;&#x3D; N 上使用。</p><p>火焰图是基于 perf 结果产生的 SVG 图片，用来展示进程在一段时间 CPU 的调用栈。</p><p>现代的CPU具有一个硬件组件，称为性能监控单元(PMU)。PMU具有一些硬件计数器，计数一些诸如 经历了多少次CPU周期，执行了多少条指令，或发生了多少次缓存未命中 等的事件。</p><p>Linux内核将这些硬件计数器包装到硬件perf事件 (hardware perf events)中。此外，Linux内核还提供了独立于硬件的软件事件和跟踪点事件。Linux内核通过 perf_event_open 系统调用将这些都暴露给了用户空间，这正是simpleperf所使用的机制。</p><p>Simpleperf具有三个主要的功能：stat,record 和 report。</p><p>Stat命令给出了在一个时间段内被分析的进程中发生了多少事件的摘要。以下是它的工作原理：</p><pre><code>给定用户选项，simpleperf通过对linux内核进行系统调用来启用分析。Linux 内核在调度到被分析进程时启用计数器。分析之后，simpleperf从内核读取计数器，并报告计数器摘要。</code></pre><p>Record 命令在一段时间内记录剖析进程的样本。它的工作原理如下：</p><pre><code>给定用户选项，simpleperf通过对linux内核进行系统调用来启用分析。Simpleperf 在simpleperf 和 linux 内核之间创建映射缓冲区。Linux 内核在调度到被分析进程时启用计数器。每次给定数量的事件发生时，linux 内核将样本转储到映射缓冲区。Simpleperf 从映射缓冲区读取样本并生成 perf.data。</code></pre><p>Report 命令读取 “perf.data” 文件及所有被剖析进程用到的共享库，并输出一份报告，展示时间消耗在了哪里。</p><h1 id="2-抓取火焰图"><a href="#2-抓取火焰图" class="headerlink" title="2 抓取火焰图"></a>2 抓取火焰图</h1><p>simpleperf是集成在谷歌内部.直接使用即可</p><p>抓取30s的perf.data 路径随便你. 我一般放在data&#x2F;vendor&#x2F;camera_dump</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">adb shell simpleperf record -p 13248 -g --duration 30 -o /sdcard/perf.data</span><br><span class="line"></span><br><span class="line">adb shell simpleperf record -p 1791 -g --duration 30 -o /data/vendor/camera_dump/simpleperf_mcu.data</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">adb shell 进入到手机:</span><br><span class="line">simpleperf record -g -p `pidof cameraserver` --duration 60 -o /sdcard/perf.data</span><br><span class="line">simpleperf record -g -p `pidof camerahalserver` --duration 60 -o /sdcard/perf.data</span><br><span class="line">//示例中的 &quot; -p 13248 &quot; 指的是需要分析的进程号 </span><br><span class="line">//示例中的 &quot; -p 1791 &quot; 指的是需要分析的进程号 </span><br></pre></td></tr></table></figure><h1 id="3-SDK火焰图"><a href="#3-SDK火焰图" class="headerlink" title="3 SDK火焰图"></a>3 SDK火焰图</h1><p>谷歌官网下载Android NDK： <a href="https://developer.android.google.cn/ndk/downloads/">https://developer.android.google.cn/ndk/downloads/</a></p><p>进入到android-ndk-r25b-linux&#x2F;android-ndk-r25b&#x2F;simpleperf<br>将上述生产的perf.data文件拉取出来放到这个同级目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/perf.data</span><br></pre></td></tr></table></figure><p>直接运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python report_html.py</span><br></pre></td></tr></table></figure><p>会生成对应的火焰图.这个火焰图有三种呈现方式.呈现的偏重点不一样.</p><p>以下都是进入到adb shell中执行操作:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MCPS每秒百万个时钟</span><br><span class="line">（Million Clocks Per Second）</span><br><span class="line">simpleperf record -g -e cpu-cycles -p `pidof camerahalserver` --duration 60 -o /sdcard/perf.data --call-graph dward</span><br><span class="line"></span><br><span class="line">MIPS每秒数百万条指令</span><br><span class="line">（Million Instructions Per Second）</span><br><span class="line">simpleperf record -g -e instructions -p `pidof camerahalserver` --duration 60 -o /sdcard/perf.data --call-graph dward</span><br><span class="line"></span><br><span class="line">MCPS_MIPS:</span><br><span class="line">simpleperf record -g -e cpu-cycles,instructions -p `pidof camerahalserver` --duration 60 -o /sdcard/perf.data --call-graph dward</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以将相关线程合入到一个报告表中</span></span><br><span class="line">simpleperf record -g -e cpu-cycles,instructions -p `pidof camerahalserver`,`pidof cameraserver`,`pidof com.sec.android.app.camera` --duration 60 -o /sdcard/perf.data --call-graph dward</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">simpleperf record -g --exclude-pid 813 880 11872 --duration 60 -o /sdcard/perf.data --call-graph dwarf</span><br><span class="line"></span><br><span class="line">-e cpu-cycles</span><br><span class="line"></span><br><span class="line">python report_html.py</span><br></pre></td></tr></table></figure><h1 id="4-分析火焰图"><a href="#4-分析火焰图" class="headerlink" title="4 分析火焰图"></a>4 分析火焰图</h1><p>火焰图x-y轴代表</p><ul><li><p>x轴代表的不是时间,而是采样总量</p></li><li><p>y轴代表方法的调用栈深度,倘若方法调用用的越多,火焰越高,顶部的栈就是当前正在执行的方法</p></li></ul><p>栈宽含义(cpu时间)</p><ul><li>宽度可以理解为CPU采样率的占比,越宽代表当前栈在采样数中占比高,其可能为三种含义:<ol><li>函数运行时间较长</li><li>该函数被调用次数多</li></ol></li></ul><p>平顶现象：</p><ul><li>平顶现象是由于当前程序的采样数在总采样数中占用过高导致的,出现这种现象需要特意关注一下程序具体的调用栈,采样比例占用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章入门python去写shell</title>
      <link href="/2024/11/10/Python/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%85%A5%E9%97%A8python%E5%8E%BB%E5%86%99shell/"/>
      <url>/2024/11/10/Python/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%85%A5%E9%97%A8python%E5%8E%BB%E5%86%99shell/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h1><p>有的编程语言要求必须提前将所有源代码一次性转换成二进制指令，也就是生成一个可执行程序（比如 Windows 下的 .exe 文件），比如C语言、<a href="http://c.biancheng.net/cplus/">C++</a>、Golang、<a href="http://c.biancheng.net/asm/">汇编语言</a>等，它们都属于<strong>编译型语言</strong>，使用的转换工具称为<strong>编译器</strong>。</p><p>有的编程语言可以一边执行一边转换，需要哪些源代码就转换哪些源代码，不会生成可执行程序，比如 <a href="http://c.biancheng.net/python/">Python</a>、<a href="http://c.biancheng.net/js/">JavaScript</a>、<a href="http://c.biancheng.net/php/">PHP</a>、Shell 等，这类编程语言称为<strong>解释型语言</strong>，使用的转换工具称为<strong>解释器</strong></p><p>注意:python使用的是对其方式来区分同一级的逻辑控制。不使用分号(；)所以设置的时候，一定要设置好一个tab对4个空格，不要使用tab,不然换到其他编辑器中，容易报语法错误。tab和空格不要混用。</p><p>python 中都是通过import去导入一些系统包或者自己写的包。这个和java的操作很相似,也和c中的#include &lt;某些.h&gt;相似。</p><p>毕竟市面上绝大多数的python的底层逻辑都是用c去写的。</p><p>加减乘除取余就不赘述了。所有编程的语法都是大同小异的。</p><p>python在linux的环境下不需要安装，我们使用的图形化界面都是以python和一些桌面管理为基础的。</p><p>一般存在的路径在&#x2F;usr&#x2F;bin&#x2F;python, 查看python 默认的版本,直接python -v</p><p>python文件开头解释器说明。我是用python3版本的。编码格式为utf-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>函数入口我一般是这样定义的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>然后在定义出main函数的运行内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">执行语句</span><br></pre></td></tr></table></figure><h2 id="1-1-流程控制"><a href="#1-1-流程控制" class="headerlink" title="1.1 流程控制"></a>1.1 流程控制</h2><p>选择控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ifTest</span>():</span><br><span class="line">    i = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;随机生成的数字为&quot;</span>,i)</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是个偶数&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是个奇数&quot;</span>)</span><br></pre></td></tr></table></figure><p>选择控制的格式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">执行命令</span><br><span class="line"><span class="keyword">elif</span> 条件:</span><br><span class="line">执行命令</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">执行命令</span><br></pre></td></tr></table></figure><p>循环控制 while循环和for循环的示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">whileTest</span>(<span class="params">i</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> :</span><br><span class="line">        i -=<span class="number">1</span></span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;循环的第&quot;</span>,count,<span class="string">&quot;次&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forTest</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;循环的第&quot;</span>,count,<span class="string">&quot;次&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,i,<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;步进循环的第&quot;</span>,count,<span class="string">&quot;次&quot;</span>)</span><br></pre></td></tr></table></figure><p>python不提供switch语句。虽然可以自己实现，但是我觉得没啥必要的。</p><h2 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h2><p>python中有6个标准的数据类型:</p><ul><li>Number(数字型号)</li><li>String(字符串型号)</li><li>List(列表)</li><li>Tuple(元组)</li><li>Sets(集合)</li><li>Dictionaries(字典)</li></ul><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>int(x) 将x转换为一个整数。</p><p>float(x) 将x转换到一个浮点数。</p><p>complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。</p><p>complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>字符串直接拿引号包起来就可以了。</p><p>索引下标[-1]表示倒数第一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">s1 = s[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s[0] = &#x27;</span> + s1)   <span class="comment">#s[0] = 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s[3] = &#x27;</span>+ s[<span class="number">3</span>])  <span class="comment">#s[3] = 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;倒数第三个数为：&#x27;</span> + s[-<span class="number">3</span>])   <span class="comment">#倒数第三个数为：6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最后一个数为：&#x27;</span> + s[-<span class="number">1</span>])     <span class="comment">#最后一个数为：8</span></span><br></pre></td></tr></table></figure><p>切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">s2 = s[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s[0:3] = &#x27;</span> + s2)     </span><br><span class="line"><span class="comment">#s[0:3] = 012</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;整个字符串如下：&#x27;</span> + s[:])    </span><br><span class="line"><span class="comment">#整个字符串如下：0123456789</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;整个字符串如下：&#x27;</span> + s[<span class="number">0</span>:])   </span><br><span class="line"><span class="comment">#整个字符串如下：0123456789</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;前两个字符：&#x27;</span> + s[:<span class="number">2</span>])      </span><br><span class="line"><span class="comment">#前两个字符：01</span></span><br></pre></td></tr></table></figure><p>跳首</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;01234567489&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]) <span class="comment">#行首0,行尾6，间隔2 取 打印出024</span></span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])      <span class="comment">#024649</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">4</span>:<span class="number">0</span>:-<span class="number">1</span>])   <span class="comment">#倒着取:4321</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>::-<span class="number">1</span>])    <span class="comment">#3210</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>::-<span class="number">1</span>])   <span class="comment">#98476543210</span></span><br></pre></td></tr></table></figure><h4 id="常见的字符串操作"><a href="#常见的字符串操作" class="headerlink" title="常见的字符串操作"></a>常见的字符串操作</h4><ul><li><p>大小写操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;adbCDefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;首字母大写&quot;</span>,s.capitalize())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全部大写  &quot;</span>,s.upper())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全部小写  &quot;</span>,s.lower())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;大小写互换&quot;</span>,s.swapcase())</span><br></pre></td></tr></table></figure></li><li><p>删除空格操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;  xtt  123&#x27;</span></span><br><span class="line">s_1 = s.strip()             <span class="comment">#删除字符串前后的空格    </span></span><br><span class="line"><span class="built_in">print</span>(s_1)                  <span class="comment">#xtt 123</span></span><br><span class="line">s_2 = s.strip(<span class="string">&#x27;%&#x27;</span>)          <span class="comment">#删除字符串前后的空格 </span></span><br><span class="line"><span class="built_in">print</span>(s_2)                  <span class="comment">#  xtt  123</span></span><br><span class="line">s_3 = s.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)     <span class="comment">#替换掉所有的空格</span></span><br><span class="line"><span class="built_in">print</span>(s_3)                  <span class="comment">#使用join()方法将字符串中所有的空格删除</span></span><br><span class="line">s=<span class="string">&#x27; This is a demo code&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(s.split()))   <span class="comment">#Thisisademo</span></span><br><span class="line"><span class="comment">#其中，join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</span></span><br></pre></td></tr></table></figure></li><li><p>计算字符出现的次数count</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;  xtt  123 xtt&#x27;</span></span><br><span class="line">count = s.count(<span class="string">&quot;t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(count)  <span class="comment">#打印出现的次数为4次</span></span><br></pre></td></tr></table></figure></li><li><p>分割。split不加任何参数则默认空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;I am the king of amazon!!!&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;I am the: king: of amazon:&#x27;</span></span><br><span class="line">s_1 = s1.split()</span><br><span class="line"><span class="built_in">print</span>(s_1)              <span class="comment">#[&#x27;I&#x27;, &#x27;am&#x27;, &#x27;the&#x27;, &#x27;king&#x27;, &#x27;of&#x27;, &#x27;amazon!!!&#x27;]</span></span><br><span class="line">s_2 = s2.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s_2)              <span class="comment">#[&#x27;I am the&#x27;, &#x27; king&#x27;, &#x27; of amazon&#x27;, &#x27;&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s12_1 = <span class="string">&#x27;我叫&#123;&#125;,今年&#123;&#125;岁，爱好&#123;&#125;,再说一下我叫&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;小明&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;学习&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s12_1)  </span><br><span class="line">s12_2 = <span class="string">&#x27;我叫&#123;0&#125;,今年&#123;1&#125;岁，爱好&#123;2&#125;,再说一下我叫&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;小明&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;学习&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s12_2)</span><br><span class="line">s12_3 = s1 = <span class="string">&#x27;我叫&#123;name&#125;,今年&#123;age&#125;岁，爱好&#123;hobby&#125;,再说一下我叫&#123;name&#125;&#x27;</span>.<span class="built_in">format</span>(name = <span class="string">&#x27;小明&#x27;</span>,age = <span class="number">18</span>,hobby = <span class="string">&#x27;学习&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s12_3)</span><br></pre></td></tr></table></figure></li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>list列表可以存放多个值，创建list列表，使用[ ]，多个值之间用逗号隔开，不限制数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 =[<span class="string">&quot;joenero&quot;</span>,<span class="string">&quot;amazon&quot;</span>,<span class="string">&quot;joker&quot;</span>,<span class="string">&quot;father&quot;</span>,<span class="string">&quot;was&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(l1)<span class="comment">#[&#x27;joenero&#x27;, &#x27;amazon&#x27;, &#x27;joker&#x27;, &#x27;father&#x27;, &#x27;was&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(l1[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])<span class="comment">#[&#x27;joenero&#x27;, &#x27;joker&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(l1[-<span class="number">3</span>:-<span class="number">1</span>])<span class="comment">#[&#x27;joker&#x27;, &#x27;father&#x27;]</span></span><br></pre></td></tr></table></figure><p>list相关的方法如下:</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.append(元素)</td><td>向列表最后追加一个元素</td></tr><tr><td>.extend(元素)</td><td>向列表最后追加多个元素</td></tr><tr><td>.insert(下标,元素)</td><td>向指定的下标位置插入元素</td></tr><tr><td>.pop(下标)</td><td>移除下标指定的元素，如果没有指定的下标，则删除最后一个元素</td></tr><tr><td>.remove(元素)</td><td>删除指定元素</td></tr><tr><td>.clear()</td><td>清空列表</td></tr><tr><td>.index(元素)</td><td>获取指定元素在list列表中的第一次出现的下标</td></tr><tr><td>.count(元素)</td><td>统计元素在list列表中出现的次数</td></tr><tr><td>.reverse()</td><td>反转list列表</td></tr><tr><td>.sort()</td><td>排序.默认是升序，降序添加参数:reverse&#x3D;True</td></tr></tbody></table><p>这三比较复杂,会在之后单独拎出来讲解</p><ul><li>Tuple(元组)</li><li>Sets(集合)</li><li>Dictionaries(字典)</li></ul><h1 id="2-添加help参数"><a href="#2-添加help参数" class="headerlink" title="2 添加help参数"></a>2 添加help参数</h1><p>一般我们写一个需要外部输入的参数，我们都需要借用解析器argparse去获取和解析对应的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">help</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;PSS文件&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-o&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;生成的图片&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="built_in">print</span>(args)  <span class="comment">#打印存储的所有输入值</span></span><br><span class="line">    <span class="built_in">print</span>(args.f)<span class="comment">#打印存储的-f 之后的值</span></span><br><span class="line">    <span class="built_in">print</span>(args.o)<span class="comment">#打印存储的-o 之后的值</span></span><br></pre></td></tr></table></figure><p>然后运行这个py文件后面加-h的参数就可以显示对应的help值</p><p>例如上面的内容显示如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python plot.py -h</span><br><span class="line">usage: plot.py [-h] [-f F] [-o O]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help  show this help message and exit</span><br><span class="line">  -f F        PSS文件</span><br><span class="line">  -o O        生成的图片</span><br></pre></td></tr></table></figure><h1 id="3-文件操作"><a href="#3-文件操作" class="headerlink" title="3 文件操作"></a>3 文件操作</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><p>open</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = open(&quot;fileName.txt&quot;,mode=&quot;r&quot;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>‘r’</td><td>以「只读」模式打开文件，如果指定文件不存在，则会报错，默认情况下文件指针指向文件开头</td></tr><tr><td>‘w’</td><td>以「只写」模式打开文件，如果文件不存在，则根据 filename 创建相应的文件，如果文件已存在，则会覆盖原文件</td></tr><tr><td>‘a’</td><td>以「追加」模式打开文件，如果文件已存在，文件指针会指向文件尾部，将内容追加在原文件后面，如果文件不存在，则会新建文件且写入内容</td></tr><tr><td>‘t’</td><td>以「文本文件」模式打开文件</td></tr><tr><td>‘b’</td><td>以「二进制」模式打开文件，主要用于打开图片、音频等非文本文件</td></tr><tr><td>‘+’</td><td>打开文件并允许更新（可读可写），也就是说，使用参数 w+、a+ 也是可以读入文件的，在使用的时候，需要注意区别</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;fileName.txt&quot;</span>,mode=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>,num,<span class="string">&quot;行内容:&quot;</span>,line)</span><br><span class="line">    num +=<span class="number">1</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure></li><li><p>read(): 直接读取整个文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;fileName.txt&quot;</span>,mode=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">fileCon = file.read()</span><br><span class="line"><span class="built_in">print</span>(fileCon)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=<span class="string">r&quot;fileName.txt&quot;</span>,mode=<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure></li><li><p>readline():读一行</p></li><li><p>readlines():按行读取所有数据。结果为列表，一行为一个成员。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>直接举个实际例子如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@File    : main.py</span></span><br><span class="line"><span class="string">@Author  : JoeNero</span></span><br><span class="line"><span class="string">@Time    : 2022/12/30 16:32</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.signal <span class="keyword">import</span> find_peaks</span><br><span class="line"></span><br><span class="line">fileName = <span class="string">&quot;&quot;</span></span><br><span class="line">outTxt   = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">INFO</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">help</span>():</span><br><span class="line">    <span class="keyword">global</span> fileName</span><br><span class="line">    <span class="keyword">global</span> outTxt</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;对应的TXT文件&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-o&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;生成的文件&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    fileName = args.f</span><br><span class="line">    outTxt = args.o</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取解析txt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readTxt</span>(<span class="params">filename</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    aInfo = INFO()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fileinput.<span class="built_in">input</span>(filename):</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">            temp = line.split(<span class="string">&#x27;username:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            temp = temp.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="comment"># print(&quot;temp&quot;,temp)</span></span><br><span class="line">            aInfo.username = temp</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            temp = line.split(<span class="string">&#x27;password:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># print(&quot;temp&quot;,temp)</span></span><br><span class="line">            temp = temp.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">            aInfo.password = temp</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;username&quot;</span>,aInfo.username,<span class="string">&quot;password&quot;</span>,aInfo.password)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#主函数入口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">help</span>()</span><br><span class="line">    <span class="keyword">if</span> fileName == <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(fileName):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入文件不能为空&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        readTxt(fileName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>我这边是有个外部文件。其格式如下，可以通过以上的内容来读取解析其中的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username:xtt</span><br><span class="line">password:123456</span><br></pre></td></tr></table></figure><p>生成临时文件. 路径为&#x2F;tmp&#x2F;tmp06pz62p5 文件名字为随机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    dir_name = tempfile.mkdtemp()</span><br><span class="line">    <span class="built_in">print</span> (dir_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="4-shell"><a href="#4-shell" class="headerlink" title="4 shell"></a>4 shell</h1><p>python有很多操作shell的方式。需要先import 的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><p>第一种方式是直接用os.system(“command”)，其中返回0,表示执行命令成功，明显的缺点是无法将返回的值保存下来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devices = os.system(<span class="string">&quot;adb devices&quot;</span>)</span><br></pre></td></tr></table></figure><p>第二种方式是用os.popen(“command”)</p><p>os.popen() 返回的是 file read 的对象，对其进行读取 read() 的操作可以看到执行的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devices = os.popen(<span class="string">&quot;adb devices&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;deviecs = &quot;</span>,devices.read())</span><br></pre></td></tr></table></figure><p>打印输出的结果为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deviecs =  List of devices attached</span><br><span class="line">L7Z5AABQAILZPBTO        device</span><br></pre></td></tr></table></figure><p>配合下将其修改成如下的内容，就可以把对应的adb设备获取出来，当前只能获取到最上面的那个，可以自己根据逻辑来完善</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devices = os.popen(<span class="string">&quot;adb  devices|awk &#x27;&#123;print $1&#125;&#x27;|sed -n &#x27;2p&#x27;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;deviecs = &quot;</span>,devices.read())</span><br></pre></td></tr></table></figure><p>注意:popen中主要涉及到文件上的操作，但是一些shell中的sleep和拍照等操作不需要返回值还是用system来操作。</p><p>我实际操作拍照的时候，发现存在的这个问题。popen不生效，只有system的才生效。</p><h1 id="5-类"><a href="#5-类" class="headerlink" title="5 类"></a>5 类</h1><p>python中的类和c++的及其相似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义INFO类,用来存储</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">INFO</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line">aInfo = INFO()</span><br><span class="line">aInfo.username = temp</span><br><span class="line">aInfo.password = temp</span><br></pre></td></tr></table></figure><h1 id="6-import"><a href="#6-import" class="headerlink" title="6 import"></a>6 import</h1><p>python import 和包含头文件的用法相似。</p><p>在同一个目录下直接import 文件名即可</p><p>导入模块的方式有如下几种:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hello.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say</span> ():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello,World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#say.py</span></span><br><span class="line"><span class="keyword">import</span> hello</span><br><span class="line">hello.say()</span><br></pre></td></tr></table></figure><p>临时添加模块完整路径如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(&#x27;D:\\python_module&#x27;)</span><br></pre></td></tr></table></figure><p>“from 模块名 import 成员”的形式直接导入指定成员</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda3管理python包环境说明</title>
      <link href="/2024/11/10/%E6%90%AD%E5%BB%BA/anaconda3%E7%AE%A1%E7%90%86python%E5%8C%85%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/11/10/%E6%90%AD%E5%BB%BA/anaconda3%E7%AE%A1%E7%90%86python%E5%8C%85%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>在实际项目开发的时候,我们往往需要不同的python包版本和环境。</p><p>pycharm对此就有很好的器包环境。</p><p>今天要介绍的是anaconda3 这个环境包管理。</p><p>Conda as a package manager helps you find and install packages. If you need a package that requires a different version of Python, you do not need to switch to a different environment manager, because conda is also an environment manager. With just a few commands, you can set up a totally separate environment to run that different version of Python, while continuing to run your usual version of Python in your normal environment.</p><p>—-Conda官网</p><p>anaconda相当于一个包的管理者，去管理这些不同的环境，你可以本地建立多个虚拟环境，并且互相不影响。</p><h1 id="2-安装配置"><a href="#2-安装配置" class="headerlink" title="2 安装配置"></a>2 安装配置</h1><p>下载官网<a href="http://continuum.io/downloads">http://continuum.io/downloads</a></p><p>下载下来一路回车,配置好对应的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 Anaconda3-2021.11-Linux-x86_64.sh</span><br><span class="line">./Anaconda3-2021.11-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>添加conda环境变量,根据本地下载的实际地方路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">export PATH=~/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><p>由于我本地需要一个测试ITS的环境,并且在R版本和S版本的架构中.python的版本要求也不同,所以我同时也需要本地有python2和python3</p><p>新建一个环境，设定的python版本为python2.7，然后会跳出给你安装的相关配置，一路回车。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py2 python=2.7</span><br></pre></td></tr></table></figure><p>激活环境命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate py2</span><br></pre></td></tr></table></figure><p>退出当前环境命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><p>需要在当前环境下安装对应的pip包之前需要先激活对应的环境，然后pip安装即可</p><p>以下是我ITS S版本的python环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py3 python=3.7.9 #这表示创建python版本为3.7.9 ,名字为py3的虚拟环境。不加python=版本 默认是2.7版本</span><br><span class="line">conda activate py3 #激活并进入py3。</span><br><span class="line">conda install opencv=3.4.2 //安装3.4.2版本的opencv 遇见选择Y/N 选择Y 下面都一样</span><br><span class="line">conda install numpy=1.19.2 //安装1.19.2版本的numpy</span><br><span class="line">conda install matplotlib=3.3.2 //安装3.3.2版本的matplotlib</span><br><span class="line">conda install scipy=1.5.2 //安装1.5.2版本的scipy</span><br><span class="line">conda install pyserial=3.5 //安装3.5版本的pyserial</span><br><span class="line">conda install pillow=8.1.0 //安装8.1.0版本的pillow</span><br><span class="line">conda install pyyaml=5.3.1 //安装5.3.1版本的pyyaml</span><br><span class="line">pip install mobly //安装mobly</span><br></pre></td></tr></table></figure><h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h1><p>这边搭建一个AI环境为例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pyAI python=3.7.9</span><br><span class="line">conda activate pyAI #激活并进入环境</span><br><span class="line">pip list #查看当前pip 的包</span><br><span class="line">pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install scikit-learn -i https://pypi.tuna.tsinghua.edu.cn/simple </span><br><span class="line">pip install scipy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install nltk -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install jiaba -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install tensorflow -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install tensorflow_addons  -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>AI安装好，运行如下命令打开对应的界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h1 id="4-使用命令"><a href="#4-使用命令" class="headerlink" title="4 使用命令"></a>4 使用命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs  #查看存在的环境</span><br><span class="line">conda activate 环境 #激活对应的环境</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android编码文件概述</title>
      <link href="/2024/11/10/Android/Android%E7%BC%96%E7%A0%81%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/11/10/Android/Android%E7%BC%96%E7%A0%81%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>需要小心的是修改item后要注意CTS测项testGetWithId(android.media.cts.CamcorderProfileTest)，也就是high profile一定要和分辨率的profile适配，比如spec为1920 x 1080的spec(平台所supprot的)<br>那么high的分辨率和1080p的分辨率一定要一样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EncoderProfile</span> <span class="attr">quality</span>=<span class="string">&quot;1080p&quot;</span> <span class="attr">fileFormat</span>=<span class="string">&quot;3gp&quot;</span> <span class="attr">duration</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Video</span> <span class="attr">codec</span>=<span class="string">&quot;h264&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">bitRate</span>=<span class="string">&quot;17000000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">width</span>=<span class="string">&quot;1920&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">height</span>=<span class="string">&quot;1080&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">frameRate</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Audio</span> <span class="attr">codec</span>=<span class="string">&quot;aac&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">bitRate</span>=<span class="string">&quot;128000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">sampleRate</span>=<span class="string">&quot;48000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">channels</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">EncoderProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EncoderProfile</span> <span class="attr">quality</span>=<span class="string">&quot;high&quot;</span> <span class="attr">fileFormat</span>=<span class="string">&quot;3gp&quot;</span> <span class="attr">duration</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Video</span> <span class="attr">codec</span>=<span class="string">&quot;h264&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bitRate</span>=<span class="string">&quot;17000000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">width</span>=<span class="string">&quot;1920&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">height</span>=<span class="string">&quot;1080&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">frameRate</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Audio</span> <span class="attr">codec</span>=<span class="string">&quot;aac&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bitRate</span>=<span class="string">&quot;128000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">sampleRate</span>=<span class="string">&quot;48000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">channels</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">EncoderProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-标准尺寸"><a href="#2-标准尺寸" class="headerlink" title="2 标准尺寸"></a>2 标准尺寸</h1><p>详细参考谷歌官网说明:</p><p><a href="https://developer.android.com/reference/android/media/CamcorderProfile.html#QUALITY_1080P">https://developer.android.com/reference/android/media/CamcorderProfile.html#QUALITY_1080P</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static final int QUALITY_1080P </span><br><span class="line">public static final int QUALITY_2160P</span><br><span class="line">public static final int QUALITY_2K</span><br><span class="line">public static final int QUALITY_480P</span><br><span class="line">public static final int QUALITY_4KDCI</span><br><span class="line">public static final int QUALITY_720P</span><br><span class="line">public static final int QUALITY_8KUHD</span><br><span class="line">public static final int QUALITY_CIF</span><br><span class="line">public static final int QUALITY_HIGH</span><br><span class="line">public static final int QUALITY_HIGH_SPEED_1080P</span><br></pre></td></tr></table></figure><table><thead><tr><th>标准尺寸</th><th></th><th>常量值</th></tr></thead><tbody><tr><td>QUALITY_1080P</td><td>1920x1080</td><td>6          (0x00000006)</td></tr><tr><td>QUALITY_2160P</td><td>3840x2160</td><td>8          (0x00000008)</td></tr><tr><td>QUALITY_2K</td><td>2048x1080</td><td>12          (0x0000000c)</td></tr><tr><td>QUALITY_480P</td><td>720 x 480</td><td>4          (0x00000004)</td></tr><tr><td>QUALITY_4KDCI</td><td>4096 x 2160</td><td>10          (0x0000000a)</td></tr><tr><td>QUALITY_720P</td><td>1280 x 720</td><td>5          (0x00000005)</td></tr><tr><td>QUALITY_8KUHD</td><td>7680 x 4320</td><td>13          (0x0000000d)</td></tr><tr><td>QUALITY_CIF</td><td>352 x 288</td><td>3          (0x00000003)</td></tr><tr><td>QUALITY_HIGH</td><td>Quality level corresponding to the highest available resolution.</td><td>1          (0x00000001)</td></tr><tr><td>QUALITY_HIGH_SPEED_1080P</td><td>High speed ( &gt;&#x3D; 100fps) quality level corresponding to the 1080p (1920 x 1080 or 1920x1088) resolution.</td><td>2004          (0x000007d4)</td></tr><tr><td>QUALITY_HIGH_SPEED_2160P</td><td>High speed ( &gt;&#x3D; 100fps) quality level corresponding to the 2160p (3840 x 2160) resolution.</td><td>2005          (0x000007d5)</td></tr></tbody></table><p>可以通过如下代码获取到所支持的编码尺寸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static EncoderProfiles getAll (String cameraId, </span><br><span class="line">                int quality)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这个文件实际对应camera video 调用关系.</span><br><span class="line"></span><br><span class="line">系统启动后，通过CamcorderProfile.java：static&#123; &#125; 块，初始化并解析好。以供上层获取。</span><br><span class="line"></span><br><span class="line">进入录像模式后：VideoMode.java：initRecorder——&gt;configRecoderSpec——&gt;getProfile，去获取摄像头或录像的默认配置。</span><br><span class="line"></span><br><span class="line">native层主要是在 /frameworks/av/media/libmedia/MediaProfiles.cpp 文件里加载和检查参数。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake基础</title>
      <link href="/2024/11/10/CPP/cmake%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/11/10/CPP/cmake%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>选自百度百科:</p><p>CMake是一个跨平台的安装（<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91/1258343?fromModule=lemma_inlink">编译</a>）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件，能测试<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067?fromModule=lemma_inlink">编译器</a>所支持的C++特性,类似<a href="https://baike.baidu.com/item/UNIX/219943?fromModule=lemma_inlink">UNIX</a>下的automake。只是 CMake 的<a href="https://baike.baidu.com/item/%E7%BB%84%E6%80%81%E6%A1%A3/4812025?fromModule=lemma_inlink">组态档</a>取名为 CMakeLists.txt。Cmake 并不直接建构出最终的软件，而是产生标准的建构档（如 Unix 的 Makefile 或 <a href="https://baike.baidu.com/item/Windows/165458?fromModule=lemma_inlink">Windows</a> [Visual C++](<a href="https://baike.baidu.com/item/Visual">https://baike.baidu.com/item/Visual</a> C%2B%2B&#x2F;1811800?fromModule&#x3D;lemma_inlink) 的 projects&#x2F;workspaces），然后再依一般的建构方式使用。这使得熟悉某个<a href="https://baike.baidu.com/item/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/298524?fromModule=lemma_inlink">集成开发环境</a>（IDE）的开发者可以用标准的方式建构他的软件，这种可以使用各平台的原生建构系统的能力是 CMake 和 SCons 等其他类似系统的区别之处。</p><p>linux 下系统直接安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmake</span><br></pre></td></tr></table></figure><p>查看cmake版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br><span class="line">cmake version 3.16.3</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure><p>我们一般都是通过cmake生成对应的makefile后来运行make。</p><h1 id="2-单个文件"><a href="#2-单个文件" class="headerlink" title="2 单个文件"></a>2 单个文件</h1><p>只有单个main.cpp的时候可以用如下CMakeLists.txt文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake最低版本需求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工程名称</span></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置C标准还是C++标准</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo</span><br><span class="line">        main.cpp)</span><br></pre></td></tr></table></figure><h1 id="3-多个文件夹"><a href="#3-多个文件夹" class="headerlink" title="3 多个文件夹"></a>3 多个文件夹</h1><p>但是实际开发中玩玩会更加复杂。</p><p>比如:下面每个模块都有自己的文件夹,并且每个文件夹下都有自己对应的头文件和源文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── abstract</span><br><span class="line">│   ├── inc</span><br><span class="line">│   │   └── abstractModel.h</span><br><span class="line">│   └── src</span><br><span class="line">│       └── abstractModel.cpp</span><br><span class="line">├── blueEar</span><br><span class="line">│   ├── inc</span><br><span class="line">│   │   └── blueEarModel.h</span><br><span class="line">│   └── src</span><br><span class="line">│       └── blueEarModel.cpp</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── CmakeOut</span><br><span class="line">├── main.cpp</span><br><span class="line">├── out</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><p>这个时候我们可以看如下的内容。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake最低版本需求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工程名称</span></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置C标准还是C++标准</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set(CMAKE_C_STANDARD 11) #c标准</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)<span class="comment">#c++标准11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置可执行文件输出路径</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set (EXECUTABLE_OUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/out)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include_directories</span> (   abstract/inc/</span><br><span class="line">                        blueEar/inc/</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span> (abstract/src/ abstract_path)</span><br><span class="line"><span class="keyword">aux_source_directory</span> (blueEar/src/ blueEar_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo</span><br><span class="line">        main.cpp</span><br><span class="line">        <span class="variable">$&#123;abstract_path&#125;</span></span><br><span class="line">        <span class="variable">$&#123;blueEar_path&#125;</span>)</span><br></pre></td></tr></table></figure><p>可以看到如上的内容。</p><p>通过include_directories将相关的头文件包含进来</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span></span><br><span class="line">使用的格式如下:</span><br><span class="line"><span class="keyword">include_directories</span> (   abstract/inc/</span><br><span class="line">                        blueEar/inc/</span><br><span class="line">                        )</span><br></pre></td></tr></table></figure><p>另外通过aux_source_directory将相关的cpp文件都加载到对应的变量中</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用的格式如下:</span></span><br><span class="line"><span class="keyword">aux_source_directory</span> (abstract/src/ abstract_path)</span><br><span class="line"><span class="keyword">aux_source_directory</span> (blueEar/src/ blueEar_path)</span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置可执行文件输出路径.会输出到项目文件下的out目录下</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/out)</span><br></pre></td></tr></table></figure><p>cmake过程中会生成大量的中间文件。</p><p>其中的一种做法可以跟我上面一样建立一个 CmakeOut文件夹.</p><p>然后进入到这个文件夹中,运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br></pre></td></tr></table></figure><p>这样就会把编译的中间文件生成到这个目录中,不至于破坏工程的目录。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andoird camera app从零养成计划【二】</title>
      <link href="/2024/11/10/Android/APP/APP-2/"/>
      <url>/2024/11/10/Android/APP/APP-2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-API1"><a href="#1-API1" class="headerlink" title="1 API1"></a>1 API1</h1><p>AndroidManifest.xmlAndroidManifest官方解释是应用清单（manifest意思是货单），每个应用的根目录中都必须包含一个，并且文件名必须一模一样。这个文件中包含了APP的配置信息，系统需要根据里面的内容运行APP的代码，显示界面。示例如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.newcamera&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span>/&gt;</span>   //使用camera的权限</span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span> //写文件的权限</span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span>  //<span class="attr">apk图标</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.NewCamera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.PreviewActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>     //<span class="attr">告知打开apk的主Activity的入口</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于API 1 来说.打开camera 的对象已经封装好.在android&#x2F;hardware&#x2F;Camera.java中.</p><p>Camera API 中主要涉及以下几个关键类:</p><ul><li><p>Camera:操作和管理相机资源.支持相机资源切换.设置预览和拍摄尺寸.设置光圈,曝光等相关参数.</p></li><li><p>SurfaceView:用于绘制相机预览图像.提供实时预览的图像</p></li><li><p>SurfaceHolder:用于控制Surface的一个抽象接口.它可以控制Surface的尺寸,格式与像素等.并可以监视Surface的变化.</p></li><li><p>SurfaceHolder.Callback:用于监听Surface状态变化的接口</p></li></ul><p>SurfaceView和普通的View相比有什么区别呢？</p><p>普通View都是共享一个Surface的,所有的绘制也都在UI线程中进行.因为UI线程还要处理其他逻辑.因此对View的更新速度和绘制帧率无法保证.这显然不适合相机实时预览这种情况.因而SurfaceView持有一个单独Surface.它负责管理这个Surface的格式.尺寸以及显示位置,它的Surface绘制也在单独的线程中进行,因而拥有更高的绘制效率和帧率。</p><p>SurfaceHolder.Callback接口里定义了三个函数:</p><ul><li><strong>surfaceCreated(SufaceHolder holder)</strong>;当Surface第一次创建的时候调用.可以在这个方法里调用camera.open(),camera.setPreviewDisplay()来实现打开相机以及连接Camera与Surface等操作</li><li><strong>surfaceChanged(SurfaceHolder holder,int format,int width,int height)</strong>;当Surface的size,format等发生变化的时候调用,可以在这个方法里调用camera.startPreview()开启预览</li><li><strong>surfaceDestroyed(SurfaceHolder holder)</strong>;</li></ul><p>在打开相机前,我们需要获取到相机的一些基础信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getCameraInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//有多少个摄像头</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">numberOfCameras</span> <span class="operator">=</span> Camera.getNumberOfCameras();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numberOfCameras; ++i) &#123;</span><br><span class="line">        <span class="keyword">final</span> Camera.<span class="type">CameraInfo</span> <span class="variable">cameraInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Camera</span>.CameraInfo();</span><br><span class="line"></span><br><span class="line">        Camera.getCameraInfo(i, cameraInfo);</span><br><span class="line">        <span class="comment">//后置摄像头</span></span><br><span class="line">        <span class="keyword">if</span> (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_BACK) &#123;</span><br><span class="line">            faceBackCameraId = i;</span><br><span class="line">            faceBackCameraOrientation = cameraInfo.orientation;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//前置摄像头</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) &#123;</span><br><span class="line">            faceFrontCameraId = i;</span><br><span class="line">            faceFrontCameraOrientation = cameraInfo.orientation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Log.e(TAG,<span class="string">&quot;faceBackCameraId =&quot;</span>+faceBackCameraId+<span class="string">&quot;\tfaceBackCameraOrientation=&quot;</span>+faceBackCameraOrientation);</span><br><span class="line">    Log.e(TAG,<span class="string">&quot;faceFrontCameraId=&quot;</span>+faceFrontCameraId+<span class="string">&quot;\tfaceFrontCameraOrientation=&quot;</span>+faceFrontCameraOrientation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上打印出来的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">02-09 14:05:28.078  5280  5280 E CameraXTT: faceBackCameraId =0faceBackCameraOrientation=90</span><br><span class="line">02-09 14:05:28.078  5280  5280 E CameraXTT: faceFrontCameraId=1faceFrontCameraOrientation=270</span><br></pre></td></tr></table></figure><h2 id="1-1-打开相机"><a href="#1-1-打开相机" class="headerlink" title="1.1 打开相机"></a>1.1 打开相机</h2><p>知道了相机的相关信息,就可以通过对应的CameraID来打开对应的cameraDevices.注意 只针对单摄.双摄打开原理不一样.示例如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.hardware.Camera;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Camera</span> <span class="variable">camera</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">camera = Camera.open(<span class="number">0</span>);   <span class="comment">//open(参数),参数对应的camera id//针对单摄的情况.可以通过这个方法直接打开对应的device设备.</span></span><br><span class="line"></span><br><span class="line">camera.setPreviewDisplay(sfv_preview.getHolder());<span class="comment">//sfv_preview是定义的SurfaceView,用来呈现相机的预览.</span></span><br><span class="line">camera.setDisplayOrientation(<span class="number">90</span>);   <span class="comment">//让相机旋转90度,相机方向不对会出现拉伸情况.</span></span><br><span class="line">camera.startPreview();</span><br></pre></td></tr></table></figure><p>打开相机后可以获取到一个camera的对象.从这个对象里可以获取和设置相机的各种参数信息.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">camera.getParameters();</span><br><span class="line">这个后面跟对应的参数：</span><br><span class="line">例如:</span><br><span class="line"> camera.getParameters().getAntibanding()</span><br><span class="line"> <span class="comment">//获取预览尺寸</span></span><br><span class="line"> Log.e(TAG,<span class="string">&quot;w&quot;</span>+camera.getParameters().getPreviewSize().width+<span class="string">&quot;h=&quot;</span>+camera.getParameters().getPreviewSize().height);</span><br></pre></td></tr></table></figure><h2 id="1-2-关闭相机"><a href="#1-2-关闭相机" class="headerlink" title="1.2 关闭相机"></a>1.2 关闭相机</h2><p>关闭相机要先停止预览再release()即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">camera.stopPreview();</span><br><span class="line">camera.release();</span><br></pre></td></tr></table></figure><h2 id="1-3-拍照"><a href="#1-3-拍照" class="headerlink" title="1.3 拍照"></a>1.3 拍照</h2><p>拍照通过调用Camera的takePicture()方法来完成的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">takePicture(ShutterCallback shutter, PictureCallback raw, PictureCallback postview, PictureCallback jpeg)</span><br></pre></td></tr></table></figure><p>该方法有三个参数</p><ul><li><p>ShutterCallback shutter:在拍照的瞬间被回调.这里通常可以播放”咔擦”的音效</p></li><li><p>PictureCallback raw:返回未经压缩的图像数据</p></li><li><p>PictureCallback postview:返回postview的图像数据</p></li><li><p>PictureCallback jpeg:返回经过JPEG压缩的图像数据</p><p>我们一般用的是最后一个.实现最后一个PictureCallback即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takePic</span><span class="params">()</span>&#123;</span><br><span class="line">        camera.takePicture(<span class="literal">null</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Camera</span>.PictureCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPictureTaken</span><span class="params">(<span class="type">byte</span>[] data, Camera camera)</span> &#123;</span><br><span class="line">                <span class="type">Bitmap</span> <span class="variable">bmp</span> <span class="operator">=</span> BitmapFactory.decodeByteArray(data, <span class="number">0</span> ,data.length);</span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> Environment.getExternalStorageDirectory().toString()</span><br><span class="line">                                +File.separator</span><br><span class="line">                                +<span class="string">&quot;DCIM/Camera&quot;</span></span><br><span class="line">                                +File.separator</span><br><span class="line">                                +<span class="string">&quot;PicTest_&quot;</span>+System.currentTimeMillis()+<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                Log.e(TAG,<span class="string">&quot;fileName=&quot;</span>+fileName);</span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">                <span class="keyword">if</span>(!file.getParentFile().exists())&#123;</span><br><span class="line">                    file.getParentFile().mkdir();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    BufferedOutputStream bos=<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">                    bmp.compress(Bitmap.CompressFormat.JPEG, <span class="number">80</span>, bos);<span class="comment">//向缓冲区压缩图片</span></span><br><span class="line">                    bos.flush();</span><br><span class="line">                    bos.close();</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;拍照成功，照片保存在&quot;</span>+fileName+<span class="string">&quot;文件之中！&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    <span class="comment">//e.printStackTrace();</span></span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;拍照失败！&quot;</span>+e.toString(), Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">                stopPreview();</span><br><span class="line">                startPreivew();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-API2"><a href="#2-API2" class="headerlink" title="2 API2"></a>2 API2</h1><p>叫出CameraManager ，打开 CameraDevice ，拿住CameraCaptureSession，发送CaptureRequest .</p><p>Camera API2中主要涉及的以下几个关键类:</p><ul><li>CameraManager:摄像头管理器.用于打开和关闭系统摄像头</li><li>CameraCharacteristics:描述摄像头的各种特性.我们可以通过CameraManager的getCameraCharacteristics(@NonNull String cameraId)方法来获取</li><li>CameraDevice:描述系统摄像头.类似早期的Camera</li><li>CameraCaptureSession:Session类.当需要拍照,预览等功能时,需要创建该类的实例.然后通过该实例里的方法进行控制(例如:拍照 capture())</li><li>CaptureRequest:描述了一个操作请求,拍照,预览等操作都需要先传入CaptureRequest参数，具体的参数控制也是通过CameraRequest的成员变量来设置</li><li>CaptureResult:描述拍照完成后的结果</li></ul><p>开发者通过创建CaptureRequest向摄像头发起Capture请求,这些请求会排成一个队列供摄像头处理,摄像头将结果包装在CaptureMetadata中返回给开发者.整个流程建立一个CameraCaptureSession的会话中.</p><h2 id="2-1-打开相机"><a href="#2-1-打开相机" class="headerlink" title="2.1 打开相机"></a>2.1 打开相机</h2><p>打开相机之前,要获取到CameraManger,然后获取相机列表,进而获取各个摄像头(主要是前摄和后摄)的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CameraManager</span> <span class="variable">manager</span> <span class="operator">=</span> (CameraManager) getSystemService(Context.CAMERA_SERVICE);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android_S_ITS重构梳理</title>
      <link href="/2024/11/10/GMS/Andorid_S_ITS%E9%87%8D%E6%9E%84%E6%A2%B3%E7%90%86/"/>
      <url>/2024/11/10/GMS/Andorid_S_ITS%E9%87%8D%E6%9E%84%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>先看its环境搭建的文档.里面有基础操作说明.</p><p>然后为了更好理解梳理its的内容.我顺道整理出its 测试的脚本内容.</p><p>单刀直入.找到这个总的测试文件.我们所有的整跑命令都是从这个文件中调用起来的.</p><p>android-cts-verifier&#x2F;CameraITS&#x2F;tools&#x2F;run_all_tests.py<br>main函数的入口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br></pre></td></tr></table></figure><p>设置输出的tmp文件即测试生成的图片和log 保存的路径.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"><span class="comment"># Make output directories to hold the generated files.</span></span><br><span class="line">topdir = tempfile.mkdtemp(prefix=<span class="string">&#x27;CameraITS_&#x27;</span>)</span><br><span class="line">subprocess.call([<span class="string">&#x27;chmod&#x27;</span>, <span class="string">&#x27;g+rx&#x27;</span>, topdir])</span><br><span class="line">logging.info(<span class="string">&#x27;Saving output files to: %s&#x27;</span>, topdir)</span><br></pre></td></tr></table></figure><p>将输入的sys参数即场景拼接到scenes. 这个是针对直接输入测试cmd后面衔接场景和camera的.(exp:  python tools&#x2F;run_all_tests.py camera&#x3D;0 scenes&#x3D;0)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Override camera &amp; scenes with cmd line values if available</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">list</span>(sys.argv[<span class="number">1</span>:]):</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&#x27;scenes=&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">    scenes = s.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="keyword">elif</span> <span class="string">&#x27;camera=&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">    camera_id_combos = s.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><p>读取测试testBeds. 这边和config.yml对应起来.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read config file and extract relevant TestBed</span></span><br><span class="line">config_file_contents = get_config_file_contents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> config_file_contents[<span class="string">&#x27;TestBeds&#x27;</span>]:</span><br><span class="line">  <span class="keyword">if</span> scenes == [<span class="string">&#x27;sensor_fusion&#x27;</span>]:</span><br><span class="line">    <span class="keyword">if</span> TEST_KEY_SENSOR_FUSION <span class="keyword">not</span> <span class="keyword">in</span> i[<span class="string">&#x27;Name&#x27;</span>].lower():</span><br><span class="line">      config_file_contents[<span class="string">&#x27;TestBeds&#x27;</span>].remove(i)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> TEST_KEY_SENSOR_FUSION <span class="keyword">in</span> i[<span class="string">&#x27;Name&#x27;</span>].lower():</span><br><span class="line">      config_file_contents[<span class="string">&#x27;TestBeds&#x27;</span>].remove(i)</span><br></pre></td></tr></table></figure><p>我们的config.yml 每一个TestBeds:下面会衔接<br>- Name: TEST_BED_TABLET_SCENES  # Need ‘tablet’ in name for tablet scenes</p><p>- Name: TEST_BED_SENSOR_FUSION  # Need ‘sensor_fusion’ in name for SF tests</p><p>分别对应标准灯箱和马达灯箱</p><p>继续往下看. 如果没有直接输入测试cmd后衔接参数. 而是直接python tools&#x2F;run_all_tests.py.</p><p>以下逻辑会走进去判断. 因为这几个值都没写.会直接读取config.yml的对应字符camera和scene后衔接的参数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get test parameters from config file</span></span><br><span class="line">test_params_content = get_test_params(config_file_contents)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> camera_id_combos:</span><br><span class="line">  camera_id_combos = <span class="built_in">str</span>(test_params_content[<span class="string">&#x27;camera&#x27;</span>]).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> scenes:</span><br><span class="line">  scenes = <span class="built_in">str</span>(test_params_content[<span class="string">&#x27;scene&#x27;</span>]).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  scenes = [_INT_STR_DICT.get(n, n) <span class="keyword">for</span> n <span class="keyword">in</span> scenes]  <span class="comment"># recover &#x27;1_1&#x27; &amp; &#x27;1_2&#x27;</span></span><br></pre></td></tr></table></figure><p>获取config.yml 中dut(测试机器的SN号),并且覆盖apk模式以允许写入外部存储.即让com.android.cts.verifier  拥有读写操作.  注意:我们一般把apk 下载到手机的时候 都是把相机以及其他所有权限都打开. 这两个是不一样的. 相机权限的打开是避免无法调用相机导致的fail. 而这边的读写操作主要是给apk 的各种服务开的.  使其能正常下发命令.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">device_id = get_device_serial_number(<span class="string">&#x27;dut&#x27;</span>, config_file_contents)</span><br><span class="line"><span class="comment"># Enable external storage on DUT to send summary report to CtsVerifier.apk</span></span><br><span class="line">enable_external_storage(device_id)</span><br></pre></td></tr></table></figure><p>然后获取测试图表的sn号. 如果TEST_KEY_TABLET 存在在对应的TestBeds里,则获取到table_id,否则为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TEST_KEY_TABLET = <span class="string">&#x27;tablet&#x27;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">config_file_test_key = config_file_contents[<span class="string">&#x27;TestBeds&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;Name&#x27;</span>].lower()</span><br><span class="line">  <span class="keyword">if</span> TEST_KEY_TABLET <span class="keyword">in</span> config_file_test_key:</span><br><span class="line">    tablet_id = get_device_serial_number(<span class="string">&#x27;tablet&#x27;</span>, config_file_contents)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    tablet_id = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>获取马达舵机的控制通道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testing_sensor_fusion_with_controller = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> TEST_KEY_SENSOR_FUSION <span class="keyword">in</span> config_file_test_key:</span><br><span class="line">  <span class="keyword">if</span> test_params_content[<span class="string">&#x27;rotator_cntl&#x27;</span>].lower() <span class="keyword">in</span> VALID_CONTROLLERS:</span><br><span class="line">    testing_sensor_fusion_with_controller = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>预加载场景，如果cmd line没有指出场景</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepend &#x27;scene&#x27; if not specified at cmd line</span></span><br><span class="line"><span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">enumerate</span>(scenes):</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">not</span> s.startswith(<span class="string">&#x27;scene&#x27;</span>) <span class="keyword">and</span></span><br><span class="line">      <span class="keyword">not</span> s.startswith((<span class="string">&#x27;sensor_fusion&#x27;</span>, <span class="string">&#x27;&lt;scene-name&gt;&#x27;</span>))):</span><br><span class="line">    scenes[i] = <span class="string">f&#x27;scene<span class="subst">&#123;s&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>如果用户没有制定特定的场景会跑测所有的场景.</p><p>创建子文件用于保存各个cameraID各个场景</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A subdir in topdir will be created for each camera_id. All scene test</span></span><br><span class="line"><span class="comment"># output logs for each camera id will be stored in this subdir.</span></span><br><span class="line"><span class="comment"># This output log path is a mobly param : LogPath</span></span><br><span class="line">cam_id_string = <span class="string">&#x27;cam_id_%s&#x27;</span> % (</span><br><span class="line">    camera_id.replace(its_session_utils.SUB_CAMERA_SEPARATOR, <span class="string">&#x27;_&#x27;</span>))</span><br><span class="line">mobly_output_logs_path = os.path.join(topdir, cam_id_string)</span><br><span class="line">os.mkdir(mobly_output_logs_path)</span><br></pre></td></tr></table></figure><p>以上对config.yml的读取和检索后都重新创建一个yml文件,用于正式的跑测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_yml_file_name = get_updated_yml_file(config_file_contents)</span><br></pre></td></tr></table></figure><h1 id="2-跑测"><a href="#2-跑测" class="headerlink" title="2 跑测"></a>2 跑测</h1><p>上面是一些跑测的文件创建和准备</p><p>下面直面跑测的内容.</p><p>这个逻辑是用来确定单跑和整跑的逻辑.</p><p>如果输入的命令有包含tests&#x2F;  则是单跑调用. 否则都是整跑，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;tests/&#x27;</span> <span class="keyword">in</span> test:</span><br><span class="line">  cmd = [</span><br><span class="line">      <span class="string">&#x27;python3&#x27;</span>,</span><br><span class="line">      os.path.join(os.environ[<span class="string">&#x27;CAMERA_ITS_TOP&#x27;</span>], test), <span class="string">&#x27;-c&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;%s&#x27;</span> % new_yml_file_name</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  cmd = [</span><br><span class="line">      <span class="string">&#x27;python3&#x27;</span>,</span><br><span class="line">      os.path.join(os.environ[<span class="string">&#x27;CAMERA_ITS_TOP&#x27;</span>], <span class="string">&#x27;tests&#x27;</span>, s, test),</span><br><span class="line">      <span class="string">&#x27;-c&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;%s&#x27;</span> % new_yml_file_name</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>创建subprocess 用于正式跑测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num_try <span class="keyword">in</span> <span class="built_in">range</span>(NUM_TRIES):</span><br><span class="line">      <span class="comment"># pylint: disable=subprocess-run-check</span></span><br><span class="line">      <span class="keyword">with</span> <span class="built_in">open</span>(MOBLY_TEST_SUMMARY_TXT_FILE, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        output = subprocess.run(cmd, stdout=fp)</span><br><span class="line">      <span class="comment"># pylint: enable=subprocess-run-check</span></span><br></pre></td></tr></table></figure><p>解析mobly log 记录跑测返回的状态(skip&#x2F;pass&#x2F;fail),并且记录此结果</p><p>大致的跑测逻辑如上概诉，真实挂测的def run(cmd): 在这不累诉</p><h2 id="2-1-加载场景"><a href="#2-1-加载场景" class="headerlink" title="2.1 加载场景"></a>2.1 加载场景</h2><p>下面看这俩个内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def report_result(device_id, camera_id, results):</span><br><span class="line">def load_scenes_on_tablet(scene, tablet_id):</span><br></pre></td></tr></table></figure><p>加载对应场景的逻辑很简单.</p><p>就是将对应场景下的png全部push进table 图表设备中.</p><p>push路径为.该路径 必须要有push 的权限. 就算是市面上的机器，不然没法正确调用出对应场景的图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_DST_SCENE_DIR = <span class="string">&#x27;/mnt/sdcard/Download/&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_scenes_on_tablet</span>(<span class="params">scene, tablet_id</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;Copies scenes onto the tablet before running the tests.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    scene: Name of the scene to copy image files.</span></span><br><span class="line"><span class="string">    tablet_id: adb id of tablet</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  logging.info(<span class="string">&#x27;Copying files to tablet: %s&#x27;</span>, tablet_id)</span><br><span class="line">  scene_dir = os.listdir(</span><br><span class="line">      os.path.join(os.environ[<span class="string">&#x27;CAMERA_ITS_TOP&#x27;</span>], <span class="string">&#x27;tests&#x27;</span>, scene))</span><br><span class="line">  <span class="keyword">for</span> file_name <span class="keyword">in</span> scene_dir:</span><br><span class="line">    <span class="keyword">if</span> file_name.endswith(<span class="string">&#x27;.png&#x27;</span>):</span><br><span class="line">      src_scene_file = os.path.join(os.environ[<span class="string">&#x27;CAMERA_ITS_TOP&#x27;</span>], <span class="string">&#x27;tests&#x27;</span>,</span><br><span class="line">                                    scene, file_name)</span><br><span class="line">      cmd = <span class="string">f&#x27;adb -s <span class="subst">&#123;tablet_id&#125;</span> push <span class="subst">&#123;src_scene_file&#125;</span> <span class="subst">&#123;_DST_SCENE_DIR&#125;</span>&#x27;</span></span><br><span class="line">      subprocess.Popen(cmd.split())</span><br><span class="line">  time.sleep(LOAD_SCENE_DELAY)</span><br><span class="line">  logging.info(<span class="string">&#x27;Finished copying files to tablet.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>而对于这个函数用于改变场景和check</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def check_manual_scenes(device_id, camera_id, scene, out_path):</span><br></pre></td></tr></table></figure><h2 id="2-2-上报结果"><a href="#2-2-上报结果" class="headerlink" title="2.2 上报结果"></a>2.2 上报结果</h2><p>所有的结果都会记录到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTION_ITS_RESULT = <span class="string">&#x27;com.android.cts.verifier.camera.its.ACTION_ITS_RESULT&#x27;</span></span><br></pre></td></tr></table></figure><p>本质上是通过这个将结果上报给apk. 会在手机目录下看到类似its_camera1_scene0.txt的文件.本质上是把这个文件读写上报给测试apk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">report_result</span>(<span class="params">device_id, camera_id, results</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;Sends a pass/fail result to the device, via an intent.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">   device_id: The ID string of the device to report the results to.</span></span><br><span class="line"><span class="string">   camera_id: The ID string of the camera for which to report pass/fail.</span></span><br><span class="line"><span class="string">   results: a dictionary contains all ITS scenes as key and result/summary of</span></span><br><span class="line"><span class="string">            current ITS run. See test_report_result unit test for an example.</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  adb = <span class="string">f&#x27;adb -s <span class="subst">&#123;device_id&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Start ItsTestActivity to receive test results</span></span><br><span class="line">  cmd = <span class="string">f&#x27;<span class="subst">&#123;adb&#125;</span> shell am start <span class="subst">&#123;ITS_TEST_ACTIVITY&#125;</span> --activity-brought-to-front&#x27;</span></span><br><span class="line">  run(cmd)</span><br><span class="line">  time.sleep(ACTIVITY_START_WAIT)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Validate/process results argument</span></span><br><span class="line">  <span class="keyword">for</span> scene <span class="keyword">in</span> results:</span><br><span class="line">    <span class="keyword">if</span> RESULT_KEY <span class="keyword">not</span> <span class="keyword">in</span> results[scene]:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">f&#x27;ITS result not found for <span class="subst">&#123;scene&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> results[scene][RESULT_KEY] <span class="keyword">not</span> <span class="keyword">in</span> RESULT_VALUES:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">f&#x27;Unknown ITS result for <span class="subst">&#123;scene&#125;</span>: <span class="subst">&#123;results[RESULT_KEY]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> SUMMARY_KEY <span class="keyword">in</span> results[scene]:</span><br><span class="line">      device_summary_path = <span class="string">f&#x27;/sdcard/its_camera<span class="subst">&#123;camera_id&#125;</span>_<span class="subst">&#123;scene&#125;</span>.txt&#x27;</span></span><br><span class="line">      run(<span class="string">&#x27;%s push %s %s&#x27;</span> %</span><br><span class="line">          (adb, results[scene][SUMMARY_KEY], device_summary_path))</span><br><span class="line">      results[scene][SUMMARY_KEY] = device_summary_path</span><br><span class="line"></span><br><span class="line">  json_results = json.dumps(results)</span><br><span class="line">  cmd = (<span class="string">f&quot;<span class="subst">&#123;adb&#125;</span> shell am broadcast -a <span class="subst">&#123;ACTION_ITS_RESULT&#125;</span> --es <span class="subst">&#123;EXTRA_VERSION&#125;</span>&quot;</span></span><br><span class="line">         <span class="string">f&quot; <span class="subst">&#123;CURRENT_ITS_VERSION&#125;</span> --es <span class="subst">&#123;EXTRA_CAMERA_ID&#125;</span> <span class="subst">&#123;camera_id&#125;</span> --es &quot;</span></span><br><span class="line">         <span class="string">f&quot;<span class="subst">&#123;EXTRA_RESULTS&#125;</span> \&#x27;<span class="subst">&#123;json_results&#125;</span>\&#x27;&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(cmd) &gt; <span class="number">8000</span>:</span><br><span class="line">    logging.info(<span class="string">&#x27;ITS command string might be too long! len:%s&#x27;</span>, <span class="built_in">len</span>(cmd))</span><br><span class="line">  run(cmd)</span><br></pre></td></tr></table></figure><h1 id="3-测试场景"><a href="#3-测试场景" class="headerlink" title="3 测试场景"></a>3 测试场景</h1><p>注意SUB_CAMERA_TESTS 数组保存了 对应场景 对应的测试项目. 但是这个不是最后全部的测试项目。也有部分api 测试存在于android-cts-verifier&#x2F;CameraITS&#x2F;tests&#x2F;its_base_test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SUB_CAMERA_TESTS = &#123;</span><br><span class="line">    <span class="string">&#x27;scene0&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;test_burst_capture&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_jitter&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_metadata&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_read_write&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_sensor_events&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_solid_color_test_pattern&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_unified_timestamps&#x27;</span>,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>另外对于以下这种场景有说明:比如场景1中的1_1,1_2 是分出来</p><p>场景2 中的不同人脸图都共有测试项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;scene2_a&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;test_faces&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;test_num_faces&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>#   scene*_1&#x2F;2&#x2F;… are same scene split to load balance run times for scenes</p><p>#   scene*_a&#x2F;b&#x2F;… are similar scenes that share one or more tests</p><h1 id="4-ITS-apK-代码"><a href="#4-ITS-apK-代码" class="headerlink" title="4 ITS apK 代码"></a>4 ITS apK 代码</h1><p>apk代码路径如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cts/apps/CtsVerifier/src/com/android/cts/verifier/camera</span><br><span class="line">目录结构如下:和camera有关的有如下的测试.</span><br><span class="line">├── bokeh</span><br><span class="line">│   └── CameraBokehActivity.java</span><br><span class="line">├── flashlight</span><br><span class="line">│   └── CameraFlashlightActivity.java</span><br><span class="line">├── formats</span><br><span class="line">│   └── CameraFormatsActivity.java</span><br><span class="line">├── fov</span><br><span class="line">│   ├── CalibrationPreferenceActivity.java</span><br><span class="line">│   ├── CameraPreviewView.java</span><br><span class="line">│   ├── CtsTestHelper.java</span><br><span class="line">│   ├── DetermineFovActivity.java</span><br><span class="line">│   ├── PhotoCaptureActivity.java</span><br><span class="line">│   ├── SelectableResolution.java</span><br><span class="line">│   └── Size.java</span><br><span class="line">├── intents</span><br><span class="line">│   ├── CameraContentJobService.java</span><br><span class="line">│   └── CameraIntentsActivity.java</span><br><span class="line">├── its</span><br><span class="line">│   ├── ItsException.java</span><br><span class="line">│   ├── ItsSerializer.java</span><br><span class="line">│   ├── ItsService.java</span><br><span class="line">│   ├── ItsTestActivity.java</span><br><span class="line">│   ├── ItsUtils.java</span><br><span class="line">│   ├── Logt.java</span><br><span class="line">│   └── StatsImage.java</span><br><span class="line">├── orientation</span><br><span class="line">│   └── CameraOrientationActivity.java</span><br><span class="line">├── OWNERS</span><br><span class="line">├── performance</span><br><span class="line">│   ├── CameraPerformanceActivity.java</span><br><span class="line">│   └── CameraTestInstrumentation.java</span><br><span class="line">└── video</span><br><span class="line">    └── CameraVideoActivity.java</span><br></pre></td></tr></table></figure><p>我们重点看its 目录下的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── its</span><br><span class="line">│   ├── ItsException.java   #记录异常的接口</span><br><span class="line">│   ├── ItsSerializer.java  #serialize  序列化解析json 对象</span><br><span class="line">│   ├── ItsService.java  #its 围绕这个服务进行交互的</span><br><span class="line">│   ├── ItsTestActivity.java #主要测试main</span><br><span class="line">│   ├── ItsUtils.java #检索的文件 获取图片格式等操作都在此文件内完成</span><br><span class="line">│   ├── Logt.java #传递log msg</span><br><span class="line">│   └── StatsImage.java #load ctsverifier_jni </span><br></pre></td></tr></table></figure><p>ItsTestActivity.java # 下列代码是两年前谷歌加入的为了修复tests&#x2F;scene0&#x2F;test_metadata.py 脚本的问题而加入的默认语言检查.所以我们使用cts-verifier apk的时候 系统的默认要美国地区的英语.不然无法进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Default locale must be set to &quot;en-us&quot;</span></span><br><span class="line"><span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> Locale.getDefault();</span><br><span class="line"><span class="keyword">if</span> (!Locale.US.equals(locale)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">toastMessage</span> <span class="operator">=</span> <span class="string">&quot;Unsupported default language &quot;</span> + locale + <span class="string">&quot;! &quot;</span> +</span><br><span class="line">            <span class="string">&quot;Please switch the default language to English (United States) in &quot;</span> +</span><br><span class="line">            <span class="string">&quot;Settings &gt; Language &amp; input &gt; Languages&quot;</span>;</span><br><span class="line">    Toast.makeText(ItsTestActivity.<span class="built_in">this</span>, toastMessage, Toast.LENGTH_LONG).show();</span><br><span class="line">    ItsTestActivity.<span class="built_in">this</span>.getReportLog().setSummary(</span><br><span class="line">            <span class="string">&quot;FAIL: Default language is not set to &quot;</span> + Locale.US,</span><br><span class="line">            <span class="number">1.0</span>, ResultType.NEUTRAL, ResultUnit.NONE);</span><br><span class="line">    setTestResultAndFinish(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是当时谷歌的commit.  感觉谷歌的操作真的是全是堆积这种bug. 以前就没有中文语言不支持一说.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CtsVerifier: Fail Camera ITS in case of unsupported locale</span><br><span class="line"></span><br><span class="line">Per CTS specification Camera ITS must only be run with default</span><br><span class="line">language set to English (United States). Check this and directly</span><br><span class="line">fail during ITS activity initialization and when processing ITS</span><br><span class="line">commands.</span><br><span class="line">The python script handling of socket errors must also be modified</span><br><span class="line">to appropriately notify users about this error condition.</span><br><span class="line"></span><br><span class="line">Bug: 149922652</span><br><span class="line">Test: Manual using CtsVerifier app,</span><br><span class="line">python tests/scene0/test_metadata.py</span><br><span class="line"></span><br><span class="line">Change-Id: I3a2833e2fbc8e8863f5dd13600d39e7d77cea438</span><br></pre></td></tr></table></figure><p>ITS apk部分的源码建议去谷歌官网看.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> GMS </category>
          
          <category> ITS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ITS </tag>
            
            <tag> GMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android编译概述</title>
      <link href="/2024/11/10/Android/Android%E7%BC%96%E8%AF%91%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/11/10/Android/Android%E7%BC%96%E8%AF%91%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>所有的编译都要先source build&#x2F;envsetup.sh</p><p>然后lunch 对应的产品。</p><p>整编就直接make</p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><ul><li><p>在Andorid 7.0 之前都是使用GNU make,模块编译脚本使用Android.mk;</p></li><li><p>之后,编译使用ninja,由kati工具把Andorid&#x2F;mk转换为构建规范文件buildxxx.ninja;</p></li><li><p>Android 8.0 开始,引入编译脚本Android.bp,及工具blueprint和soong用于把Android.bp转换为buildxxx.ninja.</p><p>Android 编译脚本主要为Android.mk和Android.bp,在编译过程中都会转换为buildxxx.nija构建文件,加入到ninja构建系统中参与编译.</p><p>buildxxxx.ninja文件生成在out目录中,文件大小比较大,包含了编译中的所有配置信息.</p></li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>m</td><td>编译整个源码,可以不用切换根目录</td></tr><tr><td>mm</td><td>编译当前目录下的源码.不包含他们的依赖模块</td></tr><tr><td>mmm</td><td>编译指定目录下的所有模块,不包含他们的依赖模块</td></tr><tr><td>mma</td><td>编译当前目录的下的源码,包含他们的依赖模块</td></tr><tr><td>mmma</td><td>编译指定目录下的所有模块.包含他们的依赖项目</td></tr></tbody></table><p>编译环境初始化.</p><p>由命令source build&#x2F;envsetup.sh完成</p><p>其中envsetup.sh主要做了下面几个事情.</p><ul><li><p>定义一些lunch &#x2F;m &#x2F;mm &#x2F;mmm &#x2F;provision等函数.</p></li><li><p>确定当前的shell 环境.建立shell命令</p></li><li><p>从device&#x2F;vendor&#x2F;product等目录遍历搜索vendorsetup.sh, 并source 进来</p></li><li><p>将下面的bash文件导入到当前环境中</p><p>system&#x2F;core&#x2F;adb&#x2F;adb.bash,</p><p>system&#x2F;core&#x2F;fastboot&#x2F;fastboot.bash,</p><p>tools&#x2F;asuite&#x2F;asuite.sh</p></li></ul><h1 id="1-image"><a href="#1-image" class="headerlink" title="1 image"></a>1 image</h1><p>像system&#x2F;vendor&#x2F;dtbo&#x2F;boot 这些</p><p>可以直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">make systemimage</span><br><span class="line">make bootimage</span><br><span class="line">make dtboimage</span><br><span class="line">make vendorimage</span><br><span class="line">make cts</span><br></pre></td></tr></table></figure><h1 id="2-framework"><a href="#2-framework" class="headerlink" title="2 framework"></a>2 framework</h1><p>framework部分内容是很复杂的一块的内容.</p><p>关于cameraservice的部分可以用ninja编译 ,jni的部分也可以直接mma或者找到对应的so去编译</p><p>下列命令是单编译对应的so.对于所有模块都是可以的.需要注意的是这种编译是不加依赖项的.所以会出现修改的Android.mk不生效. 对应的ninja工具需要在对应的项目内寻找.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prebuilts/build-tools/linux-x86/bin/ninja -f out/combined-vnd_xxxx.ninja libcameraservice</span><br></pre></td></tr></table></figure><p>这个路径下是apk层直接调用的硬件接口.可以用如下的命令直接编译生成framework.jar包.</p><p>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;hardware&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make framework-minus-apex</span><br></pre></td></tr></table></figure><p>adb push framework.jar system&#x2F;framework&#x2F;</p><p>同时删除设备中system&#x2F;framework目录下</p><p>oat,arm,arm64的三个文件夹.</p><p>然后adb reboot. 不删除以上的三个文件，系统会一直处在开机动画中无法打开.</p><p>frameworks&#x2F;base&#x2F;Android.bp的相关编译规则如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">java_library &#123;</span><br><span class="line">    name: &quot;framework-minus-apex&quot;,</span><br><span class="line">    defaults: [&quot;framework-minus-apex-defaults&quot;],</span><br><span class="line">    installable: true,</span><br><span class="line">    // For backwards compatibility.</span><br><span class="line">    stem: &quot;framework&quot;,</span><br><span class="line">    apex_available: [&quot;//apex_available:platform&quot;],</span><br><span class="line">    visibility: [</span><br><span class="line">        &quot;//frameworks/base&quot;,</span><br><span class="line">        // TODO(b/147128803) remove the below lines</span><br><span class="line">        &quot;//frameworks/base/apex/appsearch/framework&quot;,</span><br><span class="line">        &quot;//frameworks/base/apex/blobstore/framework&quot;,</span><br><span class="line">        &quot;//frameworks/base/apex/jobscheduler/framework&quot;,</span><br><span class="line">        &quot;//frameworks/base/packages/Tethering/tests/unit&quot;,</span><br><span class="line">        &quot;//packages/modules/Connectivity/Tethering/tests/unit&quot;,</span><br><span class="line">    ],</span><br><span class="line">    errorprone: &#123;</span><br><span class="line">        javacflags: [</span><br><span class="line">            &quot;-Xep:AndroidFrameworkBinderIdentity:ERROR&quot;,</span><br><span class="line">            &quot;-Xep:AndroidFrameworkCompatChange:ERROR&quot;,</span><br><span class="line">            &quot;-Xep:AndroidFrameworkUid:ERROR&quot;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-selinux"><a href="#3-selinux" class="headerlink" title="3 selinux"></a>3 selinux</h1><p>adb shell setenforce 0会解放selinux权限<br>Android 的selinux权限路径,但是这个是总的. 不同平台的编译本质上是编译这个路径.</p><p>system&#x2F;sepolicy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make selinux_policy</span><br><span class="line">将编译生成的.cil相关文件push到设备中重启.</span><br><span class="line">adb push vendor/etc/selinux/* vendor/etc/selinux</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGrok搭建笔记</title>
      <link href="/2024/11/10/%E6%90%AD%E5%BB%BA/OpenGrok%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/11/10/%E6%90%AD%E5%BB%BA/OpenGrok%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenGrok"><a href="#OpenGrok" class="headerlink" title="OpenGrok"></a>OpenGrok</h1><p>克隆仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/JoeNero/OpenGrok.git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#tomcat </span><br><span class="line">export CATALINA_HOME=&quot;/home/xtt/OpenGrok/apache-tomcat-8.5.55&quot;</span><br><span class="line"></span><br><span class="line">#opengrok</span><br><span class="line">export OPENGROK_TOMCAT_BASE=$CATALINA_HOME</span><br></pre></td></tr></table></figure><p>保存后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>打开本地端口8080测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><p>部署opengrok<br>进入opengrok bin目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./OpenGrok deploy</span><br></pre></td></tr></table></figure><p>测试部署是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/source</span><br></pre></td></tr></table></figure><p>建立索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./OpenGrok index /root/chrome  #代码存放的位置</span><br></pre></td></tr></table></figure><p>最终生成的索引默认会存放在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/opengrok</span><br></pre></td></tr></table></figure><h1 id="Ctags"><a href="#Ctags" class="headerlink" title="Ctags"></a>Ctags</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">ctags --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> openGrok </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openGrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 【vector】</title>
      <link href="/2024/11/10/CPP/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-vector/"/>
      <url>/2024/11/10/CPP/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-vector/</url>
      
        <content type="html"><![CDATA[<h1 id="1-STL-简介"><a href="#1-STL-简介" class="headerlink" title="1 STL 简介"></a>1 STL 简介</h1><blockquote><p>STL是Standard Template Library的简称，中文名标准模板库<br>STL可分为<br>容器(containers)、<br>迭代器(iterators)、<br>空间配置器(allocator)、<br>配接器(adapters)、<br>算法(algorithms)、<br>仿函数(functors)六个部分。</p></blockquote><p>选自百度词条<a href="https://baike.baidu.com/item/STL/70103?fr=aladdin">STL百度词条</a><br>C++标准中，STL组件被组织命名为以下13个头文件</p><blockquote><p>&lt; algorithm&gt;<br>&lt; deque&gt;<br>&lt; functional&gt;<br>&lt; iterator&gt;<br>&lt; vector&gt;<br>&lt; list&gt;<br>&lt; map&gt;<br>&lt; memory.h&gt;<br>&lt; numeric&gt;<br>&lt; queue&gt;<br>&lt; set&gt;<br>&lt; stack&gt;<br>&lt; utility&gt;</p></blockquote><h1 id="2-容器-vector"><a href="#2-容器-vector" class="headerlink" title="2 容器 vector"></a>2 容器 vector</h1><p>向量(vector) 连续存储的元素&lt; vector&gt;;<br>vector是一个能够存放任意类型的动态数组，能够增加和压缩数据。<br>为了更好理解，不用基础类型，自行定义一个MyInt结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MyInt</span></span><br><span class="line">&#123;</span><br><span class="line">string name;<span class="comment">//用作标识符</span></span><br><span class="line"><span class="type">int</span> Int;        <span class="comment">//实际存储类型</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写一个打印函数如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能: - vector类打印</span></span><br><span class="line"><span class="comment">@param</span></span><br><span class="line"><span class="comment">@param</span></span><br><span class="line"><span class="comment">@param</span></span><br><span class="line"><span class="comment">描述:</span></span><br><span class="line"><span class="comment">示例:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;MyInt&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;MyInt&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;标识符为:&quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数据为:&quot;</span>&lt;&lt; it-&gt;Int &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-构造"><a href="#2-1-构造" class="headerlink" title="2.1 构造"></a>2.1 构造</h2><p>vector类构造demo</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;MyInt&gt; v1; <span class="comment">//无参构造</span></span><br><span class="line">MyInt* myInt = <span class="keyword">new</span> MyInt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myInt[i].name = <span class="string">&#x27;0&#x27;</span> + i;</span><br><span class="line">myInt[i].Int = i;</span><br><span class="line">v<span class="number">1.</span><span class="built_in">push_back</span>(myInt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="function">vector&lt;MyInt&gt; <span class="title">v2</span><span class="params">(v<span class="number">1.</span>begin(), v<span class="number">1.</span>end())</span></span>;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line">vector&lt;MyInt&gt;::iterator it = v<span class="number">1.</span><span class="built_in">begin</span>();</span><br><span class="line"><span class="function">vector&lt;MyInt&gt; <span class="title">v3</span><span class="params">(it<span class="number">+1</span>, v<span class="number">1.</span>end())</span></span>;</span><br><span class="line"><span class="built_in">printVector</span>(v3);</span><br><span class="line"><span class="keyword">delete</span>[] myInt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，因为用了迭代器来访问v1.begin() + 1的位置 ，(非基础类型不能用v1[1]访问),所以打印v3容器输出的结果是1到9<br><img src="https://i-blog.csdnimg.cn/blog_migrate/cd43e6bd2b8d53298c83d9d6dc3ff2b2.jpeg" alt="在这里插入图片描述"></p><h2 id="2-2-成员函数"><a href="#2-2-成员函数" class="headerlink" title="2.2 成员函数"></a>2.2 成员函数</h2><p>基础访问操作:（注意v3.at[int index]适合访问基础类型,int,char等，自定义的类型还是用迭代器访问）<br>vector不支持头插(push_front)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">3.</span><span class="built_in">push_back</span>(elem)  <span class="comment">//在尾部插入一个elem数据。</span></span><br><span class="line">v<span class="number">3.</span><span class="built_in">pop_back</span>()       <span class="comment">//删除末尾的数据。</span></span><br><span class="line">v<span class="number">3.</span><span class="built_in">at</span>(<span class="type">int</span> index)<span class="comment">//传回索引为index的数据,如果index越界</span></span><br><span class="line"><span class="comment">//抛出out_of_range异常。</span></span><br><span class="line"><span class="comment">//非基础类型需要通过迭代器访问</span></span><br></pre></td></tr></table></figure><h3 id="2-2-1-assgin"><a href="#2-2-1-assgin" class="headerlink" title="2.2.1 assgin"></a>2.2.1 assgin</h3><p>v3.assign(beg,end)将[beg,end)一个左闭右开区间的数据赋值给v3。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">3.</span><span class="built_in">assign</span>(v<span class="number">1.</span><span class="built_in">begin</span>(), v<span class="number">1.</span><span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printVector</span>(v3);</span><br></pre></td></tr></table></figure><p>v3.assign (n,elem)将n个elem的拷贝赋值给v3。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">3.</span><span class="built_in">assign</span>(<span class="number">2</span>, myInt[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printVector</span>(v3);</span><br></pre></td></tr></table></figure><p>输出结果如下:<br><img src="https://i-blog.csdnimg.cn/blog_migrate/8f4409bb6edf35adcb6ebecb83746ac9.jpeg" alt="在这里插入图片描述"></p><h3 id="2-2-2-数据大小操作"><a href="#2-2-2-数据大小操作" class="headerlink" title="2.2.2 数据大小操作"></a>2.2.2 数据大小操作</h3><h4 id="2-2-1-empty"><a href="#2-2-1-empty" class="headerlink" title="2.2.1.empty"></a>2.2.1.empty</h4><p>v1.empty() &#x2F;&#x2F;  判空操作<br>先看empty()定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_NODISCARD <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; _My_data = _Mypair._Myval2;</span><br><span class="line">    <span class="keyword">return</span> _My_data._Myfirst == _My_data._Mylast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试容器空的状况:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;MyInt&gt; v1; <span class="comment">//无参构造</span></span><br><span class="line">cout &lt;&lt; v<span class="number">1.</span><span class="built_in">empty</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>空返回1<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d1d724b0d342e5c785976127f9cb4a2f.jpeg" alt="在这里插入图片描述"><br>非空返回 0<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f681f1fda108aa3696c04aa80a2a0b76.jpeg" alt="在这里插入图片描述"><br>了解empty后修改打印函数(暂时不抛出异常)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;MyInt&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打印Vector为空&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;MyInt&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;标识符为:&quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数据为:&quot;</span> &lt;&lt; it-&gt;Int &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-容量"><a href="#2-2-2-容量" class="headerlink" title="2.2.2  容量"></a>2.2.2  容量</h4><p>参考链接<a href="https://blog.csdn.net/JIEJINQUANIL/article/details/51166154">capacity用法</a></p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>capacity()</td><td>容器能存储 数据的个数(真实大小)</td></tr><tr><td>size()</td><td>目前存在的元素个数</td></tr><tr><td>max_size</td><td>最大容量</td></tr><tr><td>resize()</td><td>重新指定大小 ，若指定的更小，超出部分元素被删除</td></tr><tr><td>reserve</td><td>预留空间</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;v1真实的大小 = &quot;</span> &lt;&lt; v<span class="number">1.</span><span class="built_in">capacity</span>() &lt;&lt; endl;<span class="comment">//真实的大小</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1的大小 = &quot;</span> &lt;&lt; v<span class="number">1.</span><span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1最大容量 = &quot;</span> &lt;&lt; v<span class="number">1.</span><span class="built_in">max_size</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/67b826a0fe159edebbc23f08616daa89.jpeg" alt="在这里插入图片描述"><br>resize()使用，<br>重新指定大小10的v1容器为12，多指定的空间重新插入内容myInt[2]；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">1.</span><span class="built_in">resize</span>(<span class="number">12</span>, myInt[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br></pre></td></tr></table></figure><p>打印输出结果:<br><img src="https://i-blog.csdnimg.cn/blog_migrate/5fa6feb23652dc4f316bd766deac09f6.jpeg" alt="在这里插入图片描述"><br>重新指定v1打下，删除超过索引的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">1.</span><span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br></pre></td></tr></table></figure><p>输出结果<br><img src="https://i-blog.csdnimg.cn/blog_migrate/8b63a542688e35cfd61689810353b8e5.jpeg" alt="在这里插入图片描述"></p><h3 id="2-2-3-删除与插入操作"><a href="#2-2-3-删除与插入操作" class="headerlink" title="2.2.3 删除与插入操作"></a>2.2.3 删除与插入操作</h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>pop_back()</td><td>尾删</td></tr><tr><td>insert（）</td><td>插入操作</td></tr><tr><td>erase()</td><td>擦除</td></tr><tr><td></td><td></td></tr><tr><td>测试代码如下:</td><td></td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;MyInt&gt; v1; <span class="comment">//无参构造</span></span><br><span class="line">MyInt* myInt = <span class="keyword">new</span> MyInt[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myInt[i].name = <span class="string">&#x27;0&#x27;</span> + i;</span><br><span class="line">myInt[i].Int = i;</span><br><span class="line">v<span class="number">1.</span><span class="built_in">push_back</span>(myInt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">vector&lt;MyInt&gt;::iterator it = v<span class="number">1.</span><span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">v<span class="number">1.</span><span class="built_in">insert</span>(it<span class="number">+1</span>, myInt[<span class="number">1</span>]);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">v<span class="number">1.</span><span class="built_in">insert</span>(v<span class="number">1.</span><span class="built_in">begin</span>(), <span class="number">2</span>, myInt[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">////删除</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">erase</span>(v<span class="number">1.</span><span class="built_in">begin</span>());</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;擦除头:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">////清空</span></span><br><span class="line"><span class="comment">//v1.erase(v1.begin(), v1.end());</span></span><br><span class="line"><span class="comment">//printVector(v1);</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="keyword">delete</span>[] myInt;</span><br></pre></td></tr></table></figure><p>打印输出结果</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/70b367434aee7da1b47c36dced4fab0f.jpeg" alt="在这里插入图片描述"></p><h3 id="2-2-4-swap"><a href="#2-2-4-swap" class="headerlink" title="2.2.4 swap"></a>2.2.4 swap</h3><p>速览其定义:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(vector&amp; _Right)</span> <span class="keyword">noexcept</span> <span class="comment">/* strengthened */</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != _STD <span class="built_in">addressof</span>(_Right)) &#123;</span><br><span class="line">        _Pocs(_Getal(), _Right._Getal());</span><br><span class="line">        _Mypair._Myval<span class="number">2.</span>_Swap_val(_Right._Mypair._Myval2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>swap交换，直接看代码吧:两容器大小需要一致，否在会进入异常</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;MyInt&gt; v1; </span><br><span class="line">vector&lt;MyInt&gt; v2;</span><br><span class="line">MyInt* myInt = <span class="keyword">new</span> MyInt[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myInt[i].name = <span class="string">&#x27;0&#x27;</span> + i;</span><br><span class="line">myInt[i].Int = i;</span><br><span class="line">v<span class="number">1.</span><span class="built_in">push_back</span>(myInt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myInt[i].name = <span class="string">&#x27;0&#x27;</span> + i;</span><br><span class="line">myInt[i].Int = <span class="number">3</span> - i;</span><br><span class="line">v<span class="number">2.</span><span class="built_in">push_back</span>(myInt[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; v1 =&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; v2 =&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line"><span class="comment">//互换容器</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;互换后&quot;</span> &lt;&lt; endl;</span><br><span class="line">v<span class="number">1.</span><span class="built_in">swap</span>(v2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; v1 =&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; v2 =&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br></pre></td></tr></table></figure><p>输出打印结果如下:<br><img src="https://i-blog.csdnimg.cn/blog_migrate/76d01921df3a4cba71f040a84ae42ae5.jpeg" alt="在这里插入图片描述"><br>在实际应用中swap常常用于与自身交换来达到收缩内存的效果，这里不加累述<br><a href="https://blog.csdn.net/liyazhen2011/article/details/103179974">swap收缩内存参考链接</a></p><h1 id="3-vector总结"><a href="#3-vector总结" class="headerlink" title="3 vector总结"></a>3 vector总结</h1><table><thead><tr><th>成员函数</th><th>说明</th></tr></thead><tbody><tr><td>push_back</td><td>尾插</td></tr><tr><td>assign</td><td><a href="https://blog.csdn.net/qq844352155/article/details/38583529">assgin用法</a></td></tr><tr><td>resize</td><td>重构大小</td></tr><tr><td>capacity</td><td>容量(真实大小)</td></tr><tr><td>size</td><td>当前大小</td></tr><tr><td>max_size</td><td>最大容量</td></tr><tr><td>pop_back</td><td>尾删</td></tr><tr><td>insert</td><td>插入</td></tr><tr><td>erase</td><td>删除</td></tr><tr><td>clear</td><td>清空</td></tr><tr><td>swap</td><td>交换</td></tr><tr><td>reserve</td><td>预留空间</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬取天气</title>
      <link href="/2024/11/10/Python/python%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94/"/>
      <url>/2024/11/10/Python/python%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装使用"><a href="#1-安装使用" class="headerlink" title="1 安装使用"></a>1 安装使用</h1><p>VSCode中安装相关的插件就可以配合chatgpt来实现一些简单的爬虫操作，只能应对比较简单的场景.<br>安装插件<br>chatGPT-ChatMoss</p><h1 id="2-实例"><a href="#2-实例" class="headerlink" title="2 实例"></a>2 实例</h1><p>给AI发送<br>python 爬取无锡七日天气<br>回复如下:<br>要爬取无锡七日天气，可以使用Python中的第三方库 requests 和 Beautiful Soup。以下是详细步骤：</p><ol><li>导入必要的库</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><ol start="2"><li>发送GET请求获取网页内容</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;http://www.weather.com.cn/weather/101190201.shtml&quot;</span></span><br><span class="line">response = requests.get(url)</span><br></pre></td></tr></table></figure><ol start="3"><li>解析网页内容</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(response.content, <span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>找到需要的天气信息所在的标签</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weather_data = soup.select(<span class="string">&quot;.t&gt;li&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>提取天气信息并输出</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> weather <span class="keyword">in</span> weather_data:</span><br><span class="line">    <span class="comment"># 获取日期、天气状况、最高温度和最低温度</span></span><br><span class="line">    date = weather.select_one(<span class="string">&quot;.date&quot;</span>).get_text()</span><br><span class="line">    condition = weather.select_one(<span class="string">&quot;.wea&quot;</span>).get_text()</span><br><span class="line">    high_temperature = weather.select_one(<span class="string">&quot;.tem span&quot;</span>).get_text()</span><br><span class="line">    low_temperature = weather.select_one(<span class="string">&quot;.tem i&quot;</span>).get_text()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印天气信息</span></span><br><span class="line">    <span class="built_in">print</span>(date, condition, high_temperature, low_temperature)</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.weather.com.cn/weather/101190201.shtml&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(response.content, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">weather_data = soup.select(<span class="string">&quot;.t&gt;li&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> weather <span class="keyword">in</span> weather_data:</span><br><span class="line">    date = weather.select_one(<span class="string">&quot;.date&quot;</span>).get_text()</span><br><span class="line">    condition = weather.select_one(<span class="string">&quot;.wea&quot;</span>).get_text()</span><br><span class="line">    high_temperature = weather.select_one(<span class="string">&quot;.tem span&quot;</span>).get_text()</span><br><span class="line">    low_temperature = weather.select_one(<span class="string">&quot;.tem i&quot;</span>).get_text()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(date, condition, high_temperature, low_temperature)</span><br></pre></td></tr></table></figure><p>但是上述实际运行是存在一些小问题的。</p><p>打印结果如下: 这个很明显就是date这个数据为None</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">None &lt;p <span class="class"><span class="keyword">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;多云&quot;&gt;多云&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;28&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;17℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;多云&quot;&gt;多云&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;27&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;15℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;多云&quot;&gt;多云&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;24&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;12℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;阴转小雨&quot;&gt;阴转小雨&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;20&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;15℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;阴&quot;&gt;阴&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;15&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;13℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;小雨&quot;&gt;小雨&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;19&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;14℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;小雨转晴&quot;&gt;小雨转晴&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;16&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;8℃&lt;/<span class="title">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续追问机器人:</p><p>优化下代码，没有获取到天数，并且这个get_text有报错.</p><p>机器人直接回复:</p><p>以下是优化后的代码，已解决上述问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.weather.com.cn/weather/101190201.shtml&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(response.content, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">weather_data = soup.select(<span class="string">&quot;.t li&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> weather <span class="keyword">in</span> weather_data:</span><br><span class="line">    <span class="comment"># 获取日期、天气状况、最高温度和最低温度</span></span><br><span class="line">    date = weather.select_one(<span class="string">&quot;h1&quot;</span>).get_text()</span><br><span class="line">    condition = weather.select_one(<span class="string">&quot;.wea&quot;</span>).get_text()</span><br><span class="line">    high_temperature = weather.select(<span class="string">&quot;.tem span&quot;</span>)[<span class="number">0</span>].get_text()</span><br><span class="line">    low_temperature = weather.select(<span class="string">&quot;.tem i&quot;</span>)[<span class="number">0</span>].get_text()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印天气信息</span></span><br><span class="line">    <span class="built_in">print</span>(date, condition, high_temperature, low_temperature)</span><br></pre></td></tr></table></figure><p>在优化代码时，我们对原有代码进行了以下改进：</p><ul><li>将CSS选择器中的“&gt;”删除，因为它只会选择直接子元素，导致无法获取到所有的天气信息。</li><li>由于天数信息并不在 “.date” 标签内，所以将日期信息从该标签中提取出来。在这里，我们使用了 h1 标签来获取日期信息。</li><li>使用 select() 方法来选取多个元素，并且使用索引 [0] 来定位到需要的元素，因为 .select_one() 方法只能返回单个元素，如果要选取多个元素，需要使用 select() 方法。同时，我们还修改了 “.tem span” 和 “.tem i” 的类选择器，以便正确获取最高温度和最低温度。</li><li>在使用 get_text() 方法时，需要确保该元素存在并且不为空。如果该元素不存在或为空，会导致 AttributeError 异常。</li></ul><p>这一次就非常好用了.</p><p>打印出的结果如下:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span>日（今天） 多云 <span class="number">28</span> <span class="number">17</span>℃</span><br><span class="line"><span class="number">20</span>日（明天） 多云 <span class="number">27</span> <span class="number">15</span>℃</span><br><span class="line"><span class="number">21</span>日（后天） 多云 <span class="number">24</span> <span class="number">12</span>℃</span><br><span class="line"><span class="number">22</span>日（周六） 阴转小雨 <span class="number">20</span> <span class="number">15</span>℃</span><br><span class="line"><span class="number">23</span>日（周日） 阴 <span class="number">15</span> <span class="number">13</span>℃</span><br><span class="line"><span class="number">24</span>日（周一） 小雨 <span class="number">19</span> <span class="number">14</span>℃</span><br><span class="line"><span class="number">25</span>日（周二） 小雨转晴 <span class="number">16</span> <span class="number">8</span>℃</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTS基础操作</title>
      <link href="/2024/11/10/GMS/cts%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/11/10/GMS/cts%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h1><p>设置永久不锁屏</p><h1 id="1-CTS"><a href="#1-CTS" class="headerlink" title="1 CTS"></a>1 CTS</h1><p>进入cts目录tools<br>运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cts-tradefed</span><br><span class="line">adb devices找设备数串</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">整跑</span><br><span class="line">run cts -m CtsCameraTestCases --skip-preconditions</span><br><span class="line">run cts -m CtsMediaTestCases</span><br><span class="line">单测格式如下 -t 后面是单跑的内容</span><br><span class="line">run cts -m CtsCameraTestCases -t android.hardware.camera2.cts.StillCaptureTest#testAeCompensation --skip-preconditions</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">查看设备状态</span><br><span class="line">l d</span><br><span class="line">查看报告状态</span><br><span class="line">l r</span><br><span class="line">查看当前命令</span><br><span class="line">l c</span><br><span class="line">打开报告</span><br><span class="line">nautilus ./</span><br><span class="line">run retry --retry &lt;session-number&gt;</span><br><span class="line">重跑(注意:重跑需要同一个机子同一个版本)</span><br><span class="line">run retry --retry session</span><br><span class="line">run retry --retry 0</span><br></pre></td></tr></table></figure><p>以上的是在环境中跑cts.<br>cts 的本质是下载测试的apk到手机中（在谷歌释放包中CtsCameraTest.apk），这个apk集成了测试相关的内容来调用手机的一些功能完成测试项目<br>以下命令在终端运行即可，替换成你需要跑的单项和abi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am instrument -e android.hardware.camera2.cts.CameraDeviceTest#testSessionParametersStateLeak --abi arm64-v8a  -w android.camera.cts/androidx.</span><br></pre></td></tr></table></figure><h1 id="2-VTS-需要镜像"><a href="#2-VTS-需要镜像" class="headerlink" title="2 VTS(需要镜像)"></a>2 VTS(需要镜像)</h1><p>vts 需要python 相关的环境包配置,相关命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br><span class="line">sudo apt-get install python-protobuf</span><br><span class="line">sudo apt-get install protobuf-compiler</span><br><span class="line">sudo apt-get install python-virtualenv</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install python-numpy</span><br><span class="line">sudo apt-get install python-scipy</span><br><span class="line">sudo apt-get install python-matplotlib</span><br><span class="line">sudo apt-get install python-opencv</span><br></pre></td></tr></table></figure><h2 id="2-1进入fastbootd模式"><a href="#2-1进入fastbootd模式" class="headerlink" title="2.1进入fastbootd模式"></a>2.1进入fastbootd模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb unroot</span><br><span class="line">adb reboot fastboot #进入这个模式刷system.img,bootloader模式没有这个分区</span><br></pre></td></tr></table></figure><h2 id="2-2-system-img"><a href="#2-2-system-img" class="headerlink" title="2.2 system.img"></a>2.2 system.img</h2><p>刷入谷歌 system.img</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash system system.img</span><br></pre></td></tr></table></figure><p>查看gsi版本日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings system.img | grep ro.build.version.security_patch</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.security_patch</span><br></pre></td></tr></table></figure><p>重新进入fastboot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastboot reboot bootloader</span><br><span class="line">fastboot -w</span><br></pre></td></tr></table></figure><h2 id="2-3-boot-debug-img"><a href="#2-3-boot-debug-img" class="headerlink" title="2.3 boot-debug.img"></a>2.3 boot-debug.img</h2><p>vts需要debug的权限，所以需要刷debug的镜像,另外fastboot 的版本不能太旧,太久分区不对，刷system.img会破坏分区，导致无限重启无法进去到系统里面进去.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot boot-debug.img</span><br><span class="line">fastboot -w</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><h2 id="2-4-手机配置"><a href="#2-4-手机配置" class="headerlink" title="2.4 手机配置"></a>2.4 手机配置</h2><p>进入设置打开开发者模式,usb调试模式,不锁定屏幕,语言设置成英语(这个语言无所谓)</p><h2 id="2-5-命令"><a href="#2-5-命令" class="headerlink" title="2.5 命令"></a>2.5 命令</h2><p>需要连接外网(电脑)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ./vts-tradefed</span><br><span class="line">VTS camera 相关的三个模块</span><br><span class="line">run vts -m VtsHalCameraProviderV2_4Target --skip-preconditions</span><br><span class="line">run vts -m VtsHalCameraProviderV2_5Target --skip-preconditions</span><br><span class="line">run vts -m VtsHalCameraServiceV2_0Target --skip-preconditions</span><br><span class="line">单跑</span><br><span class="line">run vts --include-filter VtsHalCameraProviderV2_4Target --include-filter VtsHalCameraProviderV2_5Target --include-filter VtsHalCameraServiceV2_0Target --include-filter VtsVndkDependency -s xxx；</span><br><span class="line">单跑命令</span><br><span class="line">run vts -m xxx -t xxx -s xxx</span><br><span class="line">run vts -s</span><br></pre></td></tr></table></figure><p>vts常用命令<br>列出所有的跑测结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l  r</span><br></pre></td></tr></table></figure><p>列出所有渐层到或已知的设备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l d</span><br><span class="line">列出当前运行的模块内容</span><br><span class="line">l i</span><br></pre></td></tr></table></figure><p>单跑某个模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run vts -m &lt;模块&gt;</span><br></pre></td></tr></table></figure><p>可用选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run vts -s &lt;device_id&gt; --logcat-on-failure --screenshot-on-failure --shard-count &lt;shards&gt;</span><br></pre></td></tr></table></figure><h1 id="3-ITS"><a href="#3-ITS" class="headerlink" title="3 ITS"></a>3 ITS</h1><p>its以来python环境(不建议使用ubuntu20测试,默认python包可能太新，跑不起来)</p><h2 id="3-1-环境包"><a href="#3-1-环境包" class="headerlink" title="3.1 环境包"></a>3.1 环境包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-numpy</span><br><span class="line">sudo apt install python-scipy</span><br><span class="line">sudo apt install python-matplotlib</span><br><span class="line">sudo apt install python-opencv</span><br></pre></td></tr></table></figure><h2 id="3-2-手机端"><a href="#3-2-手机端" class="headerlink" title="3.2 手机端"></a>3.2 手机端</h2><p>手机需要安装CtsVerifier.apk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install CtsVerifier.apk</span><br></pre></td></tr></table></figure><p>进入到手机apk，所有的权限都打开，选择its测试项目<br><img src="https://i-blog.csdnimg.cn/blog_migrate/98bd0b0e3985e78f88f07014ebaf5ade.png#pic_center" alt="在这里插入图片描述"></p><p>然后选择测试的场景和摄像头<br><img src="https://i-blog.csdnimg.cn/blog_migrate/5b08b61f99d217a0609f2e75a70e1800.jpeg#pic_center" alt="在这里插入图片描述"></p><h2 id="3-3-电脑端"><a href="#3-3-电脑端" class="headerlink" title="3.3 电脑端"></a>3.3 电脑端</h2><p>进入到对应的tools目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android-cts-verifier/CameraITS</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./build/envsetup.sh</span><br></pre></td></tr></table></figure><p>整跑命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/run_all_tests.py device=017650f70401   camera=0 scenes=1</span><br></pre></td></tr></table></figure><p>单跑命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python ./tests/xxx/xxx.py camera=x（执行tests目录下的对应scenes的报错项）。</span><br><span class="line">python tools/run_all_tests.py camera=0 scenes=1</span><br></pre></td></tr></table></figure><h2 id="3-4-场景说明"><a href="#3-4-场景说明" class="headerlink" title="3.4 场景说明"></a>3.4 场景说明</h2><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>场景0</td><td>无任何要求</td></tr><tr><td>场景1</td><td>相机位于三脚架上, 指向一个静态场景, 其中包含灰色卡和白色背景, 在恒定 (稳定) 相对明亮的光照源下。这是 CTS 验证程序物理设置上面描述的场景。镜头视野中，灰卡大致放在中间，周围为白色背景</td></tr><tr><td>场景 2</td><td>这是测试人脸检测的场景。相机位于三脚架上, 指向一张包含3人脸的静态图片, 在恒定 (稳定) 相对明亮的照明光源下。</td></tr><tr><td>场景3</td><td>这是测试图像清晰度的场景。相机位于三脚架上, 指向包含某些边缘的静态图片, 如打印的 ISO 12233 图表。现场应在一个恒定 (稳定) 相对明亮的照明源。</td></tr><tr><td>场景4</td><td>这是测试纵横比的场景。相机位于三脚架上, 指向一个静态测试页, 其中包含一个黑色圆圈和一个方块。现场应在一个恒定 (稳定) 相对明亮的照明源</td></tr><tr><td>场景5</td><td>这是测试镜头着色和颜色均匀性的场景。在摄像机前放置一个扩散器。相机位于三脚架上，指向恒定的 (稳定) 相对地明亮的照明源。</td></tr><tr><td>我们这边就用的一张白色餐巾纸代替了扩散器，将镜头对着光源，用餐巾纸挡住镜头即可。（很好使，反正不用钱）场景的具体说明看its的官方文档</td><td></td></tr></tbody></table><h2 id="3-5-创建报告"><a href="#3-5-创建报告" class="headerlink" title="3.5 创建报告"></a>3.5 创建报告</h2><p>单跑是空的，显示在终端上。暂不创建报告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">appops set com.android.cts.verifier android:read_device_identifiers allow</span><br><span class="line">exit</span><br><span class="line">adb pull /storage/emulated/0/verifierReports ~/桌面/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-GTS"><a href="#4-GTS" class="headerlink" title="4 GTS"></a>4 GTS</h1><p>进入到tool目录下,手机电脑需要挂VPN 连接外网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run gts -m GtsCameraTestCases -s xxx</span><br><span class="line">run gts -m GtsCameraTestCases -s 008bcdcf0405</span><br></pre></td></tr></table></figure><h1 id="5-STS"><a href="#5-STS" class="headerlink" title="5 STS"></a>5 STS</h1><p>安全补丁包测试以后再说</p><h1 id="6-GSI"><a href="#6-GSI" class="headerlink" title="6 GSI"></a>6 GSI</h1><p>需要烧录谷歌镜像<br>进入fastboot模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot fastboot</span><br></pre></td></tr></table></figure><p>刷入对应的谷歌镜像system.img</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash system system.img</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fastboot reboot bootloader</span><br><span class="line">fastboot -w</span><br><span class="line">fastboot oem unlock</span><br><span class="line">adb reboot bootloader</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>打开开发者选项,打开stay awake和USB debugging<br>进入vts目录，运行     .&#x2F;vts-tradefed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">全跑      </span><br><span class="line">run cts-on-gsi -m CtsCameraTestCases</span><br><span class="line">单跑</span><br><span class="line">run cts-on-gsi --include-filter CtsCameraApi25TestCases --include-filter CtsCameraTestCases -s xxx</span><br><span class="line">run cts-on-gsi -m CtsCameraTestCases -t xxx</span><br><span class="line">run cts-on-gsi -o</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> GMS </category>
          
          <category> cts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> GMS </tag>
            
            <tag> cts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构 【链表】</title>
      <link href="/2024/11/10/CPP/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/11/10/CPP/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-链表的创建"><a href="#1-链表的创建" class="headerlink" title="1 链表的创建"></a>1 链表的创建</h1><p>链表是一种物理存储单元上非连续、非顺序的存储结构。<a href="https://baike.baidu.com/item/%E9%93%BE%E8%A1%A8/9794473?fr=aladdin">摘自百度百科</a><br>如下存储:<br><img src="https://s2.loli.net/2024/11/10/RyU92tuGW31qNbP.png" alt="链表.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;  <span class="comment">//数据域</span></span><br><span class="line">Node* next;<span class="comment">//指针域</span></span><br><span class="line"><span class="built_in">Node</span>():<span class="built_in">data</span>(<span class="number">0</span>),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line"><span class="built_in">Node</span>(<span class="type">int</span> _data,Node* _next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;data = _data;</span><br><span class="line"><span class="keyword">this</span>-&gt;next = _next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-1-头插"><a href="#1-1-头插" class="headerlink" title="1.1 头插"></a>1.1 头插</h2><p><img src="https://s2.loli.net/2024/11/10/JCxgW6TPU9prDdY.png" alt="链表2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushFront</span><span class="params">(Node* head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* pNew= <span class="keyword">new</span> <span class="built_in">Node</span>();           <span class="comment">//定义新节点头</span></span><br><span class="line">pNew-&gt;data = data;                <span class="comment">//存储数据</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span>== head-&gt;next)<span class="comment">//判断是不是只有头结点</span></span><br><span class="line">&#123;</span><br><span class="line">head-&gt;next = pNew;                 </span><br><span class="line">&#125;</span><br><span class="line">pNew-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = pNew;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-尾插"><a href="#1-2-尾插" class="headerlink" title="1.2 尾插"></a>1.2 尾插</h2><p>尾插:<br>申请一个新的节点pNew.将要插入的数据赋值给pNew节点的数据域.并且将pNew的指针域指向空.<br>定义一个节点p指向head(实际操作时一般定义一个新的节点来操作,以便返回头结点)</p><p><img src="https://s2.loli.net/2024/11/10/cvAkowQN6xO75Ui.png" alt="链表3.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushBack</span><span class="params">(Node* head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* pNew = <span class="keyword">new</span> Node;          <span class="comment">//定义一个Node结点指针newNode</span></span><br><span class="line">pNew-&gt;next = <span class="literal">NULL</span>;              <span class="comment">//定义newNode的数据域和指针域</span></span><br><span class="line">pNew-&gt;data = data;</span><br><span class="line">Node* p = head;                 <span class="comment">//定义指针p指向头结点</span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;                               <span class="comment">//当头结点为空时，设置newNode为头结点</span></span><br><span class="line">head = pNew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>                            <span class="comment">//循环直到最后一个节点，将newNode放置在最后</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = pNew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-获取链表长度"><a href="#1-3-获取链表长度" class="headerlink" title="1.3 获取链表长度"></a>1.3 获取链表长度</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLens</span><span class="params">(Node* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> lens = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">lens++;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-翻转链表"><a href="#2-翻转链表" class="headerlink" title="2 翻转链表"></a>2 翻转链表</h1><p><img src="https://s2.loli.net/2024/11/10/ATsyCik163ZvPbJ.png" alt="链表4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(Node* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((head-&gt;next == <span class="literal">nullptr</span> )||(head-&gt;next-&gt;next == <span class="literal">nullptr</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Node* pCur = head-&gt;next;</span><br><span class="line">Node* pNext = pCur-&gt;next;</span><br><span class="line">Node* pre = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">while</span> (pNext)</span><br><span class="line">&#123;</span><br><span class="line">pCur-&gt;next = pre;</span><br><span class="line">pre = pCur;</span><br><span class="line">pCur = pNext;</span><br><span class="line">pNext = pCur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pCur-&gt;next = pre;</span><br><span class="line">head-&gt;next = pCur;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/2024/11/10/Linux/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/11/10/Linux/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-git-下载"><a href="#1-git-下载" class="headerlink" title="1.git 下载"></a>1.git 下载</h1><p>最好是更新下镜像源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> update</span><br></pre></td></tr></table></figure><p>下载git</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install git</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/57610ea2389eed7f411f029a43c3c8b5.png"><br>检测git下载成功的版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><p>版本显示正确后执行再执行下一步<br><img src="https://i-blog.csdnimg.cn/blog_migrate/804594cf93c6f0f70dbe0f7e487fed39.png"></p><h1 id="2-ssh"><a href="#2-ssh" class="headerlink" title="2 ssh"></a>2 ssh</h1><p>ssh具体内容参考百度词条<a href="https://baike.baidu.com/item/SSH/10407">ssh</a><br>执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install ssh </span><br></pre></td></tr></table></figure><p>显示如下<br><img src="https://i-blog.csdnimg.cn/blog_migrate/2d7bb5fce1275523d01140a2a1c01424.png"><br>查看ssh服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ps</span> <span class="literal">-e</span> | grep sshd</span><br></pre></td></tr></table></figure><p>显示sshd的话表示ssh-server已经启动<br><img src="https://i-blog.csdnimg.cn/blog_migrate/ccac9456c7008cd8439c45c645c8c26e.png"><br>生成ssh-key</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;你的邮箱@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>生成后默认就行，直接回车生成文件隐藏<br>用下面命令检测是否在根目录下生存(上面建议默认，是直接在根目录下生成的)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> <span class="literal">-al</span> ~/.ssh</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/de0994ad8d808f189ed4ec9030615e3b.png"><br>然后打开显示隐藏文件<br><img src="https://i-blog.csdnimg.cn/blog_migrate/eb47eba16f9a712bd8047524f5f5eb84.png">找到<br><img src="https://i-blog.csdnimg.cn/blog_migrate/bcc065d14a29d13598f4d56647b41ed2.png"><br>再进入到文件夹下找到以下文件，这个是公钥。<br>打开这个文件将其内容复制(用记事本或者vim打开都行)<br><img src="https://i-blog.csdnimg.cn/blog_migrate/7c0c0e8b5c356f45ba34f74f38fd475a.png"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/c787fd589d622eef983fe42f02857eff.png">打开你的github帐号，进入你的settings<br><img src="https://i-blog.csdnimg.cn/blog_migrate/c948ad84b69384cd61385fe7347ad056.png">找到ssh<br><img src="https://i-blog.csdnimg.cn/blog_migrate/978cb04f1e14a96e65df43568252c90d.png"><br>新建一个ssh<br><img src="https://i-blog.csdnimg.cn/blog_migrate/df880886f641c1af1f64f360b189b121.png">将复制的内容粘贴进去后便是如上显示</p><h1 id="3-git-使用"><a href="#3-git-使用" class="headerlink" title="3 git 使用"></a>3 git 使用</h1><h2 id="3-1-新建仓库"><a href="#3-1-新建仓库" class="headerlink" title="3.1 新建仓库"></a>3.1 新建仓库</h2><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d9eb93e958f4078d7cbca14191487f6d.png"><br>这部分比较简单(其实都不难)，直接看图说话吧。名字和描诉整干净后直接创建仓库</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/4eb16a6a5731d31d61aea7dca0a0c4eb.png">然后把地址复制下来<br><img src="https://i-blog.csdnimg.cn/blog_migrate/460b2d3f06233ee1b0a8aaade07a981e.png"></p><h2 id="3-2-git它！！！git就万事了"><a href="#3-2-git它！！！git就万事了" class="headerlink" title="3.2 git它！！！git就万事了"></a>3.2 git它！！！git就万事了</h2><p>在你自己的文件夹下git clone远程仓库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 网址</span><br></pre></td></tr></table></figure><p>然后进入到目录里初始化他<br><img src="https://i-blog.csdnimg.cn/blog_migrate/36735234074ff0312a22d082cb636779.png"><br>在该目录下创建你自己的文件,这个随便你怎么建立，touch 是创建命令</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch README.md</span><br></pre></td></tr></table></figure><p>git add .  是有个空格后再家一个点。直接该该目录下的文件添加到暂存区域<br>git add 文件名  是直接将相应的文件添加到暂存区域</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"><span class="comment">#git add README.md</span></span><br></pre></td></tr></table></figure><p>提交本次修改<br>git commit</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;add readme file&quot;</span> <span class="comment">#提交本次修改</span></span><br></pre></td></tr></table></figure><p>推送到远程仓库<br>格式为 git push (brash) 我这里是直接推送到origin master</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master<span class="comment">#推送到远程仓库</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/e1c8ad0468251a3f08b6c1b1de785d3e.png"><br>输入你名字和密码<br><img src="https://i-blog.csdnimg.cn/blog_migrate/524377bf2fdf3cca28cc2a639e873c5a.png"><br>刷新你的仓库，内容就提交上去了<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d4fb82ae9b4940d3130cff0c98c91b05.png"></p><p>更多笔记请访问<br><a href="https://joenero.github.io/">JoeNero私人博客</a><br>参考链接<br><a href="https://blog.csdn.net/wxy540843763/article/details/80197301">参考链接1</a><br><a href="https://blog.csdn.net/qicheng777/article/details/74724015">参考链接2</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andoird camera app从零养成计划【一】</title>
      <link href="/2024/11/10/Android/APP/APP_1/"/>
      <url>/2024/11/10/Android/APP/APP_1/</url>
      
        <content type="html"><![CDATA[<p>要创建一个基本的Camera App demo，我们将使用Android Studio和Java来编写一个应用，该应用能够打开相机预览，拍照，并保存照片到设备的存储中。这里将使用Android的Camera2 API，因为它提供了更丰富的功能和更好的性能，尽管它比Camera API（已弃用）更复杂一些。</p><h3 id="步骤-1-创建一个新的Android项目"><a href="#步骤-1-创建一个新的Android项目" class="headerlink" title="步骤 1: 创建一个新的Android项目"></a>步骤 1: 创建一个新的Android项目</h3><ol><li>打开Android Studio，选择“Start a new Android Studio project”。</li><li>选择“Empty Activity”，然后点击“Next”。</li><li>填写你的应用名称（如 <code>CameraDemo</code>），选择你的保存位置，语言选择Java，最小API级别设置为21（因为Camera2 API在API 21（Android 5.0）上引入）。</li><li>点击“Finish”创建项目。</li></ol><h3 id="步骤-2-添加权限"><a href="#步骤-2-添加权限" class="headerlink" title="步骤 2: 添加权限"></a>步骤 2: 添加权限</h3><p>在你的 <code>AndroidManifest.xml</code> 文件中添加必要的权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;你的包名&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera&quot;</span> <span class="attr">android:required</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera.autofocus&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤-3-布局文件"><a href="#步骤-3-布局文件" class="headerlink" title="步骤 3: 布局文件"></a>步骤 3: 布局文件</h3><p>修改 <code>res/layout/activity_main.xml</code> 文件来添加必要的视图控件（如TextureView用于显示相机预览，Button用于拍照）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextureView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textureView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_above</span>=<span class="string">&quot;@+id/button_capture&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_capture&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;拍照&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤-4-编写MainActivity"><a href="#步骤-4-编写MainActivity" class="headerlink" title="步骤 4: 编写MainActivity"></a>步骤 4: 编写MainActivity</h3><p>由于Camera2 API较为复杂，这里不会详细展开全部代码，但会概述主要步骤和关键代码片段。</p><ol><li><strong>初始化Camera2 API</strong>：打开相机，设置预览大小，创建CaptureSession等。</li><li><strong>设置TextureView显示预览</strong>。</li><li><strong>处理拍照和保存</strong>：在点击按钮时，捕获图像并保存到存储。</li></ol><p>你需要创建多个类来处理Camera2的不同部分，如CameraStateCallback、CaptureRequest等。</p><h3 id="示例代码片段（MainActivity部分）"><a href="#示例代码片段（MainActivity部分）" class="headerlink" title="示例代码片段（MainActivity部分）"></a>示例代码片段（MainActivity部分）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextureView textureView;</span><br><span class="line">    <span class="keyword">private</span> CameraDevice cameraDevice;</span><br><span class="line">    <span class="keyword">private</span> CaptureRequest.Builder previewRequestBuilder;</span><br><span class="line">    <span class="comment">// 其他变量...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        textureView = findViewById(R.id.textureView);</span><br><span class="line">        <span class="comment">// 初始化相机，设置TextureView显示预览等...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拍照按钮点击事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCaptureButtonClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="comment">// 拍照逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相机打开，关闭等状态的回调</span></span><br><span class="line">    <span class="keyword">private</span> CameraDevice.<span class="type">StateCallback</span> <span class="variable">stateCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CameraDevice</span>.StateCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpened</span><span class="params">(<span class="meta">@NonNull</span> CameraDevice camera)</span> &#123;</span><br><span class="line">            <span class="comment">// 相机成功打开</span></span><br><span class="line">            cameraDevice = camera;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDisconnected</span><span class="params">(<span class="meta">@NonNull</span> CameraDevice camera)</span> &#123;</span><br><span class="line">            <span class="comment">// 相机被断开</span></span><br><span class="line">            cameraDevice.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(<span class="meta">@NonNull</span> CameraDevice camera, <span class="type">int</span> error)</span> &#123;</span><br><span class="line">            <span class="comment">// 相机发生错误</span></span><br><span class="line">            cameraDevice.close();</span><br><span class="line">            cameraDevice = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5-运行时权限请求"><a href="#步骤-5-运行时权限请求" class="headerlink" title="步骤 5: 运行时权限请求"></a>步骤 5: 运行时权限请求</h3><p>由于Android 6.0（API 级别 23）及以上版本需要在运行时请求权限，你需要检查并在必要时请求权限。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里只提供了一个基本的框架和思路。Camera2 API 涉及很多复杂的步骤和概念，如处理相机状态、创建和管理CaptureRequests、SurfaceTexture等。为了完整实现功能，你需要深入研究Camera2 API的文档和示例代码。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL速学</title>
      <link href="/2024/11/10/CPP/STL/"/>
      <url>/2024/11/10/CPP/STL/</url>
      
        <content type="html"><![CDATA[<h1 id="1-容器"><a href="#1-容器" class="headerlink" title="1.容器"></a>1.容器</h1><h2 id="1-1-array"><a href="#1-1-array" class="headerlink" title="1.1 array"></a>1.1 array</h2><p><strong>array保存在栈中</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">std::array&lt;<span class="type">int</span>, 4&gt; arr= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="number">4</span>;</span><br><span class="line">std::array&lt;<span class="type">int</span>, len&gt; arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;; <span class="comment">// 非法, 数组大小参数必须是常量表达式</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> len = <span class="number">4</span>;</span><br><span class="line">std::array&lt;<span class="type">int</span>, len&gt; arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;; <span class="comment">// 正确写法</span></span><br></pre></td></tr></table></figure><h2 id="1-2-vector"><a href="#1-2-vector" class="headerlink" title="1.2 vector"></a>1.2 vector</h2><p>不同的编译器实现的扩容方式不一样，vector 在VS2015中以1.5倍扩容，GCC以2倍扩容。</p><p><strong>vector保存在堆中</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">size</span>();<span class="comment">//返回行数</span></span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>].<span class="built_in">size</span>();<span class="comment">//返回列数</span></span><br></pre></td></tr></table></figure><h2 id="1-3-list"><a href="#1-3-list" class="headerlink" title="1.3 list"></a>1.3 list</h2><p>list 是双向循环链表 记住！！！</p><p>List的插入、删除或者拼合操作不会造成原有迭代器的失效。</p><p>List不能用STL 中的sort函数进行排序，而是要用自身的sort函数。List仅支持随机访问迭代器，而List是双向迭代器。</p><h2 id="1-4-forward-list"><a href="#1-4-forward-list" class="headerlink" title="1.4 forward_list"></a>1.4 forward_list</h2><p>单向链表，标准库容器中唯一不提供size()方法的容器，当不需要双向迭代时，具备比list更高的空间利用率。</p><h2 id="1-5-stack"><a href="#1-5-stack" class="headerlink" title="1.5 stack"></a>1.5 stack</h2><p>基础示例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//输出栈顶元素</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈顶元素&quot;</span> &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//弹出栈顶元素</span></span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈的大小为:&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>emplace :&#x2F;&#x2F;emplace函数可以将一个元素加入栈中，与push的区别在于：emplace可以直接传入Node的构造函数的参数，并将构造的元素加入栈中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>       </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">Node</span> (<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        a = x; b = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;Node&gt; mystack;</span><br><span class="line">    mystack.<span class="built_in">emplace</span>(<span class="number">1</span>,<span class="number">2</span>);        </span><br><span class="line">    <span class="comment">//mystack.push(1,2);        //编译不通过，要达到上面的效果需要手动构造，例如mystack.push(Node(1,2));</span></span><br><span class="line">    Node p = mystack.<span class="built_in">top</span>();</span><br><span class="line">    cout &lt;&lt; p.a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.b &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    stack&lt;Node&gt; my2;</span><br><span class="line">    my<span class="number">2.</span><span class="built_in">swap</span>(mystack);            <span class="comment">//swap函数可以交换两个栈的元素</span></span><br><span class="line">    cout &lt;&lt; mystack.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; my<span class="number">2.</span><span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-智能指针"><a href="#2-智能指针" class="headerlink" title="2.智能指针"></a>2.智能指针</h1><p>对于编译器来说，智能指针实际上是一个栈对象，并非指针类型，在栈对象生命期即将结束时，智能指针通过析构函数释放有它管理的堆内存。所有智能指针都重载了“operator-&gt;”操作符，直接返回对象的引用，用以操作对象。访问智能指针原来的方法则使用“.”操作符。</p><p>访问智能指针包含的裸指针则可以用 get() 函数。由于智能指针是一个对象，所以if (my_smart_object)永远为真，要判断智能指针的裸指针是否为空，需要这样判断：if (my_smart_object.get())。</p><h2 id="2-1auto-ptr"><a href="#2-1auto-ptr" class="headerlink" title="2.1auto_ptr"></a>2.1auto_ptr</h2><p><strong>采用管理权转移，拷贝时会导致对象悬空，设计有缺陷，不建议使用</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//auto_ptr&lt;int&gt; p;//初始化为NULL</span></span><br><span class="line"><span class="comment">//  错误写法  auto_ptr&lt;int&gt; p = new int(123);</span></span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">123</span>))</span></span>;</span><br><span class="line">cout &lt;&lt; *p;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">123</span>))</span></span>;</span><br><span class="line">    <span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(p)</span></span>;<span class="comment">//将p的使用权转给p1,p1已经指向nullptr无法正常访问</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; *p &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; *p1 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="2-2unique-ptr"><a href="#2-2unique-ptr" class="headerlink" title="2.2unique_ptr"></a>2.2unique_ptr</h2><p><strong>特点：防拷贝，简单粗暴，建议使用</strong></p><p><strong>缺点：不能拷贝，可以转让</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">123</span>))</span></span>;</span><br><span class="line">*p = <span class="number">7</span>;</span><br><span class="line">cout &lt;&lt; *p&lt;&lt; endl;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;string&gt; upt1=std::<span class="built_in">move</span>(upt);  <span class="comment">//控制权限转移</span></span><br><span class="line"><span class="keyword">if</span>(upt.<span class="built_in">get</span>()!=<span class="literal">nullptr</span>)<span class="comment">//判空操作更安全</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; p1;          <span class="comment">//创建空的智能指针</span></span><br><span class="line">p<span class="number">1.</span><span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">3</span>));    <span class="comment">//绑定动态对象</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">4</span>))</span> </span>;        <span class="comment">//创建时绑定动态对象</span></span><br><span class="line">cout &lt;&lt; *p1 &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; *p2 &lt;&lt;endl;</span><br><span class="line"><span class="comment">//所有权发生变化</span></span><br><span class="line"><span class="type">int</span> *p = p<span class="number">1.</span><span class="built_in">release</span>();      <span class="comment">//释放所有权</span></span><br><span class="line"></span><br><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">p_s1</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;abc&quot;</span>))</span></span>;</span><br><span class="line"><span class="comment">//    unique_ptr&lt;string&gt; p_s2 = std::move(p_s1);</span></span><br><span class="line">    cout &lt;&lt; *p_s1 &lt;&lt;endl;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; p_s2 &lt;&lt;endl;</span></span><br></pre></td></tr></table></figure><h2 id="2-3shared-ptr"><a href="#2-3shared-ptr" class="headerlink" title="2.3shared_ptr"></a>2.3shared_ptr</h2><p> shared_ptr的原理：通过引用计数的方式来实现多个shared_ptr对象之间共享资源。</p><ol><li>shared_ptr在其内部，给每个资源都维护了一份计数，用来记录该份资源被几个对象共享。</li><li>在对象被销毁时(也就是析构函数调用)，就说明自己不使用该资源了，对象的引用计数减一。</li><li>如果引用计数是0，就说明自己是最后一个使用该资源的对象，必须释放该资源。</li><li>如果不是0，就说明除了自己还有其他对象在使用该份资源，不能释放该资源，否则其他对象就成野指针了。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">123</span>))</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p3</span><span class="params">(p2)</span></span>;</span><br><span class="line">cout &lt;&lt; *p1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>循环引用</p><p>循坏引用分析：</p><ol><li>node1和node2两个智能指针对象指向两个结点，引用计数变成1，我们不需要手动delete。</li><li>node1和_next指向node2，node2的_prev还指向下一个结点。但是_prev还指向上一个节点。</li><li>node1和node2析构，引用计数减一，但是_next还指向下一个节点。但是_prev还指向上一个节点。</li><li>也就是说_next析构了，node2就释放了。</li><li>也就是说_prev析构了，node1就释放了。</li><li>但是_next属于node成员，node1释放了，_next才会析构，而node1由_prev管理，_prev属于node2成员，所以这就叫循环引用，谁也不会释放。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">    shared_ptr&lt;ListNode&gt; _prev;</span><br><span class="line">    shared_ptr&lt;ListNode&gt; _next;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">ListNode</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~ListNode()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;ListNode&gt; <span class="title">node1</span><span class="params">(<span class="keyword">new</span> ListNode)</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;ListNode&gt; <span class="title">node2</span><span class="params">(<span class="keyword">new</span> ListNode)</span></span>;</span><br><span class="line">    cout &lt;&lt; node<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; node<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    node1-&gt;_next = node2;</span><br><span class="line">    node2-&gt;_prev = node1;</span><br><span class="line">    cout &lt;&lt; node<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; node<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：在引用计数的场景下，把节点中的_prev和_next改成weak_ptr就可以了</strong></p><p><strong>原理：node1-&gt;_next &#x3D; node2;和node2-&gt;_prev &#x3D; node1;时weak_ptr的_next和_prev不会增加 node1和node2的引用计数。</strong> </p><h2 id="2-4weak-ptr"><a href="#2-4weak-ptr" class="headerlink" title="2.4weak_ptr"></a>2.4weak_ptr</h2><p>weak_ptr 被设计为与 shared_ptr 共同工作，可以从一个 shared_ptr 或者另一个 weak_ptr 对象构造而来。weak_ptr 是为了配合 shared_ptr 而引入的一种智能指针，它更像是 shared_ptr 的一个助手而不是智能指针，因为它不具有普通指针的行为，没有重载 operator* 和 operator-&gt; ，因此取名为 weak，表明其是功能较弱的智能指针。它的最大作用在于协助 shared_ptr 工作，可获得资源的观测权，像旁观者那样观测资源的使用情况。观察者意味着 weak_ptr 只对 shared_ptr 进行引用，而不改变其引用计数，当被观察的 shared_ptr 失效后，相应的 weak_ptr 也相应失效。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">    weak_ptr&lt;ListNode&gt; _prev;</span><br><span class="line">    weak_ptr&lt;ListNode&gt; _next;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">ListNode</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~ListNode()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;ListNode&gt; <span class="title">node1</span><span class="params">(<span class="keyword">new</span> ListNode)</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;ListNode&gt; <span class="title">node2</span><span class="params">(<span class="keyword">new</span> ListNode)</span></span>;</span><br><span class="line">    cout &lt;&lt; node<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; node<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    node1-&gt;_next = node2;</span><br><span class="line">    node2-&gt;_prev = node1;</span><br><span class="line">    cout &lt;&lt; node<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; node<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给出几个使用指南。<br>（1）如果程序要使用多个指向同一个对象的指针，应选择shared_ptr。这样的情况包括：<br>（a）的元素和最小的元素；<br>（b）两个对象都包含指向第三个对象的指针；<br>（c）STL容器包含指针。很多STL算法都支持复制和赋值操作，这些操作可用于shared_ptr，但不能用于unique_ptr（编译器发出warning）和auto_ptr（行为不确定）。如果你的编译器没有提供shared_ptr，可使用Boost库提供的shared_ptr</p><h1 id="3-类型推导"><a href="#3-类型推导" class="headerlink" title="3.类型推导"></a>3.类型推导</h1><h2 id="3-1-auto"><a href="#3-1-auto" class="headerlink" title="3.1 auto"></a>3.1 auto</h2><p>编程时候常常需要把表达式的值付给变量,需要在声明变量的时候清楚的知道变量是什么类型。然而做到这一点并非那么容易(特别是模板中)，有时候根本做不到。为了解决这个问题，C++11新标准就引入了auto类型说明符，用它就能让编译器替我们去分析表达式所属的类型。和原来那些只对应某种特定的类型说明符(例如 int)不同。auto 让编译器通过初始值来进行类型推演。从而获得定义变量的类型，所以说 auto 定义的变量必须有初始值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">auto</span> a = i,&amp;b = i,*c = &amp;i;<span class="comment">//正确: a初始化为i的副本,b初始化为i的引用,c为i的指针.</span></span><br><span class="line"><span class="keyword">auto</span> sz = <span class="number">0</span>, pi = <span class="number">3.14</span>;<span class="comment">//错误,两个变量的类型不一样。</span></span><br></pre></td></tr></table></figure><h2 id="3-2-decltype"><a href="#3-2-decltype" class="headerlink" title="3.2 decltype"></a>3.2 decltype</h2><p><code>decltype</code> 关键字是为了解决 auto 关键字只能对变量进行类型推导的缺陷而出现的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">decltype</span>(i) i2 = i;</span><br><span class="line">cout  &lt;&lt; i &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">cout &lt;&lt; i2;</span><br></pre></td></tr></table></figure><h1 id="4-强制类型转换"><a href="#4-强制类型转换" class="headerlink" title="4.强制类型转换"></a>4.强制类型转换</h1><p>C++中四种类型转换是：static_cast, dynamic_cast, const_cast, reinterpret_cast</p><h2 id="4-1-const-cast"><a href="#4-1-const-cast" class="headerlink" title="4.1 const_cast"></a>4.1 const_cast</h2><p><strong>const_cast&lt;类型说明符&gt; (变量或表达式)</strong></p><p> 用于将const变量转换为非const类型</p><p>const_cast用于强制去掉const这种不能被修改的常数特性，但需要特别注意的是const_cast不是用于去除变量的常量性，而是去除指向常数对象的指针或引用的常量性，其去除常量性的对象必须为指针或引用。</p><h2 id="4-2-static-cast"><a href="#4-2-static-cast" class="headerlink" title="4.2  static_cast"></a>4.2  static_cast</h2><p>static_cast&lt;类型说明符&gt; (变量或表达式)</p><p>用于各种隐私转换，比如非const转const， void*转指针等， static_cast 能用于多态向上转化，如果向下转能成功但是不安全，结果未知。</p><h2 id="4-3-dynamic-cast"><a href="#4-3-dynamic-cast" class="headerlink" title="4.3 dynamic_cast"></a>4.3 dynamic_cast</h2><p>dynamic_cast&lt;类型说明符&gt; (变量或表达式)</p><p>用于动态类型转换，只能用于含有虚函数的类，用于类层次间的向上和向下转化。只能转指针或引用。向上转换：指的是子类向基类转换。 向下转换：指的是基类向子类转换。  他通过判断在执行到该语句的时候变量的运行时类型和要转换的类型是否相同来判断是否能够向下转换。    </p><h2 id="4-4-reinterpret-cast"><a href="#4-4-reinterpret-cast" class="headerlink" title="4.4 reinterpret_cast"></a>4.4 reinterpret_cast</h2><p>reinterpret_cast&lt;类型说明符&gt; (变量或表达式)</p><p>几乎什么都可以转，比如将int转指针，可能会出问题，尽量少用。</p><p>改变指针或引用的类型、将指针或引用转换为一个足够长度的整形、将整型转换为指针或引用类型。</p><h2 id="4-5-为什么不用C的强制转换？"><a href="#4-5-为什么不用C的强制转换？" class="headerlink" title="4.5 为什么不用C的强制转换？"></a>4.5 为什么不用C的强制转换？</h2><p>C的强制转换表面上看起来功能强大什么都能转换，但转化不够明确，不能进行错误检查，容易出错。</p><h1 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a>委托构造函数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> value1;</span><br><span class="line">    <span class="type">int</span> value2;</span><br><span class="line">    <span class="built_in">Base</span>() &#123;</span><br><span class="line">        value1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> value) : <span class="built_in">Base</span>() &#123;  <span class="comment">// 委托 Base() 构造函数</span></span><br><span class="line">        value2 = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="继承构造"><a href="#继承构造" class="headerlink" title="继承构造"></a>继承构造</h1><p>在继承体系中，如果派生类想要使用基类的构造函数，需要在构造函数中显式声明。<br> 假若基类拥有为数众多的不同版本的构造函数，这样，在派生类中得写很多对应的“透传”构造函数。如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">int</span> i) &#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">double</span> d,<span class="type">int</span> i)&#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">float</span> f,<span class="type">int</span> i,<span class="type">const</span> <span class="type">char</span>* c)&#123;&#125;</span><br><span class="line">  <span class="comment">//...等等系列的构造函数版本</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>:A</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">B</span>(<span class="type">int</span> i):<span class="built_in">A</span>(i)&#123;&#125;</span><br><span class="line">  <span class="built_in">B</span>(<span class="type">double</span> d,<span class="type">int</span> i):<span class="built_in">A</span>(d,i)&#123;&#125;</span><br><span class="line">  <span class="built_in">B</span>(folat f,<span class="type">int</span> i,<span class="type">const</span> <span class="type">char</span>* c):<span class="built_in">A</span>(f,i,e)&#123;&#125;</span><br><span class="line">  <span class="comment">//......等等好多个和基类构造函数对应的构造函数</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>C++11的继承构造：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">int</span> i) &#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">double</span> d,<span class="type">int</span> i)&#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">float</span> f,<span class="type">int</span> i,<span class="type">const</span> <span class="type">char</span>* c)&#123;&#125;</span><br><span class="line">  <span class="comment">//...等等系列的构造函数版本</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>:A</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">using</span> A::A;</span><br><span class="line">  <span class="comment">//关于基类各构造函数的继承一句话搞定</span></span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><h1 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int a = 0;</span><br><span class="line">auto f = [=] &#123; return a; &#125;;</span><br><span class="line"></span><br><span class="line">a+=1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f() &lt;&lt; endl;       //输出0</span><br><span class="line"></span><br><span class="line">int a = 0;</span><br><span class="line">auto f = [&amp;a] &#123; return a; &#125;;</span><br><span class="line"></span><br><span class="line">a+=1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f() &lt;&lt;endl;       //输出1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; len ; i++)&#123;</span><br><span class="line">        temp ^=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr RTOS 学习指南</title>
      <link href="/2023/12/21/nodic/zephyr/README/"/>
      <url>/2023/12/21/nodic/zephyr/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-RTOS-学习指南"><a href="#Zephyr-RTOS-学习指南" class="headerlink" title="Zephyr RTOS 学习指南"></a>Zephyr RTOS 学习指南</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月20日 22:09</li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ol><li><p><a href="quick_start/README.md">快速入门</a></p><ul><li>环境搭建</li><li>Hello World 示例</li><li>基本概念</li></ul></li><li><p><a href="architecture/README.md">系统架构</a></p><ul><li><a href="architecture/kernel.md">内核架构</a></li><li><a href="architecture/hardware.md">硬件支持</a></li><li><a href="architecture/devicetree.md">设备树</a></li><li><a href="architecture/drivers.md">驱动模型</a></li></ul></li><li><p><a href="core/README.md">核心模块</a></p><ul><li><a href="core/kernel.md">内核模块</a><ul><li>线程管理</li><li>内存管理</li><li>中断处理</li><li>定时器</li></ul></li><li><a href="core/drivers.md">驱动系统</a><ul><li>GPIO</li><li>UART</li><li>SPI</li><li>I2C</li></ul></li><li><a href="core/networking.md">网络协议栈</a></li><li><a href="core/filesystem.md">文件系统</a></li><li><a href="core/power.md">电源管理</a></li></ul></li><li><p><a href="development/README.md">开发指南</a></p><ul><li><a href="development/application.md">应用开发流程</a></li><li><a href="development/driver.md">驱动开发指南</a></li><li><a href="development/debugging.md">调试技巧</a></li><li><a href="development/testing.md">测试框架</a></li><li><a href="development/contributing.md">贡献指南</a></li></ul></li><li><p><a href="examples/README.md">示例代码</a></p><ul><li><a href="examples/basic.md">基础示例</a></li><li><a href="examples/networking.md">网络示例</a></li><li><a href="examples/sensors.md">传感器示例</a></li><li><a href="examples/bluetooth.md">蓝牙示例</a></li></ul></li><li><p><a href="boards/README.md">硬件支持</a></p><ul><li><a href="boards/supported.md">支持的开发板</a></li><li><a href="boards/porting.md">添加新板子</a></li><li><a href="boards/hal.md">硬件抽象层</a></li></ul></li><li><p><a href="toolchain/README.md">工具链</a></p><ul><li><a href="toolchain/build_system.md">构建系统</a></li><li><a href="toolchain/ide.md">IDE支持</a></li><li><a href="toolchain/debugging.md">调试工具</a></li><li><a href="toolchain/installation.md">安装指南</a></li></ul></li><li><p><a href="faq/README.md">常见问题</a></p><ul><li>编译问题</li><li>运行问题</li><li>开发问题</li></ul></li></ol><h2 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h2><p>本文档旨在帮助开发者快速上手 Zephyr RTOS，涵盖了从入门到进阶的完整学习路径。基于 Zephyr v2.9.1 版本，包含了官方源码中的重要内容和实践经验。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>新手入门：</p><ul><li>按照<a href="quick_start/README.md">快速入门</a>章节逐步学习</li><li>参考<a href="examples/README.md">示例代码</a>动手实践</li><li>遇到问题查看<a href="faq/README.md">常见问题</a></li></ul></li><li><p>进阶开发：</p><ul><li>深入学习<a href="architecture/README.md">系统架构</a></li><li>掌握<a href="core/README.md">核心模块</a>的使用</li><li>参考<a href="development/README.md">开发指南</a>进行应用开发</li></ul></li><li><p>高级主题：</p><ul><li>学习<a href="toolchain/README.md">工具链</a>的高级用法</li><li>了解<a href="boards/README.md">硬件支持</a>的扩展方法</li><li>参与社区贡献，查看<a href="development/contributing.md">贡献指南</a></li></ul></li></ol><h3 id="文档特点"><a href="#文档特点" class="headerlink" title="文档特点"></a>文档特点</h3><ul><li>基于官方源码：直接对标 Zephyr v2.9.1 源码结构</li><li>中文友好：全中文内容，清晰的知识体系</li><li>实例丰富：大量实际示例和最佳实践</li><li>循序渐进：从基础到高级的学习路径</li><li>实用导向：侧重实际开发中的重点难点</li></ul><h3 id="社区资源"><a href="#社区资源" class="headerlink" title="社区资源"></a>社区资源</h3><ul><li>官方文档：<a href="https://docs.zephyrproject.org/">Zephyr Documentation</a></li><li>源码仓库：<a href="https://github.com/zephyrproject-rtos/zephyr">Zephyr on GitHub</a></li><li>问题追踪：<a href="https://github.com/zephyrproject-rtos/zephyr/issues">GitHub Issues</a></li><li>邮件列表：<ul><li>用户交流：<a href="mailto:&#x75;&#115;&#x65;&#114;&#115;&#x40;&#x6c;&#x69;&#x73;&#116;&#x73;&#46;&#x7a;&#101;&#112;&#104;&#121;&#x72;&#x70;&#x72;&#111;&#x6a;&#101;&#x63;&#x74;&#x2e;&#111;&#114;&#x67;">&#x75;&#115;&#x65;&#114;&#115;&#x40;&#x6c;&#x69;&#x73;&#116;&#x73;&#46;&#x7a;&#101;&#112;&#104;&#121;&#x72;&#x70;&#x72;&#111;&#x6a;&#101;&#x63;&#x74;&#x2e;&#111;&#114;&#x67;</a></li><li>开发讨论：<a href="mailto:&#x64;&#101;&#x76;&#101;&#x6c;&#x40;&#x6c;&#x69;&#x73;&#x74;&#x73;&#46;&#x7a;&#101;&#112;&#104;&#121;&#114;&#x70;&#x72;&#111;&#x6a;&#x65;&#99;&#116;&#x2e;&#111;&#x72;&#103;">&#x64;&#101;&#x76;&#101;&#x6c;&#x40;&#x6c;&#x69;&#x73;&#x74;&#x73;&#46;&#x7a;&#101;&#112;&#104;&#121;&#114;&#x70;&#x72;&#111;&#x6a;&#x65;&#99;&#116;&#x2e;&#111;&#x72;&#103;</a></li></ul></li><li>Discord 社区：<a href="https://chat.zephyrproject.org/">Zephyr Discord</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> nodic </category>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
            <tag> RTOS </tag>
            
            <tag> embedded </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 设备树</title>
      <link href="/2023/12/21/nodic/zephyr/architecture/devicetree/"/>
      <url>/2023/12/21/nodic/zephyr/architecture/devicetree/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-设备树"><a href="#Zephyr-设备树" class="headerlink" title="Zephyr 设备树"></a>Zephyr 设备树</h1><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月20日 23:15</li></ul><p>设备树（Device Tree）是 Zephyr RTOS 用于描述硬件配置的机制。它提供了一种统一的方式来描述系统硬件，使得硬件配置与软件代码分离，提高了代码的可移植性和可维护性。</p><h2 id="设备树概述"><a href="#设备树概述" class="headerlink" title="设备树概述"></a>设备树概述</h2><h3 id="什么是设备树"><a href="#什么是设备树" class="headerlink" title="什么是设备树"></a>什么是设备树</h3><p>设备树是一种描述硬件的数据结构，它以树形结构表示硬件设备及其属性。在 Zephyr 中，设备树用于：</p><ol><li>描述硬件配置</li><li>生成设备驱动的初始化代码</li><li>配置中断和引脚复用</li><li>定义内存映射</li></ol><h3 id="设备树的优势"><a href="#设备树的优势" class="headerlink" title="设备树的优势"></a>设备树的优势</h3><ol><li><strong>硬件描述与软件分离</strong>：便于硬件配置的修改和维护</li><li><strong>跨平台兼容性</strong>：同一套代码可以适用于不同的硬件平台</li><li><strong>动态配置</strong>：支持运行时修改设备配置</li><li><strong>标准化</strong>：采用行业标准的描述方式，提高可读性和互操作性</li></ol><h2 id="设备树语法"><a href="#设备树语法" class="headerlink" title="设备树语法"></a>设备树语法</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>设备树文件（.dts）的基本结构如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">/dts-v1/</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">model</span> <span class="operator">=</span> <span class="string">&quot;Example Board&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;example,board&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">soc</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">        uart0:</span> <span class="title class_">uart@40002000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;example,uart&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40002000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>节点表示系统中的设备或总线。每个节点可以包含属性和子节点。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">soc</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">    uart0:</span> <span class="title class_">uart@40002000</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 节点属性</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性用于描述节点的特征。常见的属性包括：</p><ol><li><strong>compatible</strong>：指定设备的兼容性字符串</li><li><strong>reg</strong>：指定设备的寄存器地址范围</li><li><strong>status</strong>：指定设备的启用状态</li><li><strong>interrupts</strong>：指定设备的中断配置</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">uart0:</span> <span class="title class_">uart@40002000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;example,uart&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40002000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">5</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="标签和引用"><a href="#标签和引用" class="headerlink" title="标签和引用"></a>标签和引用</h3><p>使用标签（label）可以在设备树中引用其他节点：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">uart0:</span> <span class="title class_">uart@40002000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// uart0 是一个标签</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span>  <span class="comment">// 使用 &amp;uart0 引用标签</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="Zephyr-中的设备树使用"><a href="#Zephyr-中的设备树使用" class="headerlink" title="Zephyr 中的设备树使用"></a>Zephyr 中的设备树使用</h2><h3 id="设备树源文件"><a href="#设备树源文件" class="headerlink" title="设备树源文件"></a>设备树源文件</h3><p>Zephyr 的设备树源文件主要包括：</p><ol><li><strong>SoC 级别的 .dtsi 文件</strong>：描述 SoC 的通用硬件配置</li><li><strong>板级的 .dts 文件</strong>：描述特定开发板的硬件配置</li><li>**覆盖文件 (.overlay)**：用于修改或扩展现有的设备树配置</li></ol><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>设备树的编译过程如下：</p><ol><li>预处理：合并所有相关的 .dts 和 .dtsi 文件</li><li>编译：将预处理后的文件编译成设备树二进制文件（.dtb）</li><li>生成：基于 .dtb 文件生成 C 头文件，供应用程序使用</li></ol><h3 id="在代码中使用设备树"><a href="#在代码中使用设备树" class="headerlink" title="在代码中使用设备树"></a>在代码中使用设备树</h3><p>Zephyr 提供了一系列宏来访问设备树信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查节点是否启用</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DT_NODE_HAS_STATUS(DT_NODELABEL(uart0), okay)</span></span><br><span class="line">    <span class="comment">// 使用 uart0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_ADDR DT_REG_ADDR(DT_NODELABEL(uart0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历节点</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_INIT(node_id) \</span></span><br><span class="line"><span class="meta">    uart_init(DT_LABEL(node_id), DT_REG_ADDR(node_id));</span></span><br><span class="line"></span><br><span class="line">DT_FOREACH_STATUS_OKAY(example_uart, UART_INIT)</span><br></pre></td></tr></table></figure><h2 id="设备树叠加（Overlays）"><a href="#设备树叠加（Overlays）" class="headerlink" title="设备树叠加（Overlays）"></a>设备树叠加（Overlays）</h2><p>设备树叠加允许在不修改原始 .dts 文件的情况下更改或添加设备树配置。</p><h3 id="创建叠加文件"><a href="#创建叠加文件" class="headerlink" title="创建叠加文件"></a>创建叠加文件</h3><p>创建一个 .overlay 文件，例如 <code>my_board.overlay</code>：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;disabled&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="应用叠加文件"><a href="#应用叠加文件" class="headerlink" title="应用叠加文件"></a>应用叠加文件</h3><p>在构建时指定叠加文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west build -b my_board -- -DDTC_OVERLAY_FILE=my_board.overlay</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><strong>模块化设计</strong>：将通用配置放在 .dtsi 文件中，特定配置放在 .dts 文件中</li><li><strong>使用标签</strong>：为重要节点添加标签，方便引用</li><li><strong>保持简洁</strong>：只包含必要的硬件描述，避免过度配置</li><li><strong>使用叠加文件</strong>：通过叠加文件进行小的修改，而不是直接修改原始文件</li><li><strong>验证设备树</strong>：使用 <code>dtc</code> 工具检查设备树的语法和结构</li><li><strong>文档化</strong>：为自定义的设备树绑定编写文档，说明属性的用途和预期值</li></ol><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ol><li><strong>节点未启用</strong>：检查节点的 <code>status</code> 属性是否设置为 “okay”</li><li><strong>属性未定义</strong>：确保属性名称拼写正确，并检查是否在正确的节点中定义</li><li><strong>绑定问题</strong>：确保使用了正确的 <code>compatible</code> 字符串，并且相应的驱动程序存在</li><li><strong>地址冲突</strong>：检查 <code>reg</code> 属性，确保设备地址范围不重叠</li><li><strong>中断配置错误</strong>：验证 <code>interrupts</code> 属性的格式是否正确，中断号是否有效</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>设备树是 Zephyr RTOS 中描述硬件配置的强大工具。通过合理使用设备树，可以提高代码的可移植性和可维护性。深入理解设备树的概念和使用方法，对于开发高质量的 Zephyr 应用程序至关重要。</p>]]></content>
      
      
      <categories>
          
          <category> nodic </category>
          
          <category> zephyr </category>
          
          <category> architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
            <tag> embedded </tag>
            
            <tag> devicetree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 应用程序开发</title>
      <link href="/2023/12/21/nodic/zephyr/development/application/"/>
      <url>/2023/12/21/nodic/zephyr/development/application/</url>
      
        <content type="html"><![CDATA[<h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li>版本：V1.0</li><li>更新时间：2025年03月21日 02:15</li></ul><h1 id="Zephyr-应用程序开发"><a href="#Zephyr-应用程序开发" class="headerlink" title="Zephyr 应用程序开发"></a>Zephyr 应用程序开发</h1><p>本文档详细介绍了 Zephyr RTOS 应用程序的开发过程，包括应用程序结构、配置系统、构建系统以及实际示例。</p><h2 id="应用程序结构"><a href="#应用程序结构" class="headerlink" title="应用程序结构"></a>应用程序结构</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>一个典型的 Zephyr 应用程序目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">├── CMakeLists.txt           # CMake 构建脚本</span><br><span class="line">├── prj.conf                 # 项目配置文件</span><br><span class="line">├── app.overlay             # 设备树覆盖文件（可选）</span><br><span class="line">├── src/                    # 源代码目录</span><br><span class="line">│   ├── main.c             # 主程序</span><br><span class="line">│   ├── app_version.h      # 版本信息</span><br><span class="line">│   └── ...               # 其他源文件</span><br><span class="line">├── include/               # 头文件目录</span><br><span class="line">│   ├── app_config.h      # 应用配置头文件</span><br><span class="line">│   └── ...               # 其他头文件</span><br><span class="line">├── boards/               # 板级特定文件</span><br><span class="line">│   ├── board_a.conf     # 板级配置</span><br><span class="line">│   └── board_a.overlay  # 板级设备树覆盖</span><br><span class="line">└── tests/                # 测试文件（可选）</span><br><span class="line">    ├── unit/            # 单元测试</span><br><span class="line">    └── integration/     # 集成测试</span><br></pre></td></tr></table></figure><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><p>基本的 CMakeLists.txt 文件内容：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置最低 CMake 版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找 Zephyr 包</span></span><br><span class="line"><span class="keyword">find_package</span>(Zephyr REQUIRED HINTS $ENV&#123;ZEPHYR_BASE&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置项目名称</span></span><br><span class="line"><span class="keyword">project</span>(my_zephyr_app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件目录</span></span><br><span class="line"><span class="keyword">target_include_directories</span>(app PRIVATE</span><br><span class="line">    <span class="keyword">include</span></span><br><span class="line">    <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源文件</span></span><br><span class="line"><span class="keyword">target_sources</span>(app PRIVATE</span><br><span class="line">    src/main.c</span><br><span class="line">    src/app_version.c</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加编译选项</span></span><br><span class="line"><span class="keyword">target_compile_options</span>(app PRIVATE</span><br><span class="line">    -Wall</span><br><span class="line">    -Wextra</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加链接选项</span></span><br><span class="line"><span class="keyword">target_link_options</span>(app PRIVATE</span><br><span class="line">    -Wl,--gc-sections</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="主程序结构"><a href="#主程序结构" class="headerlink" title="主程序结构"></a>主程序结构</h3><p>基本的 main.c 文件结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;app_config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程栈大小 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程优先级 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_PRIORITY 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明线程栈 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(thread_stack, STACK_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明线程数据结构 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程入口函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 线程主循环 */</span></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 应用程序初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">app_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化代码 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化应用程序 */</span></span><br><span class="line">    <span class="keyword">if</span> (app_init() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建线程 */</span></span><br><span class="line">    k_thread_create(&amp;thread_data, thread_stack,</span><br><span class="line">                   K_THREAD_STACK_SIZEOF(thread_stack),</span><br><span class="line">                   thread_entry, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                   THREAD_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_FOREVER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><h3 id="Kconfig-配置"><a href="#Kconfig-配置" class="headerlink" title="Kconfig 配置"></a>Kconfig 配置</h3><ol><li><strong>项目配置文件 (prj.conf)</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 内核配置</span><br><span class="line">CONFIG_MULTITHREADING=y</span><br><span class="line">CONFIG_NUM_PREEMPT_PRIORITIES=16</span><br><span class="line">CONFIG_MAIN_THREAD_PRIORITY=7</span><br><span class="line"></span><br><span class="line"># 系统配置</span><br><span class="line">CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=2048</span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=8192</span><br><span class="line"></span><br><span class="line"># 外设配置</span><br><span class="line">CONFIG_GPIO=y</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_UART_INTERRUPT_DRIVEN=y</span><br><span class="line"></span><br><span class="line"># 网络配置</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line"></span><br><span class="line"># 调试配置</span><br><span class="line">CONFIG_DEBUG=y</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>板级配置文件 (boards&#x2F;board_a.conf)</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 板级特定配置</span><br><span class="line">CONFIG_BOARD_BOARD_A=y</span><br><span class="line">CONFIG_SOC_SERIES_NRF52X=y</span><br><span class="line">CONFIG_SOC_NRF52840_QIAA=y</span><br><span class="line"></span><br><span class="line"># 时钟配置</span><br><span class="line">CONFIG_CLOCK_CONTROL_NRF_K32SRC_XTAL=y</span><br><span class="line">CONFIG_CLOCK_CONTROL_NRF_K32SRC_50PPM=y</span><br><span class="line"></span><br><span class="line"># GPIO 配置</span><br><span class="line">CONFIG_GPIO_AS_PINMUX=y</span><br></pre></td></tr></table></figure><h3 id="设备树配置"><a href="#设备树配置" class="headerlink" title="设备树配置"></a>设备树配置</h3><ol><li><strong>设备树覆盖文件 (app.overlay)</strong></li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,shell-uart</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">buttons</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-keys&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        button0:</span> <span class="title class_">button_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">11</span> (GPIO_PULL_UP | GPIO_ACTIVE_LOW)&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Push button switch 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">tx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">6</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">rx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">8</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>板级设备树覆盖 (boards&#x2F;board_a.overlay)</strong></li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">model</span> <span class="operator">=</span> <span class="string">&quot;Custom Board A&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,board-a&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;flash0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x0</span> DT_SIZE_K(<span class="number">1024</span>)&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;sram0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x20000000</span> DT_SIZE_K(<span class="number">256</span>)&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="构建系统"><a href="#构建系统" class="headerlink" title="构建系统"></a>构建系统</h2><h3 id="基本构建命令"><a href="#基本构建命令" class="headerlink" title="基本构建命令"></a>基本构建命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建应用程序</span></span><br><span class="line">west build -b board_a app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定配置文件构建</span></span><br><span class="line">west build -b board_a app -- -DCONF_FILE=prj_custom.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理构建</span></span><br><span class="line">west build -t clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建并烧录</span></span><br><span class="line">west build -b board_a app &amp;&amp; west flash</span><br></pre></td></tr></table></figure><h3 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h3><ol><li><strong>CMake 选项</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置构建类型</span></span><br><span class="line">west build -b board_a app -- -DCMAKE_BUILD_TYPE=Debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用优化</span></span><br><span class="line">west build -b board_a app -- -DOPTIMIZATION=-O2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用调试信息</span></span><br><span class="line">west build -b board_a app -- -DDEBUG_OPTIMIZATIONS=y</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>环境变量</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 Zephyr 基础路径</span></span><br><span class="line"><span class="built_in">export</span> ZEPHYR_BASE=/path/to/zephyr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工具链</span></span><br><span class="line"><span class="built_in">export</span> ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb</span><br><span class="line"><span class="built_in">export</span> GNUARMEMB_TOOLCHAIN_PATH=/path/to/toolchain</span><br></pre></td></tr></table></figure><h2 id="应用程序示例"><a href="#应用程序示例" class="headerlink" title="应用程序示例"></a>应用程序示例</h2><h3 id="1-LED-闪烁示例"><a href="#1-LED-闪烁示例" class="headerlink" title="1. LED 闪烁示例"></a>1. LED 闪烁示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LED 设备树标签 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_NODE DT_ALIAS(led0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !DT_NODE_HAS_STATUS(LED0_NODE, okay)</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;LED 设备树节点未定义&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LED GPIO 信息 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led</span> =</span> GPIO_DT_SPEC_GET(LED0_NODE, gpios);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 LED GPIO */</span></span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;led, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* LED 闪烁循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        gpio_pin_toggle_dt(&amp;led);</span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-UART-示例"><a href="#2-UART-示例" class="headerlink" title="2. UART 示例"></a>2. UART 示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* UART 设备 */</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">uart_dev</span> =</span> DEVICE_DT_GET(DT_CHOSEN(zephyr_console));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">uart_cb</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!uart_irq_update(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (uart_irq_rx_ready(dev)) &#123;</span><br><span class="line">        uart_fifo_read(dev, &amp;c, <span class="number">1</span>);</span><br><span class="line">        uart_fifo_write(dev, &amp;c, <span class="number">1</span>);  <span class="comment">/* 回显 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(uart_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 UART */</span></span><br><span class="line">    uart_irq_callback_set(uart_dev, uart_cb);</span><br><span class="line">    uart_irq_rx_enable(uart_dev);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        k_sleep(K_FOREVER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-网络示例"><a href="#3-网络示例" class="headerlink" title="3. 网络示例"></a>3. 网络示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_ip.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 4242</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock, ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">char</span> buffer[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建 socket */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    ret = bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 监听连接 */</span></span><br><span class="line">    ret = listen(sock, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 接受连接 */</span></span><br><span class="line">        <span class="type">int</span> client = accept(sock, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (client &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 接收数据 */</span></span><br><span class="line">        ret = recv(client, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 发送响应 */</span></span><br><span class="line">            send(client, buffer, ret, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        close(client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><h3 id="1-日志系统使用"><a href="#1-日志系统使用" class="headerlink" title="1. 日志系统使用"></a>1. 日志系统使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">LOG_MODULE_REGISTER(app, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">function</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Info message&quot;</span>);</span><br><span class="line">    LOG_DBG(<span class="string">&quot;Debug message&quot;</span>);</span><br><span class="line">    LOG_WRN(<span class="string">&quot;Warning message&quot;</span>);</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Error message&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-断言使用"><a href="#2-断言使用" class="headerlink" title="2. 断言使用"></a>2. 断言使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/check.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 参数检查 */</span></span><br><span class="line">    CHECKIF(ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CHECKIF(size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 函数实现 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-内存调试"><a href="#3-内存调试" class="headerlink" title="3. 内存调试"></a>3. 内存调试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 堆内存分配 */</span></span><br><span class="line"><span class="type">void</span> *ptr = k_malloc(size);</span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    LOG_ERR(<span class="string">&quot;内存分配失败&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用完毕后释放 */</span></span><br><span class="line">k_free(ptr);</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-代码组织"><a href="#1-代码组织" class="headerlink" title="1. 代码组织"></a>1. 代码组织</h3><ul><li>使用模块化设计</li><li>分离接口和实现</li><li>合理使用命名空间</li><li>保持代码简洁</li></ul><h3 id="2-错误处理"><a href="#2-错误处理" class="headerlink" title="2. 错误处理"></a>2. 错误处理</h3><ul><li>检查所有返回值</li><li>使用合适的错误码</li><li>实现错误恢复机制</li><li>提供有用的错误信息</li></ul><h3 id="3-资源管理"><a href="#3-资源管理" class="headerlink" title="3. 资源管理"></a>3. 资源管理</h3><ul><li>及时释放资源</li><li>避免资源泄漏</li><li>使用 RAII 模式</li><li>实现超时机制</li></ul><h3 id="4-性能优化"><a href="#4-性能优化" class="headerlink" title="4. 性能优化"></a>4. 性能优化</h3><ul><li>避免忙等待</li><li>合理使用中断</li><li>优化内存使用</li><li>减少上下文切换</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-编译错误"><a href="#1-编译错误" class="headerlink" title="1. 编译错误"></a>1. 编译错误</h3><p><strong>问题</strong>：编译失败</p><p><strong>解决方案</strong>：</p><ul><li>检查语法错误</li><li>验证头文件包含</li><li>确认配置选项</li><li>更新工具链</li></ul><h3 id="2-链接错误"><a href="#2-链接错误" class="headerlink" title="2. 链接错误"></a>2. 链接错误</h3><p><strong>问题</strong>：链接失败</p><p><strong>解决方案</strong>：</p><ul><li>检查符号定义</li><li>验证库依赖</li><li>确认链接脚本</li><li>检查内存布局</li></ul><h3 id="3-运行时错误"><a href="#3-运行时错误" class="headerlink" title="3. 运行时错误"></a>3. 运行时错误</h3><p><strong>问题</strong>：程序崩溃</p><p><strong>解决方案</strong>：</p><ul><li>使用调试器</li><li>检查栈溢出</li><li>验证指针使用</li><li>分析内存使用</li></ul><h3 id="4-性能问题"><a href="#4-性能问题" class="headerlink" title="4. 性能问题"></a>4. 性能问题</h3><p><strong>问题</strong>：性能不达标</p><p><strong>解决方案</strong>：</p><ul><li>使用性能分析工具</li><li>优化关键路径</li><li>减少资源竞争</li><li>调整线程优先级</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 应用程序开发涉及多个方面，从基本的程序结构到高级的调试技巧。通过合理组织代码、正确使用配置系统、遵循最佳实践，可以开发出高质量的嵌入式应用程序。本文档提供了详细的指导和实例，帮助开发者更好地理解和使用 Zephyr RTOS。</p>]]></content>
      
      
      <categories>
          
          <category> nodic </category>
          
          <category> zephyr </category>
          
          <category> development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
            <tag> embedded </tag>
            
            <tag> development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr 基础示例</title>
      <link href="/2023/12/21/nodic/zephyr/examples/basic/"/>
      <url>/2023/12/21/nodic/zephyr/examples/basic/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-基础示例"><a href="#Zephyr-基础示例" class="headerlink" title="Zephyr 基础示例"></a>Zephyr 基础示例</h1><p>本文档提供了 Zephyr RTOS 的基础示例代码，包括 Hello World、LED 控制、按键输入、定时器使用和多线程编程等内容。这些示例适合初学者快速上手 Zephyr 开发。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>这是最基本的 Zephyr 应用程序，展示了如何创建一个简单的 Zephyr 项目并输出 “Hello World” 消息。</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p><strong>src&#x2F;main.c</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2023 Your Name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/printk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Hello World! %s\n&quot;</span>, CONFIG_BOARD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 空配置文件，Hello World 不需要特殊配置</span><br></pre></td></tr></table></figure><h3 id="构建和运行"><a href="#构建和运行" class="headerlink" title="构建和运行"></a>构建和运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -b qemu_x86 samples/hello_world</span><br><span class="line">west run</span><br></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World! qemu_x86</span><br></pre></td></tr></table></figure><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li><code>#include &lt;zephyr/kernel.h&gt;</code> - 包含 Zephyr 内核头文件</li><li><code>#include &lt;zephyr/sys/printk.h&gt;</code> - 包含打印函数头文件</li><li><code>printk()</code> - 输出字符串到控制台</li><li><code>CONFIG_BOARD</code> - 预定义宏，表示当前的开发板名称</li></ol><h2 id="LED-控制"><a href="#LED-控制" class="headerlink" title="LED 控制"></a>LED 控制</h2><p>这个示例展示了如何控制开发板上的 LED，实现 LED 闪烁功能。</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><p><strong>src&#x2F;main.c</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2023 Your Name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LED 设备树别名 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_NODE DT_ALIAS(led0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DT_NODE_HAS_STATUS(LED0_NODE, okay)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0 DT_GPIO_CTLR(LED0_NODE, gpios)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_PIN DT_GPIO_PIN(LED0_NODE, gpios)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_FLAGS DT_GPIO_FLAGS(LED0_NODE, gpios)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">/* 如果设备树中没有定义 LED，使用默认值 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0 DT_NODELABEL(gpio0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_PIN 13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_FLAGS 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="type">bool</span> led_state = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取 GPIO 设备 */</span></span><br><span class="line">    dev = DEVICE_DT_GET(LED0);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error: %s device not ready\n&quot;</span>, dev-&gt;name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 LED 引脚为输出 */</span></span><br><span class="line">    ret = gpio_pin_configure(dev, LED0_PIN, GPIO_OUTPUT | LED0_FLAGS);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error %d: failed to configure pin %d\n&quot;</span>, ret, LED0_PIN);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;LED control example started\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 循环闪烁 LED */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 切换 LED 状态 */</span></span><br><span class="line">        led_state = !led_state;</span><br><span class="line">        gpio_pin_set(dev, LED0_PIN, led_state);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 延时 1 秒 */</span></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">        </span><br><span class="line">        printk(<span class="string">&quot;LED state: %s\n&quot;</span>, led_state ? <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_GPIO=y</span><br></pre></td></tr></table></figure><h3 id="构建和运行-1"><a href="#构建和运行-1" class="headerlink" title="构建和运行"></a>构建和运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -b &lt;board&gt; samples/basic/blinky</span><br><span class="line">west flash</span><br></pre></td></tr></table></figure><h3 id="代码说明-1"><a href="#代码说明-1" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li><code>#include &lt;zephyr/drivers/gpio.h&gt;</code> - 包含 GPIO 驱动头文件</li><li><code>DT_ALIAS(led0)</code> - 获取设备树中 LED 的别名</li><li><code>DEVICE_DT_GET()</code> - 获取设备实例</li><li><code>device_is_ready()</code> - 检查设备是否准备就绪</li><li><code>gpio_pin_configure()</code> - 配置 GPIO 引脚</li><li><code>gpio_pin_set()</code> - 设置 GPIO 引脚状态</li><li><code>k_sleep()</code> - 延时函数</li></ol><h2 id="按键输入"><a href="#按键输入" class="headerlink" title="按键输入"></a>按键输入</h2><p>这个示例展示了如何读取按键输入并响应按键事件。</p><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><p><strong>src&#x2F;main.c</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2023 Your Name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/printk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按键设备树别名 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUTTON_NODE DT_ALIAS(sw0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DT_NODE_HAS_STATUS(BUTTON_NODE, okay)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUTTON_GPIO_LABEL DT_GPIO_CTLR(BUTTON_NODE, gpios)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUTTON_PIN DT_GPIO_PIN(BUTTON_NODE, gpios)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUTTON_FLAGS DT_GPIO_FLAGS(BUTTON_NODE, gpios)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">/* 如果设备树中没有定义按键，使用默认值 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUTTON_GPIO_LABEL DT_NODELABEL(gpio0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUTTON_PIN 11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUTTON_FLAGS (GPIO_INPUT | GPIO_PULL_UP)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LED 设备树别名 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_NODE DT_ALIAS(led0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DT_NODE_HAS_STATUS(LED_NODE, okay)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_GPIO_LABEL DT_GPIO_CTLR(LED_NODE, gpios)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_PIN DT_GPIO_PIN(LED_NODE, gpios)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_FLAGS DT_GPIO_FLAGS(LED_NODE, gpios)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">/* 如果设备树中没有定义 LED，使用默认值 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_GPIO_LABEL DT_NODELABEL(gpio0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_PIN 13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED_FLAGS 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按键中断回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">button_cb_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">button_pressed</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">                    <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Button pressed at %&quot;</span> PRIu32 <span class="string">&quot;\n&quot;</span>, k_cycle_get_32());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">button_dev</span>, *<span class="title">led_dev</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取 GPIO 设备 */</span></span><br><span class="line">    button_dev = DEVICE_DT_GET(BUTTON_GPIO_LABEL);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(button_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error: button device %s is not ready\n&quot;</span>, button_dev-&gt;name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    led_dev = DEVICE_DT_GET(LED_GPIO_LABEL);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(led_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error: LED device %s is not ready\n&quot;</span>, led_dev-&gt;name);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置按键引脚 */</span></span><br><span class="line">    ret = gpio_pin_configure(button_dev, BUTTON_PIN, GPIO_INPUT | BUTTON_FLAGS);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error %d: failed to configure button pin %d\n&quot;</span>,</span><br><span class="line">               ret, BUTTON_PIN);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 LED 引脚 */</span></span><br><span class="line">    ret = gpio_pin_configure(led_dev, LED_PIN, GPIO_OUTPUT | LED_FLAGS);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error %d: failed to configure LED pin %d\n&quot;</span>,</span><br><span class="line">               ret, LED_PIN);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置按键中断 */</span></span><br><span class="line">    ret = gpio_pin_interrupt_configure(button_dev, BUTTON_PIN,</span><br><span class="line">                                      GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error %d: failed to configure button interrupt\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置中断回调 */</span></span><br><span class="line">    gpio_init_callback(&amp;button_cb_data, button_pressed, BIT(BUTTON_PIN));</span><br><span class="line">    gpio_add_callback(button_dev, &amp;button_cb_data);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Button example started\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主循环 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 读取按键状态 */</span></span><br><span class="line">        <span class="type">int</span> val = gpio_pin_get(button_dev, BUTTON_PIN);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 设置 LED 状态与按键状态相反（按下时点亮） */</span></span><br><span class="line">        gpio_pin_set(led_dev, LED_PIN, val == <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 延时 100 毫秒 */</span></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_GPIO=y</span><br></pre></td></tr></table></figure><h3 id="构建和运行-2"><a href="#构建和运行-2" class="headerlink" title="构建和运行"></a>构建和运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -b &lt;board&gt; samples/basic/button</span><br><span class="line">west flash</span><br></pre></td></tr></table></figure><h3 id="代码说明-2"><a href="#代码说明-2" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li><code>gpio_pin_interrupt_configure()</code> - 配置 GPIO 中断</li><li><code>gpio_init_callback()</code> - 初始化中断回调</li><li><code>gpio_add_callback()</code> - 添加中断回调</li><li><code>gpio_pin_get()</code> - 获取 GPIO 引脚状态</li><li><code>k_cycle_get_32()</code> - 获取系统时钟周期计数</li></ol><h2 id="定时器使用"><a href="#定时器使用" class="headerlink" title="定时器使用"></a>定时器使用</h2><p>这个示例展示了如何使用 Zephyr 的定时器功能。</p><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><p><strong>src&#x2F;main.c</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2023 Your Name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/printk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_handler</span><span class="params">(<span class="keyword">struct</span> k_timer *timer)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Timer expired at %d ms\n&quot;</span>, k_uptime_get_32());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定时器停止回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_stop_handler</span><span class="params">(<span class="keyword">struct</span> k_timer *timer)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Timer stopped\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义定时器 */</span></span><br><span class="line">K_TIMER_DEFINE(my_timer, timer_handler, timer_stop_handler);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Timer example started\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动定时器：2秒后到期，之后每1秒触发一次 */</span></span><br><span class="line">    k_timer_start(&amp;my_timer, K_SECONDS(<span class="number">2</span>), K_SECONDS(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待 5 秒 */</span></span><br><span class="line">    k_sleep(K_SECONDS(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取剩余时间 */</span></span><br><span class="line">    <span class="type">int32_t</span> remaining = k_timer_remaining_get(&amp;my_timer);</span><br><span class="line">    printk(<span class="string">&quot;Remaining time: %d ms\n&quot;</span>, remaining);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取定时器状态 */</span></span><br><span class="line">    <span class="type">uint32_t</span> status = k_timer_status_get(&amp;my_timer);</span><br><span class="line">    printk(<span class="string">&quot;Timer expired %u times\n&quot;</span>, status);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待 2 秒 */</span></span><br><span class="line">    k_sleep(K_SECONDS(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 停止定时器 */</span></span><br><span class="line">    k_timer_stop(&amp;my_timer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用单次定时器 */</span></span><br><span class="line">    printk(<span class="string">&quot;Starting one-shot timer\n&quot;</span>);</span><br><span class="line">    k_timer_start(&amp;my_timer, K_SECONDS(<span class="number">1</span>), K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待定时器到期 */</span></span><br><span class="line">    k_timer_status_sync(&amp;my_timer);</span><br><span class="line">    printk(<span class="string">&quot;One-shot timer expired\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Timer example completed\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 不需要特殊配置</span><br></pre></td></tr></table></figure><h3 id="构建和运行-3"><a href="#构建和运行-3" class="headerlink" title="构建和运行"></a>构建和运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -b &lt;board&gt; samples/basic/timer</span><br><span class="line">west flash</span><br></pre></td></tr></table></figure><h3 id="代码说明-3"><a href="#代码说明-3" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li><code>K_TIMER_DEFINE()</code> - 定义定时器</li><li><code>k_timer_start()</code> - 启动定时器</li><li><code>k_timer_remaining_get()</code> - 获取剩余时间</li><li><code>k_timer_status_get()</code> - 获取定时器状态</li><li><code>k_timer_stop()</code> - 停止定时器</li><li><code>k_timer_status_sync()</code> - 同步等待定时器到期</li><li><code>k_uptime_get_32()</code> - 获取系统启动后的毫秒数</li></ol><h2 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h2><p>这个示例展示了如何在 Zephyr 中创建和使用多个线程。</p><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><p><strong>src&#x2F;main.c</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2023 Your Name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/printk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程栈大小 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程优先级 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_A_PRIORITY 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_B_PRIORITY 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程栈和数据 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(thread_a_stack, STACK_SIZE);</span><br><span class="line">K_THREAD_STACK_DEFINE(thread_b_stack, STACK_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread_a_data</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread_b_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义信号量用于同步 */</span></span><br><span class="line">K_SEM_DEFINE(sem_a, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">K_SEM_DEFINE(sem_b, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程 A 入口函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_a_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 等待信号量 */</span></span><br><span class="line">        k_sem_take(&amp;sem_a, K_FOREVER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 执行任务 */</span></span><br><span class="line">        printk(<span class="string">&quot;Thread A running, count: %d\n&quot;</span>, count++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 延时 1 秒 */</span></span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 释放线程 B 的信号量 */</span></span><br><span class="line">        k_sem_give(&amp;sem_b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程 B 入口函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_b_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 等待信号量 */</span></span><br><span class="line">        k_sem_take(&amp;sem_b, K_FOREVER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 执行任务 */</span></span><br><span class="line">        printk(<span class="string">&quot;Thread B running, count: %d\n&quot;</span>, count++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 延时 1 秒 */</span></span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 释放线程 A 的信号量 */</span></span><br><span class="line">        k_sem_give(&amp;sem_a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Multi-threading example started\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建线程 A */</span></span><br><span class="line">    k_thread_create(&amp;thread_a_data, thread_a_stack,</span><br><span class="line">                    K_THREAD_STACK_SIZEOF(thread_a_stack),</span><br><span class="line">                    thread_a_entry, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    THREAD_A_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建线程 B */</span></span><br><span class="line">    k_thread_create(&amp;thread_b_data, thread_b_stack,</span><br><span class="line">                    K_THREAD_STACK_SIZEOF(thread_b_stack),</span><br><span class="line">                    thread_b_entry, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                    THREAD_B_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置线程名称（如果启用） */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_THREAD_NAME</span></span><br><span class="line">    k_thread_name_set(&amp;thread_a_data, <span class="string">&quot;thread_a&quot;</span>);</span><br><span class="line">    k_thread_name_set(&amp;thread_b_data, <span class="string">&quot;thread_b&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动线程 A */</span></span><br><span class="line">    k_sem_give(&amp;sem_a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主线程工作 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Main thread running\n&quot;</span>);</span><br><span class="line">        k_sleep(K_SECONDS(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>prj.conf</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_THREAD_NAME=y</span><br></pre></td></tr></table></figure><h3 id="构建和运行-4"><a href="#构建和运行-4" class="headerlink" title="构建和运行"></a>构建和运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -b &lt;board&gt; samples/basic/threads</span><br><span class="line">west flash</span><br></pre></td></tr></table></figure><h3 id="代码说明-4"><a href="#代码说明-4" class="headerlink" title="代码说明"></a>代码说明</h3><ol><li><code>K_THREAD_STACK_DEFINE()</code> - 定义线程栈</li><li><code>K_SEM_DEFINE()</code> - 定义信号量</li><li><code>k_thread_create()</code> - 创建线程</li><li><code>k_thread_name_set()</code> - 设置线程名称</li><li><code>k_sem_take()</code> - 获取信号量</li><li><code>k_sem_give()</code> - 释放信号量</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些基础示例展示了 Zephyr RTOS 的核心功能，包括基本输出、GPIO 控制、中断处理、定时器使用和多线程编程。通过学习和实践这些示例，您可以快速掌握 Zephyr 开发的基础知识，为更复杂的应用开发打下基础。</p><p>每个示例都可以独立构建和运行，并且可以根据需要进行修改和扩展。建议初学者按照顺序学习这些示例，从简单到复杂，逐步掌握 Zephyr RTOS 的各项功能。</p>]]></content>
      
      
      <categories>
          
          <category> nodic </category>
          
          <category> zephyr </category>
          
          <category> examples </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
            <tag> embedded </tag>
            
            <tag> examples </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zephyr RTOS 快速入门指南</title>
      <link href="/2023/12/21/nodic/zephyr/quick_start/README/"/>
      <url>/2023/12/21/nodic/zephyr/quick_start/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Zephyr-RTOS-快速入门"><a href="#Zephyr-RTOS-快速入门" class="headerlink" title="Zephyr RTOS 快速入门"></a>Zephyr RTOS 快速入门</h1><p>本章节将帮助您快速上手 Zephyr RTOS 开发。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p>Zephyr 开发环境支持以下操作系统：</p><ul><li>Windows 10 或更新版本（推荐使用 WSL2）</li><li>macOS 10.15 或更新版本</li><li>Ubuntu 18.04 或更新版本</li><li>其他 Linux 发行版</li></ul><h3 id="安装工具链"><a href="#安装工具链" class="headerlink" title="安装工具链"></a>安装工具链</h3><ol><li><p>安装依赖工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt install --no-install-recommends git cmake ninja-build gperf</span><br><span class="line"><span class="built_in">sudo</span> apt install ccache dfu-util device-tree-compiler wget</span><br><span class="line"><span class="built_in">sudo</span> apt install python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file</span><br><span class="line"><span class="built_in">sudo</span> apt install make gcc gcc-multilib g++-multilib libsdl2-dev</span><br></pre></td></tr></table></figure></li><li><p>安装 West 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user -U west</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=~/.local/bin:&quot;$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>获取 Zephyr 源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">west init ~/zephyrproject</span><br><span class="line"><span class="built_in">cd</span> ~/zephyrproject</span><br><span class="line">west update</span><br></pre></td></tr></table></figure></li><li><p>安装 Python 依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user -r ~/zephyrproject/zephyr/scripts/requirements.txt</span><br></pre></td></tr></table></figure></li></ol><h3 id="SDK-安装"><a href="#SDK-安装" class="headerlink" title="SDK 安装"></a>SDK 安装</h3><ol><li><p>下载 Zephyr SDK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装 SDK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">tar xvf zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> zephyr-sdk-0.16.1</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure></li></ol><h2 id="Hello-World-示例"><a href="#Hello-World-示例" class="headerlink" title="Hello World 示例"></a>Hello World 示例</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ol><li><p>创建应用目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/zephyrproject/zephyr</span><br><span class="line">west build -b qemu_x86 samples/hello_world</span><br></pre></td></tr></table></figure></li><li><p>构建并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">west build -t run</span><br><span class="line"><span class="comment"># 或使用 QEMU 直接运行</span></span><br><span class="line">west run</span><br></pre></td></tr></table></figure></li></ol><h3 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h3><p>Hello World 示例的源码位于 <code>samples/hello_world/src/main.c</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Hello World! %s\n&quot;</span>, CONFIG_BOARD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个简单的示例展示了：</p><ul><li>基本的应用程序结构</li><li>内核头文件的使用</li><li>打印输出的方法</li><li>配置宏的使用</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>Zephyr 项目典型结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">├── CMakeLists.txt          # 构建系统配置</span><br><span class="line">├── prj.conf               # 项目配置文件</span><br><span class="line">└── src/</span><br><span class="line">    └── main.c            # 应用程序源码</span><br></pre></td></tr></table></figure><h3 id="重要工具"><a href="#重要工具" class="headerlink" title="重要工具"></a>重要工具</h3><ol><li><p>West 命令行工具</p><ul><li>项目管理</li><li>构建系统</li><li>调试工具</li><li>固件更新</li></ul></li><li><p>CMake 构建系统</p><ul><li>跨平台构建</li><li>依赖管理</li><li>配置系统</li></ul></li><li><p>Kconfig 配置系统</p><ul><li>内核配置</li><li>驱动配置</li><li>应用配置</li></ul></li></ol><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><ol><li><p>创建应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">west init -m https://github.com/zephyrproject-rtos/zephyr --mr v2.9.1 zephyrproject</span><br><span class="line"><span class="built_in">cd</span> zephyrproject</span><br><span class="line">west update</span><br></pre></td></tr></table></figure></li><li><p>配置项目</p><ul><li>修改 prj.conf 添加需要的功能</li><li>配置目标板卡</li><li>设置应用程序选项</li></ul></li><li><p>构建运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -b 目标板卡 应用目录</span><br><span class="line">west flash</span><br></pre></td></tr></table></figure></li><li><p>调试开发</p><ul><li>使用 west debug 启动调试</li><li>查看系统日志</li><li>使用 SEGGER SystemView 分析</li></ul></li></ol><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>完成快速入门后，建议：</p><ol><li>尝试更多<a href="../examples">示例代码</a></li><li>学习<a href="../architecture">系统架构</a></li><li>了解<a href="../core">核心模块</a>使用</li><li>参考<a href="../development">开发指南</a>开始实际项目</li></ol>]]></content>
      
      
      <categories>
          
          <category> nodic </category>
          
          <category> zephyr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zephyr </tag>
            
            <tag> RTOS </tag>
            
            <tag> embedded </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
