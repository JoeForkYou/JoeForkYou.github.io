<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoeNero的博客</title>
  
  
  <link href="https://joeforkyou.github.io/atom.xml" rel="self"/>
  
  <link href="https://joeforkyou.github.io/"/>
  <updated>2025-03-21T13:20:53.494Z</updated>
  <id>https://joeforkyou.github.io/</id>
  
  <author>
    <name>JoeNero</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>drivers</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/drivers/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/drivers/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-驱动系统"><a href="#Zephyr-驱动系统" class="headerlink" title="Zephyr 驱动系统"></a>Zephyr 驱动系统</h1><p>Zephyr RTOS 提供了丰富的驱动系统，用于支持各种硬件外设。本文档将详细介绍 Zephyr 驱动系统的使用方法和常见外设驱动。</p><h2 id="驱动框架"><a href="#驱动框架" class="headerlink" title="驱动框架"></a>驱动框架</h2><h3 id="设备模型"><a href="#设备模型" class="headerlink" title="设备模型"></a>设备模型</h3><p>Zephyr 的设备模型基于以下概念：</p><ol><li><strong>设备对象</strong>：表示一个硬件设备</li><li><strong>驱动 API</strong>：定义设备操作接口</li><li><strong>设备树</strong>：描述硬件配置</li></ol><h3 id="获取设备实例"><a href="#获取设备实例" class="headerlink" title="获取设备实例"></a>获取设备实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过设备树标签获取设备</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(uart0));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查设备是否就绪</span></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设备初始化"><a href="#设备初始化" class="headerlink" title="设备初始化"></a>设备初始化</h3><p>设备初始化过程：</p><ol><li>系统启动时，按照初始化级别顺序初始化设备</li><li>每个设备的初始化函数被调用</li><li>设备初始化完成后标记为就绪</li></ol><p>初始化级别：</p><ul><li><code>PRE_KERNEL_1</code>：基础硬件初始化</li><li><code>PRE_KERNEL_2</code>：设备和驱动初始化</li><li><code>POST_KERNEL</code>：需要内核服务的设备</li><li><code>APPLICATION</code>：应用级设备</li></ul><h2 id="常用外设驱动"><a href="#常用外设驱动" class="headerlink" title="常用外设驱动"></a>常用外设驱动</h2><h3 id="GPIO-驱动"><a href="#GPIO-驱动" class="headerlink" title="GPIO 驱动"></a>GPIO 驱动</h3><ol><li><strong>配置 GPIO</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 GPIO 设备</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">gpio</span> =</span> DEVICE_DT_GET(DT_NODELABEL(gpio0));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 GPIO 引脚</span></span><br><span class="line">gpio_pin_configure(gpio, PIN, GPIO_OUTPUT_ACTIVE);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>控制 GPIO</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置引脚电平</span></span><br><span class="line">gpio_pin_set(gpio, PIN, <span class="number">1</span>);  <span class="comment">// 高电平</span></span><br><span class="line">gpio_pin_set(gpio, PIN, <span class="number">0</span>);  <span class="comment">// 低电平</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取引脚电平</span></span><br><span class="line"><span class="type">int</span> val = gpio_pin_get(gpio, PIN);</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>GPIO 中断</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中断回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">gpio_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">                  <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理中断</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置中断</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">gpio_cb</span>;</span></span><br><span class="line">gpio_init_callback(&amp;gpio_cb, gpio_callback, BIT(PIN));</span><br><span class="line">gpio_add_callback(gpio, &amp;gpio_cb);</span><br><span class="line">gpio_pin_interrupt_configure(gpio, PIN, GPIO_INT_EDGE_RISING);</span><br></pre></td></tr></table></figure><h3 id="UART-驱动"><a href="#UART-驱动" class="headerlink" title="UART 驱动"></a>UART 驱动</h3><ol><li><strong>配置 UART</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">uart</span> =</span> DEVICE_DT_GET(DT_NODELABEL(uart0));</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>发送数据</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送单个字节</span></span><br><span class="line">uart_poll_out(uart, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据块</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *data = <span class="string">&quot;Hello, Zephyr!&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(data); i++) &#123;</span><br><span class="line">    uart_poll_out(uart, data[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>接收数据</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收单个字节</span></span><br><span class="line"><span class="type">uint8_t</span> c;</span><br><span class="line"><span class="type">int</span> ret = uart_poll_in(uart, &amp;c);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理接收到的字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>异步 UART</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">uart_cb</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="keyword">struct</span> uart_event *evt, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (evt-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> UART_RX_RDY:</span><br><span class="line">        <span class="comment">// 处理接收到的数据</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> UART_TX_DONE:</span><br><span class="line">        <span class="comment">// 发送完成</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 其他事件处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置异步 UART</span></span><br><span class="line">uart_callback_set(uart, uart_cb, <span class="literal">NULL</span>);</span><br><span class="line">uart_rx_enable(uart, rx_buf, <span class="keyword">sizeof</span>(rx_buf), <span class="number">100</span>);</span><br><span class="line">uart_tx(uart, tx_buf, len, SYS_FOREVER_MS);</span><br></pre></td></tr></table></figure><h3 id="SPI-驱动"><a href="#SPI-驱动" class="headerlink" title="SPI 驱动"></a>SPI 驱动</h3><ol><li><strong>配置 SPI</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">spi</span> =</span> DEVICE_DT_GET(DT_NODELABEL(spi0));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">spi_cfg</span> =</span> &#123;</span><br><span class="line">    .frequency = <span class="number">1000000</span>,</span><br><span class="line">    .operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(<span class="number">8</span>) | SPI_TRANSFER_MSB,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>SPI 传输</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line"><span class="type">uint8_t</span> tx_buffer[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line"><span class="type">uint8_t</span> rx_buffer[<span class="keyword">sizeof</span>(tx_buffer)];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">tx_buf</span> =</span> &#123;</span><br><span class="line">    .buf = tx_buffer,</span><br><span class="line">    .len = <span class="keyword">sizeof</span>(tx_buffer)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">rx_buf</span> =</span> &#123;</span><br><span class="line">    .buf = rx_buffer,</span><br><span class="line">    .len = <span class="keyword">sizeof</span>(rx_buffer)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">tx</span> =</span> &#123;</span><br><span class="line">    .buffers = &amp;tx_buf,</span><br><span class="line">    .count = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">rx</span> =</span> &#123;</span><br><span class="line">    .buffers = &amp;rx_buf,</span><br><span class="line">    .count = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行传输</span></span><br><span class="line"><span class="type">int</span> ret = spi_transceive(spi, &amp;spi_cfg, &amp;tx, &amp;rx);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 传输成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I2C-驱动"><a href="#I2C-驱动" class="headerlink" title="I2C 驱动"></a>I2C 驱动</h3><ol><li><strong>配置 I2C</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2c</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2c0));</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>I2C 读写</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写数据</span></span><br><span class="line"><span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>&#125;;</span><br><span class="line"><span class="type">int</span> ret = i2c_write(i2c, data, <span class="keyword">sizeof</span>(data), SLAVE_ADDR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读数据</span></span><br><span class="line"><span class="type">uint8_t</span> buffer[<span class="number">2</span>];</span><br><span class="line">ret = i2c_read(i2c, buffer, <span class="keyword">sizeof</span>(buffer), SLAVE_ADDR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写后读</span></span><br><span class="line"><span class="type">uint8_t</span> reg = <span class="number">0x00</span>;</span><br><span class="line">ret = i2c_write_read(i2c, SLAVE_ADDR, &amp;reg, <span class="number">1</span>, buffer, <span class="keyword">sizeof</span>(buffer));</span><br></pre></td></tr></table></figure><h2 id="传感器子系统"><a href="#传感器子系统" class="headerlink" title="传感器子系统"></a>传感器子系统</h2><h3 id="传感器-API"><a href="#传感器-API" class="headerlink" title="传感器 API"></a>传感器 API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">sensor</span> =</span> DEVICE_DT_GET(DT_NODELABEL(temp_sensor));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取传感器数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">temp</span>;</span></span><br><span class="line">sensor_sample_fetch(sensor);</span><br><span class="line">sensor_channel_get(sensor, SENSOR_CHAN_AMBIENT_TEMP, &amp;temp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为浮点数</span></span><br><span class="line"><span class="type">double</span> temperature = sensor_value_to_double(&amp;temp);</span><br></pre></td></tr></table></figure><h3 id="常见传感器类型"><a href="#常见传感器类型" class="headerlink" title="常见传感器类型"></a>常见传感器类型</h3><ol><li><p><strong>温度传感器</strong></p><ul><li>环境温度 (<code>SENSOR_CHAN_AMBIENT_TEMP</code>)</li><li>对象温度 (<code>SENSOR_CHAN_OBJ_TEMP</code>)</li></ul></li><li><p><strong>加速度传感器</strong></p><ul><li>X 轴加速度 (<code>SENSOR_CHAN_ACCEL_X</code>)</li><li>Y 轴加速度 (<code>SENSOR_CHAN_ACCEL_Y</code>)</li><li>Z 轴加速度 (<code>SENSOR_CHAN_ACCEL_Z</code>)</li><li>XYZ 轴加速度 (<code>SENSOR_CHAN_ACCEL_XYZ</code>)</li></ul></li><li><p><strong>陀螺仪</strong></p><ul><li>X 轴角速度 (<code>SENSOR_CHAN_GYRO_X</code>)</li><li>Y 轴角速度 (<code>SENSOR_CHAN_GYRO_Y</code>)</li><li>Z 轴角速度 (<code>SENSOR_CHAN_GYRO_Z</code>)</li><li>XYZ 轴角速度 (<code>SENSOR_CHAN_GYRO_XYZ</code>)</li></ul></li><li><p><strong>其他传感器</strong></p><ul><li>气压传感器 (<code>SENSOR_CHAN_PRESS</code>)</li><li>湿度传感器 (<code>SENSOR_CHAN_HUMIDITY</code>)</li><li>光线传感器 (<code>SENSOR_CHAN_LIGHT</code>)</li></ul></li></ol><h3 id="传感器触发"><a href="#传感器触发" class="headerlink" title="传感器触发"></a>传感器触发</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发回调函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">sensor_trigger_handler</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                  <span class="type">const</span> <span class="keyword">struct</span> sensor_trigger *trigger)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 处理传感器触发事件</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">data</span>;</span></span><br><span class="line">    sensor_sample_fetch(dev);</span><br><span class="line">    sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &amp;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置触发</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sensor_trigger</span> <span class="title">trigger</span> =</span> &#123;</span><br><span class="line">    .type = SENSOR_TRIG_THRESHOLD,</span><br><span class="line">    .chan = SENSOR_CHAN_AMBIENT_TEMP,</span><br><span class="line">&#125;;</span><br><span class="line">sensor_trigger_set(sensor, &amp;trigger, sensor_trigger_handler);</span><br></pre></td></tr></table></figure><h2 id="存储驱动"><a href="#存储驱动" class="headerlink" title="存储驱动"></a>存储驱动</h2><h3 id="Flash-存储"><a href="#Flash-存储" class="headerlink" title="Flash 存储"></a>Flash 存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/flash.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">flash_dev</span> =</span> DEVICE_DT_GET(DT_CHOSEN(zephyr_flash_controller));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 Flash</span></span><br><span class="line"><span class="type">uint8_t</span> buffer[<span class="number">256</span>];</span><br><span class="line">flash_read(flash_dev, offset, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 擦除 Flash</span></span><br><span class="line">flash_erase(flash_dev, offset, FLASH_SECTOR_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入 Flash</span></span><br><span class="line"><span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line">flash_write(flash_dev, offset, data, <span class="keyword">sizeof</span>(data));</span><br></pre></td></tr></table></figure><h3 id="EEPROM"><a href="#EEPROM" class="headerlink" title="EEPROM"></a>EEPROM</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/eeprom.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">eeprom</span> =</span> DEVICE_DT_GET(DT_NODELABEL(eeprom0));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 EEPROM</span></span><br><span class="line"><span class="type">uint8_t</span> buffer[<span class="number">16</span>];</span><br><span class="line">eeprom_read(eeprom, offset, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入 EEPROM</span></span><br><span class="line"><span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line">eeprom_write(eeprom, offset, data, <span class="keyword">sizeof</span>(data));</span><br></pre></td></tr></table></figure><h2 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h2><h3 id="设备电源管理"><a href="#设备电源管理" class="headerlink" title="设备电源管理"></a>设备电源管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置设备电源状态</span></span><br><span class="line">pm_device_state_set(dev, PM_DEVICE_STATE_LOW_POWER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取设备电源状态</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">pm_device_state</span> <span class="title">state</span>;</span></span><br><span class="line">pm_device_state_get(dev, &amp;state);</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>设备树配置</strong></p><ul><li>使用设备树配置硬件</li><li>避免硬编码硬件参数</li><li>利用设备树覆盖文件定制配置</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>检查设备是否就绪</li><li>处理所有驱动 API 返回的错误码</li><li>实现适当的错误恢复机制</li></ul></li><li><p><strong>资源管理</strong></p><ul><li>合理使用中断和 DMA</li><li>避免长时间阻塞</li><li>使用异步 API 提高效率</li></ul></li><li><p><strong>电源优化</strong></p><ul><li>不使用时禁用外设</li><li>使用低功耗模式</li><li>优化数据传输批量处理</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>设备未就绪</strong></p><ul><li>检查设备树配置</li><li>确认驱动已启用</li><li>验证硬件连接</li></ul></li><li><p><strong>通信错误</strong></p><ul><li>检查通信参数（波特率、极性等）</li><li>验证设备地址</li><li>检查时序要求</li></ul></li><li><p><strong>中断问题</strong></p><ul><li>确认中断配置正确</li><li>检查中断优先级</li><li>避免中断处理函数中的长时间操作</li></ul></li><li><p><strong>DMA 传输失败</strong></p><ul><li>检查内存对齐</li><li>验证 DMA 通道配置</li><li>确保缓冲区在传输期间有效</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 驱动系统提供了丰富的硬件抽象层，简化了与外设的交互。通过使用标准化的驱动 API，可以开发出可移植、可维护的嵌入式应用。深入理解这些驱动接口对于开发高质量的 Zephyr 应用至关重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-驱动系统&quot;&gt;&lt;a href=&quot;#Zephyr-驱动系统&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 驱动系统&quot;&gt;&lt;/a&gt;Zephyr 驱动系统&lt;/h1&gt;&lt;p&gt;Zephyr RTOS 提供了丰富的驱动系统，用于支持各种硬件外设。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>filesystem</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/filesystem/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/filesystem/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-文件系统"><a href="#Zephyr-文件系统" class="headerlink" title="Zephyr 文件系统"></a>Zephyr 文件系统</h1><p>Zephyr RTOS 提供了多种文件系统支持，可以用于数据存储和管理。本文档将详细介绍 Zephyr 文件系统的架构和使用方法。</p><h2 id="文件系统概述"><a href="#文件系统概述" class="headerlink" title="文件系统概述"></a>文件系统概述</h2><h3 id="支持的文件系统"><a href="#支持的文件系统" class="headerlink" title="支持的文件系统"></a>支持的文件系统</h3><p>Zephyr 支持多种文件系统：</p><ol><li><p><strong>FAT 文件系统</strong></p><ul><li>FAT12&#x2F;16&#x2F;32</li><li>基于 FatFs 库实现</li><li>适用于 SD 卡、USB 存储等</li></ul></li><li><p><strong>LittleFS</strong></p><ul><li>为闪存设计的轻量级文件系统</li><li>支持掉电保护</li><li>磨损均衡</li></ul></li><li><p><strong>NFFS (Newtron Flash File System)</strong></p><ul><li>为闪存设计的文件系统</li><li>支持磨损均衡</li></ul></li><li><p><strong>NVS (Non-Volatile Storage)</strong></p><ul><li>简单的键值存储</li><li>支持掉电保护</li><li>适用于配置数据</li></ul></li></ol><h3 id="文件系统架构"><a href="#文件系统架构" class="headerlink" title="文件系统架构"></a>文件系统架构</h3><p>Zephyr 文件系统架构包括：</p><ol><li><strong>VFS 层</strong>：提供统一的文件系统 API</li><li><strong>文件系统实现</strong>：特定文件系统的实现</li><li><strong>存储层</strong>：与底层存储设备交互</li></ol><h2 id="文件系统配置"><a href="#文件系统配置" class="headerlink" title="文件系统配置"></a>文件系统配置</h2><h3 id="启用文件系统"><a href="#启用文件系统" class="headerlink" title="启用文件系统"></a>启用文件系统</h3><p>在 <code>prj.conf</code> 中启用文件系统功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 启用文件系统</span><br><span class="line">CONFIG_FILE_SYSTEM=y</span><br><span class="line"></span><br><span class="line"># 启用特定文件系统</span><br><span class="line">CONFIG_FAT_FILESYSTEM_ELM=y  # FAT 文件系统</span><br><span class="line">CONFIG_FILE_SYSTEM_LITTLEFS=y  # LittleFS</span><br><span class="line">CONFIG_FILE_SYSTEM_NFFS=y  # NFFS</span><br><span class="line">CONFIG_NVS=y  # NVS</span><br><span class="line"></span><br><span class="line"># 文件系统缓冲区配置</span><br><span class="line">CONFIG_FS_BUFFER_SIZE=64</span><br></pre></td></tr></table></figure><h3 id="挂载文件系统"><a href="#挂载文件系统" class="headerlink" title="挂载文件系统"></a>挂载文件系统</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/littlefs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LittleFS 配置</span></span><br><span class="line">FS_LITTLEFS_DECLARE_DEFAULT_CONFIG(lfs_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件系统挂载点</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_mount_t</span> <span class="title">lfs_mount</span> =</span> &#123;</span><br><span class="line">    .type = FS_LITTLEFS,</span><br><span class="line">    .fs_data = &amp;lfs_data,</span><br><span class="line">    .storage_dev = (<span class="type">void</span> *)FLASH_AREA_ID(storage),</span><br><span class="line">    .mnt_point = <span class="string">&quot;/lfs&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载文件系统</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mount_filesystem</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_mount(&amp;lfs_mount);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error mounting LittleFS [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;LittleFS mounted at %s\n&quot;</span>, lfs_mount.mnt_point);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs/data.txt&quot;</span>, FS_O_CREATE | FS_O_WRITE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error opening file [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *data = <span class="string">&quot;Hello, Zephyr File System!&quot;</span>;</span><br><span class="line">    ret = fs_write(&amp;file, data, <span class="built_in">strlen</span>(data));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error writing file [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Wrote %d bytes to file\n&quot;</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">read_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    ret = fs_open(&amp;file, <span class="string">&quot;/lfs/data.txt&quot;</span>, FS_O_READ);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error opening file [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">64</span>];</span><br><span class="line">    ret = fs_read(&amp;file, buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error reading file [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buffer[ret] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Read %d bytes: %s\n&quot;</span>, ret, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">create_directory</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_mkdir(<span class="string">&quot;/lfs/mydir&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error creating directory [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Directory created\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出目录内容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_directory</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_dir_t</span> <span class="title">dir</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开目录</span></span><br><span class="line">    ret = fs_opendir(&amp;dir, <span class="string">&quot;/lfs&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error opening directory [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取目录项</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">fs_dirent</span> <span class="title">entry</span>;</span></span><br><span class="line">        </span><br><span class="line">        ret = fs_readdir(&amp;dir, &amp;entry);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Error reading directory [%d]\n&quot;</span>, ret);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 到达目录末尾</span></span><br><span class="line">        <span class="keyword">if</span> (entry.name[<span class="number">0</span>] == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 打印文件信息</span></span><br><span class="line">        printk(<span class="string">&quot;  %s [%s] %zu bytes\n&quot;</span>, entry.name,</span><br><span class="line">               (entry.type == FS_DIR_ENTRY_FILE) ? <span class="string">&quot;FILE&quot;</span> : <span class="string">&quot;DIR&quot;</span>,</span><br><span class="line">               entry.size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭目录</span></span><br><span class="line">    fs_closedir(&amp;dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查文件是否存在</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_dirent</span> <span class="title">entry</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_stat(<span class="string">&quot;/lfs/data.txt&quot;</span>, &amp;entry);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;File exists, size: %zu bytes\n&quot;</span>, entry.size);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;File does not exist [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rename_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_rename(<span class="string">&quot;/lfs/data.txt&quot;</span>, <span class="string">&quot;/lfs/newdata.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error renaming file [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;File renamed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete_file</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = fs_unlink(<span class="string">&quot;/lfs/newdata.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error deleting file [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;File deleted\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特定文件系统"><a href="#特定文件系统" class="headerlink" title="特定文件系统"></a>特定文件系统</h2><h3 id="FAT-文件系统"><a href="#FAT-文件系统" class="headerlink" title="FAT 文件系统"></a>FAT 文件系统</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/disk_access.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// FAT 文件系统挂载</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mount_fat</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *disk_mount_pt = <span class="string">&quot;/SD:&quot;</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *disk_pdrv = <span class="string">&quot;SD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载配置</span></span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_mount_t</span> <span class="title">mp</span> =</span> &#123;</span><br><span class="line">        .type = FS_FATFS,</span><br><span class="line">        .mnt_point = disk_mount_pt,</span><br><span class="line">        .fs_data = <span class="literal">NULL</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查磁盘是否就绪</span></span><br><span class="line">    <span class="keyword">if</span> (disk_access_init(disk_pdrv) != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Disk access initialization failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载文件系统</span></span><br><span class="line">    mp.storage_dev = (<span class="type">void</span> *)disk_pdrv;</span><br><span class="line">    <span class="type">int</span> ret = fs_mount(&amp;mp);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error mounting FAT [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;FAT file system mounted\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LittleFS"><a href="#LittleFS" class="headerlink" title="LittleFS"></a>LittleFS</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/littlefs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/flash_map.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LittleFS 配置</span></span><br><span class="line">FS_LITTLEFS_DECLARE_DEFAULT_CONFIG(lfs_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载 LittleFS</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mount_littlefs</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 挂载配置</span></span><br><span class="line">    <span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_mount_t</span> <span class="title">mp</span> =</span> &#123;</span><br><span class="line">        .type = FS_LITTLEFS,</span><br><span class="line">        .fs_data = &amp;lfs_data,</span><br><span class="line">        .storage_dev = (<span class="type">void</span> *)FLASH_AREA_ID(lfs_storage),</span><br><span class="line">        .mnt_point = <span class="string">&quot;/lfs&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载文件系统</span></span><br><span class="line">    <span class="type">int</span> ret = fs_mount(&amp;mp);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error mounting LittleFS [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;LittleFS mounted\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NVS-Non-Volatile-Storage"><a href="#NVS-Non-Volatile-Storage" class="headerlink" title="NVS (Non-Volatile Storage)"></a>NVS (Non-Volatile Storage)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/fs/nvs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/flash_map.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NVS 实例</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">nvs_fs</span> <span class="title">fs</span> =</span> &#123;</span><br><span class="line">    .sector_size = <span class="number">4096</span>,  <span class="comment">// 扇区大小</span></span><br><span class="line">    .sector_count = <span class="number">4</span>,    <span class="comment">// 扇区数量</span></span><br><span class="line">    .offset = FLASH_AREA_OFFSET(nvs_storage),  <span class="comment">// 闪存区域偏移</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 NVS</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_nvs</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 NVS</span></span><br><span class="line">    ret = nvs_init(&amp;fs, DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error initializing NVS [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;NVS initialized\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 NVS</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">use_nvs</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="type">uint32_t</span> value = <span class="number">12345</span>;</span><br><span class="line">    ret = nvs_write(&amp;fs, <span class="number">1</span>, &amp;value, <span class="keyword">sizeof</span>(value));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error writing to NVS [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Data written to NVS\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="type">uint32_t</span> read_value;</span><br><span class="line">    ret = nvs_read(&amp;fs, <span class="number">1</span>, &amp;read_value, <span class="keyword">sizeof</span>(read_value));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error reading from NVS [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Read value: %u\n&quot;</span>, read_value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除数据</span></span><br><span class="line">    ret = nvs_delete(&amp;fs, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error deleting from NVS [%d]\n&quot;</span>, ret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Data deleted from NVS\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="存储分区"><a href="#存储分区" class="headerlink" title="存储分区"></a>存储分区</h2><h3 id="分区配置"><a href="#分区配置" class="headerlink" title="分区配置"></a>分区配置</h3><p>在设备树中配置存储分区：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,code-partition</span> <span class="operator">=</span> <span class="variable">&amp;slot0_partition</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">flash_partitions</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;fixed-partitions&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">        <span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">        boot_partition:</span> <span class="title class_">partition@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;mcuboot&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x00000000</span> <span class="number">0x10000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">        slot0_partition:</span> <span class="title class_">partition@10000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;image-0&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x00010000</span> <span class="number">0x40000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">        slot1_partition:</span> <span class="title class_">partition@50000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;image-1&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x00050000</span> <span class="number">0x40000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">        storage_partition:</span> <span class="title class_">partition@90000</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;storage&quot;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x00090000</span> <span class="number">0x10000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="访问分区"><a href="#访问分区" class="headerlink" title="访问分区"></a>访问分区</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/storage/flash_map.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取分区信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">access_partition</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">flash_area</span> *<span class="title">fa</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开分区</span></span><br><span class="line">    ret = flash_area_open(FLASH_AREA_ID(storage), &amp;fa);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error opening flash area [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 擦除分区</span></span><br><span class="line">    ret = flash_area_erase(fa, <span class="number">0</span>, fa-&gt;fa_size);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error erasing flash area [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line">    ret = flash_area_write(fa, <span class="number">0</span>, data, <span class="keyword">sizeof</span>(data));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error writing to flash area [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="type">uint8_t</span> read_data[<span class="number">4</span>];</span><br><span class="line">    ret = flash_area_read(fa, <span class="number">0</span>, read_data, <span class="keyword">sizeof</span>(read_data));</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Error reading from flash area [%d]\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Read data: %02x %02x %02x %02x\n&quot;</span>,</span><br><span class="line">           read_data[<span class="number">0</span>], read_data[<span class="number">1</span>], read_data[<span class="number">2</span>], read_data[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    <span class="comment">// 关闭分区</span></span><br><span class="line">    flash_area_close(fa);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件系统-Shell-命令"><a href="#文件系统-Shell-命令" class="headerlink" title="文件系统 Shell 命令"></a>文件系统 Shell 命令</h2><p>Zephyr 提供了文件系统 Shell 命令，可以用于交互式文件操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用文件系统 Shell</span><br><span class="line">CONFIG_FILE_SYSTEM_SHELL=y</span><br></pre></td></tr></table></figure><p>可用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs cd &lt;path&gt;                  # 更改当前目录</span><br><span class="line">fs ls [path]                  # 列出目录内容</span><br><span class="line">fs mkdir &lt;path&gt;               # 创建目录</span><br><span class="line">fs read &lt;path&gt; [offset] [len] # 读取文件</span><br><span class="line">fs write &lt;path&gt; &lt;str&gt;         # 写入文件</span><br><span class="line">fs rm &lt;path&gt;                  # 删除文件</span><br><span class="line">fs mount &lt;path&gt;               # 挂载文件系统</span><br><span class="line">fs unmount &lt;path&gt;             # 卸载文件系统</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>文件系统选择</strong></p><ul><li>对于小型闪存，使用 LittleFS</li><li>对于 SD 卡等外部存储，使用 FAT</li><li>对于简单键值存储，使用 NVS</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>适当配置缓冲区大小</li><li>批量读写操作</li><li>避免频繁打开关闭文件</li></ul></li><li><p><strong>可靠性保证</strong></p><ul><li>使用支持掉电保护的文件系统</li><li>定期同步文件系统</li><li>实现错误恢复机制</li></ul></li><li><p><strong>资源管理</strong></p><ul><li>及时关闭文件和目录</li><li>避免过度分配文件句柄</li><li>定期清理临时文件</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>挂载失败</strong></p><ul><li>检查存储设备是否正常</li><li>验证分区配置</li><li>确认文件系统类型</li></ul></li><li><p><strong>读写错误</strong></p><ul><li>检查文件权限</li><li>验证路径是否正确</li><li>确认存储空间是否充足</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>增加缓冲区大小</li><li>减少小块读写操作</li><li>使用更适合的文件系统</li></ul></li><li><p><strong>文件系统损坏</strong></p><ul><li>使用文件系统检查工具</li><li>实现自动修复机制</li><li>备份重要数据</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 文件系统提供了丰富的功能，支持多种文件系统类型和存储设备。通过合理配置和使用这些功能，可以开发出高效、可靠的数据存储应用。深入理解这些文件系统接口对于开发高质量的 Zephyr 应用至关重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-文件系统&quot;&gt;&lt;a href=&quot;#Zephyr-文件系统&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 文件系统&quot;&gt;&lt;/a&gt;Zephyr 文件系统&lt;/h1&gt;&lt;p&gt;Zephyr RTOS 提供了多种文件系统支持，可以用于数据存储和管</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hardware</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/hardware/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/hardware/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-RTOS-硬件抽象层"><a href="#Zephyr-RTOS-硬件抽象层" class="headerlink" title="Zephyr RTOS 硬件抽象层"></a>Zephyr RTOS 硬件抽象层</h1><p>硬件抽象层（HAL）是 Zephyr RTOS 中的一个关键组件，它提供了一个统一的接口来访问不同硬件平台的功能。本文档详细介绍了 HAL 的架构、使用方法和最佳实践。</p><h2 id="1-HAL-架构"><a href="#1-HAL-架构" class="headerlink" title="1. HAL 架构"></a>1. HAL 架构</h2><h3 id="1-1-架构概述"><a href="#1-1-架构概述" class="headerlink" title="1.1 架构概述"></a>1.1 架构概述</h3><p>Zephyr HAL 采用分层设计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+</span><br><span class="line">|      应用层            |</span><br><span class="line">+------------------------+</span><br><span class="line">|      驱动 API          |</span><br><span class="line">+------------------------+</span><br><span class="line">|      HAL API          |</span><br><span class="line">+------------------------+</span><br><span class="line">|   SOC 特定实现         |</span><br><span class="line">+------------------------+</span><br><span class="line">|      硬件             |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><h3 id="1-2-主要组件"><a href="#1-2-主要组件" class="headerlink" title="1.2 主要组件"></a>1.2 主要组件</h3><ul><li><strong>SOC HAL</strong>：处理器核心相关的抽象</li><li><strong>外设 HAL</strong>：片上外设的抽象</li><li><strong>板级支持包</strong>：特定开发板的支持</li></ul><h2 id="2-SOC-HAL"><a href="#2-SOC-HAL" class="headerlink" title="2. SOC HAL"></a>2. SOC HAL</h2><h3 id="2-1-处理器核心配置"><a href="#2-1-处理器核心配置" class="headerlink" title="2.1 处理器核心配置"></a>2.1 处理器核心配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/arch/cpu.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/arch/arm/aarch32/cortex_m/cmsis.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cpu_config_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置系统时钟 */</span></span><br><span class="line">    SystemCoreClockUpdate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置中断优先级分组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置 SysTick */</span></span><br><span class="line">    SysTick_Config(SystemCoreClock / CONFIG_SYS_CLOCK_TICKS_PER_SEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-中断控制"><a href="#2-2-中断控制" class="headerlink" title="2.2 中断控制"></a>2.2 中断控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/arch/cpu.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/irq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">interrupt_config_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置中断优先级 */</span></span><br><span class="line">    IRQ_CONNECT(MY_IRQ, MY_IRQ_PRIO, my_isr, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置中断优先级 */</span></span><br><span class="line">    irq_set_priority(MY_IRQ, MY_IRQ_PRIO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    irq_enable(MY_IRQ);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-内存管理单元-MMU"><a href="#2-3-内存管理单元-MMU" class="headerlink" title="2.3 内存管理单元 (MMU)"></a>2.3 内存管理单元 (MMU)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/arch/arm/aarch32/mmu/arm_mmu.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">arm_mmu_region</span> <span class="title">mmu_regions</span>[] =</span> &#123;</span><br><span class="line">    <span class="comment">/* 闪存区域 */</span></span><br><span class="line">    MMU_REGION_FLAT_ENTRY(<span class="string">&quot;FLASH&quot;</span>,</span><br><span class="line">                         CONFIG_FLASH_BASE_ADDRESS,</span><br><span class="line">                         CONFIG_FLASH_SIZE,</span><br><span class="line">                         MT_NORMAL | MT_P_RX_U_NA),</span><br><span class="line">    <span class="comment">/* SRAM 区域 */</span></span><br><span class="line">    MMU_REGION_FLAT_ENTRY(<span class="string">&quot;SRAM&quot;</span>,</span><br><span class="line">                         CONFIG_SRAM_BASE_ADDRESS,</span><br><span class="line">                         CONFIG_SRAM_SIZE,</span><br><span class="line">                         MT_NORMAL | MT_P_RW_U_NA),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">arm_mmu_config</span> <span class="title">mmu_config</span> =</span> &#123;</span><br><span class="line">    .num_regions = ARRAY_SIZE(mmu_regions),</span><br><span class="line">    .mmu_regions = mmu_regions,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmu_config_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    arm_mmu_init();</span><br><span class="line">    arm_mmu_enable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-外设-HAL"><a href="#3-外设-HAL" class="headerlink" title="3. 外设 HAL"></a>3. 外设 HAL</h2><h3 id="3-1-GPIO-HAL"><a href="#3-1-GPIO-HAL" class="headerlink" title="3.1 GPIO HAL"></a>3.1 GPIO HAL</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> pin;</span><br><span class="line">    <span class="type">gpio_flags_t</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="keyword">struct</span> gpio_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置 GPIO */</span></span><br><span class="line">    <span class="keyword">return</span> gpio_pin_configure(dev, config-&gt;pin, config-&gt;flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 中断配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_int_config</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="keyword">struct</span> gpio_config *config,</span></span><br><span class="line"><span class="params">                         <span class="type">gpio_callback_handler_t</span> handler)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">callback</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置中断 */</span></span><br><span class="line">    gpio_init_callback(&amp;callback, handler, BIT(config-&gt;pin));</span><br><span class="line">    gpio_add_callback(dev, &amp;callback);</span><br><span class="line">    <span class="keyword">return</span> gpio_pin_interrupt_configure(dev, config-&gt;pin,</span><br><span class="line">                                     GPIO_INT_EDGE_BOTH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-UART-HAL"><a href="#3-2-UART-HAL" class="headerlink" title="3.2 UART HAL"></a>3.2 UART HAL</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* UART 配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uart_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> baud_rate;</span><br><span class="line">    <span class="type">uint8_t</span> data_bits;</span><br><span class="line">    <span class="type">uint8_t</span> stop_bits;</span><br><span class="line">    <span class="type">uint8_t</span> parity;</span><br><span class="line">    <span class="type">uint8_t</span> flow_ctrl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* UART 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">uart_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="keyword">struct</span> uart_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uart_config</span> <span class="title">cfg</span>;</span></span><br><span class="line"></span><br><span class="line">    cfg.baudrate = config-&gt;baud_rate;</span><br><span class="line">    cfg.parity = config-&gt;parity;</span><br><span class="line">    cfg.stop_bits = config-&gt;stop_bits;</span><br><span class="line">    cfg.data_bits = config-&gt;data_bits;</span><br><span class="line">    cfg.flow_ctrl = config-&gt;flow_ctrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uart_configure(dev, &amp;cfg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* UART 接收回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">uart_rx_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uart_fifo_read(dev, &amp;c, <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 处理接收到的数据 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-SPI-HAL"><a href="#3-3-SPI-HAL" class="headerlink" title="3.3 SPI HAL"></a>3.3 SPI HAL</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI 配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> frequency;</span><br><span class="line">    <span class="type">uint8_t</span> operation;</span><br><span class="line">    <span class="type">uint8_t</span> slave;</span><br><span class="line">    <span class="type">uint16_t</span> cs_delay;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">spi_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                   <span class="type">const</span> <span class="keyword">struct</span> spi_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    cfg.frequency = config-&gt;frequency;</span><br><span class="line">    cfg.operation = config-&gt;operation;</span><br><span class="line">    cfg.slave = config-&gt;slave;</span><br><span class="line">    cfg.cs_delay = config-&gt;cs_delay;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> spi_configure(dev, &amp;cfg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* SPI 传输 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">spi_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                       <span class="type">const</span> <span class="type">uint8_t</span> *tx_data,</span></span><br><span class="line"><span class="params">                       <span class="type">uint8_t</span> *rx_data,</span></span><br><span class="line"><span class="params">                       <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">tx_buf</span> =</span> &#123;</span><br><span class="line">        .buf = (<span class="type">void</span> *)tx_data,</span><br><span class="line">        .len = len</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">rx_buf</span> =</span> &#123;</span><br><span class="line">        .buf = rx_data,</span><br><span class="line">        .len = len</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">tx</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;tx_buf,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">rx</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;rx_buf,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> spi_transceive(dev, &amp;tx, &amp;rx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-时钟管理"><a href="#4-时钟管理" class="headerlink" title="4. 时钟管理"></a>4. 时钟管理</h2><h3 id="4-1-系统时钟配置"><a href="#4-1-系统时钟配置" class="headerlink" title="4.1 系统时钟配置"></a>4.1 系统时钟配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/clock_control.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 时钟配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clock_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> source;</span><br><span class="line">    <span class="type">uint32_t</span> frequency;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置系统时钟 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">clock_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> <span class="keyword">struct</span> clock_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = CLOCK_CONTROL_SUBSYS_ALL,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clock_control_on(dev, &amp;subsys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取时钟频率 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> <span class="title function_">clock_get_rate</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> rate;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = CLOCK_CONTROL_SUBSYS_ALL,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    clock_control_get_rate(dev, &amp;subsys, &amp;rate);</span><br><span class="line">    <span class="keyword">return</span> rate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-外设时钟控制"><a href="#4-2-外设时钟控制" class="headerlink" title="4.2 外设时钟控制"></a>4.2 外设时钟控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/clock_control.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使能外设时钟 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">periph_clock_enable</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="type">uint32_t</span> periph)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = periph,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clock_control_on(dev, &amp;subsys);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用外设时钟 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">periph_clock_disable</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                              <span class="type">uint32_t</span> periph)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = periph,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clock_control_off(dev, &amp;subsys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-电源管理"><a href="#5-电源管理" class="headerlink" title="5. 电源管理"></a>5. 电源管理</h2><h3 id="5-1-电源状态控制"><a href="#5-1-电源状态控制" class="headerlink" title="5.1 电源状态控制"></a>5.1 电源状态控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电源管理配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pm_config</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">pm_state</span> <span class="title">state</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> substate_id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入低功耗模式 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">pm_enter_state</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> pm_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pm_state_info</span> <span class="title">info</span> =</span> &#123;</span><br><span class="line">        .state = config-&gt;state,</span><br><span class="line">        .substate_id = config-&gt;substate_id,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pm_state_force(<span class="number">0u</span>, &amp;info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电源状态变化回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pm_state_entry</span><span class="params">(<span class="keyword">enum</span> pm_state state)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 处理电源状态变化 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册电源管理回调 */</span></span><br><span class="line">PM_STATE_INFO_DT_DEFINE(DT_NODELABEL(cpu0), <span class="literal">NULL</span>, pm_state_entry);</span><br></pre></td></tr></table></figure><h3 id="5-2-设备电源管理"><a href="#5-2-设备电源管理" class="headerlink" title="5.2 设备电源管理"></a>5.2 设备电源管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备电源管理回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">device_pm_control</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                           <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">/* 恢复设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">/* 挂起设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_ON:</span><br><span class="line">        <span class="comment">/* 开启设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_OFF:</span><br><span class="line">        <span class="comment">/* 关闭设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册设备电源管理 */</span></span><br><span class="line">PM_DEVICE_DT_DEFINE(DT_NODELABEL(my_device), device_pm_control);</span><br></pre></td></tr></table></figure><h2 id="6-DMA-控制器"><a href="#6-DMA-控制器" class="headerlink" title="6. DMA 控制器"></a>6. DMA 控制器</h2><h3 id="6-1-DMA-配置"><a href="#6-1-DMA-配置" class="headerlink" title="6.1 DMA 配置"></a>6.1 DMA 配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> channel;</span><br><span class="line">    <span class="type">uint32_t</span> source;</span><br><span class="line">    <span class="type">uint32_t</span> dest;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dma_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dma_dev,</span></span><br><span class="line"><span class="params">                        <span class="type">void</span> *user_data,</span></span><br><span class="line"><span class="params">                        <span class="type">uint32_t</span> channel,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 处理 DMA 传输完成 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置 DMA 传输 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dma_transfer_config</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="keyword">struct</span> dma_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">cfg</span> =</span> &#123;</span><br><span class="line">        .channel_direction = MEMORY_TO_MEMORY,</span><br><span class="line">        .source_data_size = <span class="number">4</span>,</span><br><span class="line">        .dest_data_size = <span class="number">4</span>,</span><br><span class="line">        .source_burst_length = <span class="number">4</span>,</span><br><span class="line">        .dest_burst_length = <span class="number">4</span>,</span><br><span class="line">        .dma_callback = dma_callback,</span><br><span class="line">        .block_count = <span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">block_cfg</span> =</span> &#123;</span><br><span class="line">        .source_address = config-&gt;source,</span><br><span class="line">        .dest_address = config-&gt;dest,</span><br><span class="line">        .block_size = config-&gt;size,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    cfg.head_block = &amp;block_cfg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dma_config(dev, config-&gt;channel, &amp;cfg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-DMA-传输控制"><a href="#6-2-DMA-传输控制" class="headerlink" title="6.2 DMA 传输控制"></a>6.2 DMA 传输控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dma_start_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                            <span class="type">uint32_t</span> channel)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> dma_start(dev, channel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 停止 DMA 传输 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">dma_stop_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                           <span class="type">uint32_t</span> channel)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> dma_stop(dev, channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-最佳实践"><a href="#7-最佳实践" class="headerlink" title="7. 最佳实践"></a>7. 最佳实践</h2><ol><li><p>硬件初始化：</p><ul><li>按正确的顺序初始化硬件</li><li>验证初始化结果</li><li>实现错误恢复机制</li></ul></li><li><p>中断处理：</p><ul><li>最小化中断处理时间</li><li>使用适当的中断优先级</li><li>避免在中断上下文中执行长时间操作</li></ul></li><li><p>电源管理：</p><ul><li>实现完整的电源状态转换</li><li>正确处理唤醒源</li><li>优化低功耗模式</li></ul></li><li><p>DMA 使用：</p><ul><li>对大数据传输使用 DMA</li><li>正确配置 DMA 通道</li><li>实现适当的错误处理</li></ul></li><li><p>时钟管理：</p><ul><li>优化时钟配置</li><li>必要时才使能外设时钟</li><li>监控时钟状态</li></ul></li><li><p>调试支持：</p><ul><li>添加调试接口</li><li>实现状态监控</li><li>提供错误诊断</li></ul></li><li><p>可移植性：</p><ul><li>使用硬件抽象接口</li><li>避免直接访问硬件寄存器</li><li>使用配置参数而不是硬编码值</li></ul></li></ol><p>通过遵循这些最佳实践，您可以开发出可靠、高效的硬件抽象层实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-RTOS-硬件抽象层&quot;&gt;&lt;a href=&quot;#Zephyr-RTOS-硬件抽象层&quot; class=&quot;headerlink&quot; title=&quot;Zephyr RTOS 硬件抽象层&quot;&gt;&lt;/a&gt;Zephyr RTOS 硬件抽象层&lt;/h1&gt;&lt;p&gt;硬件抽象层（HAL）</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kernel</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/kernel/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/kernel/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-内核模块"><a href="#Zephyr-内核模块" class="headerlink" title="Zephyr 内核模块"></a>Zephyr 内核模块</h1><p>Zephyr 内核模块提供了实时操作系统的核心功能，包括线程管理、内存管理、同步原语和定时器等。本文档将详细介绍这些功能的使用方法。</p><h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><h3 id="线程创建与控制"><a href="#线程创建与控制" class="headerlink" title="线程创建与控制"></a>线程创建与控制</h3><ol><li><strong>创建线程</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_PRIORITY 7</span></span><br><span class="line"></span><br><span class="line">K_THREAD_STACK_DEFINE(thread_stack, STACK_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 线程工作</span></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建线程</span></span><br><span class="line">k_thread_create(&amp;thread_data, thread_stack,</span><br><span class="line">                K_THREAD_STACK_SIZEOF(thread_stack),</span><br><span class="line">                thread_entry, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                THREAD_PRIORITY, <span class="number">0</span>, K_NO_WAIT);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>线程控制</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挂起线程</span></span><br><span class="line">k_thread_suspend(&amp;thread_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复线程</span></span><br><span class="line">k_thread_resume(&amp;thread_data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终止线程</span></span><br><span class="line">k_thread_abort(&amp;thread_data);</span><br></pre></td></tr></table></figure><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><ol><li><strong>优先级调度</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置线程优先级</span></span><br><span class="line">k_thread_priority_set(&amp;thread_data, new_priority);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让出处理器</span></span><br><span class="line">k_yield();</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>时间片轮转</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置时间片（在 prj.conf 中）</span></span><br><span class="line">CONFIG_TIMESLICING=y</span><br><span class="line">CONFIG_TIMESLICE_SIZE=<span class="number">10</span></span><br><span class="line">CONFIG_TIMESLICE_PRIORITY=<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="静态内存分配"><a href="#静态内存分配" class="headerlink" title="静态内存分配"></a>静态内存分配</h3><ol><li><strong>栈内存分配</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K_THREAD_STACK_DEFINE(my_stack, STACK_SIZE);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>静态内存对象</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K_MEM_SLAB_DEFINE(my_slab, <span class="number">32</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><ol><li><strong>内存池</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> POOL_BLOCK_SIZE 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> POOL_BLOCK_COUNT 10</span></span><br><span class="line">K_MEM_POOL_DEFINE(my_pool, POOL_BLOCK_SIZE, POOL_BLOCK_SIZE,</span><br><span class="line">                  POOL_BLOCK_COUNT, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *memory = k_mem_pool_alloc(&amp;my_pool, POOL_BLOCK_SIZE,</span><br><span class="line">                               K_NO_WAIT);</span><br><span class="line"><span class="keyword">if</span> (memory != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用内存</span></span><br><span class="line">    k_mem_pool_free(&amp;memory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>堆内存</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 prj.conf 中启用堆内存</span></span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=<span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用堆内存</span></span><br><span class="line"><span class="type">void</span> *ptr = k_malloc(size);</span><br><span class="line"><span class="keyword">if</span> (ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用内存</span></span><br><span class="line">    k_free(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步原语"><a href="#同步原语" class="headerlink" title="同步原语"></a>同步原语</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><ol><li><strong>定义和初始化</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">K_SEM_DEFINE(my_sem, <span class="number">0</span>, <span class="number">1</span>);  <span class="comment">// 初始值0，最大值1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或动态初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">my_sem</span>;</span></span><br><span class="line">k_sem_init(&amp;my_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用信号量</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待信号量</span></span><br><span class="line">k_sem_take(&amp;my_sem, K_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放信号量</span></span><br><span class="line">k_sem_give(&amp;my_sem);</span><br></pre></td></tr></table></figure><h3 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h3><ol><li><strong>定义和初始化</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">K_MUTEX_DEFINE(my_mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或动态初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">my_mutex</span>;</span></span><br><span class="line">k_mutex_init(&amp;my_mutex);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用互斥量</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取互斥量</span></span><br><span class="line">k_mutex_lock(&amp;my_mutex, K_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放互斥量</span></span><br><span class="line">k_mutex_unlock(&amp;my_mutex);</span><br></pre></td></tr></table></figure><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><ol><li><strong>定义和初始化</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">K_CONDVAR_DEFINE(my_condvar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或动态初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_condvar</span> <span class="title">my_condvar</span>;</span></span><br><span class="line">k_condvar_init(&amp;my_condvar);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用条件变量</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待条件</span></span><br><span class="line">k_condvar_wait(&amp;my_condvar, &amp;my_mutex, K_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 唤醒等待线程</span></span><br><span class="line">k_condvar_signal(&amp;my_condvar);</span><br></pre></td></tr></table></figure><h2 id="定时器与时间管理"><a href="#定时器与时间管理" class="headerlink" title="定时器与时间管理"></a>定时器与时间管理</h2><h3 id="内核定时器"><a href="#内核定时器" class="headerlink" title="内核定时器"></a>内核定时器</h3><ol><li><strong>定义定时器</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">timer_handler</span><span class="params">(<span class="keyword">struct</span> k_timer *timer)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定时器处理函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">K_TIMER_DEFINE(my_timer, timer_handler, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用定时器</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动定时器</span></span><br><span class="line">k_timer_start(&amp;my_timer, K_MSEC(<span class="number">100</span>), K_MSEC(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line">k_timer_stop(&amp;my_timer);</span><br></pre></td></tr></table></figure><h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><ol><li><strong>延时函数</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延时指定时间</span></span><br><span class="line">k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line">k_usleep(<span class="number">1000</span>);  <span class="comment">// 微秒级延时</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>获取系统时间</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取系统启动后的时间（毫秒）</span></span><br><span class="line"><span class="type">int64_t</span> uptime = k_uptime_get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取系统滴答计数</span></span><br><span class="line"><span class="type">uint32_t</span> cycles = k_cycle_get_32();</span><br></pre></td></tr></table></figure><h2 id="中断管理"><a href="#中断管理" class="headerlink" title="中断管理"></a>中断管理</h2><h3 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h3><ol><li><strong>定义中断处理函数</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">irq_handler</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 中断处理代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置中断</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IRQ_CONNECT(IRQ_NUM, IRQ_PRIO, irq_handler, <span class="literal">NULL</span>, IRQ_FLAGS);</span><br><span class="line">irq_enable(IRQ_NUM);</span><br></pre></td></tr></table></figure><h3 id="中断控制"><a href="#中断控制" class="headerlink" title="中断控制"></a>中断控制</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁用中断</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key = irq_lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临界区代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复中断</span></span><br><span class="line">irq_unlock(key);</span><br></pre></td></tr></table></figure><h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h2><h3 id="定义工作项"><a href="#定义工作项" class="headerlink" title="定义工作项"></a>定义工作项</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">work_handler</span><span class="params">(<span class="keyword">struct</span> k_work *work)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 工作处理函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">K_WORK_DEFINE(my_work, work_handler);</span><br></pre></td></tr></table></figure><h3 id="使用工作队列"><a href="#使用工作队列" class="headerlink" title="使用工作队列"></a>使用工作队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交工作项</span></span><br><span class="line">k_work_submit(&amp;my_work);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟工作项</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_work_delayable</span> <span class="title">delayed_work</span>;</span></span><br><span class="line">k_work_init_delayable(&amp;delayed_work, work_handler);</span><br><span class="line">k_work_schedule(&amp;delayed_work, K_MSEC(<span class="number">1000</span>));</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>线程优先级</strong>：</p><ul><li>合理分配线程优先级</li><li>避免优先级反转</li><li>使用优先级继承的互斥量</li></ul></li><li><p><strong>内存管理</strong>：</p><ul><li>优先使用静态分配</li><li>避免频繁的动态分配</li><li>注意内存对齐要求</li></ul></li><li><p><strong>同步机制</strong>：</p><ul><li>选择合适的同步原语</li><li>避免死锁</li><li>最小化临界区</li></ul></li><li><p><strong>定时器使用</strong>：</p><ul><li>避免过于频繁的定时器中断</li><li>合理设置定时器周期</li><li>注意定时器回调函数的执行时间</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>栈溢出</strong>：</p><ul><li>增加栈大小</li><li>检查递归深度</li><li>使用栈检测功能</li></ul></li><li><p><strong>优先级反转</strong>：</p><ul><li>使用优先级继承</li><li>最小化关键区</li><li>避免长时间持有互斥量</li></ul></li><li><p><strong>死锁</strong>：</p><ul><li>按固定顺序获取互斥量</li><li>使用超时机制</li><li>避免循环等待</li></ul></li><li><p><strong>实时性问题</strong>：</p><ul><li>减少中断禁用时间</li><li>优化关键路径</li><li>使用适当的同步机制</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 内核模块提供了丰富的功能，支持开发各种实时应用。通过合理使用这些功能，可以开发出高效、可靠的嵌入式系统。深入理解这些核心概念对于开发高质量的 Zephyr 应用至关重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-内核模块&quot;&gt;&lt;a href=&quot;#Zephyr-内核模块&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 内核模块&quot;&gt;&lt;/a&gt;Zephyr 内核模块&lt;/h1&gt;&lt;p&gt;Zephyr 内核模块提供了实时操作系统的核心功能，包括线程管理、内</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>networking</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/networking/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/networking/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-网络协议栈"><a href="#Zephyr-网络协议栈" class="headerlink" title="Zephyr 网络协议栈"></a>Zephyr 网络协议栈</h1><p>Zephyr RTOS 提供了功能丰富的网络协议栈，支持多种网络技术和协议。本文档将详细介绍 Zephyr 网络子系统的架构和使用方法。</p><h2 id="网络协议栈概述"><a href="#网络协议栈概述" class="headerlink" title="网络协议栈概述"></a>网络协议栈概述</h2><h3 id="支持的网络技术"><a href="#支持的网络技术" class="headerlink" title="支持的网络技术"></a>支持的网络技术</h3><p>Zephyr 网络协议栈支持多种网络技术：</p><ol><li><p><strong>有线网络</strong></p><ul><li>以太网</li><li>CAN 总线</li><li>USB 网络</li></ul></li><li><p><strong>无线网络</strong></p><ul><li>Wi-Fi</li><li>蓝牙</li><li>蓝牙低功耗 (BLE)</li><li>IEEE 802.15.4</li><li>LoRaWAN</li><li>NB-IoT&#x2F;LTE-M</li></ul></li></ol><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><p>Zephyr 支持多种网络协议：</p><ol><li><p><strong>IPv4&#x2F;IPv6</strong></p><ul><li>双栈支持</li><li>地址自动配置</li><li>邻居发现</li></ul></li><li><p><strong>传输层协议</strong></p><ul><li>TCP</li><li>UDP</li><li>DTLS</li></ul></li><li><p><strong>应用层协议</strong></p><ul><li>HTTP</li><li>CoAP</li><li>MQTT</li><li>LwM2M</li><li>SNTP</li></ul></li></ol><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>在 <code>prj.conf</code> 中启用网络功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 启用网络功能</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line"></span><br><span class="line"># IPv4 支持</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_IPV4_AUTO=y</span><br><span class="line"></span><br><span class="line"># IPv6 支持</span><br><span class="line">CONFIG_NET_IPV6=y</span><br><span class="line">CONFIG_NET_IPV6_AUTO_PREFIX=y</span><br><span class="line"></span><br><span class="line"># 协议支持</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line">CONFIG_NET_UDP=y</span><br><span class="line"></span><br><span class="line"># 网络缓冲区配置</span><br><span class="line">CONFIG_NET_BUF_RX_COUNT=16</span><br><span class="line">CONFIG_NET_BUF_TX_COUNT=16</span><br><span class="line">CONFIG_NET_PKT_RX_COUNT=16</span><br><span class="line">CONFIG_NET_PKT_TX_COUNT=16</span><br></pre></td></tr></table></figure><h3 id="网络接口配置"><a href="#网络接口配置" class="headerlink" title="网络接口配置"></a>网络接口配置</h3><p>通过设备树配置网络接口：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;eth0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">local-mac-address</span> <span class="operator">=</span> [<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">02</span> <span class="number">03</span>]<span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="TCP-IP-协议栈"><a href="#TCP-IP-协议栈" class="headerlink" title="TCP&#x2F;IP 协议栈"></a>TCP&#x2F;IP 协议栈</h2><h3 id="套接字-API"><a href="#套接字-API" class="headerlink" title="套接字 API"></a>套接字 API</h3><p>Zephyr 提供了兼容 BSD 套接字的 API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建套接字</span></span><br><span class="line"><span class="type">int</span> sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到服务器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = htons(<span class="number">80</span>);</span><br><span class="line">inet_pton(AF_INET, <span class="string">&quot;192.168.1.1&quot;</span>, &amp;addr.sin_addr);</span><br><span class="line">connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">send(sock, data, len, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line">recv(sock, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭套接字</span></span><br><span class="line">close(sock);</span><br></pre></td></tr></table></figure><h3 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP 客户端"></a>TCP 客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tcp_client</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建套接字</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create socket\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器地址</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">80</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;192.168.1.1&quot;</span>, &amp;addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务器</span></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to connect\n&quot;</span>);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 HTTP 请求</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *request = <span class="string">&quot;GET / HTTP/1.1\r\nHost: 192.168.1.1\r\n\r\n&quot;</span>;</span><br><span class="line">    send(sock, request, <span class="built_in">strlen</span>(request), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收响应</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len = recv(sock, buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buffer[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TCP-服务器"><a href="#TCP-服务器" class="headerlink" title="TCP 服务器"></a>TCP 服务器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tcp_server</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> server_sock, client_sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建服务器套接字</span></span><br><span class="line">    server_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (server_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create server socket\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定地址</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(<span class="number">8080</span>);</span><br><span class="line">    <span class="keyword">if</span> (bind(server_sock, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,</span><br><span class="line">             <span class="keyword">sizeof</span>(server_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind server socket\n&quot;</span>);</span><br><span class="line">        close(server_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听连接</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_sock, <span class="number">5</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to listen\n&quot;</span>);</span><br><span class="line">        close(server_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;TCP server listening on port 8080\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受连接</span></span><br><span class="line">    client_sock = accept(server_sock, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr,</span><br><span class="line">                         &amp;client_addr_len);</span><br><span class="line">    <span class="keyword">if</span> (client_sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to accept connection\n&quot;</span>);</span><br><span class="line">        close(server_sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理客户端请求</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len = recv(client_sock, buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buffer[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送响应</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *response = <span class="string">&quot;HTTP/1.1 200 OK\r\n\r\nHello from Zephyr!\r\n&quot;</span>;</span><br><span class="line">        send(client_sock, response, <span class="built_in">strlen</span>(response), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    close(client_sock);</span><br><span class="line">    close(server_sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP-通信"><a href="#UDP-通信" class="headerlink" title="UDP 通信"></a>UDP 通信</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">udp_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">local_addr</span>, <span class="title">remote_addr</span>;</span></span><br><span class="line">    <span class="type">socklen_t</span> remote_addr_len = <span class="keyword">sizeof</span>(remote_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 UDP 套接字</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to create UDP socket\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定本地地址</span></span><br><span class="line">    local_addr.sin_family = AF_INET;</span><br><span class="line">    local_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    local_addr.sin_port = htons(<span class="number">5683</span>);</span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;local_addr, <span class="keyword">sizeof</span>(local_addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to bind UDP socket\n&quot;</span>);</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len = recvfrom(sock, buffer, <span class="keyword">sizeof</span>(buffer) - <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">                       (<span class="keyword">struct</span> sockaddr *)&amp;remote_addr, &amp;remote_addr_len);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buffer[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        printk(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送响应</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *response = <span class="string">&quot;ACK&quot;</span>;</span><br><span class="line">        sendto(sock, response, <span class="built_in">strlen</span>(response), <span class="number">0</span>,</span><br><span class="line">               (<span class="keyword">struct</span> sockaddr *)&amp;remote_addr, remote_addr_len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭套接字</span></span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="蓝牙支持"><a href="#蓝牙支持" class="headerlink" title="蓝牙支持"></a>蓝牙支持</h2><h3 id="蓝牙配置"><a href="#蓝牙配置" class="headerlink" title="蓝牙配置"></a>蓝牙配置</h3><p>在 <code>prj.conf</code> 中启用蓝牙功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 蓝牙核心功能</span><br><span class="line">CONFIG_BT=y</span><br><span class="line"></span><br><span class="line"># 蓝牙角色</span><br><span class="line">CONFIG_BT_PERIPHERAL=y  # 外设角色</span><br><span class="line">CONFIG_BT_CENTRAL=y     # 中心角色</span><br><span class="line"></span><br><span class="line"># 蓝牙 LE 功能</span><br><span class="line">CONFIG_BT_DEVICE_NAME=&quot;Zephyr BLE Device&quot;</span><br><span class="line">CONFIG_BT_DEVICE_APPEARANCE=0</span><br><span class="line">CONFIG_BT_MAX_CONN=5</span><br></pre></td></tr></table></figure><h3 id="蓝牙-LE-外设"><a href="#蓝牙-LE-外设" class="headerlink" title="蓝牙 LE 外设"></a>蓝牙 LE 外设</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/hci.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/conn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/uuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 广播数据</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_data</span> <span class="title">ad</span>[] =</span> &#123;</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),</span><br><span class="line">    BT_DATA_BYTES(BT_DATA_UUID16_ALL, <span class="number">0x0a</span>, <span class="number">0x18</span>),  <span class="comment">// 设备信息服务</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">connected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> err)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Connection failed (err %u)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断开连接回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disconnected</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn, <span class="type">uint8_t</span> reason)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Disconnected (reason %u)\n&quot;</span>, reason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接回调结构体</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">bt_conn_cb</span> <span class="title">conn_callbacks</span> =</span> &#123;</span><br><span class="line">    .connected = connected,</span><br><span class="line">    .disconnected = disconnected,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化蓝牙</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ble_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化蓝牙</span></span><br><span class="line">    err = bt_enable(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Bluetooth init failed (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Bluetooth initialized\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册连接回调</span></span><br><span class="line">    bt_conn_cb_register(&amp;conn_callbacks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始广播</span></span><br><span class="line">    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Advertising failed to start (err %d)\n&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Advertising started\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GATT-服务"><a href="#GATT-服务" class="headerlink" title="GATT 服务"></a>GATT 服务</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/bluetooth.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/bluetooth/gatt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义服务 UUID</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_SERVICE_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_SERVICE BT_UUID_DECLARE_128(BT_UUID_CUSTOM_SERVICE_VAL)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特征 UUID</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_CHRC_VAL \</span></span><br><span class="line"><span class="meta">    BT_UUID_128_ENCODE(0x12345678, 0x1234, 0x5678, 0x1234, 0x56789abcdef1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BT_UUID_CUSTOM_CHRC BT_UUID_DECLARE_128(BT_UUID_CUSTOM_CHRC_VAL)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特征值</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> custom_value[] = &#123;<span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">read_custom</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                          <span class="type">void</span> *buf, <span class="type">uint16_t</span> len, <span class="type">uint16_t</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> *value = attr-&gt;user_data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bt_gatt_attr_read(conn, attr, buf, len, offset, value,</span><br><span class="line">                            <span class="keyword">sizeof</span>(custom_value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">write_custom</span><span class="params">(<span class="keyword">struct</span> bt_conn *conn,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="keyword">struct</span> bt_gatt_attr *attr,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">uint16_t</span> len, <span class="type">uint16_t</span> offset,</span></span><br><span class="line"><span class="params">                           <span class="type">uint8_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *value = attr-&gt;user_data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (offset + len &gt; <span class="keyword">sizeof</span>(custom_value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(value + offset, buf, len);</span><br><span class="line">    printk(<span class="string">&quot;Value updated: %u\n&quot;</span>, *value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 GATT 服务</span></span><br><span class="line">BT_GATT_SERVICE_DEFINE(custom_svc,</span><br><span class="line">    BT_GATT_PRIMARY_SERVICE(BT_UUID_CUSTOM_SERVICE),</span><br><span class="line">    BT_GATT_CHARACTERISTIC(BT_UUID_CUSTOM_CHRC,</span><br><span class="line">                         BT_GATT_CHRC_READ | BT_GATT_CHRC_WRITE,</span><br><span class="line">                         BT_GATT_PERM_READ | BT_GATT_PERM_WRITE,</span><br><span class="line">                         read_custom, write_custom, custom_value),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="IEEE-802-15-4"><a href="#IEEE-802-15-4" class="headerlink" title="IEEE 802.15.4"></a>IEEE 802.15.4</h2><h3 id="配置-802-15-4"><a href="#配置-802-15-4" class="headerlink" title="配置 802.15.4"></a>配置 802.15.4</h3><p>在 <code>prj.conf</code> 中启用 IEEE 802.15.4 功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 启用 IEEE 802.15.4</span><br><span class="line">CONFIG_NET_L2_IEEE802154=y</span><br><span class="line">CONFIG_NET_L2_IEEE802154_SHELL=y</span><br><span class="line"></span><br><span class="line"># 配置 IEEE 802.15.4 参数</span><br><span class="line">CONFIG_IEEE802154_CHANNEL=26</span><br><span class="line">CONFIG_IEEE802154_PAN_ID=0xabcd</span><br></pre></td></tr></table></figure><h3 id="使用-802-15-4"><a href="#使用-802-15-4" class="headerlink" title="使用 802.15.4"></a>使用 802.15.4</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/ieee802154_mgmt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 IEEE 802.15.4 接口</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">configure_ieee802154</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ieee802154_req_params</span> <span class="title">params</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 IEEE 802.15.4 接口</span></span><br><span class="line">    iface = net_if_get_first_by_type(&amp;NET_L2_GET_NAME(IEEE802154));</span><br><span class="line">    <span class="keyword">if</span> (!iface) &#123;</span><br><span class="line">        printk(<span class="string">&quot;No IEEE 802.15.4 interface found\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 PAN ID</span></span><br><span class="line">    params.pan_id = <span class="number">0xabcd</span>;</span><br><span class="line">    net_mgmt(NET_REQUEST_IEEE802154_SET_PAN_ID, iface, &amp;params, <span class="keyword">sizeof</span>(params));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置信道</span></span><br><span class="line">    params.channel = <span class="number">26</span>;</span><br><span class="line">    net_mgmt(NET_REQUEST_IEEE802154_SET_CHANNEL, iface, &amp;params, <span class="keyword">sizeof</span>(params));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动接口</span></span><br><span class="line">    net_if_up(iface);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LoRaWAN"><a href="#LoRaWAN" class="headerlink" title="LoRaWAN"></a>LoRaWAN</h2><h3 id="配置-LoRaWAN"><a href="#配置-LoRaWAN" class="headerlink" title="配置 LoRaWAN"></a>配置 LoRaWAN</h3><p>在 <code>prj.conf</code> 中启用 LoRaWAN 功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 启用 LoRaWAN</span><br><span class="line">CONFIG_LORA=y</span><br><span class="line">CONFIG_LORAWAN=y</span><br><span class="line"></span><br><span class="line"># LoRaWAN 配置</span><br><span class="line">CONFIG_LORAWAN_REGION_EU868=y</span><br></pre></td></tr></table></figure><h3 id="使用-LoRaWAN"><a href="#使用-LoRaWAN" class="headerlink" title="使用 LoRaWAN"></a>使用 LoRaWAN</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/lorawan/lorawan.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LoRaWAN 参数</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> dev_eui[] = &#123;<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> app_eui[] = &#123;<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> app_key[] = &#123;<span class="number">0x2B</span>, <span class="number">0x7E</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x28</span>, <span class="number">0xAE</span>, <span class="number">0xD2</span>, <span class="number">0xA6</span>,</span><br><span class="line">                           <span class="number">0xAB</span>, <span class="number">0xF7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>, <span class="number">0x09</span>, <span class="number">0xCF</span>, <span class="number">0x4F</span>, <span class="number">0x3C</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoRaWAN 回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dl_callback</span><span class="params">(<span class="type">uint8_t</span> port, <span class="type">bool</span> data_pending,</span></span><br><span class="line"><span class="params">                       <span class="type">uint8_t</span> *data, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;LoRaWAN downlink: port %d, pending %d, len %d\n&quot;</span>,</span><br><span class="line">           port, data_pending, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 LoRaWAN</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lorawan_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lorawan_join_config</span> <span class="title">join_cfg</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置入网参数</span></span><br><span class="line">    join_cfg.mode = LORAWAN_ACT_OTAA;</span><br><span class="line">    join_cfg.dev_eui = dev_eui;</span><br><span class="line">    join_cfg.otaa.join_eui = app_eui;</span><br><span class="line">    join_cfg.otaa.app_key = app_key;</span><br><span class="line">    join_cfg.otaa.nwk_key = app_key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 LoRaWAN</span></span><br><span class="line">    ret = lorawan_start();</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;LoRaWAN start failed: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册回调</span></span><br><span class="line">    lorawan_register_downlink_callback(dl_callback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入网</span></span><br><span class="line">    ret = lorawan_join(&amp;join_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;LoRaWAN join failed: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;LoRaWAN join requested\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 LoRaWAN 数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">lorawan_send</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = lorawan_send(<span class="number">2</span>, data, <span class="keyword">sizeof</span>(data), LORAWAN_MSG_CONFIRMED);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;LoRaWAN send failed: %d\n&quot;</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><h3 id="网络接口管理"><a href="#网络接口管理" class="headerlink" title="网络接口管理"></a>网络接口管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_mgmt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取网络接口</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span> =</span> net_if_get_default();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用接口</span></span><br><span class="line">net_if_up(iface);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用接口</span></span><br><span class="line">net_if_down(iface);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 IPv4 地址</span></span><br><span class="line"><span class="type">char</span> addr_str[NET_IPV4_ADDR_LEN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_if_addr</span> *<span class="title">if_addr</span> =</span> net_if_ipv4_addr_add(iface, &amp;addr, NET_ADDR_MANUAL, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (if_addr) &#123;</span><br><span class="line">    net_addr_ntop(AF_INET, &amp;addr, addr_str, <span class="keyword">sizeof</span>(addr_str));</span><br><span class="line">    printk(<span class="string">&quot;IPv4 address: %s\n&quot;</span>, addr_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网络事件监听"><a href="#网络事件监听" class="headerlink" title="网络事件监听"></a>网络事件监听</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_mgmt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/net/net_event.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义事件处理函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">net_event_handler</span><span class="params">(<span class="keyword">struct</span> net_mgmt_event_callback *cb,</span></span><br><span class="line"><span class="params">                             <span class="type">uint32_t</span> mgmt_event, <span class="keyword">struct</span> net_if *iface)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mgmt_event == NET_EVENT_IPV4_ADDR_ADD) &#123;</span><br><span class="line">        printk(<span class="string">&quot;IPv4 address added\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mgmt_event == NET_EVENT_IPV4_ADDR_DEL) &#123;</span><br><span class="line">        printk(<span class="string">&quot;IPv4 address removed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册事件回调</span></span><br><span class="line">NET_MGMT_REGISTER_EVENT_HANDLER(net_event_cb, net_event_handler,</span><br><span class="line">                              NET_EVENT_IPV4_ADDR_ADD | NET_EVENT_IPV4_ADDR_DEL);</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>网络配置</strong></p><ul><li>合理配置网络缓冲区大小</li><li>根据应用需求选择合适的协议</li><li>优化网络参数以降低功耗</li></ul></li><li><p><strong>安全性</strong></p><ul><li>使用 TLS&#x2F;DTLS 保护通信</li><li>实施适当的认证机制</li><li>定期更新安全凭证</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>处理网络连接错误</li><li>实现重连机制</li><li>监控网络状态变化</li></ul></li><li><p><strong>资源优化</strong></p><ul><li>减少网络流量</li><li>使用异步通信</li><li>批量处理数据传输</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>连接问题</strong></p><ul><li>检查网络配置</li><li>验证网络接口状态</li><li>确认 IP 地址配置</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>增加网络缓冲区大小</li><li>优化数据传输批量处理</li><li>减少不必要的网络请求</li></ul></li><li><p><strong>功耗问题</strong></p><ul><li>使用低功耗网络模式</li><li>减少网络唤醒频率</li><li>优化数据传输批量处理</li></ul></li><li><p><strong>协议兼容性</strong></p><ul><li>确保协议版本兼容</li><li>验证协议实现是否完整</li><li>测试与不同设备的互操作性</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 网络协议栈提供了丰富的网络功能，支持多种网络技术和协议。通过合理配置和使用这些功能，可以开发出高效、可靠的联网应用。深入理解这些网络接口对于开发高质量的 Zephyr 网络应用至关重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-网络协议栈&quot;&gt;&lt;a href=&quot;#Zephyr-网络协议栈&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 网络协议栈&quot;&gt;&lt;/a&gt;Zephyr 网络协议栈&lt;/h1&gt;&lt;p&gt;Zephyr RTOS 提供了功能丰富的网络协议栈，支持多种</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>power</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/power/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/core/power/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-电源管理"><a href="#Zephyr-电源管理" class="headerlink" title="Zephyr 电源管理"></a>Zephyr 电源管理</h1><p>Zephyr RTOS 提供了全面的电源管理功能，用于优化系统功耗和延长电池寿命。本文档将详细介绍 Zephyr 电源管理系统的架构和使用方法。</p><h2 id="电源管理概述"><a href="#电源管理概述" class="headerlink" title="电源管理概述"></a>电源管理概述</h2><p>Zephyr 的电源管理系统包括以下主要组件：</p><ol><li><strong>系统电源管理</strong>：控制整个系统的电源状态</li><li><strong>设备电源管理</strong>：管理单个设备的电源状态</li><li><strong>CPU 电源管理</strong>：控制 CPU 的低功耗模式</li><li><strong>时钟管理</strong>：管理系统和外设时钟</li><li><strong>唤醒源管理</strong>：配置可以唤醒系统的事件源</li></ol><h2 id="电源管理配置"><a href="#电源管理配置" class="headerlink" title="电源管理配置"></a>电源管理配置</h2><h3 id="启用电源管理"><a href="#启用电源管理" class="headerlink" title="启用电源管理"></a>启用电源管理</h3><p>在 <code>prj.conf</code> 中启用电源管理功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 启用电源管理</span><br><span class="line">CONFIG_PM=y</span><br><span class="line"></span><br><span class="line"># 启用设备电源管理</span><br><span class="line">CONFIG_PM_DEVICE=y</span><br><span class="line"></span><br><span class="line"># 启用设备运行时电源管理</span><br><span class="line">CONFIG_PM_DEVICE_RUNTIME=y</span><br><span class="line"></span><br><span class="line"># 启用电源状态调试</span><br><span class="line">CONFIG_PM_DEBUG=y</span><br></pre></td></tr></table></figure><h2 id="系统电源管理"><a href="#系统电源管理" class="headerlink" title="系统电源管理"></a>系统电源管理</h2><h3 id="电源状态"><a href="#电源状态" class="headerlink" title="电源状态"></a>电源状态</h3><p>Zephyr 定义了以下系统电源状态：</p><ol><li><strong>ACTIVE</strong>：系统完全运行</li><li><strong>RUNTIME_IDLE</strong>：低功耗空闲状态</li><li><strong>SUSPEND_TO_RAM</strong>：挂起到内存</li><li><strong>SUSPEND_TO_DISK</strong>：挂起到磁盘</li><li><strong>SOFT_OFF</strong>：软关机</li></ol><h3 id="电源状态约束"><a href="#电源状态约束" class="headerlink" title="电源状态约束"></a>电源状态约束</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置电源状态约束</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_power_constraint</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 防止系统进入 SUSPEND_TO_RAM 状态</span></span><br><span class="line">    pm_constraint_set(PM_STATE_SUSPEND_TO_RAM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放电源状态约束</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">release_power_constraint</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    pm_constraint_release(PM_STATE_SUSPEND_TO_RAM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="电源状态钩子"><a href="#电源状态钩子" class="headerlink" title="电源状态钩子"></a>电源状态钩子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义电源状态钩子</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_pm_hook</span><span class="params">(<span class="keyword">enum</span> pm_state state)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_STATE_RUNTIME_IDLE:</span><br><span class="line">        <span class="comment">// 准备进入 RUNTIME_IDLE 状态</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_STATE_SUSPEND_TO_RAM:</span><br><span class="line">        <span class="comment">// 准备进入 SUSPEND_TO_RAM 状态</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册电源状态钩子</span></span><br><span class="line">PM_STATE_INFO_DT_DEFINE(DT_NODELABEL(cpu0), my_pm_hook);</span><br></pre></td></tr></table></figure><h2 id="设备电源管理"><a href="#设备电源管理" class="headerlink" title="设备电源管理"></a>设备电源管理</h2><h3 id="设备电源状态"><a href="#设备电源状态" class="headerlink" title="设备电源状态"></a>设备电源状态</h3><p>设备可以处于以下电源状态：</p><ol><li><strong>PM_DEVICE_STATE_ACTIVE</strong>：设备完全运行</li><li><strong>PM_DEVICE_STATE_LOW_POWER</strong>：设备处于低功耗模式</li><li><strong>PM_DEVICE_STATE_SUSPENDED</strong>：设备挂起</li><li><strong>PM_DEVICE_STATE_OFF</strong>：设备关闭</li></ol><h3 id="设备电源管理-API"><a href="#设备电源管理-API" class="headerlink" title="设备电源管理 API"></a>设备电源管理 API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置设备电源状态</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_device_power_state</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_state_set(dev, PM_DEVICE_STATE_LOW_POWER);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set device power state\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取设备电源状态</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_device_power_state</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">pm_device_state</span> <span class="title">state</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_state_get(dev, &amp;state);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to get device power state\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Device power state: %d\n&quot;</span>, state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设备运行时电源管理"><a href="#设备运行时电源管理" class="headerlink" title="设备运行时电源管理"></a>设备运行时电源管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device_runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用设备运行时电源管理</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enable_device_runtime_pm</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_runtime_enable(dev);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to enable runtime PM\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取设备</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">use_device</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_runtime_get(dev);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to get device\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用设备...</span></span><br><span class="line"></span><br><span class="line">    pm_device_runtime_put(dev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CPU-电源管理"><a href="#CPU-电源管理" class="headerlink" title="CPU 电源管理"></a>CPU 电源管理</h2><h3 id="CPU-空闲状态"><a href="#CPU-空闲状态" class="headerlink" title="CPU 空闲状态"></a>CPU 空闲状态</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 CPU 空闲状态</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">configure_cpu_idle</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 允许 CPU 进入低功耗模式</span></span><br><span class="line">    k_cpu_idle();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 允许 CPU 进入深度睡眠模式</span></span><br><span class="line">    k_cpu_atomic_idle(K_FOREVER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CPU-频率缩放"><a href="#CPU-频率缩放" class="headerlink" title="CPU 频率缩放"></a>CPU 频率缩放</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/policy.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 CPU 频率</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_cpu_frequency</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置 CPU 频率为最大值</span></span><br><span class="line">    pm_policy_state_lock_get(PM_STATE_RUNTIME_IDLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 CPU 频率为最小值</span></span><br><span class="line">    pm_policy_state_lock_put(PM_STATE_RUNTIME_IDLE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时钟管理"><a href="#时钟管理" class="headerlink" title="时钟管理"></a>时钟管理</h2><h3 id="系统时钟管理"><a href="#系统时钟管理" class="headerlink" title="系统时钟管理"></a>系统时钟管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/clock_control.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置系统时钟</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">configure_system_clock</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">clock_dev</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    clock_dev = DEVICE_DT_GET(DT_NODELABEL(clock));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(clock_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Clock device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置时钟频率</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clock_control_subsys</span> <span class="title">subsys</span> =</span> &#123;</span><br><span class="line">        .bus = CLOCK_CONTROL_SUBSYS_SYSTEM,</span><br><span class="line">        .data = (<span class="type">void</span> *)<span class="number">16000000</span>  <span class="comment">// 设置为 16MHz</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ret = clock_control_set_rate(clock_dev, &amp;subsys);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to set clock rate\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外设时钟管理"><a href="#外设时钟管理" class="headerlink" title="外设时钟管理"></a>外设时钟管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/clock_control.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制外设时钟</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">control_peripheral_clock</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">clock_dev</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    clock_dev = DEVICE_DT_GET(DT_NODELABEL(clock));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(clock_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Clock device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用外设时钟</span></span><br><span class="line">    ret = clock_control_on(clock_dev, (<span class="type">clock_control_subsys_t</span>)dev);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to enable peripheral clock\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用外设时钟</span></span><br><span class="line">    ret = clock_control_off(clock_dev, (<span class="type">clock_control_subsys_t</span>)dev);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to disable peripheral clock\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="唤醒源管理"><a href="#唤醒源管理" class="headerlink" title="唤醒源管理"></a>唤醒源管理</h2><h3 id="配置唤醒源"><a href="#配置唤醒源" class="headerlink" title="配置唤醒源"></a>配置唤醒源</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置设备作为唤醒源</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">configure_wakeup_source</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_wakeup_enable(dev, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to enable device as wakeup source\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查设备是否为唤醒源</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">check_wakeup_source</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> is_wakeup_source;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_wakeup_is_enabled(dev, &amp;is_wakeup_source);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to check wakeup source\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Device is %sa wakeup source\n&quot;</span>, is_wakeup_source ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;not &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="唤醒事件处理"><a href="#唤醒事件处理" class="headerlink" title="唤醒事件处理"></a>唤醒事件处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 唤醒事件处理函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">my_wakeup_event_handler</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Wakeup event from device: %s\n&quot;</span>, dev-&gt;name);</span><br><span class="line">    <span class="comment">// 返回 true 表示处理了唤醒事件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册唤醒事件处理函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">register_wakeup_handler</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = pm_device_wakeup_event_register(dev, my_wakeup_event_handler, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to register wakeup event handler\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="电源管理策略"><a href="#电源管理策略" class="headerlink" title="电源管理策略"></a>电源管理策略</h2><h3 id="自定义电源管理策略"><a href="#自定义电源管理策略" class="headerlink" title="自定义电源管理策略"></a>自定义电源管理策略</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/policy.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义自定义电源管理策略</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">enum</span> pm_state <span class="title function_">my_pm_policy</span><span class="params">(<span class="keyword">enum</span> pm_state state)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 根据系统状态决定合适的电源状态</span></span><br><span class="line">    <span class="keyword">if</span> (some_condition) &#123;</span><br><span class="line">        <span class="keyword">return</span> PM_STATE_RUNTIME_IDLE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PM_STATE_SUSPEND_TO_RAM;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义电源管理策略</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">register_custom_pm_policy</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    pm_policy_state_lock_get(PM_ALL_STATES);</span><br><span class="line">    pm_policy_set_custom(my_pm_policy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="电源管理调试"><a href="#电源管理调试" class="headerlink" title="电源管理调试"></a>电源管理调试</h2><h3 id="启用电源管理调试"><a href="#启用电源管理调试" class="headerlink" title="启用电源管理调试"></a>启用电源管理调试</h3><p>在 <code>prj.conf</code> 中启用调试选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_PM_DEBUG=y</span><br></pre></td></tr></table></figure><h3 id="电源状态跟踪"><a href="#电源状态跟踪" class="headerlink" title="电源状态跟踪"></a>电源状态跟踪</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/pm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 电源状态变化回调</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pm_state_change_callback</span><span class="params">(<span class="keyword">enum</span> pm_state state)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Power state changed to: %d\n&quot;</span>, state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册电源状态变化回调</span></span><br><span class="line">PM_STATE_INFO_DEFINE(PM_STATE_SUSPEND_TO_RAM, pm_state_change_callback);</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>系统级优化</strong></p><ul><li>合理配置系统电源状态</li><li>使用电源状态约束避免不必要的深度睡眠</li><li>实现自定义电源管理策略</li></ul></li><li><p><strong>设备级优化</strong></p><ul><li>充分利用设备运行时电源管理</li><li>及时关闭不使用的设备</li><li>合理配置设备唤醒源</li></ul></li><li><p><strong>CPU 优化</strong></p><ul><li>使用 CPU 频率缩放</li><li>在空闲时允许 CPU 进入低功耗模式</li><li>优化中断处理以减少 CPU 唤醒</li></ul></li><li><p><strong>时钟优化</strong></p><ul><li>动态调整系统时钟频率</li><li>关闭不需要的外设时钟</li><li>使用异步通信减少时钟同步需求</li></ul></li><li><p><strong>应用优化</strong></p><ul><li>使用事件驱动编程模型</li><li>批量处理任务减少唤醒次数</li><li>优化算法减少 CPU 使用时间</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>系统无法进入深度睡眠</strong></p><ul><li>检查是否有活跃的电源状态约束</li><li>验证所有设备是否支持目标电源状态</li><li>检查是否有未处理的中断或定时器</li></ul></li><li><p><strong>设备电源管理失败</strong></p><ul><li>确保设备驱动实现了必要的电源管理回调</li><li>检查设备树配置是否正确</li><li>验证设备是否支持目标电源状态</li></ul></li><li><p><strong>唤醒源配置问题</strong></p><ul><li>确保唤醒源设备支持唤醒功能</li><li>检查唤醒源配置是否正确</li><li>验证唤醒事件处理函数是否正确注册</li></ul></li><li><p><strong>功耗高于预期</strong></p><ul><li>使用电源分析工具监控系统功耗</li><li>检查是否有不必要的设备保持活跃状态</li><li>优化应用代码减少 CPU 使用率</li></ul></li><li><p><strong>电源状态切换延迟</strong></p><ul><li>优化电源状态切换回调函数</li><li>减少进入&#x2F;退出低功耗模式的准备工作</li><li>考虑使用更轻量级的低功耗模式</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 的电源管理系统提供了全面的功能，用于优化系统功耗和延长电池寿命。通过合理配置和使用这些功能，可以开发出高效、低功耗的嵌入式应用。深入理解这些电源管理接口对于开发高质量的 Zephyr 应用至关重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-电源管理&quot;&gt;&lt;a href=&quot;#Zephyr-电源管理&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 电源管理&quot;&gt;&lt;/a&gt;Zephyr 电源管理&lt;/h1&gt;&lt;p&gt;Zephyr RTOS 提供了全面的电源管理功能，用于优化系统功耗和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zephyr 设备树指南</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/devicetree/README/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/devicetree/README/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T14:17:37.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-设备树指南"><a href="#Zephyr-设备树指南" class="headerlink" title="Zephyr 设备树指南"></a>Zephyr 设备树指南</h1><h2 id="1-设备树基础"><a href="#1-设备树基础" class="headerlink" title="1. 设备树基础"></a>1. 设备树基础</h2><h3 id="1-1-设备树概述"><a href="#1-1-设备树概述" class="headerlink" title="1.1 设备树概述"></a>1.1 设备树概述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[设备树源文件 .dts] --&gt; B[预处理器]</span><br><span class="line">    B --&gt; C[编译器 dtc]</span><br><span class="line">    C --&gt; D[设备树二进制 .dtb]</span><br><span class="line">    D --&gt; E[内核使用]</span><br></pre></td></tr></table></figure><h3 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基本节点结构 */</span></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">node-name@unit-address</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;address size&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        </span><br><span class="line">        <span class="title class_">child-node</span> <span class="punctuation">&#123;</span></span><br><span class="line">            property1 = <span class="string">&quot;value&quot;</span><span class="punctuation">;</span></span><br><span class="line">            property2 = <span class="params">&lt;numeric-value&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="2-常用节点类型"><a href="#2-常用节点类型" class="headerlink" title="2. 常用节点类型"></a>2. 常用节点类型</h2><h3 id="2-1-CPU节点"><a href="#2-1-CPU节点" class="headerlink" title="2.1 CPU节点"></a>2.1 CPU节点</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">cpus</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">    <span class="meta">#size-cells = &lt;0&gt;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="title class_">cpu@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;cpu&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;arm,cortex-m4f&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">80000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-内存节点"><a href="#2-2-内存节点" class="headerlink" title="2.2 内存节点"></a>2.2 内存节点</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">memory@20000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;memory&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x20000000</span> <span class="number">0x20000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-GPIO控制器"><a href="#2-3-GPIO控制器" class="headerlink" title="2.3 GPIO控制器"></a>2.3 GPIO控制器</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">gpio0:</span> <span class="title class_">gpio@40000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;nordic,nrf-gpio&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="meta">#gpio-cells = &lt;2&gt;;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-串口设备"><a href="#2-4-串口设备" class="headerlink" title="2.4 串口设备"></a>2.4 串口设备</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">uart0:</span> <span class="title class_">uart@40002000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;nordic,nrf-uarte&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40002000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="3-属性定义"><a href="#3-属性定义" class="headerlink" title="3. 属性定义"></a>3. 属性定义</h2><h3 id="3-1-常用属性"><a href="#3-1-常用属性" class="headerlink" title="3.1 常用属性"></a>3.1 常用属性</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">my-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* 基本属性 */</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 中断属性 */</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupt-parent</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;intc</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 时钟属性 */</span></span><br><span class="line">    <span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;clk</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">100000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GPIO属性 */</span></span><br><span class="line">    <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_HIGH&gt;</span><span class="punctuation">;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 自定义属性 */</span></span><br><span class="line">    <span class="attr">my-property</span> <span class="operator">=</span> <span class="string">&quot;custom value&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">my-numbers</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-标签和引用"><a href="#3-2-标签和引用" class="headerlink" title="3.2 标签和引用"></a>3.2 标签和引用</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义标签 */</span></span><br><span class="line"><span class="symbol">uart0:</span> <span class="title class_">uart@40002000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* 节点内容 */</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引用标签 */</span></span><br><span class="line"><span class="title class_">my-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">my-uart</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;uart0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="4-设备树覆盖"><a href="#4-设备树覆盖" class="headerlink" title="4. 设备树覆盖"></a>4. 设备树覆盖</h2><h3 id="4-1-覆盖文件"><a href="#4-1-覆盖文件" class="headerlink" title="4.1 覆盖文件"></a>4.1 覆盖文件</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* board.overlay */</span></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 修改现有节点 */</span></span><br><span class="line">    <span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">230400</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 添加新节点 */</span></span><br><span class="line">    <span class="title class_">new-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,new-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-条件编译"><a href="#4-2-条件编译" class="headerlink" title="4.2 条件编译"></a>4.2 条件编译</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用预处理器指令 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_FEATURE</span></span><br><span class="line">    <span class="title class_">feature-node</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="title class_">feature-node</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;disabled&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="5-设备树绑定"><a href="#5-设备树绑定" class="headerlink" title="5. 设备树绑定"></a>5. 设备树绑定</h2><h3 id="5-1-绑定文件"><a href="#5-1-绑定文件" class="headerlink" title="5.1 绑定文件"></a>5.1 绑定文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dts/bindings/vendor,device.yaml</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">Device</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compatible:</span> <span class="string">&quot;vendor,device&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">reg:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Register</span> <span class="string">address</span> <span class="string">and</span> <span class="string">size</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">interrupts:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Interrupt</span> <span class="string">lines</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">my-property:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Custom</span> <span class="string">property</span></span><br></pre></td></tr></table></figure><h3 id="5-2-绑定示例"><a href="#5-2-绑定示例" class="headerlink" title="5.2 绑定示例"></a>5.2 绑定示例</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用绑定的设备 */</span></span><br><span class="line"><span class="title class_">my-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">2</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">my-property</span> <span class="operator">=</span> <span class="string">&quot;value&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="6-代码中使用设备树"><a href="#6-代码中使用设备树" class="headerlink" title="6. 代码中使用设备树"></a>6. 代码中使用设备树</h2><h3 id="6-1-获取设备"><a href="#6-1-获取设备" class="headerlink" title="6.1 获取设备"></a>6.1 获取设备</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过节点标识符获取设备 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE DT_NODELABEL(my_device)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">device_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    </span><br><span class="line">    dev = DEVICE_DT_GET(MY_DEVICE);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用设备 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-访问属性"><a href="#6-2-访问属性" class="headerlink" title="6.2 访问属性"></a>6.2 访问属性</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取属性值 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE DT_NODELABEL(my_device)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取reg属性 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_BASE_ADDR DT_REG_ADDR(MY_DEVICE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_SIZE DT_REG_SIZE(MY_DEVICE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取其他属性 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_STATUS DT_PROP(MY_DEVICE, status)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_SPEED DT_PROP(MY_DEVICE, current-speed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检查属性是否存在 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DT_NODE_HAS_PROP(MY_DEVICE, my_property)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> MY_PROP DT_PROP(MY_DEVICE, my_property)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="7-实际应用示例"><a href="#7-实际应用示例" class="headerlink" title="7. 实际应用示例"></a>7. 实际应用示例</h2><h3 id="7-1-LED控制器"><a href="#7-1-LED控制器" class="headerlink" title="7.1 LED控制器"></a>7.1 LED控制器</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义LED节点 */</span></span><br><span class="line"><span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">    led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">    led1:</span> <span class="title class_">led_1</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">14</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Red LED 1&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在代码中使用LED */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_NODE DT_ALIAS(led0)</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led0</span> =</span> GPIO_DT_SPEC_GET(LED0_NODE, gpios);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_control</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(led0.port)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    gpio_pin_configure_dt(&amp;led0, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    gpio_pin_toggle_dt(&amp;led0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-传感器配置"><a href="#7-2-传感器配置" class="headerlink" title="7.2 传感器配置"></a>7.2 传感器配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义I2C传感器 */</span></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;I2C_BITRATE_STANDARD&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">    </span></span><br><span class="line"><span class="symbol">    sensor0:</span> <span class="title class_">sensor@48</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,temperature-sensor&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x48</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">int-gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">24</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在代码中使用传感器 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/sensor.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SENSOR_NODE DT_NODELABEL(sensor0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sensor_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sensor_value</span> <span class="title">temp</span>;</span></span><br><span class="line">    </span><br><span class="line">    dev = DEVICE_DT_GET(SENSOR_NODE);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sensor_sample_fetch(dev);</span><br><span class="line">    sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &amp;temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-串口配置"><a href="#7-3-串口配置" class="headerlink" title="7.3 串口配置"></a>7.3 串口配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 配置串口 */</span></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;uart0_default</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">pinctrl-names</span> <span class="operator">=</span> <span class="string">&quot;default&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在代码中使用串口 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_NODE DT_NODELABEL(uart0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uart_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    </span><br><span class="line">    dev = DEVICE_DT_GET(UART_NODE);</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 使用串口 */</span></span><br><span class="line">    <span class="type">uint8_t</span> data[] = <span class="string">&quot;Hello\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(data); i++) &#123;</span><br><span class="line">        uart_poll_out(dev, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-设备树指南&quot;&gt;&lt;a href=&quot;#Zephyr-设备树指南&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 设备树指南&quot;&gt;&lt;/a&gt;Zephyr 设备树指南&lt;/h1&gt;&lt;h2 id=&quot;1-设备树基础&quot;&gt;&lt;a href=&quot;#1-设备树基</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>debugging</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/debugging/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/debugging/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-调试技巧"><a href="#Zephyr-调试技巧" class="headerlink" title="Zephyr 调试技巧"></a>Zephyr 调试技巧</h1><p>本文档提供了在 Zephyr RTOS 中进行应用程序调试的详细指南，包括调试工具链设置、日志系统使用、断点和观察点设置、内存调试以及性能分析等内容。</p><h2 id="调试工具链设置"><a href="#调试工具链设置" class="headerlink" title="调试工具链设置"></a>调试工具链设置</h2><h3 id="安装调试工具"><a href="#安装调试工具" class="headerlink" title="安装调试工具"></a>安装调试工具</h3><ol><li><strong>安装必要的工具</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt install gdb-multiarch openocd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于 ARM 开发</span></span><br><span class="line"><span class="built_in">sudo</span> apt install gcc-arm-none-eabi</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置 OpenOCD</strong></li></ol><p>创建板级配置文件（例如 <code>my_board.cfg</code>）：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择调试适配器</span></span><br><span class="line"><span class="keyword">source</span> [find interface/jlink.cfg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择目标芯片</span></span><br><span class="line"><span class="keyword">source</span> [find target/nrf52.cfg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置时钟速度</span></span><br><span class="line">adapter speed <span class="number">4000</span></span><br></pre></td></tr></table></figure><h3 id="调试环境设置"><a href="#调试环境设置" class="headerlink" title="调试环境设置"></a>调试环境设置</h3><ol><li><strong>构建调试版本</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">west build -b &lt;board&gt; -- -DCMAKE_BUILD_TYPE=Debug</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>启动调试会话</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 west</span></span><br><span class="line">west debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或手动启动</span></span><br><span class="line">openocd -f my_board.cfg</span><br><span class="line">gdb-multiarch build/zephyr/zephyr.elf</span><br></pre></td></tr></table></figure><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><h3 id="配置日志系统"><a href="#配置日志系统" class="headerlink" title="配置日志系统"></a>配置日志系统</h3><p>在 <code>prj.conf</code> 中启用日志功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 启用日志系统</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line"></span><br><span class="line"># 设置日志级别</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3  # INFO</span><br><span class="line"></span><br><span class="line"># 配置后端</span><br><span class="line">CONFIG_LOG_BACKEND_UART=y</span><br><span class="line">CONFIG_LOG_BACKEND_RTT=y</span><br></pre></td></tr></table></figure><h3 id="使用日志-API"><a href="#使用日志-API" class="headerlink" title="使用日志 API"></a>使用日志 API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册日志模块</span></span><br><span class="line">LOG_MODULE_REGISTER(my_module, CONFIG_MY_MODULE_LOG_LEVEL);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_function</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不同级别的日志</span></span><br><span class="line">    LOG_ERR(<span class="string">&quot;Error message&quot;</span>);</span><br><span class="line">    LOG_WRN(<span class="string">&quot;Warning message&quot;</span>);</span><br><span class="line">    LOG_INF(<span class="string">&quot;Info message&quot;</span>);</span><br><span class="line">    LOG_DBG(<span class="string">&quot;Debug message&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的日志</span></span><br><span class="line">    <span class="type">uint32_t</span> value = <span class="number">42</span>;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Value is %d&quot;</span>, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 十六进制数据</span></span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line">    LOG_HEXDUMP_INF(data, <span class="keyword">sizeof</span>(data), <span class="string">&quot;Data buffer:&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日志过滤"><a href="#日志过滤" class="headerlink" title="日志过滤"></a>日志过滤</h3><p>在运行时动态调整日志级别：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置模块日志级别</span></span><br><span class="line">log_filter_set(<span class="literal">NULL</span>, <span class="string">&quot;my_module&quot;</span>, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置实例日志级别</span></span><br><span class="line">log_filter_set(my_instance, <span class="string">&quot;my_module&quot;</span>, LOG_LEVEL_ERR);</span><br></pre></td></tr></table></figure><h2 id="断点和观察点"><a href="#断点和观察点" class="headerlink" title="断点和观察点"></a>断点和观察点</h2><h3 id="GDB-调试命令"><a href="#GDB-调试命令" class="headerlink" title="GDB 调试命令"></a>GDB 调试命令</h3><ol><li><strong>基本命令</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 设置断点</span><br><span class="line">break main</span><br><span class="line">break my_function</span><br><span class="line">break file.c:123</span><br><span class="line"></span><br><span class="line"># 设置条件断点</span><br><span class="line">break file.c:123 if value == 42</span><br><span class="line"></span><br><span class="line"># 设置观察点</span><br><span class="line">watch my_variable</span><br><span class="line">rwatch my_variable  # 读观察点</span><br><span class="line">awatch my_variable  # 读写观察点</span><br><span class="line"></span><br><span class="line"># 执行控制</span><br><span class="line">continue</span><br><span class="line">step</span><br><span class="line">next</span><br><span class="line">finish</span><br><span class="line"></span><br><span class="line"># 检查变量</span><br><span class="line">print my_variable</span><br><span class="line">print/x my_variable  # 十六进制显示</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>高级命令</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 查看线程</span><br><span class="line">info threads</span><br><span class="line">thread &lt;number&gt;</span><br><span class="line"></span><br><span class="line"># 查看调用栈</span><br><span class="line">backtrace</span><br><span class="line">frame &lt;number&gt;</span><br><span class="line"></span><br><span class="line"># 查看内存</span><br><span class="line">x/10x 0x20000000  # 显示 10 个字节的内存</span><br><span class="line">x/s 0x20000000    # 显示字符串</span><br><span class="line"></span><br><span class="line"># 修改变量</span><br><span class="line">set my_variable = 42</span><br></pre></td></tr></table></figure><h3 id="使用-VSCode-调试"><a href="#使用-VSCode-调试" class="headerlink" title="使用 VSCode 调试"></a>使用 VSCode 调试</h3><p>配置 <code>.vscode/launch.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Zephyr Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cortex-debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;servertype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openocd&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;executable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build/zephyr/zephyr.elf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;configFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;board/my_board.cfg&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;svdFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nrf52.svd&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="内存调试"><a href="#内存调试" class="headerlink" title="内存调试"></a>内存调试</h2><h3 id="内存监控"><a href="#内存监控" class="headerlink" title="内存监控"></a>内存监控</h3><ol><li><strong>启用内存统计</strong></li></ol><p>在 <code>prj.conf</code> 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=16384</span><br><span class="line">CONFIG_HEAP_LISTENER=y</span><br><span class="line">CONFIG_HEAP_LISTENER_LOG=y</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用内存监控 API</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/heap_listener.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">heap_alloc_cb</span><span class="params">(<span class="type">uintptr_t</span> heap_id, <span class="type">void</span> *mem, <span class="type">size_t</span> bytes)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Allocated %zu bytes at %p\n&quot;</span>, bytes, mem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">heap_free_cb</span><span class="params">(<span class="type">uintptr_t</span> heap_id, <span class="type">void</span> *mem, <span class="type">size_t</span> bytes)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Freed %zu bytes at %p\n&quot;</span>, bytes, mem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册监听器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heap_listener</span> <span class="title">my_listener</span> =</span> &#123;</span><br><span class="line">    .alloc_cb = heap_alloc_cb,</span><br><span class="line">    .free_cb = heap_free_cb</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">heap_listener_register(&amp;my_listener);</span><br></pre></td></tr></table></figure><h3 id="内存泄漏检测"><a href="#内存泄漏检测" class="headerlink" title="内存泄漏检测"></a>内存泄漏检测</h3><p>使用 Zephyr 的内存泄漏检测功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_DEBUG_HEAP_MEM_POOL=y</span><br></pre></td></tr></table></figure><h3 id="栈溢出检测"><a href="#栈溢出检测" class="headerlink" title="栈溢出检测"></a>栈溢出检测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_STACK_SENTINEL=y</span><br><span class="line">CONFIG_STACK_CANARIES=y</span><br></pre></td></tr></table></figure><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="系统监控"><a href="#系统监控" class="headerlink" title="系统监控"></a>系统监控</h3><ol><li><strong>启用统计功能</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_THREAD_RUNTIME_STATS=y</span><br><span class="line">CONFIG_THREAD_MONITOR=y</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用统计 API</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_thread_stats</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_thread_runtime_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">    k_thread_runtime_stats_get(k_current_get(), &amp;stats);</span><br><span class="line">    printk(<span class="string">&quot;Execution cycles: %llu\n&quot;</span>, stats.execution_cycles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能计数器"><a href="#性能计数器" class="headerlink" title="性能计数器"></a>性能计数器</h3><ol><li><strong>使用内核时间 API</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">measure_performance</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> start_time = k_cycle_get_32();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行要测量的代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">uint32_t</span> end_time = k_cycle_get_32();</span><br><span class="line">    <span class="type">uint32_t</span> cycles = end_time - start_time;</span><br><span class="line">    printk(<span class="string">&quot;Operation took %u cycles\n&quot;</span>, cycles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用性能计数器</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/counter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">use_hardware_counter</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">counter_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(timer0));</span><br><span class="line">    <span class="type">uint32_t</span> start, end;</span><br><span class="line">    </span><br><span class="line">    counter_get_value(counter_dev, &amp;start);</span><br><span class="line">    <span class="comment">// 执行要测量的代码</span></span><br><span class="line">    counter_get_value(counter_dev, &amp;end);</span><br><span class="line">    </span><br><span class="line">    printk(<span class="string">&quot;Operation took %u ticks\n&quot;</span>, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级调试技巧"><a href="#高级调试技巧" class="headerlink" title="高级调试技巧"></a>高级调试技巧</h2><h3 id="1-系统视图跟踪"><a href="#1-系统视图跟踪" class="headerlink" title="1. 系统视图跟踪"></a>1. 系统视图跟踪</h3><p>使用 SEGGER SystemView：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_SEGGER_SYSTEMVIEW=y</span><br><span class="line">CONFIG_TRACING=y</span><br></pre></td></tr></table></figure><h3 id="2-核心转储"><a href="#2-核心转储" class="headerlink" title="2. 核心转储"></a>2. 核心转储</h3><p>配置核心转储功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_DEBUG_COREDUMP=y</span><br><span class="line">CONFIG_DEBUG_COREDUMP_BACKEND_LOGGING=y</span><br></pre></td></tr></table></figure><h3 id="3-远程调试"><a href="#3-远程调试" class="headerlink" title="3. 远程调试"></a>3. 远程调试</h3><p>设置网络调试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在 prj.conf 中启用</span><br><span class="line">CONFIG_NET_DEBUG_NET_PKT=y</span><br><span class="line">CONFIG_NET_LOG=y</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>调试准备</strong></p><ul><li>使用 Debug 构建类型</li><li>启用适当的调试功能</li><li>保留调试符号</li></ul></li><li><p><strong>日志使用</strong></p><ul><li>合理设置日志级别</li><li>使用有意义的日志消息</li><li>避免过多日志影响性能</li></ul></li><li><p><strong>断点策略</strong></p><ul><li>使用条件断点减少中断</li><li>在关键路径设置断点</li><li>合理使用观察点</li></ul></li><li><p><strong>内存调试</strong></p><ul><li>定期检查内存使用情况</li><li>注意内存对齐要求</li><li>监控栈使用情况</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>使用性能计数器识别瓶颈</li><li>优化关键路径代码</li><li>监控中断延迟</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>无法连接调试器</strong></p><ul><li>检查硬件连接</li><li>验证调试器驱动</li><li>确认 OpenOCD 配置</li></ul></li><li><p><strong>断点不触发</strong></p><ul><li>检查代码是否优化</li><li>验证断点位置</li><li>确认调试符号存在</li></ul></li><li><p><strong>内存问题</strong></p><ul><li>使用内存监控工具</li><li>检查栈大小配置</li><li>验证内存分配</li></ul></li><li><p><strong>性能问题</strong></p><ul><li>使用性能分析工具</li><li>检查中断处理</li><li>优化内存访问</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>调试是嵌入式开发中不可或缺的一部分。通过合理使用 Zephyr 提供的调试工具和功能，可以有效地定位和解决问题。记住要根据具体情况选择合适的调试方法，并在开发过程中保持良好的调试习惯。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-调试技巧&quot;&gt;&lt;a href=&quot;#Zephyr-调试技巧&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 调试技巧&quot;&gt;&lt;/a&gt;Zephyr 调试技巧&lt;/h1&gt;&lt;p&gt;本文档提供了在 Zephyr RTOS 中进行应用程序调试的详细指南</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>devicetree</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/devicetree/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/devicetree/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-设备树配置"><a href="#Zephyr-设备树配置" class="headerlink" title="Zephyr 设备树配置"></a>Zephyr 设备树配置</h1><p>本文档详细介绍了 Zephyr RTOS 的设备树配置系统，包括基本概念、节点和属性、绑定文件以及覆盖文件的使用方法。</p><h2 id="设备树基础"><a href="#设备树基础" class="headerlink" title="设备树基础"></a>设备树基础</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>设备树是描述硬件配置的数据结构，它以层次化的方式表示系统中的硬件设备及其属性。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基本节点结构 */</span></span><br><span class="line"><span class="title class_">node-name@unit-address</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;address size&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    property1 = <span class="params">&lt;value1&gt;</span><span class="punctuation">;</span></span><br><span class="line">    property2 = <span class="string">&quot;string-value&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">    <span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">child-node</span> <span class="punctuation">&#123;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ol><li><strong>compatible</strong>：标识设备类型和驱动程序</li><li><strong>reg</strong>：设备寄存器地址和大小</li><li><strong>status</strong>：设备状态（”okay”、”disabled”）</li><li><strong>label</strong>：设备标签</li><li><strong>interrupts</strong>：中断配置</li><li><strong>clocks</strong>：时钟配置</li><li><strong>gpios</strong>：GPIO 配置</li></ol><h2 id="节点和属性"><a href="#节点和属性" class="headerlink" title="节点和属性"></a>节点和属性</h2><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><ol><li><p><strong>根节点 (&#x2F;)</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">model</span> <span class="operator">=</span> <span class="string">&quot;Board Name&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,board&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">    <span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>总线节点</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">i2c@40003000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,i2c&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40003000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">    <span class="meta">#size-cells = &lt;0&gt;;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设备节点</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">sensor@48</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,sensor&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x48</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">int-gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">24</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><ol><li><p><strong>整数属性</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">24</span> <span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">100000</span>&gt;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>字符串属性</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,device&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;UART_0&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>布尔属性</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hw-flow-control</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">auto-enable</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组属性</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwms</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;pwm0</span> <span class="number">0</span> <span class="number">1000000</span> PWM_POLARITY_NORMAL&gt;</span>,</span><br><span class="line">       <span class="params">&lt;<span class="variable">&amp;pwm1</span> <span class="number">1</span> <span class="number">2000000</span> PWM_POLARITY_INVERTED&gt;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>引用属性（phandle）</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;clk_ctrl</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">dmas</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;dma0</span> <span class="number">0</span> <span class="variable">&amp;dma0</span> <span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="绑定文件"><a href="#绑定文件" class="headerlink" title="绑定文件"></a>绑定文件</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">Device</span> <span class="string">Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compatible:</span> <span class="string">&quot;vendor,my-device&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">include:</span> <span class="string">base.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">reg:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">registers</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">interrupts:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">interrupts</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">clock-frequency:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">        <span class="attr">default:</span> <span class="number">100000</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Clock</span> <span class="string">frequency</span> <span class="string">in</span> <span class="string">Hz</span></span><br><span class="line"></span><br><span class="line"><span class="attr">child-binding:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Child</span> <span class="string">node</span> <span class="string">properties</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">reg:</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">Child</span> <span class="string">address</span></span><br></pre></td></tr></table></figure><h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><ol><li><p><strong>基本属性</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">my-property:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Property</span> <span class="string">description</span></span><br></pre></td></tr></table></figure></li><li><p><strong>枚举属性</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">operation-mode:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">enum:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;normal&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;fast&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;slow&quot;</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Operating</span> <span class="string">mode</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组属性</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">pin-config:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Pin</span> <span class="string">configuration</span></span><br></pre></td></tr></table></figure></li><li><p><strong>GPIO 属性</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">enable-gpios:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">phandle-array</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Enable</span> <span class="string">GPIO</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="约束定义"><a href="#约束定义" class="headerlink" title="约束定义"></a>约束定义</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">min-frequency:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">            <span class="attr">min:</span> <span class="number">1000</span></span><br><span class="line">            <span class="attr">max:</span> <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">supported-modes:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">            <span class="attr">min-items:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">max-items:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="覆盖文件"><a href="#覆盖文件" class="headerlink" title="覆盖文件"></a>覆盖文件</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li><p><strong>应用程序覆盖文件 (app.overlay)</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 修改现有节点 */</span></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">400000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加新设备 */</span></span><br><span class="line">    <span class="title class_">sensor@48</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,sensor&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x48</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加新节点 */</span></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">my-device</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>板级覆盖文件 (board.overlay)</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 禁用设备 */</span></span><br><span class="line"><span class="variable">&amp;uart1</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;disabled&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改 GPIO 配置 */</span></span><br><span class="line"><span class="variable">&amp;gpio0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">ngpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="常用修改"><a href="#常用修改" class="headerlink" title="常用修改"></a>常用修改</h3><ol><li><p><strong>修改时钟频率</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">400000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 GPIO</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;gpio0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">ngpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">32</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">gpio-reserved-ranges</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">10</span> <span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>添加设备</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>修改中断配置</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">3</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupt-names</span> <span class="operator">=</span> <span class="string">&quot;rx&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="使用设备树"><a href="#使用设备树" class="headerlink" title="使用设备树"></a>使用设备树</h2><h3 id="在代码中访问"><a href="#在代码中访问" class="headerlink" title="在代码中访问"></a>在代码中访问</h3><ol><li><p><strong>检查节点状态</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_NODE DT_ALIAS(led0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !DT_NODE_HAS_STATUS(LED0_NODE, okay)</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;LED device not enabled&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取属性值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取寄存器地址 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_ADDR DT_REG_ADDR(DT_NODELABEL(uart0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取中断号 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_IRQ DT_IRQN(DT_NODELABEL(uart0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取时钟频率 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_FREQ DT_PROP(DT_NODELABEL(i2c0), clock_frequency)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>获取 GPIO 信息</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义 GPIO 规范 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led</span> =</span></span><br><span class="line">    GPIO_DT_SPEC_GET(DT_NODELABEL(led0), gpios);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 GPIO */</span></span><br><span class="line"><span class="keyword">if</span> (!device_is_ready(led.port)) &#123;</span><br><span class="line">    <span class="keyword">return</span> -ENODEV;</span><br><span class="line">&#125;</span><br><span class="line">gpio_pin_configure_dt(&amp;led, GPIO_OUTPUT_ACTIVE);</span><br></pre></td></tr></table></figure></li><li><p><strong>遍历节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 遍历所有 I2C 设备 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOREACH_I2C_DEVICE(node_id) \</span></span><br><span class="line"><span class="meta">    DT_FOREACH_CHILD(DT_NODELABEL(i2c0), node_id)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROCESS_I2C_DEVICE(node_id) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> (DT_NODE_HAS_STATUS(node_id, okay)) &#123; \</span></span><br><span class="line"><span class="meta">            <span class="comment">/* 处理设备 */</span> \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while (0)</span></span><br><span class="line"></span><br><span class="line">FOREACH_I2C_DEVICE(PROCESS_I2C_DEVICE);</span><br></pre></td></tr></table></figure></li></ol><h3 id="编译时检查"><a href="#编译时检查" class="headerlink" title="编译时检查"></a>编译时检查</h3><ol><li><p><strong>节点存在性检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ASSERT(DT_NODE_EXISTS(DT_NODELABEL(i2c0)),</span><br><span class="line">            <span class="string">&quot;I2C0 node not found&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>属性检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ASSERT(DT_NODE_HAS_PROP(DT_NODELABEL(uart0), current_speed),</span><br><span class="line">            <span class="string">&quot;UART speed not configured&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>兼容性检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD_ASSERT(DT_HAS_COMPAT_STATUS_OKAY(vendor_device),</span><br><span class="line">            <span class="string">&quot;Required device not found&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><h3 id="1-查看处理后的设备树"><a href="#1-查看处理后的设备树" class="headerlink" title="1. 查看处理后的设备树"></a>1. 查看处理后的设备树</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成预处理后的设备树</span></span><br><span class="line">west build -t devicetree_preprocessed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最终的设备树</span></span><br><span class="line">west build -t devicetree_generated</span><br></pre></td></tr></table></figure><h3 id="2-验证设备树语法"><a href="#2-验证设备树语法" class="headerlink" title="2. 验证设备树语法"></a>2. 验证设备树语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 dtc 工具验证</span></span><br><span class="line">dtc -I dts -O dts -o /dev/null build/zephyr/zephyr.dts</span><br></pre></td></tr></table></figure><h3 id="3-检查节点路径"><a href="#3-检查节点路径" class="headerlink" title="3. 检查节点路径"></a>3. 检查节点路径</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在代码中打印节点路径 */</span></span><br><span class="line">LOG_INF(<span class="string">&quot;Node path: %s&quot;</span>, DT_NODE_PATH(DT_NODELABEL(my_device)));</span><br></pre></td></tr></table></figure><h3 id="4-调试绑定问题"><a href="#4-调试绑定问题" class="headerlink" title="4. 调试绑定问题"></a>4. 调试绑定问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看绑定警告</span></span><br><span class="line">west build -t devicetree_generated -- -DDTC_WARN_UNDEFINED_BINDING=y</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-设备树组织"><a href="#1-设备树组织" class="headerlink" title="1. 设备树组织"></a>1. 设备树组织</h3><ul><li>使用逻辑分组</li><li>保持结构清晰</li><li>适当使用标签</li><li>文档化配置</li></ul><h3 id="2-属性命名"><a href="#2-属性命名" class="headerlink" title="2. 属性命名"></a>2. 属性命名</h3><ul><li>使用标准属性名</li><li>遵循命名约定</li><li>清晰描述用途</li><li>添加适当注释</li></ul><h3 id="3-覆盖文件使用"><a href="#3-覆盖文件使用" class="headerlink" title="3. 覆盖文件使用"></a>3. 覆盖文件使用</h3><ul><li>最小化修改</li><li>保持兼容性</li><li>文档化更改</li><li>验证修改效果</li></ul><h3 id="4-代码集成"><a href="#4-代码集成" class="headerlink" title="4. 代码集成"></a>4. 代码集成</h3><ul><li>使用设备树宏</li><li>验证配置</li><li>错误处理</li><li>维护性考虑</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-节点不可见"><a href="#1-节点不可见" class="headerlink" title="1. 节点不可见"></a>1. 节点不可见</h3><p><strong>问题</strong>：无法访问设备树节点</p><p><strong>解决方案</strong>：</p><ul><li>检查节点状态</li><li>验证路径正确</li><li>确认编译选项</li><li>检查依赖关系</li></ul><h3 id="2-属性访问错误"><a href="#2-属性访问错误" class="headerlink" title="2. 属性访问错误"></a>2. 属性访问错误</h3><p><strong>问题</strong>：无法获取属性值</p><p><strong>解决方案</strong>：</p><ul><li>检查属性类型</li><li>验证属性存在</li><li>确认访问方法</li><li>检查绑定文件</li></ul><h3 id="3-绑定问题"><a href="#3-绑定问题" class="headerlink" title="3. 绑定问题"></a>3. 绑定问题</h3><p><strong>问题</strong>：绑定文件不生效</p><p><strong>解决方案</strong>：</p><ul><li>检查文件位置</li><li>验证语法正确</li><li>确认兼容性字符串</li><li>更新构建系统</li></ul><h3 id="4-覆盖冲突"><a href="#4-覆盖冲突" class="headerlink" title="4. 覆盖冲突"></a>4. 覆盖冲突</h3><p><strong>问题</strong>：覆盖文件冲突</p><p><strong>解决方案</strong>：</p><ul><li>检查优先级</li><li>解决冲突</li><li>统一配置</li><li>文档化选择</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>设备树是 Zephyr RTOS 中描述硬件配置的核心机制。通过正确使用节点、属性、绑定文件和覆盖文件，可以灵活地配置和管理硬件资源。本文档提供了详细的指导和实例，帮助开发者更好地理解和使用设备树系统。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-设备树配置&quot;&gt;&lt;a href=&quot;#Zephyr-设备树配置&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 设备树配置&quot;&gt;&lt;/a&gt;Zephyr 设备树配置&lt;/h1&gt;&lt;p&gt;本文档详细介绍了 Zephyr RTOS 的设备树配置系统，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>driver</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/driver/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/driver/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-驱动开发指南"><a href="#Zephyr-驱动开发指南" class="headerlink" title="Zephyr 驱动开发指南"></a>Zephyr 驱动开发指南</h1><p>本文档提供了在 Zephyr RTOS 中开发设备驱动程序的详细指南。它涵盖了驱动模型概述、设备树使用、驱动 API 实现以及驱动测试和调试的方法。</p><h2 id="驱动模型概述"><a href="#驱动模型概述" class="headerlink" title="驱动模型概述"></a>驱动模型概述</h2><p>Zephyr 的驱动模型基于以下核心概念：</p><ol><li><strong>设备</strong>：表示硬件或软件实体</li><li><strong>驱动</strong>：实现设备操作的代码</li><li><strong>API</strong>：定义设备操作的标准接口</li><li><strong>设备树</strong>：描述硬件配置的数据结构</li></ol><h3 id="驱动结构"><a href="#驱动结构" class="headerlink" title="驱动结构"></a>驱动结构</h3><p>典型的 Zephyr 驱动程序包括以下组件：</p><ol><li><strong>驱动 API 结构体</strong>：定义设备操作函数</li><li><strong>设备配置结构体</strong>：存储设备的静态配置</li><li><strong>设备数据结构体</strong>：存储设备的运行时数据</li><li><strong>初始化函数</strong>：执行设备初始化</li><li><strong>API 实现函数</strong>：实现具体的设备操作</li></ol><h2 id="设备树使用"><a href="#设备树使用" class="headerlink" title="设备树使用"></a>设备树使用</h2><p>设备树用于描述硬件配置，驱动程序可以从中获取必要的信息。</p><h3 id="设备树节点示例"><a href="#设备树节点示例" class="headerlink" title="设备树节点示例"></a>设备树节点示例</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">my_device:</span> <span class="title class_">my_device@40000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">10</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;MY_DEVICE&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="在驱动中访问设备树信息"><a href="#在驱动中访问设备树信息" class="headerlink" title="在驱动中访问设备树信息"></a>在驱动中访问设备树信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/devicetree.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_NODE DT_NODELABEL(my_device)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取寄存器地址</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_BASE_ADDR DT_REG_ADDR(MY_DEVICE_NODE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取中断信息</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_IRQ DT_IRQN(MY_DEVICE_NODE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_IRQ_PRIO DT_IRQ(MY_DEVICE_NODE, priority)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查设备状态</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DT_NODE_HAS_STATUS(MY_DEVICE_NODE, okay)</span></span><br><span class="line"><span class="comment">// 设备已启用</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="驱动-API-实现"><a href="#驱动-API-实现" class="headerlink" title="驱动 API 实现"></a>驱动 API 实现</h2><h3 id="1-定义-API-结构体"><a href="#1-定义-API-结构体" class="headerlink" title="1. 定义 API 结构体"></a>1. 定义 API 结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*init)(<span class="type">const</span> <span class="keyword">struct</span> device *dev);</span><br><span class="line">    <span class="type">int</span> (*read)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> *data);</span><br><span class="line">    <span class="type">int</span> (*write)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-实现-API-函数"><a href="#2-实现-API-函数" class="headerlink" title="2. 实现 API 函数"></a>2. 实现 API 函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 初始化代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_read</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> <span class="title">my_driver_api</span> =</span> &#123;</span><br><span class="line">    .init = my_device_init,</span><br><span class="line">    .read = my_device_read,</span><br><span class="line">    .write = my_device_write,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-定义设备配置和数据结构"><a href="#3-定义设备配置和数据结构" class="headerlink" title="3. 定义设备配置和数据结构"></a>3. 定义设备配置和数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_device_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> irq;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_device_data</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> current_value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-实现初始化函数"><a href="#4-实现初始化函数" class="headerlink" title="4. 实现初始化函数"></a>4. 实现初始化函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_device_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_device_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用配置信息初始化设备</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-注册设备"><a href="#5-注册设备" class="headerlink" title="5. 注册设备"></a>5. 注册设备</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DEVICE_INIT(n)                                             \</span></span><br><span class="line"><span class="meta">    static const struct my_device_config my_device_config_##n = &#123;     \</span></span><br><span class="line"><span class="meta">        .base_addr = DT_INST_REG_ADDR(n),                             \</span></span><br><span class="line"><span class="meta">        .irq = DT_INST_IRQN(n),                                       \</span></span><br><span class="line"><span class="meta">    &#125;;                                                                \</span></span><br><span class="line"><span class="meta">                                                                      \</span></span><br><span class="line"><span class="meta">    static struct my_device_data my_device_data_##n;                  \</span></span><br><span class="line"><span class="meta">                                                                      \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(n,                                          \</span></span><br><span class="line"><span class="meta">                          my_device_init,                             \</span></span><br><span class="line"><span class="meta">                          NULL,                                       \</span></span><br><span class="line"><span class="meta">                          &amp;my_device_data_##n,                        \</span></span><br><span class="line"><span class="meta">                          &amp;my_device_config_##n,                      \</span></span><br><span class="line"><span class="meta">                          POST_KERNEL,                                \</span></span><br><span class="line"><span class="meta">                          CONFIG_KERNEL_INIT_PRIORITY_DEVICE,         \</span></span><br><span class="line"><span class="meta">                          &amp;my_driver_api);</span></span><br><span class="line"></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_DEVICE_INIT)</span><br></pre></td></tr></table></figure><h2 id="驱动测试和调试"><a href="#驱动测试和调试" class="headerlink" title="驱动测试和调试"></a>驱动测试和调试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>使用 Zephyr 的测试框架为驱动程序编写单元测试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/my_driver.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">test_my_driver_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_device));</span><br><span class="line">    zassert_true(device_is_ready(dev), <span class="string">&quot;Device not ready&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">test_my_driver_read</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_device));</span><br><span class="line">    <span class="type">uint32_t</span> data;</span><br><span class="line">    <span class="type">int</span> ret = my_driver_read(dev, &amp;data);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;Read failed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZTEST(my_driver_tests, test_my_driver_init);</span><br><span class="line">ZTEST(my_driver_tests, test_my_driver_read);</span><br><span class="line"></span><br><span class="line">ZTEST_SUITE(my_driver_tests, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h3><ol><li><strong>使用日志系统</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(my_driver, CONFIG_MY_DRIVER_LOG_LEVEL);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Initializing my device&quot;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用断言</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/__assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">uint32_t</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    __ASSERT(dev != <span class="literal">NULL</span>, <span class="string">&quot;Device pointer is NULL&quot;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>使用 GDB 调试</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">west build -b &lt;board&gt; -- -DCMAKE_BUILD_TYPE=Debug</span><br><span class="line">west debug</span><br></pre></td></tr></table></figure><h2 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h2><h3 id="1-电源管理集成"><a href="#1-电源管理集成" class="headerlink" title="1. 电源管理集成"></a>1. 电源管理集成</h3><p>实现电源管理回调：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_pm_action</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                               <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">// 唤醒设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">// 挂起设备</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PM_DEVICE_DT_INST_DEFINE(<span class="number">0</span>, my_device_pm_action);</span><br></pre></td></tr></table></figure><h3 id="2-DMA-支持"><a href="#2-DMA-支持" class="headerlink" title="2. DMA 支持"></a>2. DMA 支持</h3><p>使用 Zephyr 的 DMA API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_dma_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                  <span class="type">uint32_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;</span><br><span class="line">        .channel_direction = MEMORY_TO_PERIPHERAL,</span><br><span class="line">        .source_data_size = <span class="number">4</span>,</span><br><span class="line">        .dest_data_size = <span class="number">4</span>,</span><br><span class="line">        .source_burst_length = <span class="number">4</span>,</span><br><span class="line">        .dest_burst_length = <span class="number">4</span>,</span><br><span class="line">        .dma_callback = dma_callback,</span><br><span class="line">        .user_data = (<span class="type">void</span> *)dev,</span><br><span class="line">        .complete_callback_en = <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block</span> =</span> &#123;</span><br><span class="line">        .source_address = (<span class="type">uint32_t</span>)data,</span><br><span class="line">        .dest_address = MY_DEVICE_BASE_ADDR,</span><br><span class="line">        .block_size = size,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    dma_cfg.head_block = &amp;dma_block;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-中断处理"><a href="#3-中断处理" class="headerlink" title="3. 中断处理"></a>3. 中断处理</h3><p>配置和处理中断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/irq.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">my_device_isr</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_device_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="comment">// 处理中断</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_device_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_device_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line"></span><br><span class="line">    IRQ_CONNECT(config-&gt;irq, config-&gt;irq_prio, my_device_isr,</span><br><span class="line">                DEVICE_GET(my_device), <span class="number">0</span>);</span><br><span class="line">    irq_enable(config-&gt;irq);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>模块化设计</strong></p><ul><li>将功能分解为小型、可重用的函数</li><li>使用清晰的接口分离关注点</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>始终检查返回值并处理错误</li><li>使用有意义的错误代码</li></ul></li><li><p><strong>配置灵活性</strong></p><ul><li>尽可能使用设备树进行配置</li><li>提供运行时配置选项</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>最小化关键路径上的操作</li><li>考虑使用 DMA 进行大数据传输</li></ul></li><li><p><strong>可移植性</strong></p><ul><li>使用 Zephyr 的抽象 API</li><li>避免直接访问硬件寄存器</li></ul></li><li><p><strong>文档</strong></p><ul><li>为 API 函数提供清晰的文档</li><li>包含使用示例和注意事项</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>设备初始化失败</strong></p><ul><li>检查设备树配置</li><li>验证硬件连接</li><li>确保依赖的时钟和电源已启用</li></ul></li><li><p><strong>中断不工作</strong></p><ul><li>检查中断配置（IRQ 号、优先级）</li><li>验证中断处理函数是否正确注册</li><li>检查中断是否已启用</li></ul></li><li><p><strong>DMA 传输问题</strong></p><ul><li>验证 DMA 通道配置</li><li>检查内存对齐要求</li><li>确保源和目标地址正确</li></ul></li><li><p><strong>电源管理问题</strong></p><ul><li>检查电源管理回调是否正确实现</li><li>验证设备状态转换逻辑</li><li>测试不同电源状态下的设备行为</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开发 Zephyr 驱动程序需要深入理解硬件特性和 Zephyr 的驱动模型。通过遵循本指南中的最佳实践和建议，您可以开发出高质量、可靠的设备驱动程序。记住要充分利用 Zephyr 提供的抽象和工具，如设备树、电源管理和 DMA 支持，以创建灵活、高效的驱动程序。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-驱动开发指南&quot;&gt;&lt;a href=&quot;#Zephyr-驱动开发指南&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 驱动开发指南&quot;&gt;&lt;/a&gt;Zephyr 驱动开发指南&lt;/h1&gt;&lt;p&gt;本文档提供了在 Zephyr RTOS 中开发设备驱</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>drivers</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/drivers/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/drivers/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-驱动开发"><a href="#Zephyr-驱动开发" class="headerlink" title="Zephyr 驱动开发"></a>Zephyr 驱动开发</h1><p>本文档详细介绍了 Zephyr RTOS 的驱动开发过程，包括驱动模型、API 设计、设备树绑定以及实际示例。</p><h2 id="驱动模型"><a href="#驱动模型" class="headerlink" title="驱动模型"></a>驱动模型</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Zephyr 的驱动模型基于以下核心概念：</p><ol><li><strong>设备对象</strong>：表示硬件设备的软件抽象</li><li><strong>驱动 API</strong>：定义设备操作接口</li><li><strong>设备树</strong>：描述硬件配置</li><li><strong>设备实例</strong>：运行时的设备表示</li></ol><h3 id="驱动结构"><a href="#驱动结构" class="headerlink" title="驱动结构"></a>驱动结构</h3><p>典型的驱动程序包含以下部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 驱动 API 定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*init)(<span class="type">const</span> <span class="keyword">struct</span> device *dev);</span><br><span class="line">    <span class="type">int</span> (*read)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">void</span> *buf, <span class="type">size_t</span> len);</span><br><span class="line">    <span class="type">int</span> (*write)(<span class="type">const</span> <span class="keyword">struct</span> device *dev, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备数据结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> config_value;</span><br><span class="line">    <span class="type">uint8_t</span> status;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备配置结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> irq_num;</span><br><span class="line">    <span class="type">uint32_t</span> clock_freq;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动实例化 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DRIVER_INIT(n)                                            \</span></span><br><span class="line"><span class="meta">    static struct my_driver_data my_driver_data_##n = &#123;             \</span></span><br><span class="line"><span class="meta">        .status = 0,                                                \</span></span><br><span class="line"><span class="meta">    &#125;;                                                              \</span></span><br><span class="line"><span class="meta">                                                                    \</span></span><br><span class="line"><span class="meta">    static const struct my_driver_config my_driver_config_##n = &#123;   \</span></span><br><span class="line"><span class="meta">        .base_addr = DT_INST_REG_ADDR(n),                          \</span></span><br><span class="line"><span class="meta">        .irq_num = DT_INST_IRQN(n),                                \</span></span><br><span class="line"><span class="meta">        .clock_freq = DT_INST_PROP(n, clock_frequency),            \</span></span><br><span class="line"><span class="meta">    &#125;;                                                              \</span></span><br><span class="line"><span class="meta">                                                                    \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(n,                                       \</span></span><br><span class="line"><span class="meta">                         my_driver_init,                            \</span></span><br><span class="line"><span class="meta">                         NULL,                                      \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_data_##n,                       \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_config_##n,                     \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                               \</span></span><br><span class="line"><span class="meta">                         CONFIG_KERNEL_INIT_PRIORITY_DEVICE,        \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_api);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为每个实例生成代码 */</span></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_DRIVER_INIT)</span><br></pre></td></tr></table></figure><h2 id="驱动-API"><a href="#驱动-API" class="headerlink" title="驱动 API"></a>驱动 API</h2><h3 id="API-设计原则"><a href="#API-设计原则" class="headerlink" title="API 设计原则"></a>API 设计原则</h3><ol><li><p><strong>一致性</strong></p><ul><li>遵循 Zephyr API 命名约定</li><li>保持参数顺序一致</li><li>使用统一的错误码</li></ul></li><li><p><strong>可重入性</strong></p><ul><li>保护共享资源</li><li>避免全局变量</li><li>使用线程安全机制</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>返回有意义的错误码</li><li>提供详细的错误信息</li><li>实现错误恢复机制</li></ul></li></ol><h3 id="API-实现示例"><a href="#API-实现示例" class="headerlink" title="API 实现示例"></a>API 实现示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 驱动初始化函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化同步原语 */</span></span><br><span class="line">    k_sem_init(&amp;data-&gt;lock, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置硬件 */</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读取函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_read</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                         <span class="type">void</span> *buf, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取锁 */</span></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行读取操作 */</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放锁 */</span></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写入函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取锁 */</span></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行写入操作 */</span></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放锁 */</span></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* API 结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> <span class="title">my_driver_api</span> =</span> &#123;</span><br><span class="line">    .init = my_driver_init,</span><br><span class="line">    .read = my_driver_read,</span><br><span class="line">    .write = my_driver_write,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="设备树绑定"><a href="#设备树绑定" class="headerlink" title="设备树绑定"></a>设备树绑定</h2><h3 id="绑定文件"><a href="#绑定文件" class="headerlink" title="绑定文件"></a>绑定文件</h3><p>设备树绑定文件 (*.yaml) 定义了设备的属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">Device</span> <span class="string">Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compatible:</span> <span class="string">&quot;vendor,my-device&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">include:</span> <span class="string">base.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">    <span class="attr">reg:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">registers</span> <span class="string">location</span> <span class="string">and</span> <span class="string">length</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">interrupts:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">interrupt</span> <span class="string">lines</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">clock-frequency:</span></span><br><span class="line">        <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">Device</span> <span class="string">clock</span> <span class="string">frequency</span> <span class="string">in</span> <span class="string">Hz</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">enable-gpios:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">phandle-array</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">GPIO</span> <span class="string">for</span> <span class="string">device</span> <span class="string">enable</span> <span class="string">control</span></span><br><span class="line"></span><br><span class="line"><span class="attr">child-binding:</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Child</span> <span class="string">node</span> <span class="string">properties</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">reg:</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">int</span></span><br><span class="line">            <span class="attr">description:</span> <span class="string">Child</span> <span class="string">device</span> <span class="string">address</span></span><br></pre></td></tr></table></figure><h3 id="设备树节点"><a href="#设备树节点" class="headerlink" title="设备树节点"></a>设备树节点</h3><p>设备树中的设备节点：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">my_device:</span> <span class="title class_">my-device@40000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-device&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x40000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">10</span> <span class="number">2</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">16000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">enable-gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">15</span> GPIO_ACTIVE_HIGH&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">child@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="驱动示例"><a href="#驱动示例" class="headerlink" title="驱动示例"></a>驱动示例</h2><h3 id="1-GPIO-驱动"><a href="#1-GPIO-驱动" class="headerlink" title="1. GPIO 驱动"></a>1. GPIO 驱动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动数据 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> <span class="title">config</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> pin_state;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> port_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 配置函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_driver_configure</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_flags_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pin &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 GPIO */</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; GPIO_OUTPUT) &#123;</span><br><span class="line">        <span class="comment">/* 配置为输出 */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; GPIO_INPUT) &#123;</span><br><span class="line">        <span class="comment">/* 配置为输入 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 获取函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_driver_get</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                          <span class="type">gpio_flags_t</span> *flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pin &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取 GPIO 状态 */</span></span><br><span class="line">    *flags = (data-&gt;pin_state &amp; BIT(pin)) ? GPIO_ACTIVE_HIGH : GPIO_ACTIVE_LOW;</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 设置函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_driver_set</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pin &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置 GPIO 状态 */</span></span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        data-&gt;pin_state |= BIT(pin);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        data-&gt;pin_state &amp;= ~BIT(pin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 驱动 API */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_api</span> <span class="title">gpio_driver_api</span> =</span> &#123;</span><br><span class="line">    .pin_configure = gpio_driver_configure,</span><br><span class="line">    .pin_get = gpio_driver_get,</span><br><span class="line">    .pin_set = gpio_driver_set,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动初始化宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_DRIVER_INIT(n)                                          \</span></span><br><span class="line"><span class="meta">    static struct gpio_driver_data gpio_driver_data_##n = &#123;         \</span></span><br><span class="line"><span class="meta">        .pin_state = 0,                                            \</span></span><br><span class="line"><span class="meta">    &#125;;                                                             \</span></span><br><span class="line"><span class="meta">                                                                   \</span></span><br><span class="line"><span class="meta">    static const struct gpio_driver_config gpio_driver_config_##n = &#123;\</span></span><br><span class="line"><span class="meta">        .base_addr = DT_INST_REG_ADDR(n),                         \</span></span><br><span class="line"><span class="meta">        .port_num = DT_INST_PROP(n, port),                        \</span></span><br><span class="line"><span class="meta">    &#125;;                                                             \</span></span><br><span class="line"><span class="meta">                                                                   \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(n,                                      \</span></span><br><span class="line"><span class="meta">                         gpio_driver_init,                         \</span></span><br><span class="line"><span class="meta">                         NULL,                                     \</span></span><br><span class="line"><span class="meta">                         &amp;gpio_driver_data_##n,                    \</span></span><br><span class="line"><span class="meta">                         &amp;gpio_driver_config_##n,                  \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                              \</span></span><br><span class="line"><span class="meta">                         CONFIG_GPIO_INIT_PRIORITY,                \</span></span><br><span class="line"><span class="meta">                         &amp;gpio_driver_api);</span></span><br><span class="line"></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(GPIO_DRIVER_INIT)</span><br></pre></td></tr></table></figure><h3 id="2-I2C-驱动"><a href="#2-I2C-驱动" class="headerlink" title="2. I2C 驱动"></a>2. I2C 驱动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动数据 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">lock</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> speed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> irq_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I2C 传输函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">i2c_driver_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                              <span class="keyword">struct</span> i2c_msg *msgs,</span></span><br><span class="line"><span class="params">                              <span class="type">uint8_t</span> num_msgs,</span></span><br><span class="line"><span class="params">                              <span class="type">uint16_t</span> addr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理每个消息 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_msgs; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (msgs[i].flags &amp; I2C_MSG_READ) &#123;</span><br><span class="line">            <span class="comment">/* 读取操作 */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 写入操作 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* I2C 驱动 API */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver_api</span> <span class="title">i2c_driver_api</span> =</span> &#123;</span><br><span class="line">    .transfer = i2c_driver_transfer,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动初始化宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_DRIVER_INIT(n)                                          \</span></span><br><span class="line"><span class="meta">    static struct i2c_driver_data i2c_driver_data_##n = &#123;         \</span></span><br><span class="line"><span class="meta">        .speed = DT_INST_PROP(n, clock_frequency),               \</span></span><br><span class="line"><span class="meta">    &#125;;                                                             \</span></span><br><span class="line"><span class="meta">                                                                   \</span></span><br><span class="line"><span class="meta">    static const struct i2c_driver_config i2c_driver_config_##n = &#123;\</span></span><br><span class="line"><span class="meta">        .base_addr = DT_INST_REG_ADDR(n),                         \</span></span><br><span class="line"><span class="meta">        .irq_num = DT_INST_IRQN(n),                              \</span></span><br><span class="line"><span class="meta">    &#125;;                                                             \</span></span><br><span class="line"><span class="meta">                                                                   \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(n,                                      \</span></span><br><span class="line"><span class="meta">                         i2c_driver_init,                         \</span></span><br><span class="line"><span class="meta">                         NULL,                                     \</span></span><br><span class="line"><span class="meta">                         &amp;i2c_driver_data_##n,                    \</span></span><br><span class="line"><span class="meta">                         &amp;i2c_driver_config_##n,                  \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                              \</span></span><br><span class="line"><span class="meta">                         CONFIG_I2C_INIT_PRIORITY,                \</span></span><br><span class="line"><span class="meta">                         &amp;i2c_driver_api);</span></span><br><span class="line"></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(I2C_DRIVER_INIT)</span><br></pre></td></tr></table></figure><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><h3 id="1-使用日志"><a href="#1-使用日志" class="headerlink" title="1. 使用日志"></a>1. 使用日志</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(my_driver, CONFIG_MY_DRIVER_LOG_LEVEL);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_function</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    LOG_DBG(<span class="string">&quot;Debug message&quot;</span>);</span><br><span class="line">    LOG_INF(<span class="string">&quot;Info message&quot;</span>);</span><br><span class="line">    LOG_WRN(<span class="string">&quot;Warning message&quot;</span>);</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Error message&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用断言"><a href="#2-使用断言" class="headerlink" title="2. 使用断言"></a>2. 使用断言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/check.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_function</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数检查 */</span></span><br><span class="line">    CHECKIF(dev == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 状态检查 */</span></span><br><span class="line">    CHECKIF(!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-性能分析"><a href="#3-性能分析" class="headerlink" title="3. 性能分析"></a>3. 性能分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/timing/timing.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_function</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">timing_t</span> start_time, end_time;</span><br><span class="line">    <span class="type">uint64_t</span> cycles, ns;</span><br><span class="line"></span><br><span class="line">    timing_init();</span><br><span class="line">    timing_start();</span><br><span class="line">    start_time = timing_counter_get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行操作 */</span></span><br><span class="line"></span><br><span class="line">    end_time = timing_counter_get();</span><br><span class="line">    cycles = timing_cycles_get(&amp;start_time, &amp;end_time);</span><br><span class="line">    ns = timing_cycles_to_ns(cycles);</span><br><span class="line">    timing_stop();</span><br><span class="line"></span><br><span class="line">    LOG_INF(<span class="string">&quot;Operation took %llu ns&quot;</span>, ns);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-驱动设计"><a href="#1-驱动设计" class="headerlink" title="1. 驱动设计"></a>1. 驱动设计</h3><ul><li>使用标准 API</li><li>实现错误处理</li><li>支持电源管理</li><li>考虑并发访问</li></ul><h3 id="2-资源管理"><a href="#2-资源管理" class="headerlink" title="2. 资源管理"></a>2. 资源管理</h3><ul><li>使用设备树配置</li><li>正确初始化资源</li><li>实现清理函数</li><li>避免资源泄漏</li></ul><h3 id="3-性能优化"><a href="#3-性能优化" class="headerlink" title="3. 性能优化"></a>3. 性能优化</h3><ul><li>最小化关中断时间</li><li>使用 DMA（如适用）</li><li>优化数据传输</li><li>减少上下文切换</li></ul><h3 id="4-可移植性"><a href="#4-可移植性" class="headerlink" title="4. 可移植性"></a>4. 可移植性</h3><ul><li>使用抽象层</li><li>避免硬编码</li><li>支持多平台</li><li>文档完善</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-初始化失败"><a href="#1-初始化失败" class="headerlink" title="1. 初始化失败"></a>1. 初始化失败</h3><p><strong>问题</strong>：驱动初始化失败</p><p><strong>解决方案</strong>：</p><ul><li>检查设备树配置</li><li>验证硬件连接</li><li>确认时序要求</li><li>检查资源冲突</li></ul><h3 id="2-通信错误"><a href="#2-通信错误" class="headerlink" title="2. 通信错误"></a>2. 通信错误</h3><p><strong>问题</strong>：与设备通信失败</p><p><strong>解决方案</strong>：</p><ul><li>检查总线配置</li><li>验证设备地址</li><li>确认协议实现</li><li>使用示波器分析</li></ul><h3 id="3-并发问题"><a href="#3-并发问题" class="headerlink" title="3. 并发问题"></a>3. 并发问题</h3><p><strong>问题</strong>：多线程访问冲突</p><p><strong>解决方案</strong>：</p><ul><li>使用同步机制</li><li>保护共享资源</li><li>避免死锁</li><li>实现超时机制</li></ul><h3 id="4-性能问题"><a href="#4-性能问题" class="headerlink" title="4. 性能问题"></a>4. 性能问题</h3><p><strong>问题</strong>：驱动性能不达标</p><p><strong>解决方案</strong>：</p><ul><li>优化数据路径</li><li>使用中断模式</li><li>实现 DMA 传输</li><li>减少等待时间</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 驱动开发需要深入理解硬件特性和软件架构。通过遵循驱动模型、正确实现 API、使用设备树配置，可以开发出高质量的设备驱动程序。本文档提供了详细的指导和实例，帮助开发者更好地理解和实践 Zephyr 驱动开发。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-驱动开发&quot;&gt;&lt;a href=&quot;#Zephyr-驱动开发&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 驱动开发&quot;&gt;&lt;/a&gt;Zephyr 驱动开发&lt;/h1&gt;&lt;p&gt;本文档详细介绍了 Zephyr RTOS 的驱动开发过程，包括驱动模</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kernel</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/kernel/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/kernel/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-内核服务"><a href="#Zephyr-内核服务" class="headerlink" title="Zephyr 内核服务"></a>Zephyr 内核服务</h1><p>本文档详细介绍了 Zephyr RTOS 的内核服务，包括线程管理、同步机制、内存管理和定时器服务等核心功能。</p><h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><h3 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h3><ol><li><p><strong>静态创建</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义线程栈 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(thread_stack, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义线程数据结构 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> <span class="title">thread_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程入口函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_entry</span><span class="params">(<span class="type">void</span> *p1, <span class="type">void</span> *p2, <span class="type">void</span> *p3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/* 线程工作 */</span></span><br><span class="line">        k_sleep(K_MSEC(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建线程 */</span></span><br><span class="line">k_thread_create(&amp;thread_data, thread_stack,</span><br><span class="line">                K_THREAD_STACK_SIZEOF(thread_stack),</span><br><span class="line">                thread_entry,</span><br><span class="line">                <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                K_PRIO_PREEMPT(<span class="number">7</span>), <span class="number">0</span>, K_NO_WAIT);</span><br></pre></td></tr></table></figure></li><li><p><strong>动态创建</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 分配线程栈 */</span></span><br><span class="line"><span class="type">k_thread_stack_t</span> *<span class="built_in">stack</span> = k_thread_stack_alloc(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建线程 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread</span> *<span class="title">thread</span> =</span> k_thread_create(<span class="literal">NULL</span>, <span class="built_in">stack</span>, <span class="number">1024</span>,</span><br><span class="line">                                        thread_entry,</span><br><span class="line">                                        <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                                        K_PRIO_PREEMPT(<span class="number">7</span>), <span class="number">0</span>, K_NO_WAIT);</span><br></pre></td></tr></table></figure></li></ol><h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><ol><li><p><strong>线程状态管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 挂起线程 */</span></span><br><span class="line">k_thread_suspend(thread);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 恢复线程 */</span></span><br><span class="line">k_thread_resume(thread);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中止线程 */</span></span><br><span class="line">k_thread_abort(thread);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 启动线程 */</span></span><br><span class="line">k_thread_start(thread);</span><br></pre></td></tr></table></figure></li><li><p><strong>优先级管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置优先级 */</span></span><br><span class="line">k_thread_priority_set(thread, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取优先级 */</span></span><br><span class="line"><span class="type">int</span> prio = k_thread_priority_get(thread);</span><br></pre></td></tr></table></figure></li><li><p><strong>时间管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 线程休眠 */</span></span><br><span class="line">k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line">k_sleep(K_SECONDS(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 让出处理器 */</span></span><br><span class="line">k_yield();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 忙等待 */</span></span><br><span class="line">k_busy_wait(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="同步机制"><a href="#同步机制" class="headerlink" title="同步机制"></a>同步机制</h2><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 静态定义 */</span></span><br><span class="line">K_SEM_DEFINE(my_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">sem</span>;</span></span><br><span class="line">k_sem_init(&amp;sem, <span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用信号量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 等待信号量 */</span></span><br><span class="line">k_sem_take(&amp;sem, K_FOREVER);</span><br><span class="line">k_sem_take(&amp;sem, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放信号量 */</span></span><br><span class="line">k_sem_give(&amp;sem);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重置信号量 */</span></span><br><span class="line">k_sem_reset(&amp;sem);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取信号量计数 */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> count = k_sem_count_get(&amp;sem);</span><br></pre></td></tr></table></figure></li></ol><h3 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 静态定义 */</span></span><br><span class="line">K_MUTEX_DEFINE(my_mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">mutex</span>;</span></span><br><span class="line">k_mutex_init(&amp;mutex);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用互斥量</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取互斥量 */</span></span><br><span class="line">k_mutex_lock(&amp;mutex, K_FOREVER);</span><br><span class="line">k_mutex_lock(&amp;mutex, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放互斥量 */</span></span><br><span class="line">k_mutex_unlock(&amp;mutex);</span><br></pre></td></tr></table></figure></li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 静态定义 */</span></span><br><span class="line">K_EVENT_DEFINE(my_event);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_event</span> <span class="title">event</span>;</span></span><br><span class="line">k_event_init(&amp;event);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用事件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 设置事件 */</span></span><br><span class="line">k_event_set(&amp;event, <span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等待事件 */</span></span><br><span class="line"><span class="type">uint32_t</span> events = k_event_wait(&amp;event, <span class="number">0x01</span>, <span class="literal">false</span>, K_FOREVER);</span><br><span class="line">events = k_event_wait_all(&amp;event, <span class="number">0x03</span>, <span class="literal">false</span>, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清除事件 */</span></span><br><span class="line">k_event_clear(&amp;event, <span class="number">0x01</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义消息缓冲区 */</span></span><br><span class="line">K_MSGQ_DEFINE(my_msgq, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> my_msg), <span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_msgq</span> <span class="title">msgq</span>;</span></span><br><span class="line"><span class="type">char</span> __aligned(<span class="number">4</span>) buffer[<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> my_msg)];</span><br><span class="line">k_msgq_init(&amp;msgq, buffer, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> my_msg), <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用消息队列</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 发送消息 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_msg</span> <span class="title">msg</span> =</span> &#123; ... &#125;;</span><br><span class="line">k_msgq_put(&amp;msgq, &amp;msg, K_FOREVER);</span><br><span class="line">k_msgq_put(&amp;msgq, &amp;msg, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收消息 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_msg</span> <span class="title">rx_msg</span>;</span></span><br><span class="line">k_msgq_get(&amp;msgq, &amp;rx_msg, K_FOREVER);</span><br><span class="line">k_msgq_get(&amp;msgq, &amp;rx_msg, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清空队列 */</span></span><br><span class="line">k_msgq_purge(&amp;msgq);</span><br></pre></td></tr></table></figure></li></ol><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><ol><li><p><strong>内存分配</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 分配内存 */</span></span><br><span class="line"><span class="type">void</span> *ptr = k_malloc(size);</span><br><span class="line"><span class="type">void</span> *aligned_ptr = k_aligned_alloc(alignment, size);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放内存 */</span></span><br><span class="line">k_free(ptr);</span><br></pre></td></tr></table></figure></li><li><p><strong>内存池</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义内存池 */</span></span><br><span class="line">K_MEM_POOL_DEFINE(my_pool, <span class="number">64</span>, <span class="number">256</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从内存池分配 */</span></span><br><span class="line"><span class="type">void</span> *ptr = k_mem_pool_alloc(&amp;my_pool, size, K_FOREVER);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 释放到内存池 */</span></span><br><span class="line">k_mem_pool_free(&amp;ptr);</span><br></pre></td></tr></table></figure></li></ol><h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3><ol><li><p><strong>线程栈</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义线程栈 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(my_stack, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取栈大小 */</span></span><br><span class="line"><span class="type">size_t</span> size = K_THREAD_STACK_SIZEOF(my_stack);</span><br></pre></td></tr></table></figure></li><li><p><strong>栈统计</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取栈使用情况 */</span></span><br><span class="line"><span class="type">size_t</span> unused = k_thread_stack_space_get(thread);</span><br></pre></td></tr></table></figure></li></ol><h2 id="定时器服务"><a href="#定时器服务" class="headerlink" title="定时器服务"></a>定时器服务</h2><h3 id="内核定时器"><a href="#内核定时器" class="headerlink" title="内核定时器"></a>内核定时器</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义定时器 */</span></span><br><span class="line">K_TIMER_DEFINE(my_timer, timer_expiry_fn, timer_stop_fn);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_timer</span> <span class="title">timer</span>;</span></span><br><span class="line">k_timer_init(&amp;timer, timer_expiry_fn, timer_stop_fn);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用定时器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 启动定时器 */</span></span><br><span class="line">k_timer_start(&amp;timer, K_MSEC(<span class="number">100</span>), K_MSEC(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 停止定时器 */</span></span><br><span class="line">k_timer_stop(&amp;timer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取剩余时间 */</span></span><br><span class="line"><span class="type">uint32_t</span> remaining = k_timer_remaining_get(&amp;timer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取过期次数 */</span></span><br><span class="line"><span class="type">uint32_t</span> count = k_timer_status_get(&amp;timer);</span><br></pre></td></tr></table></figure></li></ol><h3 id="系统时钟"><a href="#系统时钟" class="headerlink" title="系统时钟"></a>系统时钟</h3><ol><li><p><strong>时间获取</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取系统节拍数 */</span></span><br><span class="line"><span class="type">uint64_t</span> ticks = k_uptime_ticks();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取系统运行时间 */</span></span><br><span class="line"><span class="type">int64_t</span> uptime = k_uptime_get();</span><br><span class="line"><span class="type">int64_t</span> delta = k_uptime_delta(&amp;last_uptime);</span><br></pre></td></tr></table></figure></li><li><p><strong>时间转换</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 转换为毫秒 */</span></span><br><span class="line"><span class="type">uint32_t</span> ms = k_ticks_to_ms_floor64(ticks);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 转换为节拍 */</span></span><br><span class="line"><span class="type">uint64_t</span> ticks = k_ms_to_ticks_ceil32(ms);</span><br></pre></td></tr></table></figure></li></ol><h2 id="中断管理"><a href="#中断管理" class="headerlink" title="中断管理"></a>中断管理</h2><h3 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h3><ol><li><p><strong>中断处理函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">irq_handler</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 处理中断 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 安装中断处理函数 */</span></span><br><span class="line">IRQ_CONNECT(IRQ_NUM, IRQ_PRIO, irq_handler, <span class="literal">NULL</span>, IRQ_FLAGS);</span><br></pre></td></tr></table></figure></li><li><p><strong>中断控制</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使能中断 */</span></span><br><span class="line">irq_enable(IRQ_NUM);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用中断 */</span></span><br><span class="line">irq_disable(IRQ_NUM);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断中断状态 */</span></span><br><span class="line"><span class="type">bool</span> is_enabled = irq_is_enabled(IRQ_NUM);</span><br></pre></td></tr></table></figure></li></ol><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><ol><li><p><strong>关中断保护</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进入临界区 */</span></span><br><span class="line">key = irq_lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 临界区代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 退出临界区 */</span></span><br><span class="line">irq_unlock(key);</span><br></pre></td></tr></table></figure></li><li><p><strong>调度器锁定</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 禁止调度 */</span></span><br><span class="line">k_sched_lock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不可抢占代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 允许调度 */</span></span><br><span class="line">k_sched_unlock();</span><br></pre></td></tr></table></figure></li></ol><h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h2><h3 id="工作项"><a href="#工作项" class="headerlink" title="工作项"></a>工作项</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义工作项 */</span></span><br><span class="line">K_WORK_DEFINE(my_work, work_handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_work</span> <span class="title">work</span>;</span></span><br><span class="line">k_work_init(&amp;work, work_handler);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用工作项</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 提交工作 */</span></span><br><span class="line">k_work_submit(&amp;work);</span><br><span class="line">k_work_submit_to_queue(&amp;workq, &amp;work);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取消工作 */</span></span><br><span class="line">k_work_cancel(&amp;work);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等待完成 */</span></span><br><span class="line">k_work_flush(&amp;work, &amp;sync);</span><br></pre></td></tr></table></figure></li></ol><h3 id="延迟工作"><a href="#延迟工作" class="headerlink" title="延迟工作"></a>延迟工作</h3><ol><li><p><strong>定义和初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义延迟工作 */</span></span><br><span class="line">K_DELAYED_WORK_DEFINE(my_dwork, work_handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动态定义 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_delayed_work</span> <span class="title">dwork</span>;</span></span><br><span class="line">k_delayed_work_init(&amp;dwork, work_handler);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用延迟工作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 提交延迟工作 */</span></span><br><span class="line">k_delayed_work_submit(&amp;dwork, K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取消延迟工作 */</span></span><br><span class="line">k_delayed_work_cancel(&amp;dwork);</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-线程管理"><a href="#1-线程管理" class="headerlink" title="1. 线程管理"></a>1. 线程管理</h3><ul><li>合理设置优先级</li><li>避免长时间阻塞</li><li>使用适当的栈大小</li><li>处理线程退出</li></ul><h3 id="2-同步机制"><a href="#2-同步机制" class="headerlink" title="2. 同步机制"></a>2. 同步机制</h3><ul><li>选择合适的机制</li><li>避免死锁</li><li>使用超时机制</li><li>处理错误情况</li></ul><h3 id="3-内存管理"><a href="#3-内存管理" class="headerlink" title="3. 内存管理"></a>3. 内存管理</h3><ul><li>避免内存泄漏</li><li>检查分配失败</li><li>使用内存池</li><li>监控内存使用</li></ul><h3 id="4-中断处理"><a href="#4-中断处理" class="headerlink" title="4. 中断处理"></a>4. 中断处理</h3><ul><li>最小化中断处理时间</li><li>使用工作队列</li><li>保护共享资源</li><li>处理中断嵌套</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-栈溢出"><a href="#1-栈溢出" class="headerlink" title="1. 栈溢出"></a>1. 栈溢出</h3><p><strong>问题</strong>：线程栈空间不足</p><p><strong>解决方案</strong>：</p><ul><li>增加栈大小</li><li>减少局部变量</li><li>使用动态分配</li><li>监控栈使用</li></ul><h3 id="2-死锁"><a href="#2-死锁" class="headerlink" title="2. 死锁"></a>2. 死锁</h3><p><strong>问题</strong>：多个线程互相等待</p><p><strong>解决方案</strong>：</p><ul><li>使用超时机制</li><li>统一加锁顺序</li><li>避免嵌套锁定</li><li>使用死锁检测</li></ul><h3 id="3-内存泄漏"><a href="#3-内存泄漏" class="headerlink" title="3. 内存泄漏"></a>3. 内存泄漏</h3><p><strong>问题</strong>：未释放的内存</p><p><strong>解决方案</strong>：</p><ul><li>跟踪内存分配</li><li>使用内存检测工具</li><li>实现清理函数</li><li>定期检查内存</li></ul><h3 id="4-优先级反转"><a href="#4-优先级反转" class="headerlink" title="4. 优先级反转"></a>4. 优先级反转</h3><p><strong>问题</strong>：低优先级任务阻塞高优先级任务</p><p><strong>解决方案</strong>：</p><ul><li>使用优先级继承</li><li>减少关键区</li><li>优化锁定时间</li><li>合理设置优先级</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了丰富的内核服务，包括线程管理、同步机制、内存管理和定时器服务等。通过正确使用这些服务，可以开发出高效、可靠的嵌入式应用程序。本文档提供了详细的指导和实例，帮助开发者更好地理解和使用 Zephyr 内核服务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-内核服务&quot;&gt;&lt;a href=&quot;#Zephyr-内核服务&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 内核服务&quot;&gt;&lt;/a&gt;Zephyr 内核服务&lt;/h1&gt;&lt;p&gt;本文档详细介绍了 Zephyr RTOS 的内核服务，包括线程管理、</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>networking</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/networking/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/networking/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-网络开发"><a href="#Zephyr-网络开发" class="headerlink" title="Zephyr 网络开发"></a>Zephyr 网络开发</h1><p>本文档详细介绍了 Zephyr RTOS 的网络开发功能，包括网络协议栈、网络接口、协议实现以及网络应用开发。</p><h2 id="网络协议栈"><a href="#网络协议栈" class="headerlink" title="网络协议栈"></a>网络协议栈</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol><li><p><strong>Kconfig 配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 启用网络功能</span><br><span class="line">CONFIG_NETWORKING=y</span><br><span class="line"></span><br><span class="line"># IPv4 支持</span><br><span class="line">CONFIG_NET_IPV4=y</span><br><span class="line">CONFIG_NET_IPV4_AUTO_LOCAL_ADDR_SET=y</span><br><span class="line"></span><br><span class="line"># IPv6 支持</span><br><span class="line">CONFIG_NET_IPV6=y</span><br><span class="line">CONFIG_NET_IPV6_AUTO_LOCAL_ADDR_SET=y</span><br><span class="line"></span><br><span class="line"># TCP 支持</span><br><span class="line">CONFIG_NET_TCP=y</span><br><span class="line">CONFIG_NET_TCP_TIME_WAIT=y</span><br><span class="line"></span><br><span class="line"># UDP 支持</span><br><span class="line">CONFIG_NET_UDP=y</span><br><span class="line"></span><br><span class="line"># DNS 支持</span><br><span class="line">CONFIG_DNS_RESOLVER=y</span><br><span class="line">CONFIG_DNS_SERVER_IP_ADDRESSES=y</span><br></pre></td></tr></table></figure></li><li><p><strong>网络接口配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网络接口数据 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_if_config</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">netmask</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">gw</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置网络接口 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">setup_network</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if_config</span> <span class="title">cfg</span>;</span></span><br><span class="line"></span><br><span class="line">    iface = net_if_get_default();</span><br><span class="line">    <span class="keyword">if</span> (!iface) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 IPv4 地址 */</span></span><br><span class="line">    net_if_ipv4_addr_add(iface, &amp;cfg.addr,</span><br><span class="line">                         NET_ADDR_MANUAL, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置网关 */</span></span><br><span class="line">    net_if_ipv4_set_gw(iface, &amp;cfg.gw);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置子网掩码 */</span></span><br><span class="line">    net_if_ipv4_set_netmask(iface, &amp;cfg.netmask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="协议栈初始化"><a href="#协议栈初始化" class="headerlink" title="协议栈初始化"></a>协议栈初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网络初始化 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_network</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 等待网络就绪 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span> =</span> net_if_get_default();</span><br><span class="line">    <span class="keyword">if</span> (!iface) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待地址配置完成 */</span></span><br><span class="line">    k_sem_take(&amp;wait_for_addr, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DNS */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dns_resolve_context</span> *<span class="title">ctx</span> =</span> dns_resolve_get_default();</span><br><span class="line">    <span class="keyword">if</span> (ctx) &#123;</span><br><span class="line">        dns_resolve_init(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络接口"><a href="#网络接口" class="headerlink" title="网络接口"></a>网络接口</h2><h3 id="以太网接口"><a href="#以太网接口" class="headerlink" title="以太网接口"></a>以太网接口</h3><ol><li><p><strong>配置以太网</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以太网配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ethernet_init</span><span class="params">(<span class="keyword">struct</span> net_if *iface)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* MAC 地址配置 */</span></span><br><span class="line">    <span class="type">uint8_t</span> mac[<span class="number">6</span>] = &#123;<span class="number">0x00</span>, <span class="number">0x11</span>, <span class="number">0x22</span>, <span class="number">0x33</span>, <span class="number">0x44</span>, <span class="number">0x55</span>&#125;;</span><br><span class="line">    net_if_set_link_addr(iface, mac, <span class="keyword">sizeof</span>(mac),</span><br><span class="line">                        NET_LINK_ETHERNET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 以太网配置 */</span></span><br><span class="line">    ethernet_configure(iface);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NET_DEVICE_INIT(eth_driver, <span class="string">&quot;ETH_0&quot;</span>,</span><br><span class="line">                ethernet_init, <span class="literal">NULL</span>,</span><br><span class="line">                &amp;eth_data, &amp;eth_config,</span><br><span class="line">                CONFIG_ETH_INIT_PRIORITY, &amp;eth_api,</span><br><span class="line">                ETHERNET_L2, NET_L2_GET_CTX_TYPE(ETHERNET_L2),</span><br><span class="line">                NET_ETH_MTU);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用以太网</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 发送数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ethernet_send</span><span class="params">(<span class="keyword">struct</span> net_if *iface,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> net_pkt *pkt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 准备数据包 */</span></span><br><span class="line">    net_pkt_set_iface(pkt, iface);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    <span class="keyword">return</span> eth_tx(iface, pkt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ethernet_recv</span><span class="params">(<span class="keyword">struct</span> net_if *iface,</span></span><br><span class="line"><span class="params">                         <span class="keyword">struct</span> net_pkt *pkt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 处理接收到的数据 */</span></span><br><span class="line">    <span class="keyword">if</span> (net_recv_data(iface, pkt) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        net_pkt_unref(pkt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="无线接口"><a href="#无线接口" class="headerlink" title="无线接口"></a>无线接口</h3><ol><li><p><strong>配置 Wi-Fi</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Wi-Fi 配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">wifi_config</span> <span class="title">wifi_cfg</span> =</span> &#123;</span><br><span class="line">    .ssid = <span class="string">&quot;MyNetwork&quot;</span>,</span><br><span class="line">    .psk = <span class="string">&quot;MyPassword&quot;</span>,</span><br><span class="line">    .security = WIFI_SECURITY_TYPE_PSK,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化 Wi-Fi */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wifi_init</span><span class="params">(<span class="keyword">struct</span> net_if *iface)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置 Wi-Fi */</span></span><br><span class="line">    wifi_connect(iface, &amp;wifi_cfg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 Wi-Fi</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 连接回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wifi_connect_cb</span><span class="params">(<span class="keyword">struct</span> net_if *iface,</span></span><br><span class="line"><span class="params">                           <span class="type">int</span> status,</span></span><br><span class="line"><span class="params">                           <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 连接成功 */</span></span><br><span class="line">        k_sem_give(&amp;wifi_connected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 扫描回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">wifi_scan_cb</span><span class="params">(<span class="keyword">struct</span> net_if *iface,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span> status,</span></span><br><span class="line"><span class="params">                        <span class="keyword">struct</span> wifi_scan_result *entry,</span></span><br><span class="line"><span class="params">                        <span class="type">void</span> *user_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">0</span> &amp;&amp; entry) &#123;</span><br><span class="line">        <span class="comment">/* 处理扫描结果 */</span></span><br><span class="line">        LOG_INF(<span class="string">&quot;Found SSID: %s&quot;</span>, entry-&gt;ssid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="协议实现"><a href="#协议实现" class="headerlink" title="协议实现"></a>协议实现</h2><h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><ol><li><p><strong>TCP 服务器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* TCP 服务器配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">tcp_server</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> sock, client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 监听连接 */</span></span><br><span class="line">    listen(sock, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        client = accept(sock, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (client &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 处理客户端连接 */</span></span><br><span class="line">        handle_client(client);</span><br><span class="line">        close(client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>TCP 客户端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* TCP 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">tcp_client</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 连接服务器 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    inet_pton(AF_INET, SERVER_ADDR, &amp;addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (connect(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr,</span><br><span class="line">                <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送和接收数据 */</span></span><br><span class="line">    communicate(sock);</span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="UDP-协议"><a href="#UDP-协议" class="headerlink" title="UDP 协议"></a>UDP 协议</h3><ol><li><p><strong>UDP 服务器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* UDP 服务器配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">udp_server</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 绑定地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(sock, (<span class="keyword">struct</span> sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        close(sock);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 接收数据 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        handle_udp_data(sock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>UDP 客户端</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* UDP 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">udp_client</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="type">int</span> sock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建套接字 */</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置目标地址 */</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    inet_pton(AF_INET, SERVER_ADDR, &amp;addr.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    send_udp_data(sock, &amp;addr);</span><br><span class="line">    close(sock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h2><h3 id="HTTP-客户端"><a href="#HTTP-客户端" class="headerlink" title="HTTP 客户端"></a>HTTP 客户端</h3><ol><li><p><strong>基本配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* HTTP 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">http_client_request</span> <span class="title">req</span> =</span> &#123;</span><br><span class="line">    .method = HTTP_GET,</span><br><span class="line">    .url = <span class="string">&quot;/api/data&quot;</span>,</span><br><span class="line">    .host = <span class="string">&quot;example.com&quot;</span>,</span><br><span class="line">    .protocol = <span class="string">&quot;HTTP/1.1&quot;</span>,</span><br><span class="line">    .header_fields = <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>发送请求</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 发送 HTTP 请求 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">http_get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">http_client_ctx</span> <span class="title">ctx</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化上下文 */</span></span><br><span class="line">    http_client_init(&amp;ctx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送请求 */</span></span><br><span class="line">    ret = http_client_send_req(&amp;ctx, &amp;req, response_cb, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOG_ERR(<span class="string">&quot;Failed to send HTTP request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="MQTT-客户端"><a href="#MQTT-客户端" class="headerlink" title="MQTT 客户端"></a>MQTT 客户端</h3><ol><li><p><strong>基本配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* MQTT 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mqtt_client</span> <span class="title">client</span> =</span> &#123;</span><br><span class="line">    .client_id = <span class="string">&quot;zephyr_mqtt&quot;</span>,</span><br><span class="line">    .broker = &amp;broker,</span><br><span class="line">    .evt_cb = mqtt_evt_handler,</span><br><span class="line">    .protocol_version = MQTT_VERSION_3_1_1,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>连接和发布</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* MQTT 事件处理 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">mqtt_evt_handler</span><span class="params">(<span class="keyword">struct</span> mqtt_client *client,</span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="keyword">struct</span> mqtt_evt *evt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (evt-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> MQTT_EVT_CONNACK:</span><br><span class="line">        <span class="keyword">if</span> (evt-&gt;result == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 连接成功 */</span></span><br><span class="line">            subscribe_topics();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> MQTT_EVT_PUBLISH:</span><br><span class="line">        <span class="comment">/* 处理接收到的消息 */</span></span><br><span class="line">        handle_publish(evt);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发布消息 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">publish_message</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mqtt_publish_param</span> <span class="title">param</span> =</span> &#123;</span><br><span class="line">        .message.topic.qos = MQTT_QOS_1_AT_LEAST_ONCE,</span><br><span class="line">        .message.topic.topic.utf8 = <span class="string">&quot;test/topic&quot;</span>,</span><br><span class="line">        .message.topic.topic.size = <span class="number">10</span>,</span><br><span class="line">        .message.payload.data = <span class="string">&quot;Hello MQTT&quot;</span>,</span><br><span class="line">        .message.payload.len = <span class="number">10</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    mqtt_publish(&amp;client, &amp;param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="CoAP-客户端"><a href="#CoAP-客户端" class="headerlink" title="CoAP 客户端"></a>CoAP 客户端</h3><ol><li><p><strong>基本配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CoAP 客户端配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">coap_client</span> <span class="title">client</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">coap_packet</span> <span class="title">request</span>;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>发送请求</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 发送 CoAP 请求 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">coap_get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *data;</span><br><span class="line">    <span class="type">uint16_t</span> id;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 准备请求 */</span></span><br><span class="line">    data = (<span class="type">uint8_t</span> *)k_malloc(MAX_COAP_MSG_LEN);</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = coap_packet_init(&amp;request, data, MAX_COAP_MSG_LEN,</span><br><span class="line">                         <span class="number">1</span>, COAP_TYPE_CON, <span class="number">8</span>, coap_next_token(),</span><br><span class="line">                         COAP_METHOD_GET, id);</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        k_free(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送请求 */</span></span><br><span class="line">    r = coap_packet_send(&amp;request, sock, &amp;server_addr);</span><br><span class="line">    k_free(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><h3 id="1-网络调试"><a href="#1-网络调试" class="headerlink" title="1. 网络调试"></a>1. 网络调试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 启用网络日志 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NET_LOG_ENABLED 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(net_app, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据包跟踪 */</span></span><br><span class="line">NET_PKT_DATA_ACCESS_DEFINE(pkt_data);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_pkt</span> *<span class="title">pkt</span> =</span> net_pkt_alloc_with_buffer(iface,</span><br><span class="line">                                               size,</span><br><span class="line">                                               AF_INET,</span><br><span class="line">                                               IPPROTO_TCP,</span><br><span class="line">                                               K_NO_WAIT);</span><br></pre></td></tr></table></figure><h3 id="2-抓包分析"><a href="#2-抓包分析" class="headerlink" title="2. 抓包分析"></a>2. 抓包分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Wireshark 分析</span></span><br><span class="line"><span class="built_in">sudo</span> ip <span class="built_in">link</span> <span class="built_in">set</span> dev zeth up</span><br><span class="line"><span class="built_in">sudo</span> wireshark -i zeth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 tcpdump 抓包</span></span><br><span class="line"><span class="built_in">sudo</span> tcpdump -i zeth -w capture.pcap</span><br></pre></td></tr></table></figure><h3 id="3-性能分析"><a href="#3-性能分析" class="headerlink" title="3. 性能分析"></a>3. 性能分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网络性能统计 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">net_mgmt(NET_REQUEST_STATS_GET_ALL, iface, &amp;stats, <span class="keyword">sizeof</span>(stats));</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-网络安全"><a href="#1-网络安全" class="headerlink" title="1. 网络安全"></a>1. 网络安全</h3><ul><li>使用安全协议</li><li>验证证书</li><li>加密敏感数据</li><li>实现访问控制</li></ul><h3 id="2-错误处理"><a href="#2-错误处理" class="headerlink" title="2. 错误处理"></a>2. 错误处理</h3><ul><li>检查返回值</li><li>实现超时机制</li><li>处理断开连接</li><li>实现重连逻辑</li></ul><h3 id="3-资源管理"><a href="#3-资源管理" class="headerlink" title="3. 资源管理"></a>3. 资源管理</h3><ul><li>释放套接字</li><li>管理内存使用</li><li>限制并发连接</li><li>实现清理机制</li></ul><h3 id="4-性能优化"><a href="#4-性能优化" class="headerlink" title="4. 性能优化"></a>4. 性能优化</h3><ul><li>使用缓冲池</li><li>优化数据包大小</li><li>实现数据压缩</li><li>减少数据复制</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-连接问题"><a href="#1-连接问题" class="headerlink" title="1. 连接问题"></a>1. 连接问题</h3><p><strong>问题</strong>：无法建立网络连接</p><p><strong>解决方案</strong>：</p><ul><li>检查网络配置</li><li>验证防火墙设置</li><li>确认路由配置</li><li>测试网络可达性</li></ul><h3 id="2-性能问题"><a href="#2-性能问题" class="headerlink" title="2. 性能问题"></a>2. 性能问题</h3><p><strong>问题</strong>：网络性能不佳</p><p><strong>解决方案</strong>：</p><ul><li>优化缓冲区大小</li><li>减少数据拷贝</li><li>使用零拷贝技术</li><li>实现数据批处理</li></ul><h3 id="3-内存问题"><a href="#3-内存问题" class="headerlink" title="3. 内存问题"></a>3. 内存问题</h3><p><strong>问题</strong>：内存使用过高</p><p><strong>解决方案</strong>：</p><ul><li>使用内存池</li><li>限制缓冲区大小</li><li>及时释放资源</li><li>监控内存使用</li></ul><h3 id="4-稳定性问题"><a href="#4-稳定性问题" class="headerlink" title="4. 稳定性问题"></a>4. 稳定性问题</h3><p><strong>问题</strong>：连接不稳定</p><p><strong>解决方案</strong>：</p><ul><li>实现重连机制</li><li>添加心跳检测</li><li>处理超时情况</li><li>实现错误恢复</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了完整的网络开发支持，包括多种协议实现和网络应用框架。通过正确使用这些功能，可以开发出稳定、高效的网络应用。本文档提供了详细的指导和实例，帮助开发者更好地理解和使用 Zephyr 的网络功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-网络开发&quot;&gt;&lt;a href=&quot;#Zephyr-网络开发&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 网络开发&quot;&gt;&lt;/a&gt;Zephyr 网络开发&lt;/h1&gt;&lt;p&gt;本文档详细介绍了 Zephyr RTOS 的网络开发功能，包括网络协</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>porting</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/porting/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/porting/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-移植指南"><a href="#Zephyr-移植指南" class="headerlink" title="Zephyr 移植指南"></a>Zephyr 移植指南</h1><p>本文档详细介绍了如何将 Zephyr RTOS 移植到新的硬件平台，包括板级支持包开发、SOC 适配、驱动移植和启动配置等内容。</p><h2 id="板级支持包"><a href="#板级支持包" class="headerlink" title="板级支持包"></a>板级支持包</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ol><li><p><strong>目录结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">boards/</span><br><span class="line">└── arm/</span><br><span class="line">    └── my_board/</span><br><span class="line">        ├── board.cmake</span><br><span class="line">        ├── CMakeLists.txt</span><br><span class="line">        ├── Kconfig.board</span><br><span class="line">        ├── Kconfig.defconfig</span><br><span class="line">        ├── my_board_defconfig</span><br><span class="line">        ├── my_board.dts</span><br><span class="line">        └── my_board.yaml</span><br></pre></td></tr></table></figure></li><li><p><strong>配置文件</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># board.cmake</span></span><br><span class="line">board_runner_args(jlink <span class="string">&quot;--device=nrf52&quot;</span> <span class="string">&quot;--speed=4000&quot;</span>)</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$&#123;ZEPHYR_BASE&#125;</span>/boards/common/jlink.board.cmake)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line"><span class="keyword">if</span>(CONFIG_PINMUX)</span><br><span class="line">  zephyr_library()</span><br><span class="line">  zephyr_library_sources(pinmux.c)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure></li></ol><h3 id="板级定义"><a href="#板级定义" class="headerlink" title="板级定义"></a>板级定义</h3><ol><li><p><strong>Kconfig 配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Kconfig.board</span><br><span class="line">config BOARD_MY_BOARD</span><br><span class="line">    bool &quot;My Custom Board&quot;</span><br><span class="line">    depends on SOC_NRF52840_QIAA</span><br><span class="line"></span><br><span class="line"># Kconfig.defconfig</span><br><span class="line">if BOARD_MY_BOARD</span><br><span class="line"></span><br><span class="line">config BOARD</span><br><span class="line">    default &quot;my_board&quot;</span><br><span class="line"></span><br><span class="line">config GPIO_AS_PINMUX</span><br><span class="line">    default y</span><br><span class="line"></span><br><span class="line">endif # BOARD_MY_BOARD</span><br></pre></td></tr></table></figure></li><li><p><strong>设备树文件</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* my_board.dts */</span></span><br><span class="line"><span class="keyword">/dts-v1/</span><span class="punctuation">;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nordic/nrf52840_qiaa.dtsi&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">model</span> <span class="operator">=</span> <span class="string">&quot;My Custom Board&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;vendor,my-board&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">zephyr,console</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,shell-uart</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,uart-mcumgr</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">zephyr,bt-mon-uart</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">        zephyr,bt-c2<span class="attr">h-uart</span> <span class="operator">=</span> <span class="variable">&amp;uart0</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">leds</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-leds&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        led0:</span> <span class="title class_">led_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">13</span> GPIO_ACTIVE_LOW&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Green LED 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">buttons</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;gpio-keys&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">        button0:</span> <span class="title class_">button_0</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">gpios</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;gpio0</span> <span class="number">11</span> (GPIO_PULL_UP | GPIO_ACTIVE_LOW)&gt;</span><span class="punctuation">;</span></span><br><span class="line">            <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;Push button switch 0&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line">    <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">current-speed</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">115200</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">tx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">6</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">rx-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">8</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;i2c0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">sda-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">26</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">scl-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">27</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;spi0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">sck-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">27</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">mosi-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">26</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">miso-pin</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">29</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="SOC-适配"><a href="#SOC-适配" class="headerlink" title="SOC 适配"></a>SOC 适配</h2><h3 id="SOC-支持"><a href="#SOC-支持" class="headerlink" title="SOC 支持"></a>SOC 支持</h3><ol><li><p><strong>SOC 定义</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># soc/arm/vendor/my_soc/Kconfig.soc</span><br><span class="line">config SOC_SERIES_MY_SOC</span><br><span class="line">    bool &quot;My SOC Series&quot;</span><br><span class="line">    select ARM</span><br><span class="line">    select CPU_CORTEX_M4</span><br><span class="line">    select CPU_HAS_FPU</span><br><span class="line">    help</span><br><span class="line">      Enable support for My SOC Series</span><br><span class="line"></span><br><span class="line">config SOC_MY_SOC</span><br><span class="line">    bool &quot;My SOC&quot;</span><br><span class="line">    select SOC_SERIES_MY_SOC</span><br><span class="line">    help</span><br><span class="line">      My SOC</span><br></pre></td></tr></table></figure></li><li><p><strong>SOC 配置</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># soc/arm/vendor/my_soc/CMakeLists.txt</span></span><br><span class="line">zephyr_library()</span><br><span class="line">zephyr_library_sources(</span><br><span class="line">    soc.c</span><br><span class="line">    power.c</span><br><span class="line">    )</span><br><span class="line">zephyr_library_include_directories(.)</span><br></pre></td></tr></table></figure></li></ol><h3 id="时钟配置"><a href="#时钟配置" class="headerlink" title="时钟配置"></a>时钟配置</h3><ol><li><p><strong>时钟初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/soc.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sys_clock_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置系统时钟 */</span></span><br><span class="line">    NRF_CLOCK-&gt;EVENTS_HFCLKSTARTED = <span class="number">0</span>;</span><br><span class="line">    NRF_CLOCK-&gt;TASKS_HFCLKSTART = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (NRF_CLOCK-&gt;EVENTS_HFCLKSTARTED == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 等待时钟稳定 */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 LFCLK */</span></span><br><span class="line">    NRF_CLOCK-&gt;LFCLKSRC = CLOCK_LFCLKSRC_SRC_Xtal;</span><br><span class="line">    NRF_CLOCK-&gt;TASKS_LFCLKSTART = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>电源管理</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/power.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sys_set_power_state</span><span class="params">(<span class="keyword">enum</span> power_states state)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">    <span class="keyword">case</span> POWER_STATE_SLEEP:</span><br><span class="line">        <span class="comment">/* 进入睡眠模式 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> POWER_STATE_DEEP_SLEEP:</span><br><span class="line">        <span class="comment">/* 进入深度睡眠模式 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="驱动移植"><a href="#驱动移植" class="headerlink" title="驱动移植"></a>驱动移植</h2><h3 id="GPIO-驱动"><a href="#GPIO-驱动" class="headerlink" title="GPIO 驱动"></a>GPIO 驱动</h3><ol><li><p><strong>驱动结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* drivers/gpio/gpio_my_soc.c */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_config</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 设备配置 */</span></span><br><span class="line">    <span class="type">uint32_t</span> port;</span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> irq_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_data</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 驱动数据 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_driver_config</span> <span class="title">config</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>驱动实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GPIO 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_my_soc_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化硬件 */</span></span><br><span class="line">    sys_write32(<span class="number">0xFFFFFFFF</span>, config-&gt;base_addr + GPIO_OUTCLR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化同步原语 */</span></span><br><span class="line">    k_sem_init(&amp;data-&gt;lock, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO 配置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_my_soc_configure</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_pin_t</span> pin,</span></span><br><span class="line"><span class="params">                               <span class="type">gpio_flags_t</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gpio_my_soc_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">uint32_t</span> reg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pin &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_sem_take(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 GPIO */</span></span><br><span class="line">    reg = sys_read32(config-&gt;base_addr + GPIO_CNF(pin));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (flags &amp; GPIO_OUTPUT) &#123;</span><br><span class="line">        reg |= GPIO_CNF_DIR_OUTPUT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reg &amp;= ~GPIO_CNF_DIR_OUTPUT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; GPIO_PULL_UP) &#123;</span><br><span class="line">        reg |= GPIO_CNF_PULL_UP;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; GPIO_PULL_DOWN) &#123;</span><br><span class="line">        reg |= GPIO_CNF_PULL_DOWN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sys_write32(reg, config-&gt;base_addr + GPIO_CNF(pin));</span><br><span class="line"></span><br><span class="line">    k_sem_give(&amp;data-&gt;lock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="UART-驱动"><a href="#UART-驱动" class="headerlink" title="UART 驱动"></a>UART 驱动</h3><ol><li><p><strong>驱动结构</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* drivers/serial/uart_my_soc.c */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> base_addr;</span><br><span class="line">    <span class="type">uint32_t</span> clock_freq;</span><br><span class="line">    <span class="type">uint8_t</span> tx_pin;</span><br><span class="line">    <span class="type">uint8_t</span> rx_pin;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uart_config</span> <span class="title">config</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">tx_sem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_sem</span> <span class="title">rx_sem</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>驱动实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* UART 初始化 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">uart_my_soc_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置引脚 */</span></span><br><span class="line">    configure_pins(config);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化硬件 */</span></span><br><span class="line">    sys_write32(UART_ENABLE, config-&gt;base_addr + UART_CONFIG);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置波特率 */</span></span><br><span class="line">    set_baudrate(dev, data-&gt;config.baudrate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化信号量 */</span></span><br><span class="line">    k_sem_init(&amp;data-&gt;tx_sem, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    k_sem_init(&amp;data-&gt;rx_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    sys_write32(UART_INT_RXDRDY | UART_INT_TXDRDY,</span><br><span class="line">                config-&gt;base_addr + UART_INTENSET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* UART 发送 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">uart_my_soc_poll_out</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                               <span class="type">unsigned</span> <span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">uart_my_soc_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待发送完成 */</span></span><br><span class="line">    <span class="keyword">while</span> (!(sys_read32(config-&gt;base_addr + UART_STATUS) &amp;</span><br><span class="line">             UART_STATUS_TXDRDY)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 发送数据 */</span></span><br><span class="line">    sys_write32(c, config-&gt;base_addr + UART_TXD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="启动配置"><a href="#启动配置" class="headerlink" title="启动配置"></a>启动配置</h2><h3 id="启动文件"><a href="#启动文件" class="headerlink" title="启动文件"></a>启动文件</h3><ol><li><p><strong>向量表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/vector_table.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*<span class="type">vector_t</span>)</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vector_table</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *<span class="built_in">stack</span>;</span><br><span class="line">    <span class="type">vector_t</span> reset;</span><br><span class="line">    <span class="type">vector_t</span> nmi;</span><br><span class="line">    <span class="type">vector_t</span> hard_fault;</span><br><span class="line">    <span class="type">vector_t</span> mpu_fault;</span><br><span class="line">    <span class="type">vector_t</span> bus_fault;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>启动代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/startup.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">z_arm_reset</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化系统 */</span></span><br><span class="line">    SystemInit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化 BSS */</span></span><br><span class="line">    z_bss_zero();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化数据段 */</span></span><br><span class="line">    z_data_copy();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调用主函数 */</span></span><br><span class="line">    z_arm_start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="链接脚本"><a href="#链接脚本" class="headerlink" title="链接脚本"></a>链接脚本</h3><ol><li><strong>内存布局</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/* soc/arm/vendor/my_soc/linker.ld */</span><br><span class="line">MEMORY</span><br><span class="line">&#123;</span><br><span class="line">    FLASH (rx) : ORIGIN = 0x00000000, LENGTH = 1M</span><br><span class="line">    RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 256K</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    .text :</span><br><span class="line">    &#123;</span><br><span class="line">        __text_start = .;</span><br><span class="line">        *(.text*)</span><br><span class="line">        __text_end = .;</span><br><span class="line">    &#125; &gt; FLASH</span><br><span class="line"></span><br><span class="line">    .rodata :</span><br><span class="line">    &#123;</span><br><span class="line">        __rodata_start = .;</span><br><span class="line">        *(.rodata*)</span><br><span class="line">        __rodata_end = .;</span><br><span class="line">    &#125; &gt; FLASH</span><br><span class="line"></span><br><span class="line">    .data :</span><br><span class="line">    &#123;</span><br><span class="line">        __data_start = .;</span><br><span class="line">        *(.data*)</span><br><span class="line">        __data_end = .;</span><br><span class="line">    &#125; &gt; RAM AT &gt; FLASH</span><br><span class="line"></span><br><span class="line">    .bss :</span><br><span class="line">    &#123;</span><br><span class="line">        __bss_start = .;</span><br><span class="line">        *(.bss*)</span><br><span class="line">        __bss_end = .;</span><br><span class="line">    &#125; &gt; RAM</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h3><ol><li><p><strong>时钟配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/soc_init.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置时钟 */</span></span><br><span class="line">    configure_system_clock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置中断 */</span></span><br><span class="line">    NVIC_SetPriority(PendSV_IRQn, _EXC_PENDSV_PRIO);</span><br><span class="line">    NVIC_SetPriority(SysTick_IRQn, _EXC_SYSTICK_PRIO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>中断配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* soc/arm/vendor/my_soc/irq_init.c */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">z_arm_irq_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 配置中断向量表 */</span></span><br><span class="line">    SCB-&gt;VTOR = (<span class="type">uint32_t</span>)_vector_table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置中断优先级组 */</span></span><br><span class="line">    NVIC_SetPriorityGrouping(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    __enable_irq();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试支持"><a href="#调试支持" class="headerlink" title="调试支持"></a>调试支持</h2><h3 id="JTAG-SWD"><a href="#JTAG-SWD" class="headerlink" title="JTAG&#x2F;SWD"></a>JTAG&#x2F;SWD</h3><ol><li><p><strong>调试接口配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># boards/arm/my_board/board.cmake</span><br><span class="line">board_runner_args(jlink &quot;--device=my_soc&quot; &quot;--speed=4000&quot;)</span><br><span class="line">include($&#123;ZEPHYR_BASE&#125;/boards/common/jlink.board.cmake)</span><br></pre></td></tr></table></figure></li><li><p><strong>OpenOCD 配置</strong></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boards/arm/my_board/support/openocd.cfg</span></span><br><span class="line"><span class="keyword">source</span> [find interface/jlink.cfg]</span><br><span class="line">transport select swd</span><br><span class="line"><span class="keyword">source</span> [find target/my_soc.cfg]</span><br><span class="line"></span><br><span class="line">adapter_khz <span class="number">4000</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$_TARGETNAME</span> configure -event gdb-attach &#123;</span><br><span class="line">    echo <span class="string">&quot;Debugger attaching...&quot;</span></span><br><span class="line">    reset init</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="串口调试"><a href="#串口调试" class="headerlink" title="串口调试"></a>串口调试</h3><ol><li><p><strong>串口配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 串口初始化 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">board_init_debug_console</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line"></span><br><span class="line">    dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uart_configure(dev, &amp;uart_config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>调试输出</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 调试输出函数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">arch_printk_char_out</span><span class="params">(<span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line"></span><br><span class="line">    dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));</span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uart_poll_out(dev, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-移植策略"><a href="#1-移植策略" class="headerlink" title="1. 移植策略"></a>1. 移植策略</h3><ul><li>分步骤移植</li><li>验证每个步骤</li><li>保持代码清晰</li><li>文档完善</li></ul><h3 id="2-硬件抽象"><a href="#2-硬件抽象" class="headerlink" title="2. 硬件抽象"></a>2. 硬件抽象</h3><ul><li>使用设备树</li><li>驱动抽象</li><li>配置灵活</li><li>接口统一</li></ul><h3 id="3-调试支持"><a href="#3-调试支持" class="headerlink" title="3. 调试支持"></a>3. 调试支持</h3><ul><li>完整调试接口</li><li>日志系统</li><li>错误处理</li><li>性能监控</li></ul><h3 id="4-文档维护"><a href="#4-文档维护" class="headerlink" title="4. 文档维护"></a>4. 文档维护</h3><ul><li>硬件文档</li><li>移植指南</li><li>API 文档</li><li>示例代码</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-启动问题"><a href="#1-启动问题" class="headerlink" title="1. 启动问题"></a>1. 启动问题</h3><p><strong>问题</strong>：系统无法启动</p><p><strong>解决方案</strong>：</p><ul><li>检查时钟配置</li><li>验证启动代码</li><li>检查链接脚本</li><li>调试复位向量</li></ul><h3 id="2-驱动问题"><a href="#2-驱动问题" class="headerlink" title="2. 驱动问题"></a>2. 驱动问题</h3><p><strong>问题</strong>：驱动无法工作</p><p><strong>解决方案</strong>：</p><ul><li>检查硬件配置</li><li>验证驱动代码</li><li>测试中断处理</li><li>检查时序要求</li></ul><h3 id="3-内存问题"><a href="#3-内存问题" class="headerlink" title="3. 内存问题"></a>3. 内存问题</h3><p><strong>问题</strong>：内存访问错误</p><p><strong>解决方案</strong>：</p><ul><li>检查内存映射</li><li>验证栈配置</li><li>检查对齐要求</li><li>分析内存使用</li></ul><h3 id="4-调试问题"><a href="#4-调试问题" class="headerlink" title="4. 调试问题"></a>4. 调试问题</h3><p><strong>问题</strong>：无法调试</p><p><strong>解决方案</strong>：</p><ul><li>检查调试接口</li><li>验证调试配置</li><li>测试串口通信</li><li>使用调试工具</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将 Zephyr RTOS 移植到新的硬件平台需要系统的方法和细致的工作。通过正确实施板级支持包开发、SOC 适配、驱动移植和启动配置，可以成功将 Zephyr 移植到新的硬件平台。本文档提供了详细的指导和实例，帮助开发者完成移植工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-移植指南&quot;&gt;&lt;a href=&quot;#Zephyr-移植指南&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 移植指南&quot;&gt;&lt;/a&gt;Zephyr 移植指南&lt;/h1&gt;&lt;p&gt;本文档详细介绍了如何将 Zephyr RTOS 移植到新的硬件平台，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>security</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/security/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/security/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-安全开发"><a href="#Zephyr-安全开发" class="headerlink" title="Zephyr 安全开发"></a>Zephyr 安全开发</h1><p>本文档详细介绍了 Zephyr RTOS 的安全开发功能，包括安全启动、加密服务、安全存储和访问控制等内容。</p><h2 id="安全启动"><a href="#安全启动" class="headerlink" title="安全启动"></a>安全启动</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p><strong>安全启动流程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">引导加载程序 -&gt; 验证固件 -&gt; 加载固件 -&gt; 执行应用</span><br></pre></td></tr></table></figure></li><li><p><strong>验证机制</strong></p></li></ol><ul><li>数字签名验证</li><li>哈希校验</li><li>版本控制</li><li>回滚保护</li></ul><h3 id="MCUboot-配置"><a href="#MCUboot-配置" class="headerlink" title="MCUboot 配置"></a>MCUboot 配置</h3><ol><li><p><strong>基本配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># MCUboot Kconfig 配置</span><br><span class="line">CONFIG_BOOTLOADER_MCUBOOT=y</span><br><span class="line">CONFIG_MCUBOOT_SIGNATURE_TYPE_RSA=y</span><br><span class="line">CONFIG_MCUBOOT_SIGNATURE_KEY_FILE=&quot;bootloader/mcuboot/root-rsa-2048.pem&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>签名配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 签名配置结构 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mcuboot_sign_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> key_id;</span><br><span class="line">    <span class="type">uint16_t</span> algorithm;</span><br><span class="line">    <span class="type">uint16_t</span> key_size;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span> *public_key;</span><br><span class="line">    <span class="type">uint16_t</span> public_key_len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h3><ol><li><p><strong>验证固件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 固件验证函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">verify_firmware</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> flash_area *fa,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="keyword">struct</span> mcuboot_sign_config *cfg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">image_header</span> <span class="title">hdr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取镜像头 */</span></span><br><span class="line">    rc = flash_area_read(fa, <span class="number">0</span>, &amp;hdr, <span class="keyword">sizeof</span>(hdr));</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证签名 */</span></span><br><span class="line">    rc = boot_image_verify(&amp;hdr, fa, cfg);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>更新固件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 固件更新函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">update_firmware</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> flash_area *fa,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 擦除分区 */</span></span><br><span class="line">    rc = flash_area_erase(fa, <span class="number">0</span>, fa-&gt;fa_size);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写入新固件 */</span></span><br><span class="line">    rc = flash_area_write(fa, <span class="number">0</span>, data, size);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="加密服务"><a href="#加密服务" class="headerlink" title="加密服务"></a>加密服务</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><ol><li><p><strong>AES 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* AES 配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cipher_ctx</span> <span class="title">ctx</span> =</span> &#123;</span><br><span class="line">    .keylen = <span class="number">16</span>,</span><br><span class="line">    .key = key,</span><br><span class="line">    .flags = CAP_RAW_KEY | CAP_SYNC_OPS,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* AES-CBC 模式 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cipher_pkt</span> <span class="title">enc</span> =</span> &#123;</span><br><span class="line">    .in_buf = in_buf,</span><br><span class="line">    .in_len = in_len,</span><br><span class="line">    .out_buf = out_buf,</span><br><span class="line">    .out_len = out_len</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>加密操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* AES 加密 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">aes_encrypt</span><span class="params">(<span class="keyword">struct</span> cipher_ctx *ctx,</span></span><br><span class="line"><span class="params">                      <span class="keyword">struct</span> cipher_pkt *enc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化加密上下文 */</span></span><br><span class="line">    ret = cipher_begin_session(ctx-&gt;device, ctx,</span><br><span class="line">                             CRYPTO_CIPHER_ALGO_AES,</span><br><span class="line">                             CRYPTO_CIPHER_MODE_CBC,</span><br><span class="line">                             CRYPTO_CIPHER_OP_ENCRYPT);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行加密 */</span></span><br><span class="line">    ret = cipher_cbc_op(ctx, enc);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cipher_free_session(ctx-&gt;device, ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><ol><li><p><strong>RSA 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* RSA 配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rsa_key</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> *n;  <span class="comment">/* 模数 */</span></span><br><span class="line">    <span class="type">uint8_t</span> *e;  <span class="comment">/* 公钥指数 */</span></span><br><span class="line">    <span class="type">uint8_t</span> *d;  <span class="comment">/* 私钥指数 */</span></span><br><span class="line">    <span class="type">size_t</span> len;  <span class="comment">/* 密钥长度 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>签名验证</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* RSA 签名验证 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">rsa_verify</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> rsa_key *key,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> len,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> <span class="type">uint8_t</span> *sig, <span class="type">size_t</span> sig_len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    mbedtls_rsa_context rsa;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化 RSA 上下文 */</span></span><br><span class="line">    mbedtls_rsa_init(&amp;rsa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 导入公钥 */</span></span><br><span class="line">    ret = mbedtls_rsa_import_raw(&amp;rsa, key-&gt;n, key-&gt;len,</span><br><span class="line">                                <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>,</span><br><span class="line">                                key-&gt;e, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证签名 */</span></span><br><span class="line">    ret = mbedtls_rsa_pkcs1_verify(&amp;rsa, <span class="literal">NULL</span>, <span class="literal">NULL</span>,</span><br><span class="line">                                  MBEDTLS_RSA_PUBLIC,</span><br><span class="line">                                  MBEDTLS_MD_SHA256,</span><br><span class="line">                                  <span class="number">32</span>, data, sig);</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line">    mbedtls_rsa_free(&amp;rsa);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><ol><li><p><strong>SHA-256 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SHA-256 配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hash_ctx</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tc_sha256_state_struct</span> <span class="title">sha256_state</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> digest[TC_SHA256_DIGEST_SIZE];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>计算哈希</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算 SHA-256 哈希 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">calc_sha256</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> len,</span></span><br><span class="line"><span class="params">                      <span class="type">uint8_t</span> *digest)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hash_ctx</span> <span class="title">ctx</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化哈希上下文 */</span></span><br><span class="line">    ret = tc_sha256_init(&amp;ctx.sha256_state);</span><br><span class="line">    <span class="keyword">if</span> (ret != TC_CRYPTO_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 更新哈希 */</span></span><br><span class="line">    ret = tc_sha256_update(&amp;ctx.sha256_state, data, len);</span><br><span class="line">    <span class="keyword">if</span> (ret != TC_CRYPTO_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 完成哈希计算 */</span></span><br><span class="line">    ret = tc_sha256_final(digest, &amp;ctx.sha256_state);</span><br><span class="line">    <span class="keyword">if</span> (ret != TC_CRYPTO_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="安全存储"><a href="#安全存储" class="headerlink" title="安全存储"></a>安全存储</h2><h3 id="文件系统加密"><a href="#文件系统加密" class="headerlink" title="文件系统加密"></a>文件系统加密</h3><ol><li><p><strong>配置加密文件系统</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 加密文件系统配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">enc_fs_config</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_mount_t</span> *<span class="title">mp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cipher_ctx</span> <span class="title">enc_ctx</span>;</span></span><br><span class="line">    <span class="type">uint8_t</span> key[<span class="number">16</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>加密操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 加密文件写入 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">write_encrypted_file</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> enc_fs_config *cfg,</span></span><br><span class="line"><span class="params">                              <span class="type">const</span> <span class="type">char</span> *path,</span></span><br><span class="line"><span class="params">                              <span class="type">const</span> <span class="type">void</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *enc_buf;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 分配加密缓冲区 */</span></span><br><span class="line">    enc_buf = k_malloc(len + <span class="number">16</span>);  <span class="comment">/* 包含 IV */</span></span><br><span class="line">    <span class="keyword">if</span> (!enc_buf) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 加密数据 */</span></span><br><span class="line">    ret = encrypt_data(&amp;cfg-&gt;enc_ctx, data, len,</span><br><span class="line">                      enc_buf + <span class="number">16</span>, len);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        k_free(enc_buf);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写入文件 */</span></span><br><span class="line">    ret = fs_write(cfg-&gt;mp, path, enc_buf, len + <span class="number">16</span>);</span><br><span class="line">    k_free(enc_buf);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="安全密钥存储"><a href="#安全密钥存储" class="headerlink" title="安全密钥存储"></a>安全密钥存储</h3><ol><li><p><strong>密钥存储配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 密钥存储配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key_storage</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> *storage_area;</span><br><span class="line">    <span class="type">size_t</span> storage_size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cipher_ctx</span> <span class="title">enc_ctx</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>密钥操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 存储密钥 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">store_key</span><span class="params">(<span class="keyword">struct</span> key_storage *ks,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">size_t</span> key_len,</span></span><br><span class="line"><span class="params">                    <span class="type">uint32_t</span> key_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key_entry</span> &#123;</span></span><br><span class="line">        <span class="type">uint32_t</span> id;</span><br><span class="line">        <span class="type">uint16_t</span> len;</span><br><span class="line">        <span class="type">uint8_t</span> data[];</span><br><span class="line">    &#125; *entry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查找存储位置 */</span></span><br><span class="line">    entry = find_key_slot(ks, key_id);</span><br><span class="line">    <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENOSPC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 加密密钥 */</span></span><br><span class="line">    ret = encrypt_key(&amp;ks-&gt;enc_ctx, key, key_len,</span><br><span class="line">                     entry-&gt;data);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    entry-&gt;id = key_id;</span><br><span class="line">    entry-&gt;len = key_len;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><h3 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h3><ol><li><p><strong>认证配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 认证配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> hash[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint8_t</span> salt[<span class="number">16</span>];</span><br><span class="line">    <span class="type">uint32_t</span> iterations;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>密码验证</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 验证密码 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">verify_password</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> auth_config *cfg,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> <span class="type">char</span> *password)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> hash[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算密码哈希 */</span></span><br><span class="line">    ret = pbkdf2_hmac_sha256(password, <span class="built_in">strlen</span>(password),</span><br><span class="line">                            cfg-&gt;salt, <span class="keyword">sizeof</span>(cfg-&gt;salt),</span><br><span class="line">                            cfg-&gt;iterations, hash);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 比较哈希值 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">memcmp</span>(hash, cfg-&gt;hash, <span class="keyword">sizeof</span>(hash)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EPERM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><ol><li><p><strong>权限配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 权限配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">acl_entry</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> resource_id;</span><br><span class="line">    <span class="type">uint32_t</span> permissions;</span><br><span class="line">    <span class="type">uint32_t</span> user_id;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>权限检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 检查权限 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">check_permission</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> acl_entry *acl,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> user_id,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> resource_id,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> required_perm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (acl-&gt;resource_id != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (acl-&gt;resource_id == resource_id &amp;&amp;</span><br><span class="line">            acl-&gt;user_id == user_id) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((acl-&gt;permissions &amp; required_perm) ==</span><br><span class="line">                required_perm) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -EPERM;</span><br><span class="line">        &#125;</span><br><span class="line">        acl++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -EACCES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="安全监控"><a href="#安全监控" class="headerlink" title="安全监控"></a>安全监控</h2><h3 id="日志审计"><a href="#日志审计" class="headerlink" title="日志审计"></a>日志审计</h3><ol><li><p><strong>审计配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 审计配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">audit_config</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">log_backend</span> *<span class="title">backend</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> log_level;</span><br><span class="line">    <span class="type">bool</span> enabled;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>审计记录</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 记录审计日志 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">audit_log</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> audit_config *cfg,</span></span><br><span class="line"><span class="params">                     <span class="type">uint32_t</span> event_id,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> <span class="type">char</span> *msg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cfg-&gt;enabled) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录事件 */</span></span><br><span class="line">    LOG_MODULE_DECLARE(audit, cfg-&gt;log_level);</span><br><span class="line">    LOG_INF(<span class="string">&quot;Event %u: %s&quot;</span>, event_id, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="入侵检测"><a href="#入侵检测" class="headerlink" title="入侵检测"></a>入侵检测</h3><ol><li><p><strong>IDS 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* IDS 配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ids_config</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> threshold;</span><br><span class="line">    <span class="type">uint32_t</span> window_size;</span><br><span class="line">    <span class="type">void</span> (*alert_handler)(<span class="type">uint32_t</span> event_id);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>检测逻辑</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 入侵检测 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">check_intrusion</span><span class="params">(<span class="keyword">struct</span> ids_config *cfg,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> event_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uint32_t</span> event_count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int64_t</span> window_start = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int64_t</span> now = k_uptime_get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查时间窗口 */</span></span><br><span class="line">    <span class="keyword">if</span> (now - window_start &gt; cfg-&gt;window_size) &#123;</span><br><span class="line">        event_count = <span class="number">0</span>;</span><br><span class="line">        window_start = now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 增加事件计数 */</span></span><br><span class="line">    event_count++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查阈值 */</span></span><br><span class="line">    <span class="keyword">if</span> (event_count &gt; cfg-&gt;threshold) &#123;</span><br><span class="line">        cfg-&gt;alert_handler(event_id);</span><br><span class="line">        event_count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-安全配置"><a href="#1-安全配置" class="headerlink" title="1. 安全配置"></a>1. 安全配置</h3><ul><li>使用安全默认值</li><li>禁用不必要服务</li><li>定期更新固件</li><li>实施最小权限</li></ul><h3 id="2-密钥管理"><a href="#2-密钥管理" class="headerlink" title="2. 密钥管理"></a>2. 密钥管理</h3><ul><li>安全生成密钥</li><li>定期轮换密钥</li><li>安全存储密钥</li><li>销毁敏感数据</li></ul><h3 id="3-错误处理"><a href="#3-错误处理" class="headerlink" title="3. 错误处理"></a>3. 错误处理</h3><ul><li>不泄露敏感信息</li><li>记录安全事件</li><li>实现失败安全</li><li>优雅降级</li></ul><h3 id="4-代码安全"><a href="#4-代码安全" class="headerlink" title="4. 代码安全"></a>4. 代码安全</h3><ul><li>输入验证</li><li>缓冲区检查</li><li>安全编码实践</li><li>代码审查</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-启动失败"><a href="#1-启动失败" class="headerlink" title="1. 启动失败"></a>1. 启动失败</h3><p><strong>问题</strong>：安全启动验证失败</p><p><strong>解决方案</strong>：</p><ul><li>检查签名</li><li>验证密钥</li><li>更新固件</li><li>检查启动配置</li></ul><h3 id="2-加密错误"><a href="#2-加密错误" class="headerlink" title="2. 加密错误"></a>2. 加密错误</h3><p><strong>问题</strong>：加密操作失败</p><p><strong>解决方案</strong>：</p><ul><li>检查密钥</li><li>验证参数</li><li>确认算法</li><li>检查内存</li></ul><h3 id="3-认证问题"><a href="#3-认证问题" class="headerlink" title="3. 认证问题"></a>3. 认证问题</h3><p><strong>问题</strong>：认证失败</p><p><strong>解决方案</strong>：</p><ul><li>验证凭证</li><li>检查配置</li><li>更新密码</li><li>检查权限</li></ul><h3 id="4-安全漏洞"><a href="#4-安全漏洞" class="headerlink" title="4. 安全漏洞"></a>4. 安全漏洞</h3><p><strong>问题</strong>：发现安全漏洞</p><p><strong>解决方案</strong>：</p><ul><li>评估影响</li><li>及时修复</li><li>更新系统</li><li>加强监控</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了全面的安全功能，包括安全启动、加密服务、安全存储和访问控制等。通过正确实施这些安全措施，可以显著提高系统的安全性。本文档提供了详细的指导和实例，帮助开发者构建安全的嵌入式系统。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-安全开发&quot;&gt;&lt;a href=&quot;#Zephyr-安全开发&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 安全开发&quot;&gt;&lt;/a&gt;Zephyr 安全开发&lt;/h1&gt;&lt;p&gt;本文档详细介绍了 Zephyr RTOS 的安全开发功能，包括安全启</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>testing</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/testing/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/development/testing/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:20:53.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-测试与调试"><a href="#Zephyr-测试与调试" class="headerlink" title="Zephyr 测试与调试"></a>Zephyr 测试与调试</h1><p>本文档详细介绍了 Zephyr RTOS 的测试和调试功能，包括单元测试、集成测试、调试技术和性能分析等内容。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><ol><li><p><strong>Ztest 配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 测试配置 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试套件 */</span></span><br><span class="line">ZTEST_SUITE(my_test_suite, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试用例 */</span></span><br><span class="line">ZTEST(my_test_suite, test_function)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 测试代码 */</span></span><br><span class="line">    zassert_true(condition, <span class="string">&quot;Test failed&quot;</span>);</span><br><span class="line">    zassert_equal(a, b, <span class="string">&quot;Values not equal&quot;</span>);</span><br><span class="line">    zassert_not_null(ptr, <span class="string">&quot;Pointer is NULL&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试夹具</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化测试环境 */</span></span><br><span class="line">    <span class="keyword">return</span> test_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">teardown</span><span class="params">(<span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 清理测试环境 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ZTEST_SUITE(my_suite, <span class="literal">NULL</span>, setup, <span class="literal">NULL</span>, teardown, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试实现"><a href="#测试实现" class="headerlink" title="测试实现"></a>测试实现</h3><ol><li><p><strong>基本测试</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数测试 */</span></span><br><span class="line">ZTEST(basic_tests, test_addition)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result = add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    zassert_equal(result, <span class="number">5</span>, <span class="string">&quot;Addition failed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 边界测试 */</span></span><br><span class="line">ZTEST(basic_tests, test_boundaries)</span><br><span class="line">&#123;</span><br><span class="line">    zassert_equal(add(INT_MAX, <span class="number">1</span>), INT_MIN,</span><br><span class="line">                 <span class="string">&quot;Overflow not handled&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>模拟和存根</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 模拟函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mock_read</span><span class="params">(<span class="type">void</span> *buf, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 返回测试数据 */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(buf, test_data, len);</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用模拟 */</span></span><br><span class="line">ZTEST(mock_tests, test_with_mock)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 替换原始函数 */</span></span><br><span class="line">    ztest_mock_function_replace(read, mock_read);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行测试 */</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">64</span>];</span><br><span class="line">    <span class="type">int</span> ret = read(buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    zassert_equal(ret, <span class="keyword">sizeof</span>(buf), <span class="string">&quot;Read failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 恢复原始函数 */</span></span><br><span class="line">    ztest_mock_function_restore(read);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ol><li><p><strong>QEMU 测试</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMakeLists.txt</span></span><br><span class="line"><span class="keyword">target_compile_definitions</span>(app PRIVATE</span><br><span class="line">    -DCONFIG_TEST_ENVIRONMENT</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">west build -b qemu_x86 tests/integration</span><br><span class="line">west build -t run</span><br></pre></td></tr></table></figure></li><li><p><strong>硬件测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在实际硬件上运行测试</span></span><br><span class="line">west build -b nrf52840dk_nrf52840 tests/integration</span><br><span class="line">west flash</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h3><ol><li><p><strong>系统测试</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 系统初始化测试 */</span></span><br><span class="line">ZTEST(system_tests, test_init)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 验证系统初始化 */</span></span><br><span class="line">    zassert_true(is_system_ready(), <span class="string">&quot;System not ready&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 检查关键服务 */</span></span><br><span class="line">    zassert_not_null(get_main_service(),</span><br><span class="line">                     <span class="string">&quot;Main service not initialized&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>网络测试</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网络连接测试 */</span></span><br><span class="line">ZTEST(network_tests, test_connection)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">net_if</span> *<span class="title">iface</span> =</span> net_if_get_default();</span><br><span class="line">    zassert_not_null(iface, <span class="string">&quot;No network interface&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待连接 */</span></span><br><span class="line">    k_sem_take(&amp;wait_for_connect, K_SECONDS(<span class="number">10</span>));</span><br><span class="line">    zassert_true(net_if_is_up(iface),</span><br><span class="line">                 <span class="string">&quot;Network interface not up&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试技术"><a href="#调试技术" class="headerlink" title="调试技术"></a>调试技术</h2><h3 id="GDB-调试"><a href="#GDB-调试" class="headerlink" title="GDB 调试"></a>GDB 调试</h3><ol><li><p><strong>启动调试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动调试会话</span></span><br><span class="line">west debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用特定调试器</span></span><br><span class="line">west debug --runner jlink</span><br></pre></td></tr></table></figure></li><li><p><strong>调试命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 设置断点</span><br><span class="line">break main</span><br><span class="line">break file.c:123</span><br><span class="line"></span><br><span class="line"># 检查变量</span><br><span class="line">print variable</span><br><span class="line">print *pointer</span><br><span class="line">print array[index]</span><br><span class="line"></span><br><span class="line"># 查看内存</span><br><span class="line">x/10x 0x20000000</span><br><span class="line">x/s string_ptr</span><br><span class="line"></span><br><span class="line"># 查看寄存器</span><br><span class="line">info registers</span><br><span class="line">print $pc</span><br></pre></td></tr></table></figure></li></ol><h3 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h3><ol><li><p><strong>配置日志</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 模块日志 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(my_module, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用日志 */</span></span><br><span class="line">LOG_INF(<span class="string">&quot;System initialized&quot;</span>);</span><br><span class="line">LOG_DBG(<span class="string">&quot;Debug value: %d&quot;</span>, value);</span><br><span class="line">LOG_WRN(<span class="string">&quot;Warning condition&quot;</span>);</span><br><span class="line">LOG_ERR(<span class="string">&quot;Error occurred: %d&quot;</span>, err);</span><br></pre></td></tr></table></figure></li><li><p><strong>日志过滤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置日志级别</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_LOG_DEFAULT_LEVEL=3</span><br><span class="line">CONFIG_LOG_OVERRIDE_LEVEL=0</span><br></pre></td></tr></table></figure></li></ol><h3 id="内存调试"><a href="#内存调试" class="headerlink" title="内存调试"></a>内存调试</h3><ol><li><p><strong>堆检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 内存分配跟踪 */</span></span><br><span class="line"><span class="type">void</span> *ptr = k_malloc(size);</span><br><span class="line"><span class="keyword">if</span> (!ptr) &#123;</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Memory allocation failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 内存释放 */</span></span><br><span class="line">k_free(ptr);</span><br></pre></td></tr></table></figure></li><li><p><strong>栈检查</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 检查栈使用 */</span></span><br><span class="line">K_THREAD_STACK_DEFINE(my_stack, <span class="number">1024</span>);</span><br><span class="line"><span class="type">size_t</span> unused = k_thread_stack_space_get(thread);</span><br><span class="line">LOG_INF(<span class="string">&quot;Unused stack: %zu&quot;</span>, unused);</span><br></pre></td></tr></table></figure></li></ol><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="时间测量"><a href="#时间测量" class="headerlink" title="时间测量"></a>时间测量</h3><ol><li><p><strong>基本计时</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用系统时钟 */</span></span><br><span class="line"><span class="type">uint32_t</span> start = k_cycle_get_32();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行代码 */</span></span><br><span class="line">do_something();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算时间 */</span></span><br><span class="line"><span class="type">uint32_t</span> cycles = k_cycle_get_32() - start;</span><br><span class="line"><span class="type">uint32_t</span> ns = k_cyc_to_ns_floor64(cycles);</span><br></pre></td></tr></table></figure></li><li><p><strong>高精度计时</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用高精度计时器 */</span></span><br><span class="line"><span class="type">timing_t</span> start_time, end_time;</span><br><span class="line"></span><br><span class="line">timing_init();</span><br><span class="line">timing_start();</span><br><span class="line"></span><br><span class="line">start_time = timing_counter_get();</span><br><span class="line"><span class="comment">/* 执行代码 */</span></span><br><span class="line">end_time = timing_counter_get();</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> cycles = timing_cycles_get(&amp;start_time, &amp;end_time);</span><br><span class="line"><span class="type">uint64_t</span> ns = timing_cycles_to_ns(cycles);</span><br></pre></td></tr></table></figure></li></ol><h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><ol><li><p><strong>CPU 使用率</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CPU 负载监控 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_thread_runtime_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">k_thread_runtime_stats_get(thread, &amp;stats);</span><br><span class="line"></span><br><span class="line">LOG_INF(<span class="string">&quot;CPU cycles: %llu&quot;</span>, stats.execution_cycles);</span><br></pre></td></tr></table></figure></li><li><p><strong>内存使用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 内存使用监控 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">k_mem_slab_info</span> <span class="title">info</span>;</span></span><br><span class="line">k_mem_slab_info_get(&amp;my_slab, &amp;info);</span><br><span class="line"></span><br><span class="line">LOG_INF(<span class="string">&quot;Total blocks: %zu&quot;</span>, info.num_blocks);</span><br><span class="line">LOG_INF(<span class="string">&quot;Free blocks: %zu&quot;</span>, info.num_free);</span><br></pre></td></tr></table></figure></li></ol><h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><h3 id="1-系统查看器"><a href="#1-系统查看器" class="headerlink" title="1. 系统查看器"></a>1. 系统查看器</h3><ol><li><p><strong>SystemView 配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 启用 SystemView</span><br><span class="line">CONFIG_SEGGER_SYSTEMVIEW=y</span><br><span class="line">CONFIG_USE_SEGGER_RTT=y</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 SystemView</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 记录事件 */</span></span><br><span class="line">SEGGER_SYSVIEW_RecordU32(ID_EVENT, value);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 记录任务切换 */</span></span><br><span class="line">SEGGER_SYSVIEW_OnTaskStartExec(task_id);</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-内存分析器"><a href="#2-内存分析器" class="headerlink" title="2. 内存分析器"></a>2. 内存分析器</h3><ol><li><p><strong>堆分析</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 启用堆监控 */</span></span><br><span class="line">CONFIG_HEAP_MEM_POOL_SIZE=<span class="number">16384</span></span><br><span class="line">CONFIG_HEAP_LISTENER=y</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 监控分配 */</span></span><br><span class="line"><span class="type">void</span> heap_alloc_cb(<span class="type">uintptr_t</span> heap_id, <span class="type">void</span> *mem, <span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">    LOG_INF(<span class="string">&quot;Allocated %zu bytes at %p&quot;</span>, bytes, mem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>内存映射</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成内存映射</span></span><br><span class="line">west build -t ram_report</span><br><span class="line">west build -t rom_report</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-覆盖率分析"><a href="#3-覆盖率分析" class="headerlink" title="3. 覆盖率分析"></a>3. 覆盖率分析</h3><ol><li><p><strong>配置覆盖率</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 启用覆盖率</span><br><span class="line">CONFIG_COVERAGE=y</span><br><span class="line">CONFIG_COVERAGE_GCOV=y</span><br></pre></td></tr></table></figure></li><li><p><strong>生成报告</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">west build -t run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成覆盖率报告</span></span><br><span class="line">gcovr -r . --html --html-details -o coverage.html</span><br></pre></td></tr></table></figure></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-测试策略"><a href="#1-测试策略" class="headerlink" title="1. 测试策略"></a>1. 测试策略</h3><ul><li>编写全面的测试</li><li>自动化测试流程</li><li>持续集成测试</li><li>回归测试</li></ul><h3 id="2-调试方法"><a href="#2-调试方法" class="headerlink" title="2. 调试方法"></a>2. 调试方法</h3><ul><li>系统化调试</li><li>日志分级</li><li>错误追踪</li><li>性能优化</li></ul><h3 id="3-文档维护"><a href="#3-文档维护" class="headerlink" title="3. 文档维护"></a>3. 文档维护</h3><ul><li>测试文档</li><li>调试指南</li><li>性能报告</li><li>问题追踪</li></ul><h3 id="4-工具使用"><a href="#4-工具使用" class="headerlink" title="4. 工具使用"></a>4. 工具使用</h3><ul><li>选择合适工具</li><li>自动化工具</li><li>集成开发环境</li><li>版本控制</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-测试失败"><a href="#1-测试失败" class="headerlink" title="1. 测试失败"></a>1. 测试失败</h3><p><strong>问题</strong>：测试用例失败</p><p><strong>解决方案</strong>：</p><ul><li>检查测试环境</li><li>验证测试数据</li><li>分析失败原因</li><li>修复问题代码</li></ul><h3 id="2-调试困难"><a href="#2-调试困难" class="headerlink" title="2. 调试困难"></a>2. 调试困难</h3><p><strong>问题</strong>：难以定位问题</p><p><strong>解决方案</strong>：</p><ul><li>增加日志</li><li>使用调试器</li><li>简化问题</li><li>隔离故障</li></ul><h3 id="3-性能问题"><a href="#3-性能问题" class="headerlink" title="3. 性能问题"></a>3. 性能问题</h3><p><strong>问题</strong>：性能不达标</p><p><strong>解决方案</strong>：</p><ul><li>性能分析</li><li>优化代码</li><li>调整配置</li><li>监控资源</li></ul><h3 id="4-内存问题"><a href="#4-内存问题" class="headerlink" title="4. 内存问题"></a>4. 内存问题</h3><p><strong>问题</strong>：内存泄漏</p><p><strong>解决方案</strong>：</p><ul><li>内存跟踪</li><li>检查分配</li><li>验证释放</li><li>使用工具</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr RTOS 提供了丰富的测试和调试工具，支持从单元测试到系统级调试的各种需求。通过合理使用这些工具，可以提高代码质量，加快问题定位和解决速度。本文档提供了详细的指导和实例，帮助开发者更好地进行测试和调试工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-测试与调试&quot;&gt;&lt;a href=&quot;#Zephyr-测试与调试&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 测试与调试&quot;&gt;&lt;/a&gt;Zephyr 测试与调试&lt;/h1&gt;&lt;p&gt;本文档详细介绍了 Zephyr RTOS 的测试和调试功能，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zephyr DMA 子系统指南</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/dma/README/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/dma/README/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T14:16:58.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-DMA-管理指南"><a href="#Zephyr-DMA-管理指南" class="headerlink" title="Zephyr DMA 管理指南"></a>Zephyr DMA 管理指南</h1><h2 id="1-DMA-概述"><a href="#1-DMA-概述" class="headerlink" title="1. DMA 概述"></a>1. DMA 概述</h2><p>DMA（直接内存访问）是一种允许外设直接访问系统内存而无需 CPU 干预的技术，能显著提高数据传输效率。Zephyr RTOS 提供了统一的 DMA API，支持各种硬件平台的 DMA 控制器。</p><h2 id="2-DMA-配置"><a href="#2-DMA-配置" class="headerlink" title="2. DMA 配置"></a>2. DMA 配置</h2><h3 id="2-1-基本配置-prj-conf"><a href="#2-1-基本配置-prj-conf" class="headerlink" title="2.1 基本配置 (prj.conf)"></a>2.1 基本配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># DMA 支持</span><br><span class="line">CONFIG_DMA=y</span><br><span class="line">CONFIG_DMA_64BIT=y  # 如果需要 64 位 DMA 支持</span><br><span class="line"></span><br><span class="line"># 特定控制器支持（根据硬件选择）</span><br><span class="line">CONFIG_DMA_STM32=y  # STM32 DMA 控制器</span><br><span class="line"># 或</span><br><span class="line">CONFIG_DMA_NRFX=y   # Nordic nRF DMA 控制器</span><br><span class="line"># 或</span><br><span class="line">CONFIG_DMA_SAM0=y   # Atmel SAM0 DMA 控制器</span><br><span class="line"></span><br><span class="line"># DMA 调试支持</span><br><span class="line">CONFIG_DMA_LOG_LEVEL_DBG=y</span><br></pre></td></tr></table></figure><h3 id="2-2-设备树配置"><a href="#2-2-设备树配置" class="headerlink" title="2.2 设备树配置"></a>2.2 设备树配置</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&amp;dma0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为特定外设配置 DMA */</span></span><br><span class="line"><span class="variable">&amp;uart0</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">dmas</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;dma0</span> <span class="number">0</span> <span class="number">0</span>&gt;</span>, <span class="params">&lt;<span class="variable">&amp;dma0</span> <span class="number">1</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="attr">dma-names</span> <span class="operator">=</span> <span class="string">&quot;tx&quot;</span>, <span class="string">&quot;rx&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h2 id="3-DMA-基本操作"><a href="#3-DMA-基本操作" class="headerlink" title="3. DMA 基本操作"></a>3. DMA 基本操作</h2><h3 id="3-1-DMA-初始化与配置"><a href="#3-1-DMA-初始化与配置" class="headerlink" title="3.1 DMA 初始化与配置"></a>3.1 DMA 初始化与配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dma_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA controller device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 源数据和目标缓冲区 */</span></span><br><span class="line">    <span class="type">uint8_t</span> tx_data[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_data[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 填充源数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_data); i++) &#123;</span><br><span class="line">        tx_data[i] = i &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg.block_size = <span class="keyword">sizeof</span>(tx_data);</span><br><span class="line">    dma_block_cfg.source_address = (<span class="type">uint32_t</span>)tx_data;</span><br><span class="line">    dma_block_cfg.dest_address = (<span class="type">uint32_t</span>)rx_data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_MEMORY;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待传输完成 */</span></span><br><span class="line">    k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(rx_data); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rx_data[i] != tx_data[i]) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Data mismatch at index %d: %u != %u\n&quot;</span>,</span><br><span class="line">                   i, rx_data[i], tx_data[i]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;DMA transfer completed successfully\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-DMA-回调处理"><a href="#4-DMA-回调处理" class="headerlink" title="4. DMA 回调处理"></a>4. DMA 回调处理</h2><h3 id="4-1-DMA-回调函数"><a href="#4-1-DMA-回调函数" class="headerlink" title="4.1 DMA 回调函数"></a>4.1 DMA 回调函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义信号量 */</span></span><br><span class="line">K_SEM_DEFINE(dma_sem, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 传输完成回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dma_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dma_dev, <span class="type">void</span> *user_data,</span></span><br><span class="line"><span class="params">                        <span class="type">uint32_t</span> channel, <span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA transfer error: %d\n&quot;</span>, status);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA transfer completed\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放信号量通知传输完成 */</span></span><br><span class="line">    k_sem_give(&amp;dma_sem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dma_with_callback</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA controller device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 源数据和目标缓冲区 */</span></span><br><span class="line">    <span class="type">uint8_t</span> tx_data[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_data[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 填充源数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_data); i++) &#123;</span><br><span class="line">        tx_data[i] = i &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg.block_size = <span class="keyword">sizeof</span>(tx_data);</span><br><span class="line">    dma_block_cfg.source_address = (<span class="type">uint32_t</span>)tx_data;</span><br><span class="line">    dma_block_cfg.dest_address = (<span class="type">uint32_t</span>)rx_data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_MEMORY;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = dma_callback;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待传输完成 */</span></span><br><span class="line">    <span class="keyword">if</span> (k_sem_take(&amp;dma_sem, K_MSEC(<span class="number">1000</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA transfer timed out\n&quot;</span>);</span><br><span class="line">        dma_stop(dma_dev, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(rx_data); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rx_data[i] != tx_data[i]) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Data mismatch at index %d: %u != %u\n&quot;</span>,</span><br><span class="line">                   i, rx_data[i], tx_data[i]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;DMA transfer completed successfully\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-高级-DMA-功能"><a href="#5-高级-DMA-功能" class="headerlink" title="5. 高级 DMA 功能"></a>5. 高级 DMA 功能</h2><h3 id="5-1-链式-DMA-传输"><a href="#5-1-链式-DMA-传输" class="headerlink" title="5.1 链式 DMA 传输"></a>5.1 链式 DMA 传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dma_chained_transfer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span>[3] =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA controller device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 源数据和目标缓冲区 */</span></span><br><span class="line">    <span class="type">uint8_t</span> tx_data1[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> tx_data2[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> tx_data3[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_data[<span class="number">768</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 填充源数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_data1); i++) &#123;</span><br><span class="line">        tx_data1[i] = i &amp; <span class="number">0xFF</span>;</span><br><span class="line">        tx_data2[i] = (i + <span class="number">100</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        tx_data3[i] = (i + <span class="number">200</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置第一个 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg[<span class="number">0</span>].block_size = <span class="keyword">sizeof</span>(tx_data1);</span><br><span class="line">    dma_block_cfg[<span class="number">0</span>].source_address = (<span class="type">uint32_t</span>)tx_data1;</span><br><span class="line">    dma_block_cfg[<span class="number">0</span>].dest_address = (<span class="type">uint32_t</span>)rx_data;</span><br><span class="line">    dma_block_cfg[<span class="number">0</span>].next_block = &amp;dma_block_cfg[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置第二个 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg[<span class="number">1</span>].block_size = <span class="keyword">sizeof</span>(tx_data2);</span><br><span class="line">    dma_block_cfg[<span class="number">1</span>].source_address = (<span class="type">uint32_t</span>)tx_data2;</span><br><span class="line">    dma_block_cfg[<span class="number">1</span>].dest_address = (<span class="type">uint32_t</span>)(rx_data + <span class="keyword">sizeof</span>(tx_data1));</span><br><span class="line">    dma_block_cfg[<span class="number">1</span>].next_block = &amp;dma_block_cfg[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置第三个 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg[<span class="number">2</span>].block_size = <span class="keyword">sizeof</span>(tx_data3);</span><br><span class="line">    dma_block_cfg[<span class="number">2</span>].source_address = (<span class="type">uint32_t</span>)tx_data3;</span><br><span class="line">    dma_block_cfg[<span class="number">2</span>].dest_address = (<span class="type">uint32_t</span>)(rx_data + <span class="keyword">sizeof</span>(tx_data1) + <span class="keyword">sizeof</span>(tx_data2));</span><br><span class="line">    dma_block_cfg[<span class="number">2</span>].next_block = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_MEMORY;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">3</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待传输完成 */</span></span><br><span class="line">    k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Chained DMA transfer completed\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-循环-DMA-传输"><a href="#5-2-循环-DMA-传输" class="headerlink" title="5.2 循环 DMA 传输"></a>5.2 循环 DMA 传输</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">dma_cyclic_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dma_dev, <span class="type">void</span> *user_data,</span></span><br><span class="line"><span class="params">                              <span class="type">uint32_t</span> channel, <span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA transfer error: %d\n&quot;</span>, status);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    count++;</span><br><span class="line">    printk(<span class="string">&quot;DMA cyclic transfer completed: %d\n&quot;</span>, count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 如果达到指定次数，停止 DMA */</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        dma_stop(dma_dev, channel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dma_cyclic_transfer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;DMA controller device not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 源数据和目标缓冲区 */</span></span><br><span class="line">    <span class="type">uint8_t</span> tx_data[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_data[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 填充源数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(tx_data); i++) &#123;</span><br><span class="line">        tx_data[i] = i &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg.block_size = <span class="keyword">sizeof</span>(tx_data);</span><br><span class="line">    dma_block_cfg.source_address = (<span class="type">uint32_t</span>)tx_data;</span><br><span class="line">    dma_block_cfg.dest_address = (<span class="type">uint32_t</span>)rx_data;</span><br><span class="line">    dma_block_cfg.source_reload_en = <span class="number">1</span>;  <span class="comment">/* 启用源地址重载 */</span></span><br><span class="line">    dma_block_cfg.dest_reload_en = <span class="number">1</span>;    <span class="comment">/* 启用目标地址重载 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_MEMORY;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = dma_cyclic_callback;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg;</span><br><span class="line">    dma_cfg.cyclic = <span class="number">1</span>;  <span class="comment">/* 启用循环模式 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待循环传输完成（由回调函数停止） */</span></span><br><span class="line">    k_sleep(K_SECONDS(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Cyclic DMA transfer stopped\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-与外设集成"><a href="#6-与外设集成" class="headerlink" title="6. 与外设集成"></a>6. 与外设集成</h2><h3 id="6-1-UART-与-DMA-集成"><a href="#6-1-UART-与-DMA-集成" class="headerlink" title="6.1 UART 与 DMA 集成"></a>6.1 UART 与 DMA 集成</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/dma.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/uart.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* DMA 完成回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">uart_dma_callback</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dma_dev, <span class="type">void</span> *user_data,</span></span><br><span class="line"><span class="params">                            <span class="type">uint32_t</span> channel, <span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;UART DMA transfer completed with status: %d\n&quot;</span>, status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uart_dma_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">uart_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(uart0));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dma_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(dma0));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_config</span> <span class="title">dma_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dma_block_config</span> <span class="title">dma_block_cfg</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(uart_dev) || !device_is_ready(dma_dev)) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Devices not ready\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 要发送的数据 */</span></span><br><span class="line">    <span class="type">char</span> tx_data[] = <span class="string">&quot;Hello, DMA UART!\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 传输块 */</span></span><br><span class="line">    dma_block_cfg.block_size = <span class="keyword">sizeof</span>(tx_data) - <span class="number">1</span>;</span><br><span class="line">    dma_block_cfg.source_address = (<span class="type">uint32_t</span>)tx_data;</span><br><span class="line">    dma_block_cfg.dest_address = (<span class="type">uint32_t</span>)UART0_BASE_ADDR + UART_TX_REG_OFFSET;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    dma_cfg.channel_direction = MEMORY_TO_PERIPHERAL;</span><br><span class="line">    dma_cfg.source_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_data_size = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.source_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dest_burst_length = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.dma_callback = uart_dma_callback;</span><br><span class="line">    dma_cfg.user_data = <span class="literal">NULL</span>;</span><br><span class="line">    dma_cfg.block_count = <span class="number">1</span>;</span><br><span class="line">    dma_cfg.head_block = &amp;dma_block_cfg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置 DMA 通道 */</span></span><br><span class="line">    ret = dma_config(dma_dev, <span class="number">0</span>, &amp;dma_cfg);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to configure DMA channel: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 启动 DMA 传输 */</span></span><br><span class="line">    ret = dma_start(dma_dev, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to start DMA transfer: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待传输完成 */</span></span><br><span class="line">    k_sleep(K_MSEC(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-DMA-最佳实践"><a href="#7-DMA-最佳实践" class="headerlink" title="7. DMA 最佳实践"></a>7. DMA 最佳实践</h2><ol><li><p>内存对齐：确保 DMA 缓冲区按照硬件要求对齐，通常为 4 或 8 字节边界。</p></li><li><p>缓冲区位置：对于某些平台，DMA 缓冲区可能需要放置在特定的内存区域，如 SRAM 而非 Flash。</p></li><li><p>缓存一致性：在使用 DMA 之前，确保清除或刷新 CPU 缓存，以避免数据不一致问题。</p></li><li><p>错误处理：实现完善的错误处理机制，包括超时检测和错误恢复。</p></li><li><p>资源管理：在不需要时释放 DMA 通道，以便其他组件使用。</p></li><li><p>中断处理：使用回调函数处理 DMA 传输完成事件，避免轮询等待。</p></li><li><p>功耗优化：在低功耗应用中，考虑 DMA 传输完成后进入低功耗模式。</p></li><li><p>传输大小：根据硬件特性选择最优的传输大小，通常是 2 的幂次。</p></li><li><p>并发传输：如果硬件支持，可以使用多个 DMA 通道并行处理不同的数据流。</p></li><li><p>安全考虑：确保 DMA 不会访问受保护的内存区域，特别是在多任务系统中。</p></li></ol><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-DMA-管理指南&quot;&gt;&lt;a href=&quot;#Zephyr-DMA-管理指南&quot; class=&quot;headerlink&quot; title=&quot;Zephyr DMA 管理指南&quot;&gt;&lt;/a&gt;Zephyr DMA 管理指南&lt;/h1&gt;&lt;h2 id=&quot;1-DMA-概述&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zephyr 驱动系统指南</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/drivers/README/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/drivers/README/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T14:17:21.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-设备驱动开发指南"><a href="#Zephyr-设备驱动开发指南" class="headerlink" title="Zephyr 设备驱动开发指南"></a>Zephyr 设备驱动开发指南</h1><h2 id="1-驱动开发基础"><a href="#1-驱动开发基础" class="headerlink" title="1. 驱动开发基础"></a>1. 驱动开发基础</h2><h3 id="1-1-驱动框架配置-prj-conf"><a href="#1-1-驱动框架配置-prj-conf" class="headerlink" title="1.1 驱动框架配置 (prj.conf)"></a>1.1 驱动框架配置 (prj.conf)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 基础驱动支持</span><br><span class="line">CONFIG_SERIAL=y</span><br><span class="line">CONFIG_GPIO=y</span><br><span class="line">CONFIG_I2C=y</span><br><span class="line">CONFIG_SPI=y</span><br><span class="line">CONFIG_PINMUX=y</span><br><span class="line">CONFIG_PINCTRL=y</span><br><span class="line"></span><br><span class="line"># 设备树支持</span><br><span class="line">CONFIG_DTS=y</span><br><span class="line">CONFIG_HAS_DTS=y</span><br><span class="line"></span><br><span class="line"># 驱动调试支持</span><br><span class="line">CONFIG_DEVICE_SHELL=y</span><br><span class="line">CONFIG_DEVICE_POWER_MANAGEMENT=y</span><br></pre></td></tr></table></figure><h3 id="1-2-基本驱动结构"><a href="#1-2-基本驱动结构" class="headerlink" title="1.2 基本驱动结构"></a>1.2 基本驱动结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">gpio_dev</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> pin;</span><br><span class="line">    <span class="type">gpio_flags_t</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动数据结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> &#123;</span></span><br><span class="line">    <span class="type">bool</span> initialized;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API函数原型 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*my_driver_api_configure)</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                     <span class="type">uint32_t</span> config)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*my_driver_api_write)</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                 <span class="type">uint32_t</span> value)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*my_driver_api_read)</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                                <span class="type">uint32_t</span> *value)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> &#123;</span></span><br><span class="line">    my_driver_api_configure configure;</span><br><span class="line">    my_driver_api_write write;</span><br><span class="line">    my_driver_api_read read;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动初始化函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查依赖设备 */</span></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(config-&gt;gpio_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化互斥锁 */</span></span><br><span class="line">    k_mutex_init(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置GPIO */</span></span><br><span class="line">    ret = gpio_pin_configure(config-&gt;gpio_dev,</span><br><span class="line">                           config-&gt;pin,</span><br><span class="line">                           config-&gt;flags);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data-&gt;initialized = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API实现 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_configure</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="type">uint32_t</span> config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取锁 */</span></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 实现配置逻辑 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放锁 */</span></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_write</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">uint32_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_set(config-&gt;gpio_dev,</span><br><span class="line">                      config-&gt;pin,</span><br><span class="line">                      value);</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_read</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                         <span class="type">uint32_t</span> *value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_get(config-&gt;gpio_dev,</span><br><span class="line">                      config-&gt;pin);</span><br><span class="line">    <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        *value = ret;</span><br><span class="line">        ret = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API结构体实例 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_driver_api</span> <span class="title">my_driver_api_funcs</span> =</span> &#123;</span><br><span class="line">    .configure = my_driver_configure,</span><br><span class="line">    .write = my_driver_write,</span><br><span class="line">    .read = my_driver_read,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动实例定义 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DRIVER_INIT(inst)                                              \</span></span><br><span class="line"><span class="meta">    static const struct my_driver_config my_driver_config_##inst = &#123;      \</span></span><br><span class="line"><span class="meta">        .gpio_dev = DEVICE_DT_GET(DT_INST_GPIO_CTLR(inst, gpios)),      \</span></span><br><span class="line"><span class="meta">        .pin = DT_INST_GPIO_PIN(inst, gpios),                           \</span></span><br><span class="line"><span class="meta">        .flags = DT_INST_GPIO_FLAGS(inst, gpios),                       \</span></span><br><span class="line"><span class="meta">    &#125;;                                                                   \</span></span><br><span class="line"><span class="meta">                                                                        \</span></span><br><span class="line"><span class="meta">    static struct my_driver_data my_driver_data_##inst;                 \</span></span><br><span class="line"><span class="meta">                                                                        \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(inst,                                         \</span></span><br><span class="line"><span class="meta">                         my_driver_init,                                \</span></span><br><span class="line"><span class="meta">                         NULL,                                          \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_data_##inst,                        \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_config_##inst,                      \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                                   \</span></span><br><span class="line"><span class="meta">                         CONFIG_MY_DRIVER_INIT_PRIORITY,               \</span></span><br><span class="line"><span class="meta">                         &amp;my_driver_api_funcs);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为每个设备树实例创建驱动实例 */</span></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_DRIVER_INIT)</span><br></pre></td></tr></table></figure><h3 id="1-3-设备树绑定"><a href="#1-3-设备树绑定" class="headerlink" title="1.3 设备树绑定"></a>1.3 设备树绑定</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dts/bindings/my-driver.yaml</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">Driver</span> <span class="string">Device</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compatible:</span> <span class="string">&quot;vendor,my-driver&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">include:</span> <span class="string">base.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line">  <span class="attr">gpios:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">phandle-array</span></span><br><span class="line">    <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">GPIO</span> <span class="string">for</span> <span class="string">control</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">label:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Human</span> <span class="string">readable</span> <span class="string">string</span> <span class="string">describing</span> <span class="string">the</span> <span class="string">device</span></span><br></pre></td></tr></table></figure><h2 id="2-GPIO驱动开发"><a href="#2-GPIO驱动开发" class="headerlink" title="2. GPIO驱动开发"></a>2. GPIO驱动开发</h2><h3 id="2-1-GPIO配置"><a href="#2-1-GPIO配置" class="headerlink" title="2.1 GPIO配置"></a>2.1 GPIO配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO设备获取 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">led</span> =</span> GPIO_DT_SPEC_GET(DT_ALIAS(led0), gpios);</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">button</span> =</span> GPIO_DT_SPEC_GET(DT_ALIAS(sw0), gpios);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">gpio_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检查设备就绪 */</span></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(led.port)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(button.port)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置GPIO */</span></span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;led, GPIO_OUTPUT_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;button, GPIO_INPUT);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* GPIO操作 */</span></span><br><span class="line">    gpio_pin_toggle_dt(&amp;led);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> val = gpio_pin_get_dt(&amp;button);</span><br><span class="line">    <span class="keyword">if</span> (val &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Button state: %d\n&quot;</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-GPIO中断"><a href="#2-2-GPIO中断" class="headerlink" title="2.2 GPIO中断"></a>2.2 GPIO中断</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中断回调数据 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_callback</span> <span class="title">button_cb_data</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中断回调函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">button_pressed_cb</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                      <span class="keyword">struct</span> gpio_callback *cb,</span></span><br><span class="line"><span class="params">                      <span class="type">uint32_t</span> pins)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Button pressed! pins: %x\n&quot;</span>, pins);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">gpio_interrupt_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_dt_spec</span> <span class="title">button</span> =</span> GPIO_DT_SPEC_GET(DT_ALIAS(sw0), gpios);</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(button.port)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置GPIO为输入并启用中断 */</span></span><br><span class="line">    ret = gpio_pin_configure_dt(&amp;button,</span><br><span class="line">                               GPIO_INPUT |</span><br><span class="line">                               GPIO_INT_DEBOUNCE |</span><br><span class="line">                               GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化回调结构体 */</span></span><br><span class="line">    gpio_init_callback(&amp;button_cb_data,</span><br><span class="line">                      button_pressed_cb,</span><br><span class="line">                      BIT(button.pin));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加回调 */</span></span><br><span class="line">    ret = gpio_add_callback(button.port, &amp;button_cb_data);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    ret = gpio_pin_interrupt_configure_dt(&amp;button,</span><br><span class="line">                                        GPIO_INT_EDGE_TO_ACTIVE);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-I2C驱动开发"><a href="#3-I2C驱动开发" class="headerlink" title="3. I2C驱动开发"></a>3. I2C驱动开发</h2><h3 id="3-1-I2C配置"><a href="#3-1-I2C配置" class="headerlink" title="3.1 I2C配置"></a>3.1 I2C配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_ADDR 0x50</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">i2c_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">i2c_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2c0));</span><br><span class="line">    <span class="type">uint8_t</span> data[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(i2c_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 写数据 */</span></span><br><span class="line">    data[<span class="number">0</span>] = <span class="number">0x00</span>;  <span class="comment">/* 寄存器地址 */</span></span><br><span class="line">    data[<span class="number">1</span>] = <span class="number">0x42</span>;  <span class="comment">/* 数据 */</span></span><br><span class="line">    ret = i2c_write(i2c_dev, data, <span class="keyword">sizeof</span>(data), I2C_ADDR);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读数据 */</span></span><br><span class="line">    <span class="type">uint8_t</span> reg = <span class="number">0x00</span>;</span><br><span class="line">    ret = i2c_write_read(i2c_dev,</span><br><span class="line">                        I2C_ADDR,</span><br><span class="line">                        &amp;reg, <span class="number">1</span>,</span><br><span class="line">                        data, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;Read value: 0x%02x\n&quot;</span>, data[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-I2C设备驱动"><a href="#3-2-I2C设备驱动" class="headerlink" title="3.2 I2C设备驱动"></a>3.2 I2C设备驱动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_config</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2c_dev</span>;</span></span><br><span class="line">    <span class="type">uint16_t</span> addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备数据结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_i2c_read_reg</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">uint8_t</span> reg,</span></span><br><span class="line"><span class="params">                          <span class="type">uint8_t</span> *val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = i2c_write_read(config-&gt;i2c_dev,</span><br><span class="line">                        config-&gt;addr,</span><br><span class="line">                        &amp;reg, <span class="number">1</span>,</span><br><span class="line">                        val, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_i2c_write_reg</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                           <span class="type">uint8_t</span> reg,</span></span><br><span class="line"><span class="params">                           <span class="type">uint8_t</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="type">uint8_t</span> buf[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    buf[<span class="number">0</span>] = reg;</span><br><span class="line">    buf[<span class="number">1</span>] = val;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = i2c_write(config-&gt;i2c_dev,</span><br><span class="line">                    buf, <span class="keyword">sizeof</span>(buf),</span><br><span class="line">                    config-&gt;addr);</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_i2c_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(config-&gt;i2c_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_mutex_init(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_i2c_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*read_reg)(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span><br><span class="line">                    <span class="type">uint8_t</span> reg,</span><br><span class="line">                    <span class="type">uint8_t</span> *val);</span><br><span class="line">    <span class="type">int</span> (*write_reg)(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span><br><span class="line">                     <span class="type">uint8_t</span> reg,</span><br><span class="line">                     <span class="type">uint8_t</span> val);</span><br><span class="line">&#125; my_i2c_api = &#123;</span><br><span class="line">    .read_reg = my_i2c_read_reg,</span><br><span class="line">    .write_reg = my_i2c_write_reg,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备定义宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_I2C_INIT(inst)                                              \</span></span><br><span class="line"><span class="meta">    static const struct my_i2c_config my_i2c_config_##inst = &#123;        \</span></span><br><span class="line"><span class="meta">        .i2c_dev = DEVICE_DT_GET(DT_INST_BUS(inst)),                 \</span></span><br><span class="line"><span class="meta">        .addr = DT_INST_REG_ADDR(inst),                              \</span></span><br><span class="line"><span class="meta">    &#125;;                                                                \</span></span><br><span class="line"><span class="meta">                                                                      \</span></span><br><span class="line"><span class="meta">    static struct my_i2c_data my_i2c_data_##inst;                    \</span></span><br><span class="line"><span class="meta">                                                                      \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(inst,                                       \</span></span><br><span class="line"><span class="meta">                         my_i2c_init,                                 \</span></span><br><span class="line"><span class="meta">                         NULL,                                        \</span></span><br><span class="line"><span class="meta">                         &amp;my_i2c_data_##inst,                        \</span></span><br><span class="line"><span class="meta">                         &amp;my_i2c_config_##inst,                      \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                                 \</span></span><br><span class="line"><span class="meta">                         CONFIG_I2C_INIT_PRIORITY,                   \</span></span><br><span class="line"><span class="meta">                         &amp;my_i2c_api);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为每个设备树实例创建驱动实例 */</span></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_I2C_INIT)</span><br></pre></td></tr></table></figure><h2 id="4-SPI驱动开发"><a href="#4-SPI驱动开发" class="headerlink" title="4. SPI驱动开发"></a>4. SPI驱动开发</h2><h3 id="4-1-SPI配置"><a href="#4-1-SPI配置" class="headerlink" title="4.1 SPI配置"></a>4.1 SPI配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">spi_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">const</span> <span class="title">spi</span> =</span> DEVICE_DT_GET(DT_NODELABEL(spi0));</span><br><span class="line">    <span class="type">uint8_t</span> tx_buffer[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> rx_buffer[<span class="keyword">sizeof</span>(tx_buffer)];</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(spi)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* SPI配置 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">spi_cfg</span> =</span> &#123;</span><br><span class="line">        .operation = SPI_WORD_SET(<span class="number">8</span>) | SPI_TRANSFER_MSB |</span><br><span class="line">                    SPI_MODE_CPOL | SPI_MODE_CPHA,</span><br><span class="line">        .frequency = <span class="number">1000000</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">tx_buf</span> =</span> &#123;</span><br><span class="line">        .buf = tx_buffer,</span><br><span class="line">        .len = <span class="keyword">sizeof</span>(tx_buffer)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">rx_buf</span> =</span> &#123;</span><br><span class="line">        .buf = rx_buffer,</span><br><span class="line">        .len = <span class="keyword">sizeof</span>(rx_buffer)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">tx</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;tx_buf,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">rx</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;rx_buf,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 执行传输 */</span></span><br><span class="line">    ret = spi_transceive(spi, &amp;spi_cfg, &amp;tx, &amp;rx);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-SPI设备驱动"><a href="#4-2-SPI设备驱动" class="headerlink" title="4.2 SPI设备驱动"></a>4.2 SPI设备驱动</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备配置结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_spi_config</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">spi_dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">spi_cfg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_cs_control</span> <span class="title">cs_ctrl</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备数据结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_spi_data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">k_mutex</span> <span class="title">lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_spi_transfer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="type">uint8_t</span> *tx_buf,</span></span><br><span class="line"><span class="params">                          <span class="type">uint8_t</span> *rx_buf,</span></span><br><span class="line"><span class="params">                          <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">tx</span> =</span> &#123;</span><br><span class="line">        .buf = (<span class="type">void</span> *)tx_buf,</span><br><span class="line">        .len = len</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf</span> <span class="title">rx</span> =</span> &#123;</span><br><span class="line">        .buf = rx_buf,</span><br><span class="line">        .len = len</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">tx_bufs</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;tx,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_buf_set</span> <span class="title">rx_bufs</span> =</span> &#123;</span><br><span class="line">        .buffers = &amp;rx,</span><br><span class="line">        .count = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    k_mutex_lock(&amp;data-&gt;lock, K_FOREVER);</span><br><span class="line"></span><br><span class="line">    ret = spi_transceive(config-&gt;spi_dev,</span><br><span class="line">                        &amp;config-&gt;spi_cfg,</span><br><span class="line">                        &amp;tx_bufs,</span><br><span class="line">                        &amp;rx_bufs);</span><br><span class="line"></span><br><span class="line">    k_mutex_unlock(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_spi_init</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_config</span> *<span class="title">config</span> =</span> dev-&gt;config;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_data</span> *<span class="title">data</span> =</span> dev-&gt;data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!device_is_ready(config-&gt;spi_dev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k_mutex_init(&amp;data-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动API结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">my_spi_driver_api</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*transfer)(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span><br><span class="line">                   <span class="type">const</span> <span class="type">uint8_t</span> *tx_buf,</span><br><span class="line">                   <span class="type">uint8_t</span> *rx_buf,</span><br><span class="line">                   <span class="type">size_t</span> len);</span><br><span class="line">&#125; my_spi_api = &#123;</span><br><span class="line">    .transfer = my_spi_transfer,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备定义宏 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_SPI_INIT(inst)                                              \</span></span><br><span class="line"><span class="meta">    static const struct my_spi_config my_spi_config_##inst = &#123;        \</span></span><br><span class="line"><span class="meta">        .spi_dev = DEVICE_DT_GET(DT_INST_BUS(inst)),                 \</span></span><br><span class="line"><span class="meta">        .spi_cfg = &#123;                                                  \</span></span><br><span class="line"><span class="meta">            .operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB |        \</span></span><br><span class="line"><span class="meta">                        SPI_MODE_CPOL | SPI_MODE_CPHA,               \</span></span><br><span class="line"><span class="meta">            .frequency = DT_INST_PROP(inst, spi_max_frequency),      \</span></span><br><span class="line"><span class="meta">        &#125;,                                                           \</span></span><br><span class="line"><span class="meta">        .cs_ctrl = SPI_CS_CONTROL_INIT(DT_INST_SPI_DEV(inst),       \</span></span><br><span class="line"><span class="meta">                                      DT_INST_SPI_CS_GPIOS(inst)),   \</span></span><br><span class="line"><span class="meta">    &#125;;                                                               \</span></span><br><span class="line"><span class="meta">                                                                     \</span></span><br><span class="line"><span class="meta">    static struct my_spi_data my_spi_data_##inst;                   \</span></span><br><span class="line"><span class="meta">                                                                     \</span></span><br><span class="line"><span class="meta">    DEVICE_DT_INST_DEFINE(inst,                                      \</span></span><br><span class="line"><span class="meta">                         my_spi_init,                                \</span></span><br><span class="line"><span class="meta">                         NULL,                                       \</span></span><br><span class="line"><span class="meta">                         &amp;my_spi_data_##inst,                       \</span></span><br><span class="line"><span class="meta">                         &amp;my_spi_config_##inst,                     \</span></span><br><span class="line"><span class="meta">                         POST_KERNEL,                                \</span></span><br><span class="line"><span class="meta">                         CONFIG_SPI_INIT_PRIORITY,                  \</span></span><br><span class="line"><span class="meta">                         &amp;my_spi_api);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为每个设备树实例创建驱动实例 */</span></span><br><span class="line">DT_INST_FOREACH_STATUS_OKAY(MY_SPI_INIT)</span><br></pre></td></tr></table></figure><h2 id="5-驱动测试"><a href="#5-驱动测试" class="headerlink" title="5. 驱动测试"></a>5. 驱动测试</h2><h3 id="5-1-单元测试"><a href="#5-1-单元测试" class="headerlink" title="5.1 单元测试"></a>5.1 单元测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试夹具设置 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">gpio_setup</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(gpio0));</span><br><span class="line">    zassert_true(device_is_ready(dev), <span class="string">&quot;GPIO device not ready&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span> *)dev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO测试用例 */</span></span><br><span class="line">ZTEST_SUITE(gpio_test, <span class="literal">NULL</span>, gpio_setup, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">ZTEST(gpio_test, test_gpio_configure)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(gpio0));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_configure(dev, <span class="number">0</span>, GPIO_OUTPUT);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;Failed to configure GPIO pin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_set(dev, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;Failed to set GPIO pin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ret = gpio_pin_get(dev, <span class="number">0</span>);</span><br><span class="line">    zassert_equal(ret, <span class="number">1</span>, <span class="string">&quot;Unexpected GPIO pin state&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-集成测试"><a href="#5-2-集成测试" class="headerlink" title="5.2 集成测试"></a>5.2 集成测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/spi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* I2C和SPI组合测试 */</span></span><br><span class="line">ZTEST(driver_test, test_i2c_spi_transfer)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">i2c_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(i2c0));</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">spi_dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(spi0));</span><br><span class="line">    <span class="type">uint8_t</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* I2C测试 */</span></span><br><span class="line">    ret = i2c_reg_read_byte(i2c_dev, <span class="number">0x50</span>, <span class="number">0x00</span>, &amp;data);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;I2C read failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* SPI测试 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spi_config</span> <span class="title">spi_cfg</span> =</span> &#123;</span><br><span class="line">        .operation = SPI_WORD_SET(<span class="number">8</span>),</span><br><span class="line">        .frequency = <span class="number">1000000</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ret = spi_write(spi_dev, &amp;spi_cfg, &amp;data, <span class="number">1</span>);</span><br><span class="line">    zassert_equal(ret, <span class="number">0</span>, <span class="string">&quot;SPI write failed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-驱动Shell命令"><a href="#6-驱动Shell命令" class="headerlink" title="6. 驱动Shell命令"></a>6. 驱动Shell命令</h2><h3 id="6-1-Shell命令实现"><a href="#6-1-Shell命令实现" class="headerlink" title="6.1 Shell命令实现"></a>6.1 Shell命令实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/shell/shell.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/drivers/gpio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIO shell命令 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">cmd_gpio_get</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> shell *shell,</span></span><br><span class="line"><span class="params">                       <span class="type">size_t</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="type">uint32_t</span> pin;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Wrong parameters count&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dev = device_get_binding(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!dev) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Device not found: %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pin = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">    ret = gpio_pin_get(dev, pin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        shell_error(shell, <span class="string">&quot;Failed to get pin state&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shell_print(shell, <span class="string">&quot;Pin %d state: %d&quot;</span>, pin, ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Shell命令注册 */</span></span><br><span class="line">SHELL_STATIC_SUBCMD_SET_CREATE(gpio_cmds,</span><br><span class="line">    SHELL_CMD(get, <span class="literal">NULL</span>, <span class="string">&quot;Get GPIO pin state&quot;</span>,</span><br><span class="line">              cmd_gpio_get),</span><br><span class="line">    SHELL_SUBCMD_SET_END</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHELL_CMD_REGISTER(gpio, &amp;gpio_cmds,</span><br><span class="line">                  <span class="string">&quot;GPIO commands&quot;</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="6-2-Shell命令配置"><a href="#6-2-Shell命令配置" class="headerlink" title="6.2 Shell命令配置"></a>6.2 Shell命令配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Shell配置 (prj.conf)</span><br><span class="line">CONFIG_SHELL=y</span><br><span class="line">CONFIG_SHELL_BACKEND_SERIAL=y</span><br><span class="line">CONFIG_SHELL_PROMPT_UART=&quot;gpio:~$ &quot;</span><br><span class="line"></span><br><span class="line"># GPIO Shell配置</span><br><span class="line">CONFIG_GPIO_SHELL=y</span><br></pre></td></tr></table></figure><h2 id="7-电源管理"><a href="#7-电源管理" class="headerlink" title="7. 电源管理"></a>7. 电源管理</h2><h3 id="7-1-设备电源管理"><a href="#7-1-设备电源管理" class="headerlink" title="7.1 设备电源管理"></a>7.1 设备电源管理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/pm/device.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电源管理回调 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">my_driver_pm_action</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> device *dev,</span></span><br><span class="line"><span class="params">                             <span class="keyword">enum</span> pm_device_action action)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_RESUME:</span><br><span class="line">        <span class="comment">/* 恢复设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_SUSPEND:</span><br><span class="line">        <span class="comment">/* 挂起设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_OFF:</span><br><span class="line">        <span class="comment">/* 关闭设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PM_DEVICE_ACTION_TURN_ON:</span><br><span class="line">        <span class="comment">/* 打开设备 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备定义 */</span></span><br><span class="line">PM_DEVICE_DT_INST_DEFINE(<span class="number">0</span>, my_driver_pm_action);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用电源管理 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">power_management_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> =</span> DEVICE_DT_GET(DT_NODELABEL(my_dev));</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 挂起设备 */</span></span><br><span class="line">    ret = pm_device_action_run(dev,</span><br><span class="line">                              PM_DEVICE_ACTION_SUSPEND);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to suspend device\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 恢复设备 */</span></span><br><span class="line">    ret = pm_device_action_run(dev,</span><br><span class="line">                              PM_DEVICE_ACTION_RESUME);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;Failed to resume device\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-电源状态配置"><a href="#7-2-电源状态配置" class="headerlink" title="7.2 电源状态配置"></a>7.2 电源状态配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 电源管理配置 (prj.conf)</span><br><span class="line">CONFIG_PM=y</span><br><span class="line">CONFIG_PM_DEVICE=y</span><br><span class="line">CONFIG_PM_DEVICE_RUNTIME=y</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-设备驱动开发指南&quot;&gt;&lt;a href=&quot;#Zephyr-设备驱动开发指南&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 设备驱动开发指南&quot;&gt;&lt;/a&gt;Zephyr 设备驱动开发指南&lt;/h1&gt;&lt;h2 id=&quot;1-驱动开发基础&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zephyr 错误处理指南</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/error_handling/README/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/error_handling/README/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T13:31:10.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-错误处理指南"><a href="#Zephyr-错误处理指南" class="headerlink" title="Zephyr 错误处理指南"></a>Zephyr 错误处理指南</h1><h2 id="1-错误码系统"><a href="#1-错误码系统" class="headerlink" title="1. 错误码系统"></a>1. 错误码系统</h2><h3 id="1-1-标准错误码"><a href="#1-1-标准错误码" class="headerlink" title="1.1 标准错误码"></a>1.1 标准错误码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 常见错误码 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPERM           1  <span class="comment">/* Operation not permitted */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOENT          2  <span class="comment">/* No such file or directory */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ESRCH           3  <span class="comment">/* No such process */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EINTR           4  <span class="comment">/* Interrupted system call */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EIO             5  <span class="comment">/* I/O error */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENXIO           6  <span class="comment">/* No such device or address */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E2BIG           7  <span class="comment">/* Argument list too long */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOEXEC         8  <span class="comment">/* Exec format error */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EBADF           9  <span class="comment">/* Bad file number */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ECHILD         10  <span class="comment">/* No child processes */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EAGAIN         11  <span class="comment">/* Try again */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOMEM         12  <span class="comment">/* Out of memory */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EACCES         13  <span class="comment">/* Permission denied */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EFAULT         14  <span class="comment">/* Bad address */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EBUSY          16  <span class="comment">/* Device or resource busy */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EEXIST         17  <span class="comment">/* File exists */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXDEV          18  <span class="comment">/* Cross-device link */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENODEV         19  <span class="comment">/* No such device */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOTDIR        20  <span class="comment">/* Not a directory */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EISDIR         21  <span class="comment">/* Is a directory */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EINVAL         22  <span class="comment">/* Invalid argument */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENFILE         23  <span class="comment">/* File table overflow */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EMFILE         24  <span class="comment">/* Too many open files */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENOSPC         28  <span class="comment">/* No space left on device */</span></span></span><br></pre></td></tr></table></figure><h3 id="1-2-错误码使用示例"><a href="#1-2-错误码使用示例" class="headerlink" title="1.2 错误码使用示例"></a>1.2 错误码使用示例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_operation_example</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_file_t</span> <span class="title">file</span>;</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化文件对象 */</span></span><br><span class="line">    fs_file_t_init(&amp;file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    ret = fs_open(&amp;file, filename, FS_O_READ);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ret == -ENOENT) &#123;</span><br><span class="line">            printk(<span class="string">&quot;File not found: %s\n&quot;</span>, filename);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == -EACCES) &#123;</span><br><span class="line">            printk(<span class="string">&quot;Permission denied: %s\n&quot;</span>, filename);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printk(<span class="string">&quot;Failed to open file: %d\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 关闭文件 */</span></span><br><span class="line">    fs_close(&amp;file);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-断言机制"><a href="#2-断言机制" class="headerlink" title="2. 断言机制"></a>2. 断言机制</h2><h3 id="2-1-基本断言"><a href="#2-1-基本断言" class="headerlink" title="2.1 基本断言"></a>2.1 基本断言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/__assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">assert_example</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 参数检查 */</span></span><br><span class="line">    __ASSERT(ptr != <span class="literal">NULL</span>, <span class="string">&quot;Null pointer&quot;</span>);</span><br><span class="line">    __ASSERT(size &gt; <span class="number">0</span>, <span class="string">&quot;Invalid size&quot;</span>);</span><br><span class="line">    __ASSERT(size &lt;= <span class="number">1024</span>, <span class="string">&quot;Size too large&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 状态检查 */</span></span><br><span class="line">    __ASSERT(k_is_in_isr() == <span class="literal">false</span>,</span><br><span class="line">             <span class="string">&quot;Cannot be called from ISR&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 复杂条件检查 */</span></span><br><span class="line">    __ASSERT((size &amp; (size - <span class="number">1</span>)) == <span class="number">0</span>,</span><br><span class="line">             <span class="string">&quot;Size must be power of 2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-条件编译断言"><a href="#2-2-条件编译断言" class="headerlink" title="2.2 条件编译断言"></a>2.2 条件编译断言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/__assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 仅在调试模式启用的断言 */</span></span><br><span class="line">__ASSERT_NO_MSG(condition);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带消息的条件编译断言 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG</span></span><br><span class="line">    __ASSERT(condition, <span class="string">&quot;Error message&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 永久断言（不受配置影响） */</span></span><br><span class="line">__ASSERT_ALWAYS(condition, <span class="string">&quot;Critical error&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3. 异常处理"></a>3. 异常处理</h2><h3 id="3-1-故障处理"><a href="#3-1-故障处理" class="headerlink" title="3.1 故障处理"></a>3.1 故障处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 故障处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">k_sys_fatal_error_handler</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> reason,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="type">z_arch_esf_t</span> *esf)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;Fatal system error! Reason: %u\n&quot;</span>, reason);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印错误信息 */</span></span><br><span class="line">    <span class="keyword">switch</span> (reason) &#123;</span><br><span class="line">    <span class="keyword">case</span> K_ERR_CPU_EXCEPTION:</span><br><span class="line">        printk(<span class="string">&quot;CPU Exception\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> K_ERR_SPURIOUS_IRQ:</span><br><span class="line">        printk(<span class="string">&quot;Spurious interrupt\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> K_ERR_STACK_CHK_FAIL:</span><br><span class="line">        printk(<span class="string">&quot;Stack overflow\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        printk(<span class="string">&quot;Unknown error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 系统重置 */</span></span><br><span class="line">    sys_reboot(SYS_REBOOT_COLD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-内存保护错误"><a href="#3-2-内存保护错误" class="headerlink" title="3.2 内存保护错误"></a>3.2 内存保护错误</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memory_protection_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 使用try-catch风格的错误处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (k_mem_domain_add_thread(domain, k_current_get()) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 处理内存域添加失败 */</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 访问保护内存 */</span></span><br><span class="line">    <span class="keyword">if</span> (k_mem_paging_is_enabled()) &#123;</span><br><span class="line">        <span class="comment">/* 处理页面错误 */</span></span><br><span class="line">        k_mem_paging_stats_get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-错误恢复"><a href="#4-错误恢复" class="headerlink" title="4. 错误恢复"></a>4. 错误恢复</h2><h3 id="4-1-优雅降级"><a href="#4-1-优雅降级" class="headerlink" title="4.1 优雅降级"></a>4.1 优雅降级</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">graceful_degradation</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> retry_count = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (retry_count--) &#123;</span><br><span class="line">        ret = perform_operation();</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* 操作成功 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == -EAGAIN) &#123;</span><br><span class="line">            <span class="comment">/* 临时错误，重试 */</span></span><br><span class="line">            k_msleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 严重错误，降级处理 */</span></span><br><span class="line">            handle_fallback();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-系统重启"><a href="#4-2-系统重启" class="headerlink" title="4.2 系统重启"></a>4.2 系统重启</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/sys/reboot.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">system_recovery</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 保存关键数据 */</span></span><br><span class="line">    save_critical_data();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 根据错误类型选择重启方式 */</span></span><br><span class="line">    <span class="keyword">if</span> (is_hardware_error()) &#123;</span><br><span class="line">        <span class="comment">/* 冷重启 */</span></span><br><span class="line">        sys_reboot(SYS_REBOOT_COLD);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 热重启 */</span></span><br><span class="line">        sys_reboot(SYS_REBOOT_WARM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-日志记录"><a href="#5-日志记录" class="headerlink" title="5. 日志记录"></a>5. 日志记录</h2><h3 id="5-1-错误日志"><a href="#5-1-错误日志" class="headerlink" title="5.1 错误日志"></a>5.1 错误日志</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line">LOG_MODULE_REGISTER(error_log, LOG_LEVEL_DBG);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error_logging_example</span><span class="params">(<span class="type">int</span> status)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 不同级别的日志 */</span></span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOG_ERR(<span class="string">&quot;Operation failed: %d&quot;</span>, status);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOG_WRN(<span class="string">&quot;Operation completed with warnings&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LOG_INF(<span class="string">&quot;Operation successful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 带hex dump的日志 */</span></span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>&#125;;</span><br><span class="line">    LOG_HEXDUMP_ERR(data, <span class="keyword">sizeof</span>(data), <span class="string">&quot;Error data:&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-错误追踪"><a href="#5-2-错误追踪" class="headerlink" title="5.2 错误追踪"></a>5.2 错误追踪</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/logging/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/debug/stack.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error_trace_example</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 打印调用栈 */</span></span><br><span class="line">    k_thread_stack_print_debug(k_current_get());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 记录错误现场 */</span></span><br><span class="line">    LOG_ERR(<span class="string">&quot;Error context:&quot;</span>);</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Thread ID: %p&quot;</span>, k_current_get());</span><br><span class="line">    LOG_ERR(<span class="string">&quot;CPU: %d&quot;</span>, arch_curr_cpu()-&gt;id);</span><br><span class="line">    LOG_ERR(<span class="string">&quot;Priority: %d&quot;</span>, k_thread_priority_get(k_current_get()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-错误注入"><a href="#6-错误注入" class="headerlink" title="6. 错误注入"></a>6. 错误注入</h2><h3 id="6-1-故障注入"><a href="#6-1-故障注入" class="headerlink" title="6.1 故障注入"></a>6.1 故障注入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 故障注入配置 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fault_inject_config</span> &#123;</span></span><br><span class="line">    <span class="type">bool</span> enabled;</span><br><span class="line">    <span class="type">int</span> error_rate;    <span class="comment">/* 错误率（百分比） */</span></span><br><span class="line">    <span class="type">int</span> error_type;    <span class="comment">/* 错误类型 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 故障注入函数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">inject_fault</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> fault_inject_config *config)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (config-&gt;enabled) &#123;</span><br><span class="line">        <span class="comment">/* 根据错误率决定是否注入错误 */</span></span><br><span class="line">        <span class="keyword">if</span> (sys_rand32_get() % <span class="number">100</span> &lt; config-&gt;error_rate) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (config-&gt;error_type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> -EIO;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> -EINVAL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-测试用例"><a href="#6-2-测试用例" class="headerlink" title="6.2 测试用例"></a>6.2 测试用例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/ztest.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">ZTEST_SUITE(error_handling_tests, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 测试错误处理 */</span></span><br><span class="line">ZTEST(error_handling_tests, test_error_handling)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fault_inject_config</span> <span class="title">config</span> =</span> &#123;</span><br><span class="line">        .enabled = <span class="literal">true</span>,</span><br><span class="line">        .error_rate = <span class="number">100</span>,  <span class="comment">/* 总是注入错误 */</span></span><br><span class="line">        .error_type = <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 验证错误处理 */</span></span><br><span class="line">    <span class="type">int</span> ret = inject_fault(&amp;config);</span><br><span class="line">    zassert_equal(ret, -ENOMEM,</span><br><span class="line">                 <span class="string">&quot;Expected ENOMEM error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-错误处理最佳实践"><a href="#7-错误处理最佳实践" class="headerlink" title="7. 错误处理最佳实践"></a>7. 错误处理最佳实践</h2><h3 id="7-1-错误传播"><a href="#7-1-错误传播" class="headerlink" title="7.1 错误传播"></a>7.1 错误传播</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 错误传播示例 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">process_data</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数验证 */</span></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span> || len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 处理数据 */</span></span><br><span class="line">    ret = validate_data(data, len);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 传播错误，保持原始错误码 */</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = transform_data(data, len);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 可以添加额外的错误信息 */</span></span><br><span class="line">        LOG_ERR(<span class="string">&quot;Data transformation failed: %d&quot;</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-清理处理"><a href="#7-2-清理处理" class="headerlink" title="7.2 清理处理"></a>7.2 清理处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zephyr/kernel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 资源清理示例 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">resource_management</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *resource1 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">void</span> *resource2 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 分配第一个资源 */</span></span><br><span class="line">    resource1 = allocate_resource1();</span><br><span class="line">    <span class="keyword">if</span> (resource1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ret = -ENOMEM;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 分配第二个资源 */</span></span><br><span class="line">    resource2 = allocate_resource2();</span><br><span class="line">    <span class="keyword">if</span> (resource2 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ret = -ENOMEM;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用资源 */</span></span><br><span class="line">    ret = use_resources(resource1, resource2);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功路径 */</span></span><br><span class="line">    free_resource2(resource2);</span><br><span class="line">    free_resource1(resource1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">    <span class="comment">/* 错误路径，清理资源 */</span></span><br><span class="line">    <span class="keyword">if</span> (resource2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        free_resource2(resource2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resource1 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        free_resource1(resource1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-错误处理指南&quot;&gt;&lt;a href=&quot;#Zephyr-错误处理指南&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 错误处理指南&quot;&gt;&lt;/a&gt;Zephyr 错误处理指南&lt;/h1&gt;&lt;h2 id=&quot;1-错误码系统&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zephyr 示例代码集</title>
    <link href="https://joeforkyou.github.io/2025/03/21/nodic/zephyr/examples/README/"/>
    <id>https://joeforkyou.github.io/2025/03/21/nodic/zephyr/examples/README/</id>
    <published>2025-03-21T12:49:56.000Z</published>
    <updated>2025-03-21T14:26:32.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zephyr-示例代码"><a href="#Zephyr-示例代码" class="headerlink" title="Zephyr 示例代码"></a>Zephyr 示例代码</h1><p>本章节提供了一系列 Zephyr RTOS 的示例代码，帮助开发者快速上手和理解各种功能的使用方法。这些示例涵盖了从基础到高级的多个方面。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><p><a href="/nodic/zephyr/examples/basic/">基础示例</a></p><ul><li>Hello World</li><li>LED 控制</li><li>按键输入</li><li>定时器使用</li><li>多线程编程</li></ul></li><li><p><a href="/nodic/zephyr/examples/networking/">网络示例</a></p><ul><li>TCP&#x2F;IP 通信</li><li>UDP 通信</li><li>HTTP 客户端&#x2F;服务器</li><li>MQTT 客户端</li><li>CoAP 通信</li></ul></li><li><p><a href="/nodic/zephyr/examples/sensors/">传感器示例</a></p><ul><li>温度传感器</li><li>加速度传感器</li><li>压力传感器</li><li>光线传感器</li><li>传感器数据融合</li></ul></li><li><p><a href="/nodic/zephyr/examples/bluetooth/">蓝牙示例</a></p><ul><li>BLE 广播</li><li>GATT 服务</li><li>BLE 中心设备</li><li>BLE 外围设备</li><li>蓝牙 Mesh</li></ul></li></ol><h2 id="示例使用说明"><a href="#示例使用说明" class="headerlink" title="示例使用说明"></a>示例使用说明</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li><p><strong>安装必要工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt install --no-install-recommends git cmake ninja-build gperf \</span><br><span class="line">  ccache dfu-util device-tree-compiler wget \</span><br><span class="line">  python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \</span><br><span class="line">  make gcc gcc-multilib g++-multilib libsdl2-dev</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Zephyr SDK</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br><span class="line">tar xvf zephyr-sdk-0.16.1_linux-x86_64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> zephyr-sdk-0.16.1</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>获取源码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">west init -m https://github.com/zephyrproject-rtos/zephyr --mr v2.9.1</span><br><span class="line"><span class="built_in">cd</span> zephyrproject</span><br><span class="line">west update</span><br></pre></td></tr></table></figure></li></ol><h3 id="编译和运行示例"><a href="#编译和运行示例" class="headerlink" title="编译和运行示例"></a>编译和运行示例</h3><ol><li><p><strong>基本步骤</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建示例</span></span><br><span class="line">west build -b &lt;board&gt; samples/&lt;sample_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 烧录到开发板</span></span><br><span class="line">west flash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行示例（QEMU）</span></span><br><span class="line">west build -b qemu_x86 samples/&lt;sample_name&gt;</span><br><span class="line">west run</span><br></pre></td></tr></table></figure></li><li><p><strong>常用选项</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理构建</span></span><br><span class="line">west build -t clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用特定配置</span></span><br><span class="line">west build -b &lt;board&gt; -- -DCONF_FILE=prj_custom.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用设备树覆盖</span></span><br><span class="line">west build -b &lt;board&gt; -- -DDTC_OVERLAY_FILE=custom.overlay</span><br></pre></td></tr></table></figure></li></ol><h2 id="示例代码组织"><a href="#示例代码组织" class="headerlink" title="示例代码组织"></a>示例代码组织</h2><p>每个示例通常包含以下文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">samples/my_sample/</span><br><span class="line">├── CMakeLists.txt          # 构建系统配置</span><br><span class="line">├── prj.conf                # 项目配置</span><br><span class="line">├── README.rst              # 示例说明文档</span><br><span class="line">├── sample.yaml            # 示例元数据</span><br><span class="line">└── src/</span><br><span class="line">    └── main.c             # 源代码</span><br></pre></td></tr></table></figure><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Zephyr REQUIRED HINTS $ENV&#123;ZEPHYR_BASE&#125;)</span><br><span class="line"><span class="keyword">project</span>(my_sample)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_sources</span>(app PRIVATE src/main.c)</span><br></pre></td></tr></table></figure><h3 id="prj-conf"><a href="#prj-conf" class="headerlink" title="prj.conf"></a>prj.conf</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 启用需要的功能</span><br><span class="line">CONFIG_LOG=y</span><br><span class="line">CONFIG_GPIO=y</span><br></pre></td></tr></table></figure><h3 id="sample-yaml"><a href="#sample-yaml" class="headerlink" title="sample.yaml"></a>sample.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sample:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">My</span> <span class="string">Sample</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">Sample</span> <span class="string">description</span></span><br><span class="line"><span class="attr">tests:</span></span><br><span class="line">  <span class="attr">sample.basic.my_sample:</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">introduction</span></span><br><span class="line">    <span class="attr">platform_allow:</span> <span class="string">qemu_x86</span> <span class="string">nrf52dk_nrf52832</span></span><br></pre></td></tr></table></figure><h2 id="调试和测试"><a href="#调试和测试" class="headerlink" title="调试和测试"></a>调试和测试</h2><h3 id="使用调试器"><a href="#使用调试器" class="headerlink" title="使用调试器"></a>使用调试器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动调试会话</span></span><br><span class="line">west debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用 GDB</span></span><br><span class="line">west build -b &lt;board&gt; -- -DCMAKE_BUILD_TYPE=Debug</span><br><span class="line">gdb build/zephyr/zephyr.elf</span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 minicom（Linux）</span></span><br><span class="line">minicom -D /dev/ttyACM0 -b 115200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 PuTTY（Windows）</span></span><br><span class="line"><span class="comment"># 配置串口和波特率（115200）</span></span><br></pre></td></tr></table></figure><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ol><li><p><strong>编译错误</strong></p><ul><li>检查依赖项是否安装</li><li>验证配置选项是否正确</li><li>确认硬件平台支持</li></ul></li><li><p><strong>运行问题</strong></p><ul><li>检查硬件连接</li><li>验证固件烧录是否成功</li><li>查看串口日志</li></ul></li><li><p><strong>硬件不兼容</strong></p><ul><li>检查平台支持列表</li><li>使用兼容的硬件版本</li><li>修改设备树配置</li></ul></li></ol><h2 id="示例分类"><a href="#示例分类" class="headerlink" title="示例分类"></a>示例分类</h2><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><ul><li>适合初学者</li><li>展示基本概念</li><li>简单明了的代码</li></ul><h3 id="中级示例"><a href="#中级示例" class="headerlink" title="中级示例"></a>中级示例</h3><ul><li>展示实用功能</li><li>包含错误处理</li><li>使用多个功能模块</li></ul><h3 id="高级示例"><a href="#高级示例" class="headerlink" title="高级示例"></a>高级示例</h3><ul><li>复杂系统集成</li><li>性能优化技术</li><li>高级功能使用</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><p><strong>代码学习</strong></p><ul><li>从简单示例开始</li><li>理解代码结构</li><li>尝试修改和扩展</li></ul></li><li><p><strong>功能验证</strong></p><ul><li>完整测试功能</li><li>验证错误处理</li><li>检查资源使用</li></ul></li><li><p><strong>代码复用</strong></p><ul><li>提取通用功能</li><li>创建可重用模块</li><li>保持代码整洁</li></ul></li></ol><h2 id="贡献示例"><a href="#贡献示例" class="headerlink" title="贡献示例"></a>贡献示例</h2><ol><li><p><strong>创建新示例</strong></p><ul><li>选择有意义的主题</li><li>编写清晰的文档</li><li>提供完整的测试</li></ul></li><li><p><strong>改进现有示例</strong></p><ul><li>修复问题</li><li>添加新功能</li><li>改进文档</li></ul></li><li><p><strong>提交流程</strong></p><ul><li>遵循代码规范</li><li>包含必要测试</li><li>提供使用说明</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Zephyr 示例代码提供了实用的参考和学习资源。通过学习和实践这些示例，开发者可以快速掌握 Zephyr RTOS 的各种功能，并在此基础上开发自己的应用程序。</p><p>在接下来的章节中，我们将详细介绍各类示例的实现和使用方法。每个示例都包含完整的源代码、配置文件和详细的说明文档，帮助您更好地理解和使用 Zephyr RTOS。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zephyr-示例代码&quot;&gt;&lt;a href=&quot;#Zephyr-示例代码&quot; class=&quot;headerlink&quot; title=&quot;Zephyr 示例代码&quot;&gt;&lt;/a&gt;Zephyr 示例代码&lt;/h1&gt;&lt;p&gt;本章节提供了一系列 Zephyr RTOS 的示例代码，帮助开发者快</summary>
      
    
    
    
    
  </entry>
  
</feed>
