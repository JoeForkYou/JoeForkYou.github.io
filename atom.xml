<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoeNero的博客</title>
  
  
  <link href="https://joeforkyou.github.io/atom.xml" rel="self"/>
  
  <link href="https://joeforkyou.github.io/"/>
  <updated>2024-11-24T05:36:14.312Z</updated>
  <id>https://joeforkyou.github.io/</id>
  
  <author>
    <name>JoeNero</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【CPP基础】【三】【继承多态封装】</title>
    <link href="https://joeforkyou.github.io/2024/11/24/CPP/CPP%E5%9F%BA%E7%A1%80_3_%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81%E5%B0%81%E8%A3%85/"/>
    <id>https://joeforkyou.github.io/2024/11/24/CPP/CPP%E5%9F%BA%E7%A1%80_3_%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81%E5%B0%81%E8%A3%85/</id>
    <published>2024-11-24T05:33:54.000Z</published>
    <updated>2024-11-24T05:36:14.312Z</updated>
    
    <content type="html"><![CDATA[<p>在C++中，继承、多态和封装是面向对象编程的三大基本特性。下面我将分别介绍这三者，并给出相应的示例。</p><h1 id="1-封装（Encapsulation）"><a href="#1-封装（Encapsulation）" class="headerlink" title="1. 封装（Encapsulation）"></a>1. 封装（Encapsulation）</h1><p>封装是指将数据（成员变量）和操作数据的方法（成员函数）放在一起，形成一个类，通过访问控制来限制对类内部数据的直接访问，从而保护数据的完整性。</p><p><strong>示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> balance; <span class="comment">// 私有成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BankAccount</span>(<span class="type">double</span> initialBalance) &#123;</span><br><span class="line">        balance = initialBalance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deposit</span><span class="params">(<span class="type">double</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            balance += amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span> &amp;&amp; amount &lt;= balance) &#123;</span><br><span class="line">            balance -= amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getBalance</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">BankAccount <span class="title">account</span><span class="params">(<span class="number">1000</span>)</span></span>;</span><br><span class="line">    account.<span class="built_in">deposit</span>(<span class="number">500</span>);</span><br><span class="line">    account.<span class="built_in">withdraw</span>(<span class="number">200</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;当前余额: &quot;</span> &lt;&lt; account.<span class="built_in">getBalance</span>() &lt;&lt; endl; <span class="comment">// 输出: 当前余额: 1300</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-继承（Inheritance）"><a href="#2-继承（Inheritance）" class="headerlink" title="2. 继承（Inheritance）"></a>2. 继承（Inheritance）</h1><p>继承是指一个类可以从另一个类中继承成员变量和方法，从而实现代码的重用。子类（派生类）可以扩展或重写父类（基类）的行为。</p><p><strong>示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;动物发声&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal &#123; <span class="comment">// Dog类继承自Animal类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123; <span class="comment">// 重写父类的方法</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;汪汪&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Animal animal;</span><br><span class="line">    animal.<span class="built_in">speak</span>(); <span class="comment">// 输出: 动物发声</span></span><br><span class="line"></span><br><span class="line">    Dog dog;</span><br><span class="line">    dog.<span class="built_in">speak</span>(); <span class="comment">// 输出: 汪汪</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-多态（Polymorphism）"><a href="#3-多态（Polymorphism）" class="headerlink" title="3. 多态（Polymorphism）"></a>3. 多态（Polymorphism）</h1><p>多态是指同一个操作可以作用于不同的对象上，不同的对象可以根据其具体类型表现出不同的行为。C++中的多态通常通过虚函数实现。</p><p><strong>示例：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123; <span class="comment">// 虚函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;绘制形状&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 重写父类的虚函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;绘制圆形&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> : <span class="keyword">public</span> Shape &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">// 重写父类的虚函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;绘制正方形&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">render</span><span class="params">(Shape* shape)</span> </span>&#123; <span class="comment">// 接受基类指针</span></span><br><span class="line">    shape-&gt;<span class="built_in">draw</span>(); <span class="comment">// 调用虚函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Circle circle;</span><br><span class="line">    Square square;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">render</span>(&amp;circle); <span class="comment">// 输出: 绘制圆形</span></span><br><span class="line">    <span class="built_in">render</span>(&amp;square); <span class="comment">// 输出: 绘制正方形</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>封装通过访问控制保护数据，提供了安全性。</li><li>继承实现了代码的复用，允许子类扩展父类的功能。</li><li>多态让程序更加灵活，同一操作可以作用于多个类型，增强了代码的可扩展性和可维护性。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C++中，继承、多态和封装是面向对象编程的三大基本特性。下面我将分别介绍这三者，并给出相应的示例。&lt;/p&gt;
&lt;h1 id=&quot;1-封装（Encapsulation）&quot;&gt;&lt;a href=&quot;#1-封装（Encapsulation）&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Kernel加时间戳</title>
    <link href="https://joeforkyou.github.io/2024/11/18/Android/Kernel%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <id>https://joeforkyou.github.io/2024/11/18/Android/Kernel%E5%8A%A0%E6%97%B6%E9%97%B4%E6%88%B3/</id>
    <published>2024-11-18T14:23:59.000Z</published>
    <updated>2024-11-18T14:31:21.879Z</updated>
    
    <content type="html"><![CDATA[<hr><p>添加对应的头文件和包装函数:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ktime.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">thermal_get_current_time_ms</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> temp;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timespec64</span> t;</span><br><span class="line">    <span class="built_in">ktime_get_ts64</span>(&amp;t);</span><br><span class="line">    temp = (((<span class="type">long</span> <span class="type">long</span>) t.tv_sec) * <span class="number">1000000</span> + (<span class="type">long</span>)t.tv_nsec/<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> (temp/<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c中static 受到编译器的影响 禁止使用long long类型.所以debug的时候还是去掉static的申明.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> time_diff,start_timestamp,end_timestamp;</span><br><span class="line"></span><br><span class="line">start_timestamp = <span class="built_in">thermal_get_current_time_ms</span>();</span><br><span class="line"></span><br><span class="line">end_timestamp = <span class="built_in">thermal_get_current_time_ms</span>();</span><br><span class="line">time_diff = end_timestamp - start_timestamp;</span><br><span class="line"><span class="built_in">printk</span>(<span class="string">&quot;[time] timestamp_diff = %lld ms&quot;</span>,time_diff);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;添加对应的头文件和包装函数:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>【CPP基础】【二】【设计模式】</title>
    <link href="https://joeforkyou.github.io/2024/11/17/CPP/CPP%E5%9F%BA%E7%A1%80_2_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_1/"/>
    <id>https://joeforkyou.github.io/2024/11/17/CPP/CPP%E5%9F%BA%E7%A1%80_2_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_1/</id>
    <published>2024-11-17T13:58:49.000Z</published>
    <updated>2024-11-17T14:00:38.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我其实是想把指针当做我学习的第二部分，奈何指针很麻烦，智能指针一时半会也说不完.<br>于是先整理下设计模式<br>因为我在实际项目中开发用到不少的工厂模式，就先以工厂模式为主要的研究内容开始进行复习和拓展。</p><p>设计模式是一种在软件开发中常用的解决方案，旨在帮助开发者解决常见问题，提高软件的可维护性、可重用性和可扩展性。设计模式通常分为三大类：创建型模式、结构型模式和行为型模式。</p><ol><li><p><strong>创建型模式</strong>：这些模式主要关注对象的创建机制，以适应不同的需求和场景。</p><ul><li><strong>单例模式</strong>：确保一个类只有一个实例，并提供一个全局访问点。</li><li><strong>工厂方法模式</strong>：定义一个创建对象的接口，让子类决定实例化哪一个类。</li><li><strong>抽象工厂模式</strong>：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们的具体类。</li></ul></li><li><p><strong>结构型模式</strong>：这些模式主要关注对象之间的组合关系。</p><ul><li><strong>适配器模式</strong>：将一个类的接口转换成客户端期望的另一个接口，从而使不兼容的接口能够合作。</li><li><strong>装饰者模式</strong>：动态地给一个对象添加额外的职责，就增加功能来说，这种模式比生成子类更为灵活。</li><li><strong>代理模式</strong>：为其他对象提供一种代理以控制对这个对象的访问。</li></ul></li><li><p><strong>行为型模式</strong>：这些模式主要关注对象之间的交互和职责分配。</p><ul><li><strong>观察者模式</strong>：定义了一种一对多的依赖关系，使得一当一个对象改变状态时，所有依赖于它的对象都得到通知并被自动更新。</li><li><strong>策略模式</strong>：定义一系列算法，把它们一个个封装起来，并且使它们可以互相替换，策略模式让算法的变化独立于使用算法的客户。</li><li><strong>命令模式</strong>：将一个请求封装成一个对象，从而使你能够使用不同的请求、队列或日志请求，并支持可撤销的操作。</li></ul></li></ol><p>设计模式是软件开发的宝贵经验积累，通过运用这些模式，可以有效地解决许多普遍存在的问题，使代码更加简洁、清晰和易于维护。</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>这个在我是实际开发中用到的比较多</p><p>单例模式是一种创建型设计模式，它的主要目的是确保一个类只有一个实例，并提供一个全局访问点。这种模式在需要控制对某些资源的访问时尤其有用，比如数据库连接或配置管理等。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li><strong>唯一性</strong>：单例模式确保任何时候都只有一个类的实例存在。</li><li><strong>全局访问</strong>：提供一个静态方法，让用户可以获取到这个唯一实例。</li><li><strong>延迟初始化</strong>：可以实现懒汉式单例，只有在第一次使用时才创建实例。</li></ol><h3 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h3><p>单例模式的实现方式有多种，以下是最常见的几种：</p><ol><li><p><strong>懒汉式</strong>：</p><ul><li>在需要时才创建实例，在多线程环境下需要加锁以保证线程安全。</li><li>完整的代码如下:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Singleton* instance;</span><br><span class="line">    <span class="type">static</span> std::mutex mutex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="built_in">Singleton</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton created&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取单例实例的方法</span></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">nullptr</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>; <span class="comment">// 加锁以保证线程安全</span></span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">nullptr</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化静态成员变量</span></span><br><span class="line">Singleton* Singleton::instance = <span class="literal">nullptr</span>;</span><br><span class="line">std::mutex Singleton::mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Singleton* singleton = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>饿汉式</strong>：</p><ul><li>在类加载时就创建实例，线程安全，但不支持延迟加载。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 提供一个静态方法来获取单例对象</span></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton &amp;<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">static</span> Singleton instance; <span class="comment">// 在第一次调用时创建实例</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除拷贝构造函数和赋值运算符，以防意外复制</span></span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singleton &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">someMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello from Singleton!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="built_in">Singleton</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton instance created!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有析构函数</span></span><br><span class="line">    ~<span class="built_in">Singleton</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton instance destroyed!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取单例对象并调用方法</span></span><br><span class="line">    Singleton::<span class="built_in">getInstance</span>().<span class="built_in">someMethod</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>双重检查锁定</strong>：</p><ul><li>在懒汉式的基础上，使用双重检查加锁，减少了同步的性能开销。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 提供一个静态方法来获取单例对象</span></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton *<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 首次检查</span></span><br><span class="line">        <span class="keyword">if</span> (!instance)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 对共享资源加锁</span></span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">            <span class="comment">// 再次检查</span></span><br><span class="line">            <span class="keyword">if</span> (!instance)</span><br><span class="line">            &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>(); <span class="comment">// 创建实例</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除拷贝构造函数和赋值运算符，以防意外复制</span></span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Singleton &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">someMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello from Singleton!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="built_in">Singleton</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton instance created!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有析构函数</span></span><br><span class="line">    ~<span class="built_in">Singleton</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Singleton instance destroyed!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> Singleton *instance; <span class="comment">// 单例指针</span></span><br><span class="line">    <span class="type">static</span> std::mutex mutex_;   <span class="comment">// 互斥锁</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员变量初始化</span></span><br><span class="line">Singleton *Singleton::instance = <span class="literal">nullptr</span>;</span><br><span class="line">std::mutex Singleton::mutex_;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取单例对象并调用方法</span></span><br><span class="line">    Singleton::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">someMethod</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li>配置管理：一个应用程序通常只需要一个配置对象来管理配置参数。</li><li>日志记录：通常使用单例模式来管理日志记录，以确保日志的统一性。</li><li>数据库连接或线程池：避免创建多个连接，节省资源。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>单例模式通过控制实例的创建，提供了对共享资源的管理，避免了资源浪费和状态不一致的问题。在实际应用中，选择合适的实现方式以满足线程安全、性能和资源利用的需求非常重要。</p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式是一种常见的设计模式，其主要目的是通过创建一个工厂来集中创建对象。工厂模式的主要类型包括：</p><ol><li><p><strong>简单工厂模式</strong>：</p><ul><li>定义一个工厂类，根据传入的参数决定创建哪一种产品类的实例。虽然简单工厂模式本身不是GoF设计模式，但它在很多项目中得到了广泛应用。</li></ul></li><li><p><strong>工厂方法模式</strong>：</p><ul><li>定义一个接口用于创建对象，但将实例化的工作推迟到子类中。每个子类都实现了自己的工厂方法，负责创建特定类型的对象。</li></ul></li><li><p><strong>抽象工厂模式</strong>：</p><ul><li>提供一个接口，用于创建一系列相关或依赖的对象，而不需要指定具体类。这种模式通常用于创建一组相关产品，适用于产品族的设计。</li></ul></li><li><p><strong>静态工厂方法</strong>：</p><ul><li>工厂方法被定义为静态方法，可以在没有创建工厂类实例的情况下调用。通常用于简单的对象创建操作。</li></ul></li></ol><p>这些工厂模式各有优缺点，根据具体需求选择合适的模式可以提高代码的可维护性和可扩展性。</p><h3 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1. 简单工厂模式"></a>1. 简单工厂模式</h3><p>简单工厂模式使用一个工厂类根据给定的信息返回不同类型的对象。这个模式不推荐用于复杂的系统，因为它违反了开闭原则，但对于简单的应用场景非常有用。</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品A&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品B&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> Product* <span class="title">createProduct</span><span class="params">(<span class="type">const</span> std::string&amp; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;B&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Product* productA = SimpleFactory::<span class="built_in">createProduct</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    productA-&gt;<span class="built_in">use</span>();</span><br><span class="line">    <span class="keyword">delete</span> productA;</span><br><span class="line"></span><br><span class="line">    Product* productB = SimpleFactory::<span class="built_in">createProduct</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    productB-&gt;<span class="built_in">use</span>();</span><br><span class="line">    <span class="keyword">delete</span> productB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2. 工厂方法模式"></a>2. 工厂方法模式</h3><p>工厂方法模式定义一个用于创建产品的接口，但由子类来决定实例化哪一个产品。这样可以更好地遵循开闭原则。</p><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品A&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB</span> : <span class="keyword">public</span> Product &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品B&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Creator</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Product* <span class="title">factoryMethod</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">someOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product* product = <span class="built_in">factoryMethod</span>();</span><br><span class="line">        product-&gt;<span class="built_in">use</span>();</span><br><span class="line">        <span class="keyword">delete</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCreatorA</span> : <span class="keyword">public</span> Creator &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product* <span class="title">factoryMethod</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCreatorB</span> : <span class="keyword">public</span> Creator &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Product* <span class="title">factoryMethod</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Creator* creatorA = <span class="keyword">new</span> <span class="built_in">ConcreteCreatorA</span>();</span><br><span class="line">    creatorA-&gt;<span class="built_in">someOperation</span>();</span><br><span class="line">    <span class="keyword">delete</span> creatorA;</span><br><span class="line"></span><br><span class="line">    Creator* creatorB = <span class="keyword">new</span> <span class="built_in">ConcreteCreatorB</span>();</span><br><span class="line">    creatorB-&gt;<span class="built_in">someOperation</span>();</span><br><span class="line">    <span class="keyword">delete</span> creatorB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3. 抽象工厂模式"></a>3. 抽象工厂模式</h3><p>抽象工厂模式提供一个接口，用于创建一系列相关或相互依赖的对象，而无需指定具体的类。这种模式非常适合用于需要创建多个不同类型的产品的场景。</p><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">use</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA1</span> : <span class="keyword">public</span> ProductA &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品A1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA2</span> : <span class="keyword">public</span> ProductA &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品A2&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB1</span> : <span class="keyword">public</span> ProductB &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品B1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB2</span> : <span class="keyword">public</span> ProductB &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">use</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;使用产品B2&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ProductA* <span class="title">createProductA</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ProductB* <span class="title">createProductB</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory1</span> : <span class="keyword">public</span> AbstractFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ProductA* <span class="title">createProductA</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProductB* <span class="title">createProductB</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory2</span> : <span class="keyword">public</span> AbstractFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ProductA* <span class="title">createProductA</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductA2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ProductB* <span class="title">createProductB</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">ConcreteProductB2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AbstractFactory* factory1 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory1</span>();</span><br><span class="line">    ProductA* productA1 = factory1-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">    ProductB* productB1 = factory1-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line">    </span><br><span class="line">    productA1-&gt;<span class="built_in">use</span>();</span><br><span class="line">    productB1-&gt;<span class="built_in">use</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> productA1;</span><br><span class="line">    <span class="keyword">delete</span> productB1;</span><br><span class="line">    <span class="keyword">delete</span> factory1;</span><br><span class="line"></span><br><span class="line">    AbstractFactory* factory2 = <span class="keyword">new</span> <span class="built_in">ConcreteFactory2</span>();</span><br><span class="line">    ProductA* productA2 = factory2-&gt;<span class="built_in">createProductA</span>();</span><br><span class="line">    ProductB* productB2 = factory2-&gt;<span class="built_in">createProductB</span>();</span><br><span class="line">    </span><br><span class="line">    productA2-&gt;<span class="built_in">use</span>();</span><br><span class="line">    productB2-&gt;<span class="built_in">use</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> productA2;</span><br><span class="line">    <span class="keyword">delete</span> productB2;</span><br><span class="line">    <span class="keyword">delete</span> factory2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>简单工厂模式</strong>适合用于简单的对象创建，便于使用和管理。</li><li><strong>工厂方法模式</strong>通过子类化来实现扩展功能，更符合面向对象的原则。</li><li><strong>抽象工厂模式</strong>能够创建一系列相关的产品，适用性更广。</li></ul><p>这些工厂模式在软件开发中非常常见，尤其在需要解耦对象创建与使用逻辑时，能够有效提高代码的可维护性和可扩展性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我其实是想把指针当做我学习的第二部分，奈何指针很麻烦，智能指针一时半会也说不完.&lt;br&gt;于是先整理下设计模式&lt;br&gt;因为我在实际项目中开发用</summary>
      
    
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>【CPP基础】【一】</title>
    <link href="https://joeforkyou.github.io/2024/11/17/CPP/CPP%E5%9F%BA%E7%A1%80_1/"/>
    <id>https://joeforkyou.github.io/2024/11/17/CPP/CPP%E5%9F%BA%E7%A1%80_1/</id>
    <published>2024-11-17T12:06:49.000Z</published>
    <updated>2024-11-17T14:00:08.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这是对c++的泛式编程的梳理<br>c++的基础就那边点,无非就是流程控制和对象继承等<br>剩下的就是STL的内容。<br>所以我觉得还是有必要深究下来，一来就是我这个人的性格是这样的.<br>学习链接:<br><a href="https://www.learncpp.com/">https://www.learncpp.com/</a></p><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>整型: int, long, long long</li><li>浮点型: float, double, long double</li><li>字符型: char, wchar_t</li><li>布尔型: bool</li><li>指针型: pointer, reference</li><li>数组型: array</li><li>枚举型: enum</li><li>结构体型: struct</li><li>类型: class</li></ul><table><thead><tr><th>类型</th><th>关键字</th></tr></thead><tbody><tr><td>布尔型</td><td>bool</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>整型</td><td>int</td></tr><tr><td>浮点型</td><td>float</td></tr><tr><td>双浮点型</td><td>double</td></tr><tr><td>无类型</td><td>void</td></tr><tr><td>宽字符型</td><td>wchar_t</td></tr></tbody></table><p>补充表格</p><table><thead><tr><th>类型</th><th>位</th><th>范围</th></tr></thead><tbody><tr><td>char</td><td>1字节</td><td>-128~127</td></tr><tr><td>unsigned char</td><td>1字节</td><td>0~255</td></tr><tr><td>signed char</td><td>1字节</td><td>-128~127</td></tr><tr><td>int</td><td>4字节</td><td>-2^31~2^31-1</td></tr><tr><td>unsigned int</td><td>4字节</td><td></td></tr><tr><td>signed int</td><td>4字节</td><td></td></tr><tr><td>short int</td><td>2字节</td><td></td></tr><tr><td>unsigned short int</td><td>2字节</td><td></td></tr><tr><td>signed short int</td><td>2字节</td><td></td></tr><tr><td>long int</td><td>8字节</td><td></td></tr><tr><td>signed long int</td><td>8字节</td><td></td></tr><tr><td>unsigned long int</td><td>8字节</td><td></td></tr><tr><td>float</td><td>4字节</td><td></td></tr><tr><td>double</td><td>8字节</td><td></td></tr><tr><td>long long</td><td>8字节</td><td></td></tr><tr><td>long double</td><td>16字节</td><td></td></tr></tbody></table><p>typedef 使用格式如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> type newname;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INT;</span><br><span class="line">INT INI16;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="静态转换"><a href="#静态转换" class="headerlink" title="静态转换"></a>静态转换</h3><p>静态转换是将一种数据类型的值强制转换为另一种数据类型的值。</p><p>静态转换通常用于比较类型相似的对象之间的转换，例如将 int 类型转换为 float 类型。</p><p>静态转换不进行任何运行时类型检查，因此可能会导致运行时错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="built_in">static_cast</span>&lt;<span class="type">float</span>&gt;(i); <span class="comment">// 静态将int类型转换为float类型</span></span><br></pre></td></tr></table></figure><h3 id="动态转换"><a href="#动态转换" class="headerlink" title="动态转换"></a>动态转换</h3><p>动态转换通常用于将一个基类指针或引用转换为派生类指针或引用。动态转换在运行时进行类型检查，如果不能进行转换则返回空指针或引发异常。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;&#125;;</span><br><span class="line">Base* ptr_base = <span class="keyword">new</span> Derived;</span><br><span class="line">Derived* ptr_derived = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(ptr_base); <span class="comment">// 将基类指针转换为派生类指针</span></span><br></pre></td></tr></table></figure><p>完整代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 纯虚函数</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived::func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Base* ptr_base = <span class="keyword">new</span> Derived;</span><br><span class="line">    Derived* ptr_derived = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(ptr_base); <span class="comment">// 将基类指针转换为派生类指针</span></span><br><span class="line">    ptr_derived-&gt;<span class="built_in">func</span>(); <span class="comment">// 调用派生类函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常量转换"><a href="#常量转换" class="headerlink" title="常量转换"></a>常量转换</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; r = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>&amp;&gt;(i); <span class="comment">// 常量转换，将const int转换为int</span></span><br></pre></td></tr></table></figure><h3 id="重新解释转换"><a href="#重新解释转换" class="headerlink" title="重新解释转换"></a>重新解释转换</h3><p>重新解释转换将一个数据类型的值重新解释为另一个数据类型的值，通常用于在不同的数据类型之间进行转换。</p><p>重新解释转换不进行任何类型检查，因此可能会导致未定义的行为。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">float</span>&amp;&gt;(i); <span class="comment">// 重新解释将int类型转换为float类型</span></span><br></pre></td></tr></table></figure><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>一般来说有三个地方可以定义变量：</p><ul><li>在函数或一个代码块内部声明的变量，称为<strong>局部变量</strong>。</li><li>在函数参数的定义中声明的变量，称为<strong>形式参数</strong>。</li><li>在所有函数外部声明的变量，称为<strong>全局变量</strong>。</li></ul><p>作用域是程序的一个区域，变量的作用域可以分为以下几种：</p><ul><li><strong>局部作用域</strong>：在函数内部声明的变量具有局部作用域，它们只能在函数内部访问。局部变量在函数每次被调用时被创建，在函数执行完后被销毁。</li><li><strong>全局作用域</strong>：在所有函数和代码块之外声明的变量具有全局作用域，它们可以被程序中的任何函数访问。全局变量在程序开始时被创建，在程序结束时被销毁。</li><li><strong>块作用域</strong>：在代码块内部声明的变量具有块作用域，它们只能在代码块内部访问。块作用域变量在代码块每次被执行时被创建，在代码块执行完后被销毁。</li><li><strong>类作用域</strong>：在类内部声明的变量具有类作用域，它们可以被类的所有成员函数访问。类作用域变量的生命周期与类的生命周期相同。</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>常用的几个如下</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><strong>strcpy(s1,s2)</strong></td><td>复制字符串s2到字符串s1</td></tr><tr><td><strong>strcat(s1, s2);</strong></td><td>连接字符串 s2 到字符串 s1 的末尾。连接字符串也可以用 <strong>+</strong> 号，例如:<br/>string str1 &#x3D; “demo1”;<br/>string str2 &#x3D; “demo2”;<br/>string str &#x3D; str1 + str2;</td></tr><tr><td><strong>strlen(s1);</strong></td><td>返回字符串 s1 的长度。</td></tr><tr><td><strong>strcmp(s1, s2);</strong></td><td>如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回值小于 0；如果 s1&gt;s2 则返回值大于 0。</td></tr><tr><td><strong>strchr(s1, ch);</strong></td><td>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td><strong>strstr(s1, s2);</strong></td><td>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span>  var1 = <span class="number">10</span>;</span><br><span class="line">   <span class="type">char</span> var2[<span class="number">12</span>] = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;var1 变量的地址： &quot;</span>;</span><br><span class="line">   cout &lt;&lt; &amp;var1 &lt;&lt; <span class="string">&quot;value: &quot;</span> &lt;&lt; var1 &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;var2 变量的地址： &quot;</span>;</span><br><span class="line">   cout &lt;&lt; &amp;var2 &lt;&lt; <span class="string">&quot;value: &quot;</span> &lt;&lt; var2 &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 声明简单的变量</span></span><br><span class="line">   <span class="type">int</span>    i;</span><br><span class="line">   <span class="type">double</span> d;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 声明引用变量</span></span><br><span class="line">   <span class="type">int</span>&amp;    r = i;</span><br><span class="line">   <span class="type">double</span>&amp; s = d;</span><br><span class="line">   </span><br><span class="line">   i = <span class="number">5</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of i : &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of i reference : &quot;</span> &lt;&lt; r  &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   d = <span class="number">11.7</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of d : &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of d reference : &quot;</span> &lt;&lt; s  &lt;&lt; endl;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>直接放代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">// 提供接口框架的纯虚函数</span></span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setWidth</span><span class="params">(<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      width = w;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">setHeight</span><span class="params">(<span class="type">int</span> h)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      height = h;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">   <span class="type">int</span> width;</span><br><span class="line">   <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>: <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> (width * height); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>: <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> (width * height)/<span class="number">2</span>; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Rectangle Rect;</span><br><span class="line">   Triangle  Tri;</span><br><span class="line"> </span><br><span class="line">   Rect.<span class="built_in">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">   Rect.<span class="built_in">setHeight</span>(<span class="number">7</span>);</span><br><span class="line">   <span class="comment">// 输出对象的面积</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total Rectangle area: &quot;</span> &lt;&lt; Rect.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   Tri.<span class="built_in">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">   Tri.<span class="built_in">setHeight</span>(<span class="number">7</span>);</span><br><span class="line">   <span class="comment">// 输出对象的面积</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total Triangle area: &quot;</span> &lt;&lt; Tri.<span class="built_in">getArea</span>() &lt;&lt; endl; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>C++11 提供了对匿名函数的支持,称为 Lambda 函数(也叫 Lambda 表达式)。</p><p>Lambda 表达式把函数看作对象。Lambda 表达式可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值。</p><p>Lambda 表达式本质上与函数声明非常类似。Lambda 表达式具体形式如下:</p><p>格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[capture](parameters)-&gt;return-type&#123;body&#125;</span><br></pre></td></tr></table></figure><p>举例如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[](<span class="type">int</span> x, <span class="type">int</span> y)&#123; <span class="keyword">return</span> x &lt; y ; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;这是对c++的泛式编程的梳理&lt;br&gt;c++的基础就那边点,无非就是流程控制和对象继承等&lt;br&gt;剩下的就是STL的内容。&lt;br&gt;所以我觉得还是</summary>
      
    
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>cpp标准</title>
    <link href="https://joeforkyou.github.io/2024/11/14/CPP/cpp%E6%A0%87%E5%87%86/"/>
    <id>https://joeforkyou.github.io/2024/11/14/CPP/cpp%E6%A0%87%E5%87%86/</id>
    <published>2024-11-14T14:47:09.000Z</published>
    <updated>2024-11-14T15:10:01.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>‌C++标准‌是C++编程语言的规范，由国际标准化组织（ISO）制定。<br>C++标准的发展历程可以追溯到1998年,<br>当时ISO&#x2F;IEC 14882:1998标准被发布，这被认为是第一个C++标准，常被称为C++98。<br>随后，C++标准经历了多次更新和修订，<br>包括C++03（2003年）、C++11（2011年）、C++14（2014年）和C++17（2017年）。最新的C++标准是C++20，于2020年发布，引入了许多新特性，如概念（concepts）、范围库（ranges）、协程（coroutines）等。此外，C++23标准也在2023年确定，但目前支持完整的编译器较少。<br>C++标准的发展历程</p><p>‌C++98‌：1998年发布的第一个C++标准，常被称为C++98。<br>‌C++03‌：2003年发布的修订版，增加了对自动存储期变量的支持等新特性。<br>‌C++11‌：2011年发布的版本，增加了lambda表达式、自动类型推导等功能。<br>‌C++14‌：2014年发布的版本，增加了基于范围的for循环、constexpr等功能。<br>‌C++17‌：2017年发布的版本，增加了结构化绑定、文件系统库等功能。<br>‌C++20‌：2020年发布的版本，引入了概念（concepts）、范围库（ranges）、协程（coroutines）等新特性。<br>‌C++23‌：2023年确定的版本，目前支持完整的编译器较少。<br>目前按照我接触的标准来说.<br>市面上大部分项目都是以C++11&#x2F;14&#x2F;17&#x2F;20为主, 而C++98&#x2F;03则是少数.  这主要是因为一些老项目的历史原因, 也有一些公司的项目使用C++98&#x2F;03, 这也是C++标准的发展历程.<br>本文先介绍个大概,后续再介绍C++11&#x2F;14&#x2F;17&#x2F;20的详细新特性。</p><h1 id="2-C-11-新特性"><a href="#2-C-11-新特性" class="headerlink" title="2 C++11 新特性"></a>2 C++11 新特性</h1><p>C++11标准引入了许多新特性，以下是一些重要的特性及其代码示例：</p><ol><li><p><strong>自动类型推导（auto）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">1</span>;      <span class="comment">// x 被推导为 int</span></span><br><span class="line"><span class="keyword">auto</span> y = <span class="number">2.5</span>;    <span class="comment">// y 被推导为 double</span></span><br></pre></td></tr></table></figure></li><li><p><strong>范围for循环（for each）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; val : vec) </span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 输出每个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>新类型：nullptr</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="literal">nullptr</span>; <span class="comment">// nullptr 是类型安全的空指针</span></span><br></pre></td></tr></table></figure><p>早期一直用的是NULL, 后来发现NULL是int类型, 所以就引入了nullptr, 它是一个空指针常量, 类型安全, 避免了类型转换错误。这使得代码更加安全和可读性更高。</p></li><li><p><strong>右值引用和移动语义</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Constructor&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    <span class="built_in">MyClass</span>(MyClass&amp;&amp; other) &#123; std::cout &lt;&lt; <span class="string">&quot;Move Constructor&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">const</span> MyClass&amp; other) &#123; std::cout &lt;&lt; <span class="string">&quot;Copy Constructor&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyClass obj1;</span><br><span class="line">MyClass obj2 = std::<span class="built_in">move</span>(obj1); <span class="comment">// 使用移动构造函数</span></span><br></pre></td></tr></table></figure></li><li><p><strong>lambda表达式</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> lambda = [](<span class="type">int</span> x) &#123; <span class="keyword">return</span> x * x; &#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">lambda</span>(<span class="number">5</span>); <span class="comment">// 输出25</span></span><br></pre></td></tr></table></figure><p><strong>注意lambda是最后使用发射的,在用QT的时候,我经常会使用connect函数, 它会自动生成一个lambda表达式, 这个时候要注意局部变量和全局变量的生命周期，如果在外层申明了一个局部变量，在lambda表达式中使用这个变量，就会出现未定义行为导致程序崩溃。</strong></p></li><li><p><strong>智能指针（std::unique_ptr和std::shared_ptr）</strong><br>智能指针单独开一个章节说明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>; <span class="comment">// 独占所有权的智能指针</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">20</span>))</span></span>; <span class="comment">// 共享所有权的智能指针</span></span><br></pre></td></tr></table></figure></li><li><p><strong>线程支持库（std::thread）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadFunction</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Thread is running&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::thread <span class="title">t</span><span class="params">(threadFunction)</span></span>;</span><br><span class="line">t.<span class="built_in">join</span>(); <span class="comment">// 等待线程结束</span></span><br></pre></td></tr></table></figure></li><li><p><strong>静态断言（static_assert）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) == <span class="number">4</span>, <span class="string">&quot;Size of int is not 4 bytes!&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>变长模板（Variadic templates）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Args... args)</span> </span>&#123;</span><br><span class="line">    (std::cout &lt;&lt; ... &lt;&lt; args) &lt;&lt; std::endl; <span class="comment">// 使用折叠表达式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;text&quot;</span>); <span class="comment">// 输出: 123text</span></span><br></pre></td></tr></table></figure></li><li><p><strong>枚举类（enum class）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">Color</span> &#123; Red, Green, Blue &#125;;</span><br><span class="line">Color c = Color::Red; <span class="comment">// 强类型枚举</span></span><br></pre></td></tr></table></figure></li></ol><p>以上是C++11引入的一些主要新特性及其简单示例，这些特性极大地增强了C++的功能和灵活性。</p><h1 id="3-C-14-新特性"><a href="#3-C-14-新特性" class="headerlink" title="3 C++14 新特性"></a>3 C++14 新特性</h1><h2 id="1-二进制字面量"><a href="#1-二进制字面量" class="headerlink" title="1. 二进制字面量"></a>1. 二进制字面量</h2><p>C++14 引入了二进制字面量，允许使用 <code>0b</code> 或 <code>0B</code> 前缀来表示二进制数字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> binaryNum = <span class="number">0b101010</span>; <span class="comment">// 二进制 101010 等于十进制 42</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;二进制 101010 的十进制值是: &quot;</span> &lt;&lt; binaryNum &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 使用二进制字面量时，必须在编译器开启 C++14 标准的情况下编译代码。</p><h2 id="2-泛型-Lambda-表达式"><a href="#2-泛型-Lambda-表达式" class="headerlink" title="2. 泛型 Lambda 表达式"></a>2. 泛型 Lambda 表达式</h2><p>在 C++14 中，Lambda 表达式支持模板参数，可以使用 <code>auto</code> 作为参数类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> print = [](<span class="keyword">auto</span> n) &#123; std::cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">        <span class="built_in">print</span>(num); <span class="comment">// 调用 泛型 Lambda</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 泛型 Lambda 可能在某些老旧的编译器上不被支持，请确认编译器版本。</p><h2 id="3-std-make-unique"><a href="#3-std-make-unique" class="headerlink" title="3. std::make_unique"></a>3. std::make_unique</h2><p>C++14 引入了 <code>std::make_unique</code> 来简化 <code>std::unique_ptr</code> 的创建，避免手动使用 <code>new</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> ptr = std::<span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">42</span>); <span class="comment">// 创建一个 unique_ptr 并初始化</span></span><br><span class="line">    std::cout &lt;&lt; *ptr &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 使用 <code>std::make_unique</code> 可以防止内存泄漏，但是请确保使用 C++14 或更高版本编译。</p><h2 id="4-返回类型推导"><a href="#4-返回类型推导" class="headerlink" title="4. 返回类型推导"></a>4. 返回类型推导</h2><p>C++14 允许推导函数的返回类型，可以使用 <code>auto</code> 关键字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b; <span class="comment">// 返回类型自动推导</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;3 + 5 = &quot;</span> &lt;&lt; <span class="built_in">add</span>(<span class="number">3</span>, <span class="number">5</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 使用返回类型推导时，确保函数体简单，编译器能够清晰推导出返回类型。</p><h2 id="5-std-shared-timed-mutex-和-std-shared-lock"><a href="#5-std-shared-timed-mutex-和-std-shared-lock" class="headerlink" title="5. std::shared_timed_mutex 和 std::shared_lock"></a>5. std::shared_timed_mutex 和 std::shared_lock</h2><p>C++14 引入了 <code>std::shared_timed_mutex</code> 和 <code>std::shared_lock</code>，支持更灵活的多线程锁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shared_mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::shared_timed_mutex mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::shared_lock&lt;std::shared_timed_mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Reading data&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::unique_lock&lt;std::shared_timed_mutex&gt; <span class="title">lock</span><span class="params">(mutex)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Writing data&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(read)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(write)</span></span>;</span><br><span class="line"></span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>: 当在多线程环境下使用锁时，确保正确地管理锁的生命周期，避免死锁和资源竞争。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C++14 引入了多项新特性，增强了语言的灵活性和表达能力。在使用这些特性时，请注意兼容性和编译器支持情况，以确保代码的可移植性和稳定性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;‌C++标准‌是C++编程语言的规范，由国际标准化组织（ISO）制定。&lt;br&gt;C++标准的发展历程可以追溯到1998年,&lt;b</summary>
      
    
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>【uiautomator】自动化测试camera【一】</title>
    <link href="https://joeforkyou.github.io/2024/11/11/Python/uiautomator2%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95camera_1/"/>
    <id>https://joeforkyou.github.io/2024/11/11/Python/uiautomator2%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95camera_1/</id>
    <published>2024-11-11T14:46:49.000Z</published>
    <updated>2024-11-17T12:17:14.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>本文档是自己写andorid camera自动化测试的随笔<br>测试机器为<br>OPPO Find x7<br>测试Apk为oppo的系统相机.</p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h1><p>我电脑是有装conda环境的,所以我直接用conda创建虚拟环境专门用于相关的测试.<br>官网下的巨慢，直接去清华大学的镜像源下载速度快很多.<br><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a><br>下载对应的系统版本即可<br>linux对应sh文件.<br>windows直接双击exe文件安装即可.<br>我不是很喜欢直接破坏本机电脑的python环境,所以我创建了一个新的虚拟环境. 这种包管理更为安全，pip炸了就炸了 打不了删了重新建一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py3 python=3.7  #创建python3.7的虚拟环境</span><br><span class="line">conda activate  py3             #激活虚拟环境</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">conda deactivate               <span class="comment">#退出虚拟环境</span></span></span><br><span class="line">conda info --envs               #查看虚拟环境</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">conda environments:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">py2                      C:\Users\Admin\.conda\envs\py2</span></span><br><span class="line">py3                      C:\Users\Admin\.conda\envs\py3</span><br><span class="line">base                     D:\conda</span><br></pre></td></tr></table></figure><p>激活后会显示当前所在的环境名字，比如我这边是py3.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(py3) D:\Pr\demo&gt;</span><br></pre></td></tr></table></figure><p>安装需要的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install uiautomator2</span><br><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure><p>电脑要提前安装好相关的adb.直接去谷歌官网下就行，linux下直接apt-get install adb就行.<br>如果adb 版本有问题，可以到<a href="https://developer.android.com/studio/releases/platform-tools%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88.%E7%84%B6%E5%90%8E%E6%B7%BB%E5%8A%A0%E5%88%B0">https://developer.android.com/studio/releases/platform-tools下载最新版.然后添加到</a><br>我需要先获得测试apk的包名,本质上我都去调用一些api接口.<br>这个包名可以替换的.<br>清下log,然后开始抓log.开始抓log后打开你所用的camera app.<br>adb logcat -c<br>adb logcat -G 20M<br>adb logcat -b all &gt;main.txt<br>打开main.txt log<br>过滤log 关键字connect call<br>看到我这边打印的一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11-11 21:42:43.435  1458  8995 I CameraService: CameraService::connect call (PID 6159 &quot;com.oplus.camera&quot;, camera ID 5) and Camera API version 2</span><br></pre></td></tr></table></figure><p>com.oplus.camera 就是我用的测试apk的包名,对应的camera ID 5 就是我打开的相机的ID.<br>话说为什么是5,我记得后摄一般项目都是做成0.<br>一般remosaic的相机ID是会做别的映射，我打了好多不同模式的，没明白他的映射id是怎么做的.<br>等有机会我自己写个apk，给这个手机hal的信息慢慢剖出来看下人家产品是怎么做的.<br>11-11 21:53:24.108  1458 10185 I CameraService: CameraService::connect call (PID 6159 “com.oplus.camera”, camera ID 5) and Camera API version 2<br>11-11 21:53:27.274  1458  9223 I CameraService: CameraService::connect call (PID 6159 “com.oplus.camera”, camera ID 1) and Camera API version 2<br>11-11 21:53:46.899  1458  2400 I CameraService: CameraService::connect call (PID 6159 “com.oplus.camera”, camera ID 2) and Camera API version 2<br>扯远了.</p><h1 id="3-写个demo"><a href="#3-写个demo" class="headerlink" title="3 写个demo"></a>3 写个demo</h1><p>新建一个python文件,名字为oppoCam.py<br>写个简单的demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uiautomator2 <span class="keyword">as</span> u2</span><br><span class="line"><span class="keyword">import</span> yaml                         <span class="comment"># 引入yaml模块 预留我后续用这个做基本配置文件</span></span><br><span class="line"><span class="keyword">import</span> time                         <span class="comment"># 引入time模块 预留我后续用这个做延时</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    package = <span class="string">&quot;com.mediatek.camera&quot;</span> <span class="comment"># 设置需要运行的包名</span></span><br><span class="line"></span><br><span class="line">    sn = <span class="string">&#x27;YD9HVGXGZLA6ZHCQ&#x27;</span>         <span class="comment"># 设置手机序列号 adb devices -l 获取</span></span><br><span class="line"></span><br><span class="line">    d = u2.connect(sn)              <span class="comment"># 连接手机</span></span><br><span class="line">    d.app_start(package)            <span class="comment"># 启动app</span></span><br><span class="line">    <span class="built_in">print</span>(d.info)                   <span class="comment"># 打印手机信息</span></span><br></pre></td></tr></table></figure><p>第一次运行好像还会从github上下载ATX和uiautomator2的包,下载完后就可以运行了.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python oppoCam.py</span><br></pre></td></tr></table></figure><p>第二次运行就很快了.<br>我这边打印出来了一些信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(py3) D:\Pr\demo\py&gt;python oppoCam.py</span><br><span class="line">&#123;&#x27;currentPackageName&#x27;: &#x27;com.android.launcher&#x27;, &#x27;displayHeight&#x27;: 2256, &#x27;displayRotation&#x27;: 0, &#x27;displaySizeDpX&#x27;: 360, &#x27;displaySizeDpY&#x27;: 792, &#x27;displayWidth&#x27;: 1080, &#x27;productName&#x27;: &#x27;PHZ110&#x27;, &#x27;screenOn&#x27;: True, &#x27;sdkInt&#x27;: 34, &#x27;naturalOrientation&#x27;: True&#125;</span><br></pre></td></tr></table></figure><p>自此相关的准备工作都已经完成可以做后续的拍照&#x2F;切换&#x2F;录像等操作了.<br>剩余部分另外整理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;本文档是自己写andorid camera自动化测试的随笔&lt;br&gt;测试机器为&lt;br&gt;OPPO Find x7&lt;br&gt;测试Ap</summary>
      
    
    
    
    <category term="python" scheme="https://joeforkyou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://joeforkyou.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>AndroidCamera架构</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/AndroidCamera%E6%9E%B6%E6%9E%84/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/AndroidCamera%E6%9E%B6%E6%9E%84/</id>
    <published>2024-11-10T10:53:19.000Z</published>
    <updated>2024-11-10T11:03:53.390Z</updated>
    
    <content type="html"><![CDATA[<p>分层：将各层的接口和实现分开<br>Camera架构</p><h1 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h1><p>所在位置<br>    架构最顶层<br>作用<br>    负责跟用户交互<br>流程<br>    接受到用户上的UI操作<br>    将UI操作通过request操作下发<br>    接收到底层返回的信息并反馈给用户</p><h1 id="CameraFramework-Service"><a href="#CameraFramework-Service" class="headerlink" title="CameraFramework&#x2F;Service"></a>CameraFramework&#x2F;Service</h1><p>CameraFramework<br>    作用<br>        以jar包的形式运行在APP进程中<br>    流程<br>        暴露接口供app调用<br>        接收app的请求<br>        通过调用Camera AIDL跨进程接口将请求发送到camera service进行处理<br>        将相关的结果返回至app<br>Camera Service<br>    作用<br>        封装Camera AIDL跨进程接口<br>        独立进程 Android 系统启动初期运行起来</p><h1 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h1><p>内部加载Camera Hal Module<br>    遵循谷歌制定的标准Camera Hal3接口<br>    由OEM&#x2F;ODM实现Module</p><h1 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h1><p>CameraSensor 驱动&#x2F;AF&#x2F;otp等相关驱动。用于实现其基本逻辑</p><h1 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h1><p>camera最底层V4L2<br>物理实现部分&#x2F;dts&#x2F;相关设备树供电<br><img src="https://s2.loli.net/2024/11/10/iAr8ZIY4FcgGkMp.png" alt="camera架构.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分层：将各层的接口和实现分开&lt;br&gt;Camera架构&lt;/p&gt;
&lt;h1 id=&quot;APP&quot;&gt;&lt;a href=&quot;#APP&quot; class=&quot;headerlink&quot; title=&quot;APP&quot;&gt;&lt;/a&gt;APP&lt;/h1&gt;&lt;p&gt;所在位置&lt;br&gt;    架构最顶层&lt;br&gt;作用&lt;br&gt;    负</summary>
      
    
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/categories/camera/"/>
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/tags/camera/"/>
    
  </entry>
  
  <entry>
    <title>linux安装完后操作</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Linux/linux%E5%AE%89%E8%A3%85%E5%AE%8C%E5%90%8E%E6%93%8D%E4%BD%9C/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Linux/linux%E5%AE%89%E8%A3%85%E5%AE%8C%E5%90%8E%E6%93%8D%E4%BD%9C/</id>
    <published>2024-11-10T09:15:42.000Z</published>
    <updated>2024-11-10T09:16:11.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础操作"><a href="#1-基础操作" class="headerlink" title="1 基础操作"></a>1 基础操作</h1><p>ftp工具下载:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install filezilla</span><br><span class="line">sudo apt-get install filezilla-locales #工具包</span><br></pre></td></tr></table></figure><p>dpkg 警告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --reinstall install `dpkg --get-selections | grep &#x27;[[:space:]]install&#x27; | cut -f1`</span><br></pre></td></tr></table></figure><p>这些错误是说add-apt-repository的远程仓库没有这个文件，这个IP也是ping不通的。</p><p>添加的仓库保存在 &#x2F;etc&#x2F;apt&#x2F;sources.list.d目录下。删除对应的错误仓库文件即可</p><p>阿里镜像源</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted universe multiverse</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted universe multiverse</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted universe multiverse</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-proposed main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-proposed main restricted universe multiverse</p><p> deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-backports main restricted universe multiverse<br> deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-backports main restricted universe multiverse</p><p>运行权限chmod +x qt-opensource-linux-x64-android-5.8.0.run</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/apt/</span><br><span class="line">sudo cp sources.list sources.list.bak</span><br><span class="line">sudo cp sources.list sources.list.bak #更换镜像源</span><br></pre></td></tr></table></figure><p>ctrl + alt +t :打开终端</p><p>ctrl + d :关闭终端</p><p>ctrl + c:终止进程</p><p>win +e : 打开计算机</p><p>ctrl+s:阻断向终端输出</p><p>ctrl+q:恢复向终端输出</p><p>文件基本操作</p><p>-r 就是向下递归，不管有多少级目录，一并删除</p><p> -f 就是直接强行删除，不作任何提示的意思</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir test1 #创建文件夹</span><br><span class="line">rm -f main2.cpp #直接删除文件</span><br></pre></td></tr></table></figure><p>sudo apt-get autoclean                清理旧版本的软件缓存 sudo apt-get clean                    清理所有软件缓存 </p><p>sudo apt-get autoremove             删除系统不再使用的孤立软件 这三个命令主要清理升级缓存以及无用包的。</p><p>cpu:</p><p>查看物理cpu个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep &quot;physical id&quot;|sort |uniq|wc -l</span><br></pre></td></tr></table></figure><p>查看逻辑cpu个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep &quot;processor&quot;|wc -l</span><br></pre></td></tr></table></figure><p>查看cpu是几核的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep &quot;cores&quot;|uniq</span><br></pre></td></tr></table></figure><p>查看cpu的主频</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep MHz|uniq</span><br></pre></td></tr></table></figure><p>查看操作系统的内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">8  Intel(R) Core(TM) i5-8300H CPU @ 2.30GHz</span></span><br><span class="line">cat /proc/cpuinfo | grep physical | uniq -c</span><br><span class="line">getconf LONG_BIT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出64 当前工作在64位</span></span><br></pre></td></tr></table></figure><p>find命令如果出现   umount: &#x2F;run&#x2F;user&#x2F;1000&#x2F;gvfs: 权限不够</p><p>直接下面命令卸载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umount /run/user/1000/gvfs    // 卸载该文件</span><br><span class="line">rm -rf /run/user/1000/gvfs    // 删除该文件</span><br></pre></td></tr></table></figure><p>meld 比较工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meld main1.cpp main2.cpp</span><br></pre></td></tr></table></figure><p>解决：Gtk-Message: Failed to load module “canberra-gtk-module”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcanberra-gtk-module</span><br></pre></td></tr></table></figure><p>cp 复制操作</p><p>mv指令  mv before.txt after.txt</p><h2 id="1-1-vim"><a href="#1-1-vim" class="headerlink" title="1.1 vim"></a>1.1 vim</h2><p>按i进入插入模式</p><p>命令模式直接输入</p><p>语法高亮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntax enable</span><br></pre></td></tr></table></figure><p>显示行数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set nu</span><br></pre></td></tr></table></figure><p>突出当前行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set cursorline  </span><br></pre></td></tr></table></figure><p> 如何把另外一个文件的内容拷贝到你文件内容下</p><p>例子:把main.cpp的内容拷贝到光标所在的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r!cat main.cpp</span><br></pre></td></tr></table></figure><p>按下数字 0 光标移动到行首</p><p>ctrl + u :向上翻页</p><p>ctrl + d :向下翻页</p><p>H ：光标移至屏幕首行大写</p><p>M ：光标移至屏幕中间</p><p>L ：光标移至屏幕最末行</p><p>：数字 光标移动到指定行</p><p>跳转到文件末尾:shift+g  或在G</p><p>跳转到最后一行最后一个字符 shitf+g $</p><p>跳转到第一行的第一个字符:俩下g</p><p>复制粘贴:</p><p>:reg 查看粘贴板子</p><p>其他地方的内容复制过来”+p</p><p>要选中内容进行复制，先在命令模式下按 v 进入 Visual Mode，然后用方向键 或 hjkl 选择文本，再按 y 进行复制。</p><h2 id="1-2-apt-get"><a href="#1-2-apt-get" class="headerlink" title="1.2 apt-get"></a>1.2 apt-get</h2><p>ubuntun</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:apt-fast/stable</span><br><span class="line">sudo apt-get install apt-fast</span><br></pre></td></tr></table></figure><hr><p>sudo add-apt-repository ppa:apt-fast&#x2F;stable</p><p>sudo add-apt-repository ppa:saiarcot895&#x2F;myppa</p><p>是可以直接使用的，格式为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install/delete package</span><br><span class="line">sudo apt-get -f install                                   #修复安装</span><br><span class="line">sudo apt-get dist-upgrade                                 #升级系统</span><br><span class="line">sudo apt-get upgrade                                      #更新已安装的包</span><br><span class="line">apt-get source package                                    #下载该包的源代码</span><br><span class="line">sudo apt-get build-dep package                            #安装相关的编译环境</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean              #清理无用的包</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pip需要安装才能使用，配合virtualenvwrapper会锦上添花。安装过程如下（适用Ubuntu 10.10及以上版本），#使用格式为：pip install package。</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install python-pip python-dev build-essential</span><br><span class="line">sudo pip install --upgrade pip</span><br><span class="line">sudo pip install --upgrade virtualenv</span><br></pre></td></tr></table></figure><h2 id="1-3-工具"><a href="#1-3-工具" class="headerlink" title="1.3 工具"></a>1.3 工具</h2><p>liunx 下载哪些:</p><ol><li><p>视频:vlc ,ffmepg</p></li><li><p>编程:      g++,    gcc,     clion ,   Go ,   goland,    pycharm,  qt,   vscode     cmake</p></li><li><p>工具:       meld(比较),     obs-studio(录屏),   typora  (md笔记),   teamviewer,   火狐浏览器,plank</p></li><li><p>交流:       Tim  ,Wechat</p></li><li><p>网易云音乐</p></li><li><p>apt-fast </p><p>注意:clion&#x2F;goland&#x2F;pycharm若build卡顿，找到安装文件clion.vmoptions更改-Xmx1024m 将数字改大一点就行</p></li></ol><p>最小化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings set org.gnome.shell.extensions.dash-to-dock click-action &#x27;minimize&#x27;</span><br></pre></td></tr></table></figure><p>   apt-fast安装</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aria2    </span><br><span class="line">wget https://github.com/ilikenwf/apt-fast/archive/master.zip    </span><br><span class="line">unzip master.zip    </span><br><span class="line">cd apt-fast-master    </span><br><span class="line">sudo cp apt-fast /usr/bin    </span><br><span class="line">sudo cp apt-fast.conf /etc    </span><br><span class="line">sudo cp ./man/apt-fast.8 /usr/share/man/man8    </span><br><span class="line">sudo gzip /usr/share/man/man8/apt-fast.8   </span><br><span class="line">sudo cp ./man/apt-fast.conf.5 /usr/share/man/man5    </span><br><span class="line">sudo gzip /usr/share/man/man5/apt-fast.conf.5</span><br></pre></td></tr></table></figure><p>   安装wechat不能发送截图</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libjpeg62:i386</span><br></pre></td></tr></table></figure><p>画图工具：sudo apt-get install kolourpaint4</p><h1 id="2-python"><a href="#2-python" class="headerlink" title="2 python"></a>2 python</h1><p>sudo pip3 install安装软件的时候出现sudo: pip3找不到命令的解决方法如下图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>PIL 是一个 Python 图像处理库，是本课程使用的重要工具，使用下面的命令来安装 pillow（PIL）库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install --upgrade pip</span><br><span class="line">sudo pip3 install pillow</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install jieba</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir work &amp;&amp; cd work</span><br><span class="line">mkdir gephi &amp;&amp; cd gephi</span><br><span class="line">wget http://labfile.oss.aliyuncs.com/courses/677/gephi-0.9.1-linux.tar.gz                         #下载</span><br><span class="line">tar -zxvf gephi-0.9.1-linux.tar.gz     #解压 </span><br></pre></td></tr></table></figure><p>运行py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ascii.py ascii_dora.png</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;分析人物关系</p><h1 id="3-C"><a href="#3-C" class="headerlink" title="3 C++"></a>3 C++</h1><p>liunx下编译</p><p>g++ -o main main.cpp</p><h2 id="3-1-zlib"><a href="#3-1-zlib" class="headerlink" title="3.1 zlib"></a>3.1 zlib</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境:"></a>搭建环境:</h3><p>win10下有编译好的源码，直接添加lib和dll就能使用(cmakeGUI搭建vs项目build all,最后两个项目一个是动态库，一个是静态库)</p><p>liunx 下下载好zlib源码，进入源码目录执行以下操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make </span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>安装成功后，可以在&#x2F;usr&#x2F;local&#x2F;lib下找到libz.a</p><p>libz.a是一个静态库，为了使用zlib的接口，我们必须在连接我们的程序时，libz.a链接进来。  只需在 链接命令后加<code>-lz /usr/llocal/lib/libz.a</code> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-lz /usr/local/lib/libz.a</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//原始数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> pchSrc[] = <span class="string">&quot;xxx....&quot;</span> ;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nSrcLen = <span class="built_in">sizeof</span>(pchSrc);</span><br><span class="line">    <span class="comment">//压缩之后的数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> achComp[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nCompLen = <span class="number">1024</span> ;</span><br><span class="line">    <span class="comment">//解压缩之后的数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> achUncomp[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nUncompLen = <span class="number">1024</span> ;</span><br><span class="line">    <span class="comment">//压缩</span></span><br><span class="line">    <span class="built_in">compress</span>(achComp,&amp;nCompLen, pchSrc,nSrcLen);</span><br><span class="line">    <span class="comment">//解压缩</span></span><br><span class="line">    <span class="built_in">uncompress</span>(achUncomp,&amp;nUncompLen, achComp,nCompLen);</span><br><span class="line">    <span class="comment">//显示原始数据信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数据(%d):\n%s\n\n&quot;</span>, nSrcLen,pchSrc);</span><br><span class="line">    <span class="comment">//显示压缩之后的数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;压缩数据(%d):\n%s\n\n&quot;</span>, nCompLen,achComp);</span><br><span class="line">    <span class="comment">//显示解压缩之后的数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解压数据(%d):\n%s\n\n&quot;</span>, nUncompLen,achUncomp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#clion配置中需要在CMakeLists.txt添加以下内容</span></span><br><span class="line"><span class="keyword">SET</span>(CMAKE_EXE_LINKER_FLAGS</span><br><span class="line">        <span class="string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -Wl,-rpath -Wl,/usr/local/lib&quot;</span>)</span><br><span class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(/usr/local/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">TARGET_LINK_LIBRARIES</span>(<span class="keyword">test</span> libz.a)<span class="comment">#test为项目名称</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基础压缩"><a href="#基础压缩" class="headerlink" title="基础压缩"></a>基础压缩</h4><p><strong>compress</strong>和<strong>uncompress</strong>是最基本的两个,分别用于压缩和解压</p><p>函数原型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ZEXTERN <span class="type">int</span> ZEXPORT compress <span class="title">OF</span><span class="params">((Bytef *dest, uLongf *destLen,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 <span class="type">const</span> Bytef *source, uLong sourceLen))</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ZEXTERN <span class="type">int</span> ZEXPORT uncompress <span class="title">OF</span><span class="params">((Bytef *dest, uLongf *destLen,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="type">const</span> Bytef *source, uLong sourceLen))</span></span>;</span><br></pre></td></tr></table></figure><p>参数类型<code>Bytef</code>表示字节流，它与字符串有所不同，字节流没有结束符，因而需要配备长度信息，处理字符串的时候需要把结束符也当成一个普通的字节。 而<code>uLongf</code>则用于指明长度信息了， 其实相当于<code>unsigned long</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改后demo</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//原始数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> pchSrc[] = <span class="string">&quot;xxx....&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nSrcLen = <span class="built_in">sizeof</span>(pchSrc);</span><br><span class="line">    <span class="comment">//压缩之后的数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> achComp[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nCompLen = <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">//解压缩之后的数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> achUncomp[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> nUncompLen = <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">//压缩</span></span><br><span class="line">    <span class="built_in">compress</span>(achComp, &amp;nCompLen, pchSrc, nSrcLen);</span><br><span class="line">    <span class="comment">//解压缩</span></span><br><span class="line">    <span class="built_in">uncompress</span>(achUncomp, &amp;nUncompLen, achComp, nCompLen);</span><br><span class="line">    <span class="comment">//显示原始数据信息</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原始数据:&quot;</span> &lt;&lt; pchSrc &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;压缩数据:&quot;</span> &lt;&lt; achComp &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解压缩数据:&quot;</span> &lt;&lt; achUncomp &lt;&lt; endl;</span><br><span class="line"><span class="comment">//    printf(&quot;原始数据(%d):\n%s\n&quot;, nSrcLen,pchSrc);</span></span><br><span class="line"><span class="comment">//    //显示压缩之后的数据</span></span><br><span class="line"><span class="comment">//    printf(&quot;压缩数据(%d):\n%s\n&quot;, nCompLen,achComp);</span></span><br><span class="line"><span class="comment">//    //显示解压缩之后的数据</span></span><br><span class="line"><span class="comment">//    printf(&quot;解压数据(%d):\n%s\n&quot;, nUncompLen,achUncomp);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-cmake"><a href="#3-2-cmake" class="headerlink" title="3.2 cmake"></a>3.2 cmake</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>) <span class="comment">#cmkae最低版本</span></span><br><span class="line"><span class="keyword">project</span>(leetcode)<span class="comment">#项目名字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)<span class="comment">#c++14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(leetcode main.cpp)<span class="comment">#往项目中添加文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定头文件目录</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定CMake编译最低要求版本</span></span><br><span class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">3.14</span>)</span><br><span class="line"><span class="comment">#给项目命名</span></span><br><span class="line"><span class="keyword">PROJECT</span>(MYPRINT)</span><br><span class="line"><span class="comment">#收集c/c++文件并赋值给变量SRC_LIST_CPP  $&#123;PROJECT_SOURCE_DIR&#125;代表区当前项目录</span></span><br><span class="line"><span class="keyword">FILE</span>(GLOB SRC_LIST_CPP <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">FILE</span>(GLOB SRC_LIST_C <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.c)</span><br><span class="line"><span class="comment">#指定头文件目录</span></span><br><span class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="comment">#指定生成库文件的目录</span></span><br><span class="line"><span class="keyword">SET</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment">#去变量SRC_LIST_CPP 与SRC_LIST_C 指定生成libmyprint 动态库   默认生成静态库  SHARED指定生成库类型为动态库</span></span><br><span class="line"><span class="keyword">ADD_LIBRARY</span>(myprint SHARED <span class="variable">$&#123;SRC_LIST_CPP&#125;</span> <span class="variable">$&#123;SRC_LIST_C&#125;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-3-thread"><a href="#3-3-thread" class="headerlink" title="3.3 thread"></a>3.3 thread</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//liunx 下线程需要在cmake文件下添加库</span></span><br><span class="line"><span class="built_in">find_package</span>(Threads REQUIRED)</span><br><span class="line"><span class="built_in">target_link_libraries</span>(Test1 Threads::Threads)</span><br></pre></td></tr></table></figure><p>测试代码：创建5个线程&#x2F;&#x2F;非11标准以上的写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NUM_THREADS = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">say_hello</span><span class="params">(<span class="type">void</span>* args)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义线程的id变量，多个变量使用数组</span></span><br><span class="line">    <span class="type">pthread_t</span> tids[NUM_THREADS];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_THREADS ;++i)&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">pthread_create</span>(&amp;tids[i], <span class="literal">NULL</span>,say_hello, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret !=<span class="number">0</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;pthread_create error: error_code=&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>  NUM_THREADS = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">PrintHello</span><span class="params">(<span class="type">void</span> *threadid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 对传入的参数进行强制类型转换，由无类型指针变为整形数指针，然后再读取</span></span><br><span class="line">    <span class="type">int</span> tid = *((<span class="type">int</span>*)threadid);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello Runoob! 线程 ID, &quot;</span> &lt;&lt; tid &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> threads[NUM_THREADS];</span><br><span class="line">    <span class="type">int</span> indexes[NUM_THREADS];<span class="comment">// 用数组来保存i的值</span></span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; NUM_THREADS; i++ )&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;main() : 创建线程, &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        indexes[i] = i; <span class="comment">//先保存i的值</span></span><br><span class="line">        <span class="comment">// 传入的时候必须强制转换为void* 类型，即无类型指针</span></span><br><span class="line">        rc = <span class="built_in">pthread_create</span>(&amp;threads[i], <span class="literal">NULL</span>,</span><br><span class="line">                            PrintHello, (<span class="type">void</span> *)&amp;(indexes[i]));</span><br><span class="line">        <span class="keyword">if</span> (rc)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Error:无法创建线程,&quot;</span> &lt;&lt; rc &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程传递信息:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">conts <span class="type">int</span> NUM_THREADS = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">thread_data</span> &#123;</span><br><span class="line">    <span class="type">int</span> thread_id;</span><br><span class="line">    <span class="type">char</span> *message;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">PrintHello</span><span class="params">(<span class="type">void</span> *threadarg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">thread_data</span> *my_data;</span><br><span class="line"></span><br><span class="line">    my_data = (<span class="keyword">struct</span> thread_data *) threadarg;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Thread ID : &quot;</span> &lt;&lt; my_data-&gt;thread_id;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; Message : &quot;</span> &lt;&lt; my_data-&gt;message &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> threads[NUM_THREADS];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">thread_data</span> td[NUM_THREADS];</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUM_THREADS; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;main() : creating thread, &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        td[i].thread_id = i;</span><br><span class="line">        td[i].message = (<span class="type">char</span> *) <span class="string">&quot;This is message&quot;</span>;</span><br><span class="line">        rc = <span class="built_in">pthread_create</span>(&amp;threads[i], <span class="literal">NULL</span>,</span><br><span class="line">                            PrintHello, (<span class="type">void</span> *) &amp;td[i]);</span><br><span class="line">        <span class="keyword">if</span> (rc) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Error:unable to create thread,&quot;</span> &lt;&lt; rc &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-OpenGl"><a href="#4-OpenGl" class="headerlink" title="4 OpenGl"></a>4 OpenGl</h1><p>下载OpenGL需要的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libgl1-mesa-dev  </span><br><span class="line">sudo apt-get install freeglut3-dev  </span><br><span class="line">sudo apt-get install libglew-dev libsdl2-dev libsdl2-image-dev libglm-dev libfreetype6-dev</span><br></pre></td></tr></table></figure><p>需要在cmake中添加如下内容</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(OpenGL REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(GLUT REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OPENGL_INCLUDE_DIRS&#125;</span> <span class="variable">$&#123;GLUT_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;OPENGL_LIBRARIES&#125;</span> <span class="variable">$&#123;GLUT_LIBRARY&#125;</span>)</span><br></pre></td></tr></table></figure><p>demo代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="built_in">glMatrixMode</span>(GL_PROJECTION);</span><br><span class="line">    <span class="built_in">glOrtho</span>(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">15</span>);</span><br><span class="line">    <span class="built_in">glMatrixMode</span>(GL_MODELVIEW);</span><br><span class="line">    <span class="built_in">gluLookAt</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="built_in">glColor3f</span>(<span class="number">1.0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">glutWireTeapot</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">glFlush</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glutInit</span>(&amp;argc, argv);</span><br><span class="line">    <span class="built_in">glutInitDisplayMode</span>(GLUT_RGB | GLUT_SINGLE);</span><br><span class="line">    <span class="built_in">glutInitWindowPosition</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">glutInitWindowSize</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    <span class="built_in">glutCreateWindow</span>(<span class="string">&quot;OpenGL 3D View&quot;</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">glutDisplayFunc</span>(display);</span><br><span class="line">    <span class="built_in">glutMainLoop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-ncurses"><a href="#5-ncurses" class="headerlink" title="5 ncurses"></a>5 ncurses</h1><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev</span><br></pre></td></tr></table></figure><p>测试demo</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ncurses.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">initscr</span>();</span><br><span class="line">    <span class="built_in">raw</span>();</span><br><span class="line">    <span class="built_in">noecho</span>();</span><br><span class="line">    <span class="built_in">curs_set</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* c = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="built_in">mvprintw</span>(LINES/<span class="number">2</span>,(COLS-<span class="built_in">strlen</span>(c))/<span class="number">2</span>,c);</span><br><span class="line">    <span class="built_in">refresh</span>();</span><br><span class="line">    <span class="built_in">getch</span>();</span><br><span class="line">    <span class="built_in">endwin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -o test -lncurses</span><br></pre></td></tr></table></figure><h1 id="6-Opencv"><a href="#6-Opencv" class="headerlink" title="6 Opencv"></a>6 Opencv</h1><h2 id="6-1-环境搭建"><a href="#6-1-环境搭建" class="headerlink" title="6.1 环境搭建"></a>6.1 环境搭建</h2><p>先装好依赖项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev</span><br><span class="line">sudo apt-get install libopencv-dev</span><br></pre></td></tr></table></figure><p>下载好源码后进入到源码目录</p><p>创建一个目录编译opencv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure><p>cmake一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure><p>执行编译过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j8</span><br></pre></td></tr></table></figure><p>将make生成的文件安装到系统目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install </span><br></pre></td></tr></table></figure><p>配置环境</p><p>打开文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>再打开的文件添加makefile安装路劲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure><p>再运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>cmakelist.txt添加如下内容</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(/usr/local/<span class="keyword">include</span>/opencv4/opencv2)</span><br><span class="line"><span class="keyword">set</span> (OpenCV_LIBS /usr/local/lib)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(helloCV <span class="variable">$&#123;OpenCV_LIBS&#125;</span>) <span class="comment">#helloCV 工程名字</span></span><br></pre></td></tr></table></figure><p>demon代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;../test.jpeg&quot;</span>);</span><br><span class="line"> <span class="comment">//   cout&lt;&lt;img;</span></span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;My picture: &quot;</span>&lt;&lt; img.<span class="built_in">size</span>() &lt;&lt;endl;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;image&quot;</span>,img);</span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现报错：<br>Gtk-Message: 21:57:35.293: Failed to load module “canberra-gtk-module”<br>则安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcanberra-gtk-module</span><br></pre></td></tr></table></figure><p>查看opencv安装的库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv --libs</span><br></pre></td></tr></table></figure><p>查看opencv安装的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv --modversion</span><br></pre></td></tr></table></figure><p>查看opencv安装路劲</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -iname &quot;*opencv*&quot; &gt; /home/xtt/Desktop/opencv_find.txt</span><br></pre></td></tr></table></figure><h1 id="7-SDL2"><a href="#7-SDL2" class="headerlink" title="7 SDL2"></a>7 SDL2</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sdl2</span></span><br><span class="line">sudo apt-get install libsdl2-2.0</span><br><span class="line">sudo apt-get install libsdl2-dev</span><br><span class="line">sudo apt-get install libsdl2-mixer-dev</span><br><span class="line">sudo apt-get install libsdl2-image-dev</span><br><span class="line">sudo apt-get install libsdl2-ttf-dev</span><br><span class="line">sudo apt-get install libsdl2-gfx-dev</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sdl1.1</span></span><br><span class="line">sudo apt-get install libsdl1.2-dev</span><br><span class="line">sudo apt-get install libsdl-image1.2-dev</span><br><span class="line">sudo apt-get install libsdl-mixer1.2-dev</span><br><span class="line">sudo apt-get install libsdl-ttf2.0-dev</span><br><span class="line">sudo apt-get install libsdl-gfx1.2-dev</span><br></pre></td></tr></table></figure><p>检测SDL装上了没有：</p><p>sdl-config –exec-prefix –version –cflag</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL/SDL.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    res = <span class="built_in">SDL_Init</span>(SDL_INIT_EVENTTHREAD);</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;SDL init success!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;SDL init fail!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译  </p><p>-lSDL</p><h1 id="8-个人博客"><a href="#8-个人博客" class="headerlink" title="8 个人博客"></a>8 个人博客</h1><h2 id="8-1-下载nodejs"><a href="#8-1-下载nodejs" class="headerlink" title="8.1 下载nodejs"></a>8.1 下载nodejs</h2><p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>解压进入到bin文件夹下运行.&#x2F;node -v</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/xtt/nodejs/bin/npm /usr/local/bin/</span><br><span class="line">sudo ln -s /home/xtt/nodejs/bin/node /usr/local/bin/</span><br></pre></td></tr></table></figure><p>在别的目录下  确认是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v  </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载cnpm</span></span><br><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br><span class="line">sudo ln -s /home/xtt/nodejs/bin/cnpm /usr/local/bin/cnpm  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载cnpm</span></span><br></pre></td></tr></table></figure><p>hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/xtt/nodejs/bin/hexo /usr/local/bin/hexo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>hexo -v 验证</p><p>进入创建好的博客目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>需要退出后创建新</p><p>hexo n “第一篇博客”</p><p>博客的md文件会自动生产放在下面路劲</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd source/_posts/</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">sudo cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>设置_config.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line"></span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/JoeNero/JoeNero.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>hexo d</p><p>创建博客md</p><p>hexo n “博客”</p><p>清空数据库</p><p>hexo clean</p><p>生产数据库</p><p>hexo g</p><p>推送</p><p>hexo d </p><h1 id="9-github"><a href="#9-github" class="headerlink" title="9 github"></a>9 github</h1><p>下载git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>检查下载版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><p>下载ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh  </span><br></pre></td></tr></table></figure><p>检查ssh服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示sshd的话表示ssh-server已经启动</span></span><br></pre></td></tr></table></figure><p>使用  命令查看 ssh key 是否存在，若存在则忽略这一步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;526988861@qq.com&quot;</span><br></pre></td></tr></table></figure><p>clone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 网址</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add readme.md #将文件添加到暂存区域</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;add readme file&quot; #提交本次修改</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master#推送到远程仓库</span><br></pre></td></tr></table></figure><h1 id="10-服务器"><a href="#10-服务器" class="headerlink" title="10 服务器"></a>10 服务器</h1><p>ssh 链接服务器<br>sudo ssh <a href="mailto:&#119;&#x65;&#x69;&#98;&#111;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#x36;&#56;&#46;&#x31;&#x39;&#49;&#46;&#50;&#51;&#49;">&#119;&#x65;&#x69;&#98;&#111;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#x36;&#56;&#46;&#x31;&#x39;&#49;&#46;&#50;&#51;&#49;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@IP</span><br></pre></td></tr></table></figure><p>ssh <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#64;&#49;&#48;&#54;&#46;&#49;&#x34;&#x2e;&#x32;&#56;&#x2e;&#x31;&#51;&#x37;">&#114;&#x6f;&#x6f;&#116;&#64;&#49;&#48;&#54;&#46;&#49;&#x34;&#x2e;&#x32;&#56;&#x2e;&#x31;&#51;&#x37;</a><br>客户端到服务器<br>scp .&#x2F;filename username@IP:&#x2F;home&#x2F;bio321&#x2F;Desktop<br>服务器到客户端<br>scp .&#x2F;filename username@IP:&#x2F;home&#x2F;bio321&#x2F;Desktop<br>&#x2F;&#x2F;客户端<br>scp -r Kail <a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#48;&#54;&#46;&#49;&#52;&#46;&#x32;&#x38;&#46;&#x31;&#x33;&#55;">&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#48;&#54;&#46;&#49;&#52;&#46;&#x32;&#x38;&#46;&#x31;&#x33;&#55;</a>:&#x2F;root&#x2F;liunx</p><p>teamviewer</p><p>1569607240</p><p>647emx</p><p>美化主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:numix/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install numix-gtk-theme numix-icon-theme-circle</span><br></pre></td></tr></table></figure><p>shell 美化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh #安装zsh</span><br><span class="line"></span><br><span class="line">zsh --version #确认是否安装成功</span><br><span class="line"></span><br><span class="line">sudo chsh -s $(which zsh)  #设置zsh为默认shell</span><br></pre></td></tr></table></figure><h1 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h1><p>右键添加运行终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere]</span><br><span class="line">&quot;ShowBasedOnVelocityId&quot;=dword:00639bc8</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere\command]</span><br><span class="line">@=&quot;cmd.exe /s /k pushd \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基础操作&quot;&gt;&lt;a href=&quot;#1-基础操作&quot; class=&quot;headerlink&quot; title=&quot;1 基础操作&quot;&gt;&lt;/a&gt;1 基础操作&lt;/h1&gt;&lt;p&gt;ftp工具下载:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="linux" scheme="https://joeforkyou.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://joeforkyou.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Qt随笔【一】</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Qt/Qt%E9%9A%8F%E7%AC%94_1/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Qt/Qt%E9%9A%8F%E7%AC%94_1/</id>
    <published>2024-11-10T08:45:34.000Z</published>
    <updated>2024-11-10T08:46:21.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-linux-下注意点"><a href="#1-linux-下注意点" class="headerlink" title="1 linux 下注意点"></a>1 linux 下注意点</h1><p>找不到mysql.h文件</p><p>sudo apt-get install libmysqlclient-dev</p><p>编译太慢,更改</p><p>-j 4       4为线程 &lt;&#x3D; cpu的线程</p><p>缺少:-1: error: 找不到 -lGL<br>sudo apt-get install libgl1-mesa-dev</p><p>使用以下模块需要 实现下载这个 qt会自动查找</p><p>sudo apt-get install qtmultimedia5-dev</p><p>如果不行则加:</p><p>sudo apt-get install libpul se-dev</p><p>视频相关控件需要安装如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libpulse-dev</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT       += multimedia</span><br></pre></td></tr></table></figure><p>libusbzhic库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libusb-dev</span><br><span class="line">sudo apt-get install libusb-1.0-0-dev</span><br></pre></td></tr></table></figure><h1 id="2-布局管理"><a href="#2-布局管理" class="headerlink" title="2 布局管理"></a>2 布局管理</h1><h2 id="2-1-QGridLayout网格布局"><a href="#2-1-QGridLayout网格布局" class="headerlink" title="2.1 QGridLayout网格布局"></a>2.1 QGridLayout网格布局</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout-&gt;<span class="built_in">setRowStretch</span>(<span class="type">int</span> row, <span class="type">int</span> stretch);<span class="comment">//设置行比例系数</span></span><br><span class="line">layout-&gt;<span class="built_in">setColumnStretch</span>(<span class="type">int</span> column, <span class="type">int</span> stretch);<span class="comment">//设置列比例系数</span></span><br></pre></td></tr></table></figure><p>布局示意如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">layout-&gt;<span class="built_in">addWidget</span>(&amp;TestBtn1, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//往网格的不同坐标添加不同的组件</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(&amp;TestBtn2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(&amp;TestBtn3, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(&amp;TestBtn4, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h1 id="3-控件："><a href="#3-控件：" class="headerlink" title="3 控件："></a>3 控件：</h1><h2 id="QLable"><a href="#QLable" class="headerlink" title="QLable"></a>QLable</h2><p>显示数字</p><p>setText ( const QString &amp; )setText参数必须是QString类型才可以 你的变量如果是整形，可以直接转换，比如QString()::number( int num).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;labelTime-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(times));</span><br></pre></td></tr></table></figure><h2 id="QLCDNumber："><a href="#QLCDNumber：" class="headerlink" title="QLCDNumber："></a>QLCDNumber：</h2><p>lcd是直接通过方法value来获取当前显示的值，通过方法display来显示</p><p>QLCDNumber有以下几种模式：</p><p><a href="https://blog.csdn.net/xuancailinggan/article/details/qlcdnumber.html#setHexMode">setHexMode</a>()-十六进制</p><p><a href="https://blog.csdn.net/xuancailinggan/article/details/qlcdnumber.html#setDecMode">setDecMode</a>()-十进制</p><p><a href="https://blog.csdn.net/xuancailinggan/article/details/qlcdnumber.html#setOctMode">setOctMode</a>()-八进制</p><p><a href="https://blog.csdn.net/xuancailinggan/article/details/qlcdnumber.html#setBinMode">setBinMode</a>()-二进制</p><p>lcdNum-&gt;setDecMode();</p><h2 id="QTimer"><a href="#QTimer" class="headerlink" title="QTimer"></a>QTimer</h2><p>Q_DECL_OVERRIDE也就是c++的override</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># define Q_DECL_OVERRIDE override</span><br></pre></td></tr></table></figure><p>在重写虚函数时会用到，</p><p>作用是防止写错虚函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void keyPressEvent(QKeyEvent *event) Q_DECL_OVERRIDE;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件在QTimer文件下</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line">...</span><br><span class="line">QTimer *m_pTimer;</span><br><span class="line">m_pTimer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 设置超时间隔</span></span><br><span class="line">m_pTimer-&gt;<span class="built_in">setInterval</span>(<span class="number">100</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">connect</span>(m_pTimer, <span class="built_in">SIGNAL</span>(<span class="built_in">timeout</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">updateProgress</span>()));</span><br><span class="line">m_pTimer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);<span class="comment">//这一步会覆盖之前设置的时间间隔</span></span><br></pre></td></tr></table></figure><p>start()之后，每秒都会调用update()</p><p>可以通过设置setSingleShot(true)来让定时器只执行一次。也可以使用静态函数QTimer::singleShot()：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QTimer::singleShot(200, this, SLOT(updateCaption()));</span><br></pre></td></tr></table></figure><p>QTimer和lable配合显示系统时间</p><p>头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br></pre></td></tr></table></figure><p>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期/时间显示</span></span><br><span class="line">QTimer *timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(timer,<span class="built_in">SIGNAL</span>(<span class="built_in">timeout</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">timerUpdate</span>()));</span><br><span class="line">timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>定义成员函数timerUpdate()实现用户界面显示时间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">userwindow::timerUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QDateTime time = QDateTime::<span class="built_in">currentDateTime</span>();</span><br><span class="line"></span><br><span class="line">    QString str = time.<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss dddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ui-&gt;dateTime-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-QChart"><a href="#4-QChart" class="headerlink" title="4 QChart"></a>4 QChart</h1><p>.pro文件添加模块</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT +=charts</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用charts模板需要加入命名控件或者宏</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Qtcharts</span><br><span class="line">或者一个宏 QT_CHARTS_USE_NAMESPACE</span><br><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QChart&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QChartView&gt;</span></span></span><br><span class="line">...</span><br><span class="line">QChart *chart;</span><br><span class="line">QChartView *chartView;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//坐标系</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QValueAxis&gt;</span></span></span><br><span class="line">...</span><br><span class="line">QValueAxis *axisX;</span><br><span class="line">QValueAxis *axisY;</span><br><span class="line">...</span><br><span class="line">axisX-&gt;<span class="built_in">setRange</span>(<span class="number">0</span>, <span class="number">20</span>);    <span class="comment">//设置范围</span></span><br><span class="line">axisX-&gt;<span class="built_in">setLabelFormat</span>(<span class="string">&quot;%u&quot;</span>);   <span class="comment">//设置刻度的格式 y轴同理</span></span><br><span class="line">axisX-&gt;<span class="built_in">setTitleText</span>(<span class="string">&quot;X&quot;</span>);           <span class="comment">//设置描述</span></span><br><span class="line">axisY-&gt;<span class="built_in">setTitleText</span>(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line"><span class="comment">/************************************</span></span><br><span class="line"><span class="comment">    %u 无符号十进制整数</span></span><br><span class="line"><span class="comment">    %s 字符串</span></span><br><span class="line"><span class="comment">    %A 浮点数、十六进制数字和p-记法</span></span><br><span class="line"><span class="comment">    %c 一个字符</span></span><br><span class="line"><span class="comment">    %d 有符号十进制整数</span></span><br><span class="line"><span class="comment">    %e 浮点数、e-记数法</span></span><br><span class="line"><span class="comment">    %E 浮点数、E-记数法</span></span><br><span class="line"><span class="comment">    %f 浮点数、十进制记数法</span></span><br><span class="line"><span class="comment">    %g 根据数值不同自动选择％f或％e．</span></span><br><span class="line"><span class="comment">    %G 根据数值不同自动选择％f或％e.</span></span><br><span class="line"><span class="comment">    %i 有符号十进制数（与％d相同）</span></span><br><span class="line"><span class="comment">    %o 无符号八进制整数</span></span><br><span class="line"><span class="comment">    %p 指针</span></span><br><span class="line"><span class="comment">    %s 字符串</span></span><br><span class="line"><span class="comment">    %x/%X 使用十六进制数字0f的无符号十六进制整数</span></span><br><span class="line"><span class="comment">****************************************/</span></span><br><span class="line"><span class="comment">//标记的个数</span></span><br><span class="line">    axisX-&gt;<span class="built_in">setTickCount</span>(<span class="number">11</span>);           </span><br><span class="line">    axisY-&gt;<span class="built_in">setTickCount</span>(<span class="number">11</span>);</span><br><span class="line"><span class="comment">//次标记的个数</span></span><br><span class="line">axisX-&gt;<span class="built_in">setMinorTickCount</span>(<span class="number">1</span>);        <span class="comment">//设置每个大格里面小刻度线的数目</span></span><br><span class="line"><span class="comment">//    axisY-&gt;setMinorTickCount(1);</span></span><br><span class="line">chart-&gt;<span class="built_in">createDefaultAxes</span>(); <span class="comment">//建立默认坐标轴，不需要QValueAxis 默认是4x4大格子</span></span><br><span class="line"><span class="comment">//chart-&gt;axisY()-&gt;setRange(0, 10);//默认坐标轴限定范围</span></span><br><span class="line">chart-&gt;<span class="built_in">addAxis</span>(axisX, Qt::AlignBottom); <span class="comment">//下：Qt::AlignBottom  上：Qt::AlignTop</span></span><br><span class="line">chart-&gt;<span class="built_in">addAxis</span>(axisY, Qt::AlignLeft);   <span class="comment">//左：Qt::AlignLeft    右：Qt::AlignRight</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chart-&gt;<span class="built_in">setTitle</span>(<span class="string">&quot;曲线图实例&quot;</span>);</span><br><span class="line">chart-&gt;<span class="built_in">setAnimationOptions</span>(QChart::SeriesAnimations);<span class="comment">//设置曲线动画模式</span></span><br><span class="line">chart-&gt;<span class="built_in">legend</span>()-&gt;<span class="built_in">hide</span>(); <span class="comment">//隐藏图例</span></span><br><span class="line">chart-&gt;<span class="built_in">addSeries</span>(splineSeries);<span class="comment">//输入数据</span></span><br><span class="line">chart-&gt;<span class="built_in">setAxisX</span>(axisX, splineSeries);</span><br><span class="line">chart-&gt;<span class="built_in">setAxisY</span>(axisY, splineSeries);</span><br></pre></td></tr></table></figure><p>需要将chart添加到chartView</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chartView-&gt;<span class="built_in">show</span>();</span><br><span class="line">chartView-&gt;<span class="built_in">setChart</span>(chart);</span><br><span class="line">chartView-&gt;<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);<span class="comment">//防止图形走样</span></span><br></pre></td></tr></table></figure><h2 id="曲线图"><a href="#曲线图" class="headerlink" title="曲线图"></a>曲线图</h2><p>QSplineSeries</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSplineSeries&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">splineSeries = <span class="keyword">new</span> QSplineSeries;</span><br><span class="line"><span class="comment">//添加数据的两周方式</span></span><br><span class="line">splineSeries-&gt;<span class="built_in">append</span>(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">*splineSeries &lt;&lt; <span class="built_in">QPointF</span>(<span class="number">11</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">QPointF</span>(<span class="number">13</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">QPointF</span>(<span class="number">17</span>, <span class="number">6</span>)&lt;&lt; <span class="built_in">QPointF</span>(<span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//源数据添加到图表上</span></span><br><span class="line">chart-&gt;<span class="built_in">addSeries</span>(splineSeries);<span class="comment">//输入数据</span></span><br><span class="line">chart-&gt;<span class="built_in">setAxisX</span>(axisX, splineSeries);</span><br><span class="line">chart-&gt;<span class="built_in">setAxisY</span>(axisY, splineSeries);</span><br></pre></td></tr></table></figure><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>先包含头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QBarSet&gt;</span> </span></span><br></pre></td></tr></table></figure><p>QBarSet类表示条形图中的一组条形。<br>一个bar集包含每个类别的一个数据值。<br>假设集合的第一个值属于第一个类别，<br>第二个属于第二个类别，依此类推。<br>如果集合的值小于类别的值，则假设缺失值位于集合的末尾。对于位于集合中间的缺失值，则使用0的数值。<br>没有显示零值集的标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QBarSeries&gt;</span><br></pre></td></tr></table></figure><p>QBarSeries类表示的是柱状图数据，需要将相应的QBarSet添加进来</p><p>柱状图关系示意如下:</p><h2 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCharts/QPieSeries&gt;</span></span></span><br></pre></td></tr></table></figure><p>QPieSeries是一块饼图</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCharts/QPieSlice&gt;</span></span></span><br></pre></td></tr></table></figure><p>QPieSlice是饼图上的碎片</p><h1 id="5-QCustomPlot"><a href="#5-QCustomPlot" class="headerlink" title="5 QCustomPlot"></a>5 QCustomPlot</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT       += core gui printsupport</span><br></pre></td></tr></table></figure><p>选择项目的.pro文件，添加printsupport，如图，QCustomPlot包含了一些打印的东西，如果没有这一步，程序会报错</p><p>基类为QWidget：提升为<code>QCustomPlot</code></p><p>这里强调一下：Qt提升控件时，通常提升的类名称中，每个单词的首字母必须大写与Qt控件命名规则保持一致，各种第三方控件都采用这种命名格式，否则无法识别，如这里必须写成<code>QCustomPlot</code>而不能写成<code>Qcustomplot</code>或<code>qcustomplot</code></p><h1 id="动态库的调用"><a href="#动态库的调用" class="headerlink" title="动态库的调用"></a>动态库的调用</h1><h2 id="liunx"><a href="#liunx" class="headerlink" title="liunx"></a>liunx</h2><p>详细图例见dll文件</p><p>创建c++库，添加代码生成对应的.so文件</p><p>在debug文件下将.so文件后缀的复制到新建工程的debug文件下</p><p>并将相应的头文件添加到目标工程中</p><p>在.pro里面添加 如下 格式 -L.&#x2F;lib -l(文件名)  因为直接放在debug文件下所以直接 在该文件夹下找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIBS +=  -L -llibdll</span><br></pre></td></tr></table></figure><h1 id="Linux-下opencv的搭建"><a href="#Linux-下opencv的搭建" class="headerlink" title="Linux 下opencv的搭建"></a>Linux 下opencv的搭建</h1><p>在.pro文件中添加如下内容,根据个人情况,就是你opencv的安裝路勁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += /usr/local/include \</span><br><span class="line">                /usr/local/include/opencv4 \</span><br><span class="line"></span><br><span class="line">LIBS += /usr/local/lib/libopencv*</span><br></pre></td></tr></table></figure><p>有的人是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += /usr/local/include \</span><br><span class="line">                /usr/local/include/opencv \</span><br><span class="line">                /usr/local/include/opencv2</span><br><span class="line"></span><br><span class="line">LIBS += /usr/local/lib/lib*</span><br></pre></td></tr></table></figure><p>出现这个错误，只需要在对应的文件中添加头文件<br>#include &lt;opencv2&#x2F;highgui&#x2F;highgui_c.h&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/home/xtt/prj/Qt/pack/OpenNCC_View/OpenNCC_View/widget.cpp:330: error: ~~‘cvGetWindowHandle’~~ was not declared in this scope</span><br><span class="line">                 if (!cvGetWindowHandle(&quot;OpenNCC&quot;))</span><br><span class="line">                      ^~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><h1 id="Linux-下qt的打包"><a href="#Linux-下qt的打包" class="headerlink" title="Linux 下qt的打包"></a>Linux 下qt的打包</h1><p>将release 版本下的hi可执行文件拷到你新建的bin文件夹下</p><p>新建一个打包的脚本pack.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">exe=&quot;OpenNCC_View&quot; #需发布的程序名称</span><br><span class="line">des=&quot;/home/xtt/Qt/OpenNCC_View/bin&quot; #新建目录的完整路径</span><br><span class="line">deplist=$(ldd $exe|awk &#x27;&#123;if (match($3,&quot;/&quot;))&#123;printf(&quot;%s &quot;),$3&#125;&#125;&#x27;)</span><br><span class="line">cp $deplist $des</span><br></pre></td></tr></table></figure><p>运行脚本 sh pack.sh会在该文件夹下添加一些.so动态库</p><p>然后编写一个部署脚本</p><p>文件名和你的项目名字一致，这里的项目名字是OpenNCC_View，所以部署脚本是OpenNCC_View.sh</p><p>以下是该脚本的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span>  </span><br><span class="line">appname=`basename $0 | sed s,\.sh$,,`  </span><br><span class="line">dirname=`dirname $0`  </span><br><span class="line">tmp=&quot;$&#123;dirname#?&#125;&quot;  </span><br><span class="line">if [ &quot;$&#123;dirname%$tmp&#125;&quot; != &quot;/&quot; ]; then  </span><br><span class="line">dirname=$PWD/$dirname  </span><br><span class="line">fi  </span><br><span class="line">LD_LIBRARY_PATH=$dirname  </span><br><span class="line">export LD_LIBRARY_PATH  </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">dirname</span>/<span class="variable">$appname</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用軟件打包</p><h1 id="Window下打包程序"><a href="#Window下打包程序" class="headerlink" title="Window下打包程序"></a>Window下打包程序</h1><p>Win+r 打开dos命令 cmd</p><p>输入命令：</p><p>cd &#x2F;d H:\QT\Test\release</p><p>必须要加&#x2F;d 不然没办法进入目录</p><p>Qt Quick Application版本:</p><p>windeployqt  Test.exe</p><p>Test.exe 为release版本的exe</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-linux-下注意点&quot;&gt;&lt;a href=&quot;#1-linux-下注意点&quot; class=&quot;headerlink&quot; title=&quot;1 linux 下注意点&quot;&gt;&lt;/a&gt;1 linux 下注意点&lt;/h1&gt;&lt;p&gt;找不到mysql.h文件&lt;/p&gt;
&lt;p&gt;sudo apt-g</summary>
      
    
    
    
    <category term="qt" scheme="https://joeforkyou.github.io/categories/qt/"/>
    
    
    <category term="qt" scheme="https://joeforkyou.github.io/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>Andoird编译文件mk说明</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/Andoird%E7%BC%96%E8%AF%91%E6%96%87%E4%BB%B6mk%E8%AF%B4%E6%98%8E/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/Andoird%E7%BC%96%E8%AF%91%E6%96%87%E4%BB%B6mk%E8%AF%B4%E6%98%8E/</id>
    <published>2024-11-10T08:39:29.000Z</published>
    <updated>2024-11-10T08:40:09.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-语法"><a href="#1-语法" class="headerlink" title="1 语法"></a>1 语法</h1><p>Android.mk 文件必须先定义 LOCAL_PATH 变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH :=$(call my-dir)</span><br></pre></td></tr></table></figure><p>此变量表示源文件在开发树中的位置。<br>在这行代码中，编译系统提供的宏函数 my-dir 将返回当前目录（Android.mk 文件本身所在的目录）的路径。<br>下一行声明 <code>CLEAR_VARS</code> 变量，其值由编译系统提供。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br></pre></td></tr></table></figure><p>CLEAR_VARS 变量指向一个特殊的 GNU Makefile，后者会清除许多 LOCAL_XXX 变量，例如 LOCAL_MODULE、LOCAL_SRC_FILES 和 LOCAL_STATIC_LIBRARIES。请注意，GNU Makefile 不会清除 LOCAL_PATH。此变量必须保留其值，因为系统在单一 GNU Make 执行环境（其中的所有变量都是全局变量）中解析所有编译控制文件。在描述每个模块之前，必须声明（重新声明）此变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := hello-jni</span><br></pre></td></tr></table></figure><p>每个模块名称必须唯一，且不含任何空格。编译系统在生成最终共享库文件时，会对您分配给 LOCAL_MODULE 的名称自动添加正确的前缀和后缀。例如，上述示例会生成名为 libhello-jni.so的库。<br>注意：如果模块名称的开头已经是 lib，则编译系统不会附加额外的 lib 前缀；而是按原样采用模块名称，并添加 .so 扩展名。因此，比如原来名为 libfoo.c 的源文件仍会生成名为 libfoo.so 的共享对象文件。此行为是为了支持 Android 平台源文件根据 Android.mk 文件生成的库；所有这些库的名称都以 lib 开头。<br>下一行会列举源文件，以空格分隔多个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_SRC_FILED :=hello-jni.c</span><br></pre></td></tr></table></figure><p>LOCAL_SRC_FILES 变量必须包含要编译到模块中的 C 和&#x2F;或 C++ 源文件列表。<br>最后一行帮助系统将所有的内容连接到一起:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure><p>BUILD_SHARED_LIBRARY 变量指向一个 GNU Makefile 脚本，该脚本会收集您自最近 include 以来在 LOCAL_XXX 变量中定义的所有信息。此脚本确定要编译的内容以及编译方式</p><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><h2 id="2-1-CLEAR-VARS"><a href="#2-1-CLEAR-VARS" class="headerlink" title="2.1 CLEAR_VARS"></a>2.1 CLEAR_VARS</h2><p>此变量指向的编译脚本用于取消定义下文“开发者定义的变量”部分中列出的几乎所有 LOCAL_XXX 变量。在描述新模块之前，请使用此变量来包含此脚本。使用它的语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br></pre></td></tr></table></figure><h2 id="2-2-BUILD-SHARED-LIBRARY"><a href="#2-2-BUILD-SHARED-LIBRARY" class="headerlink" title="2.2 BUILD_SHARED_LIBRARY"></a>2.2 BUILD_SHARED_LIBRARY</h2><p>此变量指向的编译脚本用于收集您在 LOCAL_XXX 变量中提供的模块的所有相关信息，以及确定如何根据您列出的源文件编译目标共享库。请注意，使用此脚本要求您至少已经为 LOCAL_MODULE 和 LOCAL_SRC_FILES 赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure><h2 id="2-3-BUILD-STATIC-LIBRARY"><a href="#2-3-BUILD-STATIC-LIBRARY" class="headerlink" title="2.3 BUILD_STATIC_LIBRARY"></a>2.3 BUILD_STATIC_LIBRARY</h2><p>用于编译静态库的 BUILD_SHARED_LIBRARY 的变体。编译系统不会将静态库复制到您的项目&#x2F;软件包中，但可以使用静态库编译共享库（请参阅下文的 LOCAL_STATIC_LIBRARIES 和 LOCAL_WHOLE_STATIC_LIBRARIES）。使用此变量的语法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(BUILD_STATIC_LIBRARY)</span><br></pre></td></tr></table></figure><p>静态库变量会导致编译系统生成扩展名为 .a 的库</p><h2 id="2-4-PREBUILT-SHARED-LIBRARY"><a href="#2-4-PREBUILT-SHARED-LIBRARY" class="headerlink" title="2.4 PREBUILT_SHARED_LIBRARY"></a>2.4 PREBUILT_SHARED_LIBRARY</h2><p>指向用于指定预编译共享库的编译脚本。与 BUILD_SHARED_LIBRARY 和 BUILD_STATIC_LIBRARY的情况不同，这里的 LOCAL_SRC_FILES 值不能是源文件，而必须是指向预编译共享库的一个路径，例如 foo&#x2F;libfoo.so。使用此变量的语法为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure><h2 id="2-5-PREBUILT-STATIC-LIBRARY"><a href="#2-5-PREBUILT-STATIC-LIBRARY" class="headerlink" title="2.5 PREBUILT_STATIC_LIBRARY"></a>2.5 PREBUILT_STATIC_LIBRARY</h2><h1 id="3-目标信息变量"><a href="#3-目标信息变量" class="headerlink" title="3 目标信息变量"></a>3 目标信息变量</h1><h2 id="3-1-TARGET-ARCH"><a href="#3-1-TARGET-ARCH" class="headerlink" title="3.1 TARGET_ARCH"></a>3.1 TARGET_ARCH</h2><p>编译系统解析此 <code>Android.mk</code> 文件时面向的 CPU 系列。此变量是 <code>arm</code>、<code>arm64</code>、<code>x86</code> 或 <code>x86_64</code>之一。<br>编译系统解析此 Android.mk 文件时面向的 Android API 级别编号。例如，Android 5.1 系统映像对应于 Android API 级别 22：android-22。如需平台名称和对应 Android 系统映像的完整列表，请参阅 Android NDK 原生 API。以下示例演示了使用此变量的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifeq ($(TARGET_PLATFORM),android-22)</span><br><span class="line">        # ... do something ...</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>编译系统解析此 Android.mk 文件时面向的 Android API 级别编号。例如，Android 5.1 系统映像对应于 Android API 级别 22：android-22。如需平台名称和对应 Android 系统映像的完整列表，请参阅 Android NDK 原生 API。以下示例演示了使用此变量的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifeq ($(TARGET_ARCH_ABI),arm64-v8a)</span><br><span class="line">      # ... do something ...</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><table><thead><tr><th>CPU和架构</th><th>设置</th></tr></thead><tbody><tr><td>ARMv7</td><td>armeabi-v7a</td></tr><tr><td>ARMv8 AArch64</td><td>arm64-v8a</td></tr><tr><td>i686</td><td>x86</td></tr><tr><td>x86-64</td><td>x86_64</td></tr></tbody></table><h1 id="4-模块描述变量"><a href="#4-模块描述变量" class="headerlink" title="4 模块描述变量"></a>4 模块描述变量</h1><p>每个模块描述都应遵守以下基本流程：</p><ol><li>使用 CLEAR_VARS 变量初始化或取消定义与模块相关的变量。</li><li>   为用于描述模块的变量赋值。</li><li>   使用 BUILD_XXX 变量设置 NDK 编译系统，使其将适当的编译脚本用于该模块。</li></ol><p>LOCAL_PATH<br>此变量用于指定当前文件的路径，必须在Andorid.mk文件开头定义此变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH :=$(call my-dir)</span><br></pre></td></tr></table></figure><p>此变量用于存储模块名称。指定的名称必须唯一，并且不得包含任何空格。必须在包含任何脚本（CLEAR_VARS 的脚本除外）之前定义此变量。无需添加 lib 前缀或者 .so 或 .a 文件扩展名；编译系统会自动进行这些修改。在整个 Android.mk 和 Application.mk 文件中，请通过未经修改的名称引用模块。例如，以下行会导致生成名为 libfoo.so 的共享库模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := &quot;foo&quot;</span><br></pre></td></tr></table></figure><p>如果希望生成的模块使用除“lib + LOCAL_MODULE 的值”以外的名称，您可使用 LOCAL_MODULE_FILENAME 变量为生成的模块指定自己选择的名称。<br>此可选变量使您能够替换编译系统为其生成的文件默认使用的名称。例如，如果 LOCAL_MODULE 的名称为 foo，您可以强制系统将它生成的文件命名为 libnewfoo。以下示例演示了如何完成此操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := foo</span><br><span class="line">    LOCAL_MODULE_FILENAME := libnewfoo</span><br></pre></td></tr></table></figure><p>对于共享库模块，此示例将生成一个名为 libnewfoo.so 的文件。<br>注意：您无法替换文件路径或文件扩展名<br><strong>LOCAL_SRC_FILES</strong><br>此变量包含编译系统生成模块时所用的源文件列表。只列出编译系统实际传递到编译器的文件，因为编译系统会自动计算所有相关的依赖关系。请注意，您可以使用相对（相对于 LOCAL_PATH）和绝对文件路径。<br>注意：务必在编译文件中使用 Unix 样式的正斜杠 (&#x2F;)。编译系统无法正确处理 Windows 样式的反斜杠 ()。<br><strong>LOCAL_CPP_EXTENSION</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_CPP_EXTENSION := .cxx</span><br><span class="line">LOCAL_CPP_EXTENSION := .cxx .cpp .cc</span><br></pre></td></tr></table></figure><p>例如，要指明您的代码使用 RTTI（运行时类型信息），请输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_CPP_FEATURES := rtti</span><br></pre></td></tr></table></figure><p>要指明您的代码使用 C++ 异常，请输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_CPP_FEATURES := exceptions</span><br></pre></td></tr></table></figure><p>您还可以为此变量指定多个值。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">您还可以为此变量指定多个值。例如：</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-语法&quot;&gt;&lt;a href=&quot;#1-语法&quot; class=&quot;headerlink&quot; title=&quot;1 语法&quot;&gt;&lt;/a&gt;1 语法&lt;/h1&gt;&lt;p&gt;Android.mk 文件必须先定义 LOCAL_PATH 变量：&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="https://joeforkyou.github.io/2024/11/10/%E6%90%AD%E5%BB%BA/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://joeforkyou.github.io/2024/11/10/%E6%90%AD%E5%BB%BA/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2024-11-10T06:58:32.000Z</published>
    <updated>2024-11-10T07:48:56.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>hexo 博客的搭建要依赖nodejs的组件<br>直接去官网nodejs.org下载即可<br>在浏览器中输入<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a><br>下载添加到环境变量中即可<br>win10 用户的环境变量和系统变量都添加然后重启就行.<br>因为我也不知道怎么让win10的环境变量生效,对于linux来说只要bash一下就可以了.</p><p>下载完验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">v22.11.0</span><br><span class="line">npm -v</span><br><span class="line">10.9.0</span><br></pre></td></tr></table></figure><p>打印出来node的版本信息,然后更换镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>用cnpm代替npm安装hexo架构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli  </span><br></pre></td></tr></table></figure><p>查看hexo的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>准备工作做的差不多了,该开始搭建了<br>创建一个你自己的文件，我这边是直接创建了blog文件<br>然后进入到这个文件中做初始化即可,这个要等等,不一定能拉全或者拉下来，可能还要改host文件.忘了以后再说</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>基础操作<br>启动默认端口是本地的4000端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>访问即可<a href="http://localhost:4000/">http://localhost:4000/</a><br>hexo init的时候回创建一个默认的markdown文件.<br>最常用的就是hexo g 生成静态文件<br>在hexo g之前先hexo clean一下,清除静态文件<br>然后hexo s查看改动后的效果</p><h1 id="托管"><a href="#托管" class="headerlink" title="托管"></a>托管</h1><p>github pages 托管<br>自检一个githu仓库，然后命名为username.github.io<br>hexo d 部署<br>要用hexo d部署的话,需要配置_config.yml文件,并且<br>要安装hexo-deployer-git<br>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件<br>这样子后我们再去配置_config.yml文件<br>在如下的位置添加自己部署的仓库和分支,然后hexo d部署即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span>  <span class="string">https://github.com/JoeForkYou/JoeForkYou.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>hexo d部署后,需要等待一段时间才能生效.<br>要访问的话直接输入类似我这种格式:<br><a href="https://joeforkyou.github.io/">https://joeforkyou.github.io/</a><br>自此一个简单的静态博客就搭建好了<br>搭建完后续的工作就是建立分类和搜索索引,这个我打算单独写一篇文章</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;p&gt;hexo 博客的搭建要依赖nodejs的组件&lt;br&gt;直接去官网nodejs.org下载即可&lt;br&gt;在浏览器中输入&lt;a hre</summary>
      
    
    
    
    <category term="hexo" scheme="https://joeforkyou.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://joeforkyou.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>mtk_fd参数说明</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/mtk-fd%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/mtk-fd%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/</id>
    <published>2024-11-10T06:49:47.000Z</published>
    <updated>2024-11-10T06:50:29.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-参数说明"><a href="#1-参数说明" class="headerlink" title="1 参数说明"></a>1 参数说明</h1><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;custom&#x2F;mt6765&#x2F;hal&#x2F;camera&#x2F;camera_custom_fd.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;camera_custom_fd.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_fd_CustomizeData</span><span class="params">(FD_Customize_PARA  *FDDataOut)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FDDataOut-&gt;FDThreadNum = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;FDThreshold = <span class="number">256</span>;</span><br><span class="line">    FDDataOut-&gt;MajorFaceDecision = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;OTRatio = <span class="number">1088</span>;</span><br><span class="line">    FDDataOut-&gt;SmoothLevel = <span class="number">8</span>;</span><br><span class="line">    FDDataOut-&gt;Momentum = <span class="number">0</span>;</span><br><span class="line">    FDDataOut-&gt;MaxTrackCount = <span class="number">10</span>;</span><br><span class="line">    FDDataOut-&gt;FDSkipStep = <span class="number">2</span>;</span><br><span class="line">    FDDataOut-&gt;FDRectify = <span class="number">10</span>;</span><br><span class="line">    FDDataOut-&gt;FDRefresh = <span class="number">3</span>;</span><br><span class="line">    FDDataOut-&gt;SDThreshold = <span class="number">69</span>;</span><br><span class="line">    FDDataOut-&gt;SDMainFaceMust = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;SDMaxSmileNum = <span class="number">3</span>;</span><br><span class="line">    FDDataOut-&gt;GSensor = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;FDModel = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;OTFlow = <span class="number">1</span>;  <span class="comment">//0:Original Flow (FDRefresh:60)  , 1:New Flow (FDRefresh:3)</span></span><br><span class="line">    FDDataOut-&gt;UseCustomScale = <span class="number">1</span>;</span><br><span class="line">    FDDataOut-&gt;FDSizeRatio = <span class="number">0.0</span>;  <span class="comment">// float:0~1</span></span><br><span class="line">    FDDataOut-&gt;SkipPartialFD = <span class="number">0</span>;</span><br><span class="line">    FDDataOut-&gt;SkipAllFD = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较常客制化的一些值及其意义：</p><p><strong>FDThreshold</strong> ： tune FD detection rate and false positive rate 。值越大代表检测的越严格。</p><p><strong>MajorFaceDecision</strong> ： 决定 face 排列方式。 value &#x3D; 0 or 1，value &#x3D; 0，则以Face Size的大小作为检测标准，也就是优先检测最大的人脸。value &#x3D; 1，优先检测在画面中心的人脸。Face AE,AF会参考Major Face资讯 。</p><p><strong>SmoothLevel</strong>：  决定人脸框的移动速度。value: 8~16 。值越大，跟随感越慢。 会把前面value的值平均作为下一次移动的参考。value值越大，人脸框移动会smooth，若人脸移动速度太快，则会出现人脸框跳动的情形。</p><p><strong>MaxTrackCount</strong>： 当人脸 lose 时，会用 tracking 机制继续 keep 的帧数。 </p><p><strong>GSensor</strong>： 是否使用 GSensor 资讯(AP带下来)。如果为0，则会做四个角度轮流侦测，initial detection time 会变慢。</p><p><strong>OTFlow</strong>： 只能是 1 且必须是 1 。</p><p><strong>FDSizeRatio</strong>： 用来设置过滤图中某个比例 以下的人脸。</p><p><strong>FDThreadNum</strong>：value 值增大时时会加大cpuloading，相对的检测Face的速度也快，该Thread主要跑的是FD Algo 。</p><p><strong>OTRatio</strong>:value越大，当周围环境change时，人脸框越不容易fail，缺点是可能追踪到不是人脸的物体 。</p><p><strong>Momentum</strong>:值可以是 0~3 。 0 &#x3D; force to project direction ；3 &#x3D; no reference project direction</p><p><strong>FDSkipStep</strong>:跳点，为了提高SW FD的performance 。</p><p><strong>FDRefresh</strong>:不是每一帧都做FD，若检测到Face后，接下来会做Face Tracking，若value &#x3D; 3，则做3次FaceTracking（几毫秒可以做</p><p>一次）。</p><p><strong>SDMainFaceMust</strong> :value &#x3D; 0 or 1，为0则会检测前面三张Face；为1，则需要根据MajorFaceDecision 的值确定，可能不会起作用 。</p><p><strong>FDModel</strong> :FD的核心是用某种算法training出来的model，不同的database或参数就会training出不同的model，也可以理解为侧重点不同。 </p><p>建议不要修改 OTRatio 、SmoothLevel 、FDRectify ，会影响 tracking。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-参数说明&quot;&gt;&lt;a href=&quot;#1-参数说明&quot; class=&quot;headerlink&quot; title=&quot;1 参数说明&quot;&gt;&lt;/a&gt;1 参数说明&lt;/h1&gt;&lt;p&gt;vendor&amp;#x2F;mediatek&amp;#x2F;proprietary&amp;#x2F;custom&amp;#x2F</summary>
      
    
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/categories/camera/"/>
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/tags/camera/"/>
    
  </entry>
  
  <entry>
    <title>pyton基础速通</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Python/pyton%E5%9F%BA%E7%A1%80%E9%80%9F%E9%80%9A/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Python/pyton%E5%9F%BA%E7%A1%80%E9%80%9F%E9%80%9A/</id>
    <published>2024-11-10T06:43:26.000Z</published>
    <updated>2024-11-10T06:43:54.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h1><h2 id="1-1-输出"><a href="#1-1-输出" class="headerlink" title="1.1 输出"></a>1.1 输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字是%s,我的国籍是%s&quot;</span>%(<span class="string">&quot;JoeNero&quot;</span>,<span class="string">&quot;中国&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a=%d&quot;</span>%age)</span><br></pre></td></tr></table></figure><h2 id="1-2-输入"><a href="#1-2-输入" class="headerlink" title="1.2 输入"></a>1.2 输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您刚才输入的密码是&quot;</span>,password)</span><br></pre></td></tr></table></figure><h2 id="1-3-注释"><a href="#1-3-注释" class="headerlink" title="1.3 注释"></a>1.3 注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单行注释</span></span><br></pre></td></tr></table></figure><h2 id="1-4-流程控制"><a href="#1-4-流程控制" class="headerlink" title="1.4 流程控制"></a>1.4 流程控制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">  执行语句</span><br><span class="line"><span class="keyword">elif</span> 条件:</span><br><span class="line">  执行语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> 执行语句</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">10</span></span><br><span class="line">  a++</span><br><span class="line">  <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line">  a = [<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;dd&quot;</span>]</span><br><span class="line"> <span class="keyword">for</span>  i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="built_in">print</span>(i,a[i])</span><br></pre></td></tr></table></figure><h1 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2 字符串"></a>2 字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">&quot;I said \&quot;I like you \&quot;&quot;</span> <span class="comment">#   \&quot;转义输出&quot;</span></span><br><span class="line"><span class="built_in">print</span>(my_str)</span><br></pre></td></tr></table></figure><p>输出打印字符串的片段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;chengdu&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">7</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">6</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>+<span class="string">&quot;123&quot;</span>) <span class="comment">#字符串链接</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cheng</span><br><span class="line">cheng</span><br><span class="line">hnd</span><br><span class="line">u</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello\n&quot;</span>)  <span class="comment">#\n转义字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;hello\n&quot;</span>) <span class="comment">#加r使转义字符失效</span></span><br></pre></td></tr></table></figure><h1 id="3-元组"><a href="#3-元组" class="headerlink" title="3 元组"></a>3 元组</h1><p>元组是不允许修改的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tup1 = () <span class="comment">#创建空的元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tup1))</span><br><span class="line"></span><br><span class="line">tup2 =(<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tup2))</span><br></pre></td></tr></table></figure><h1 id="4-函数"><a href="#4-函数" class="headerlink" title="4 函数"></a>4 函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a+b)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h1 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h1><h2 id="5-1-打开"><a href="#5-1-打开" class="headerlink" title="5.1 打开"></a>5.1 打开</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;test.txt&quot;,&quot;w&quot;) #打开文件.w模式，写模式</span><br><span class="line"></span><br><span class="line">f.write(&quot;hello world JoeNero&quot;)  #将字符串写入文件中哦</span><br><span class="line"></span><br><span class="line">f = open(&quot;test.txt&quot;,&quot;r&quot;) #打开文件.r模式，</span><br><span class="line">content = f.read(5) #读取五个字符</span><br><span class="line">print(content)</span><br><span class="line">f.close() #关闭文件</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th></th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件.文件的指针会放在文件的开头。这是默认模式</td></tr><tr><td>w</td><td>打开一个文件只用于写入.如果该文件已存在则将其覆盖.如果该文件不存在.则创建新文件</td></tr><tr><td>a</td><td>打开一个文件用于追加.如果该文件已经存在.文件指针会放在文件的结尾<br>如果该文件不存在,创建新文件进行写入</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于写入.文件指针会放在文件的开头.这是默认模式</td></tr><tr><td>wb</td><td>以二进制的格式打开一个文件只用于写入.如果该文件存在，则会将其覆盖.如果文件不存在，创建新文件</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加.<br>如果该文件存在，文件指针将会放在文件的结尾.也就是说新的内容会被写入到以有内容之后.如果文件不存在,创建新文件进行写入</td></tr><tr><td>r+</td><td>打开一个文件用于读写.文件指针将会放在文件的开头</td></tr><tr><td>w+</td><td>打开一个文件用于读写.如果该文件已经存在，则覆盖.如果该文件不存在.创建新文件</td></tr><tr><td>a+</td><td>打开一个文件用于读写.如果该文件已经存在.文件指针将会放在文件的结尾.<br>文件打开时会追加模式.如果该文件不存在,创建新文件用于读写</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写.文件指针将会放在文件的开头</td></tr></tbody></table><h2 id="5-2-读取"><a href="#5-2-读取" class="headerlink" title="5.2 读取"></a>5.2 读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">content = f.readlines() <span class="comment">#一次性读取全部文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> content:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%d:%s&quot;</span>%(i,temp))</span><br><span class="line">    i +=<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.rename(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test1.txt&quot;</span>) <span class="comment">#重命名</span></span><br></pre></td></tr></table></figure><h1 id="6-错误和异常"><a href="#6-错误和异常" class="headerlink" title="6 错误和异常"></a>6 错误和异常</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">except</span> IOErrpr:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">except</span> IOErrpr:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件关闭&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基础&quot;&gt;&lt;a href=&quot;#1-基础&quot; class=&quot;headerlink&quot; title=&quot;1 基础&quot;&gt;&lt;/a&gt;1 基础&lt;/h1&gt;&lt;h2 id=&quot;1-1-输出&quot;&gt;&lt;a href=&quot;#1-1-输出&quot; class=&quot;headerlink&quot; title=&quot;1.1 输</summary>
      
    
    
    
    <category term="python" scheme="https://joeforkyou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://joeforkyou.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux常用基础命令</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Linux/linux%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Linux/linux%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</id>
    <published>2024-11-10T06:39:06.000Z</published>
    <updated>2024-11-10T06:40:33.517Z</updated>
    
    <content type="html"><![CDATA[<p>这个文件为系统apt 管理软件包的文件.图形化界面操作多了,就差不多忘记终端的以下基础.</p><p>知道这个文件就好,可以更改,也可以图形界面更改.</p><p>我们所使用的ubuntu系统是有自带的系统终端的. 我们平时操作都是在其中的桌面终端上操作的.一般是GNOME和KDA这种.</p><pre><code>/etc/apt/sources.list</code></pre><h1 id="1-内存"><a href="#1-内存" class="headerlink" title="1 内存"></a>1 内存</h1><pre><code>df -h #查看系统各个磁盘的占用情况</code></pre><p>du 是disk usage 的简称 用来显示目录或文件的大小,查找文件和目录的磁盘使用情况的命令.</p><pre><code>du -sh 查看当前文件所占用的空间du -sh * 查看当前文件夹下所有文件夹所占用的空间</code></pre><h1 id="2-adb"><a href="#2-adb" class="headerlink" title="2 adb"></a>2 adb</h1><p>adb (Android Debug Bridge)是一种允许模拟器或已经连接的Android设备进行通信的命令行共军,它可以为各种设备操作提供便利.如安装和调试应用.</p><p>查询已经连接的设备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>adb 调佣图片命令。 前提要在此路径下存在对应的图. 不然会调用起损坏的图片</p><pre><code>adb shell am start -a android.intent.action.VIEW -t image/png -d file://mnt/sdcard/Download/scene1_1.png</code></pre><p>拍照,拍照时间的keyevent 为27,所以 输入以下的命令就可以实现拍照.</p><pre><code>adb shell input keyevent 27</code></pre><p>adb 查看当前包名和activity.  这个可以配合调apk来使用.我们一般要先确定调用的是哪个apk和activity</p><pre><code>adb shell dumpsys window |grep mCurrentFocus</code></pre><p>输出打出以下的信息</p><pre><code>  mCurrentFocus=Window&#123;90dd2d3 u0 com.sec.android.app.camera/com.sec.android.app.camera.Camera&#125;</code></pre><p>那么adb 启动apk的方式</p><pre><code>adb shell am start -n com.sec.android.app.camera/com.sec.android.app.camera.Camera</code></pre><p>adb 回到home</p><pre><code>adb shell input keyevent 3</code></pre><p>查看设备安装的第三方应用</p><pre><code>adb shell pm list packages -3</code></pre><p>查看系统安装的应用</p><pre><code>adb shell pm list packages -s</code></pre><p>adb install</p><pre><code>-l 将应用安装到保护目录/mnt/asec-r 允许覆盖安装-t 允许安装AndroidManifest.xml里application 指定android:testOnly=&quot;true&quot;的应用-s 将应用安装到sdcard-d 允许降级覆盖安装</code></pre><p>adb install 实际分三步完成:<br>1.push apk 文件到&#x2F;data&#x2F;local&#x2F;tmp<br>2.调用pm install 安装<br>3.删除&#x2F;data&#x2F;local&#x2F;tmp 下的对应apk文件</p><p>与install 相反的是uninstall</p><p>adb uninstall  -k package-name</p><p>清楚应用缓存</p><p>adb shell pm clear &lt;package-name&gt;</p><p>查看应用安装路径</p><p>adb shell pm path &lt;package-name&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 26 #控制电源键，一般来控制息屏和亮屏</span><br><span class="line">adb shell input keyevent 82 #菜单键,用户版本才用到</span><br><span class="line">adb shell input keyevent 4 #返回键</span><br><span class="line">adb shell input keyevent 24 #增加音量</span><br><span class="line">adb shell input keyevent 25 #降低音量</span><br><span class="line">adb shell input keyevent 164 #静音</span><br><span class="line">adb shell input keyevent 224 #亮屏</span><br><span class="line">adb shell input keyevent 223 #熄屏</span><br></pre></td></tr></table></figure><p>查看屏幕分辨率</p><pre><code>adb shell wm size</code></pre><p>查看屏幕设备密度</p><pre><code>adb shell wm density</code></pre><h1 id="3-CP"><a href="#3-CP" class="headerlink" title="3 CP"></a>3 CP</h1><p>cp 是拷贝命令.</p><p>要是要拷贝文件只要加cp -r 即可</p><h1 id="4-VIM"><a href="#4-VIM" class="headerlink" title="4 VIM"></a>4 VIM</h1><p>vim 是一个比较好用的文本编辑器</p><p>正常调用vim 就即可. vim 后面接对应的文件,并且vim 打开文件时会在本地创建一个bak文件,用于奔溃的时候的备份.</p><p>而且vim 可以更改到系统级别的文件.意味着 什么文件都能改,</p><p>vim 的模式有很多种</p><p>一般我们用到插入(可编辑)模式和命令模式</p><p>输入i 就进去插入模式,可以进行文本编辑</p><p>输入o 插入到当前光标下行并且进入到插入模式.</p><p>输入esc就退出当前的模式，回到命令模式</p><p>在命令模式下直接输入,就会查找对应的文本. 按n 即可查找下一个  ,以下是一些常用的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/文本内容</span><br><span class="line">:wq  #保存并退出</span><br><span class="line">:w!  #强制保存</span><br><span class="line">:q   #退出</span><br><span class="line">:q!  #强制退出</span><br><span class="line">:w ! sudo tee # 保存只读文件</span><br><span class="line">:u  #撤掉当前的修改</span><br><span class="line">:行数 #跳转到对应的行数</span><br><span class="line">dd #删除当前行的内容</span><br></pre></td></tr></table></figure><h1 id="5-快捷键"><a href="#5-快捷键" class="headerlink" title="5 快捷键"></a>5 快捷键</h1><p>快捷键可以自己定义</p><p>当然系统默认好用快捷键如下:</p><pre><code>ctrl + shift +c #复制ctrl + shift +v #粘贴ctrl + shift + t #在当前终端栏边上打开终端  一般我不用ctrl +alt + t  那样打开的终端 很乱 ctrl + c #中断终端操作ctrl + d #退出当前窗口ctrl + q #关ctrl + r #查询调用历史输入的命令</code></pre><h1 id="6-shell"><a href="#6-shell" class="headerlink" title="6 shell"></a>6 shell</h1><p>我们这边提到的是<strong>命令行式shell</strong>,不是gnome KDE那种桌面式终端.</p><p>shell类似于DOS下的COMMAND.COM和后来的cmd.exe。它接收用户命令，然后调用相应的应用程序.</p><p>创建后缀为.sh</p><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><p>业界所说的 shell 通常都是指 shell 脚本，但要知道，shell 和 shell script 是两个不同的概念。</p><p>由于习惯的原因，简洁起见，都是指 shell 脚本编程，不是指开发 shell 自身。</p><pre><code>#!/bin/bashecho &quot;Hello World !&quot;</code></pre><p>#!  是一个约定的标记,它告诉系统这个脚本需要用什么解释器来执行,即使用哪一种shell</p><p>echo 命令用于向窗口输出文本.</p><p>作为可执行程序运行</p><pre><code>chmod +x ./test.sh #使脚本具有执行权限./test.sh #执行脚本</code></pre><h2 id="6-1-变量"><a href="#6-1-变量" class="headerlink" title="6.1 变量"></a>6.1 变量</h2><pre><code>your_name=&quot;somethings&quot;echo $your_nameecho$&#123;your_name&#125;</code></pre><p>循环打印变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for skill in JOJO nONONONO AMAZON java;do</span><br><span class="line">echo &quot;I am good at $&#123;skill&#125; Script&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="6-2-字符"><a href="#6-2-字符" class="headerlink" title="6.2 字符"></a>6.2 字符</h2><p>单引号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=&#x27;this is a string&#x27;</span><br></pre></td></tr></table></figure><p>双引号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=&quot;JoeNero&quot;</span><br><span class="line">str=&quot;hello ,I know you are \&quot;$your_name\&quot;! \n&quot;</span><br><span class="line">echo -e $str</span><br></pre></td></tr></table></figure><p>拼接字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用双引号拼接</span></span><br><span class="line">your_name=&#x27;JoeNero&#x27;</span><br><span class="line">greeting=&quot;hello ,&quot;$your_name&quot;!&quot;</span><br><span class="line">greeting_1=&quot;hello,$&#123;your_name&#125;!&quot;</span><br><span class="line">echo $greeting $greeting_1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用单引号拼接</span></span><br><span class="line">greeting_2=&#x27;hello ,&#x27;$your_name&#x27;!&#x27;</span><br><span class="line">greeting_3=&#x27;hello,$&#123;your_name&#125;!&#x27;</span><br><span class="line">echo $greeting_2 $greeting_3</span><br></pre></td></tr></table></figure><p>获取字符串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;abcd&quot;</span><br><span class="line"><span class="meta prompt_">echo$</span><span class="language-bash">&#123;#string&#125;</span></span><br></pre></td></tr></table></figure><p>提取子字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;runoob is a great site&quot;</span><br><span class="line">echo $&#123;string:1:4&#125;#输出unoo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意第一个字符的索引值为0</span></span><br></pre></td></tr></table></figure><p>查找字字符串</p><p>查找字符i或o的位置(哪个字母先出现就计算哪个)</p><pre><code>string=&quot;runoob is a great site&quot;echo `expr index &quot;$string&quot; io`</code></pre><h2 id="6-3-数组"><a href="#6-3-数组" class="headerlink" title="6.3 数组"></a>6.3 数组</h2><p>用括号来表示数组,数组元素用空格符号来分割.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">array_name=(1 2 3 4 5 6)</span><br><span class="line">array_name1=(</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">)</span><br><span class="line">array_name[0]=0</span><br><span class="line">array_name[1]=1</span><br><span class="line">array_name[2]=2</span><br></pre></td></tr></table></figure><p>读取数组的格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;数组名[下标]&#125;</span></span><br><span class="line">echo $&#123;array_name[@]&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取得数组元素的个数</span></span><br><span class="line">length=$&#123;#array_name[@]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">length=$&#123;#array_name[*]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span></span><br><span class="line">lengthn=$&#123;#array_name[n]&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-流控制"><a href="#6-4-流控制" class="headerlink" title="6.4 流控制"></a>6.4 流控制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num1=100</span><br><span class="line">num2=100</span><br><span class="line">if test $[num1] -eq $[num2]</span><br><span class="line">then</span><br><span class="line">    echo &#x27;两个数相等！&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &#x27;两个数不相等！&#x27;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>for 循环</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for loop in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">    echo &quot;The value is: $loop&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>while语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">int=1</span><br><span class="line">while(( $int&lt;=5 ))</span><br><span class="line">do</span><br><span class="line">    echo $int</span><br><span class="line">    let &quot;int++&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>无线循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while:</span><br><span class="line">do </span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><pre><code>while truedo     commanddone</code></pre><p>输入输出重定向文件在此不赘述</p><h1 id="7-LS"><a href="#7-LS" class="headerlink" title="7 LS"></a>7 LS</h1><p>ls 是list files的缩写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ll -t # 按照时间排序呈现当前目录下的文件内容</span><br><span class="line">ll -a # 显示隐藏文件</span><br><span class="line">ll -Sh # 按照文件大小排序显示当前目录下的文件</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个文件为系统apt 管理软件包的文件.图形化界面操作多了,就差不多忘记终端的以下基础.&lt;/p&gt;
&lt;p&gt;知道这个文件就好,可以更改,也可以图形界面更改.&lt;/p&gt;
&lt;p&gt;我们所使用的ubuntu系统是有自带的系统终端的. 我们平时操作都是在其中的桌面终端上操作的.一般是GNO</summary>
      
    
    
    
    <category term="linux" scheme="https://joeforkyou.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://joeforkyou.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>XTS基础汇总</title>
    <link href="https://joeforkyou.github.io/2024/11/10/GMS/XTS%E6%B1%87%E6%80%BB%E5%9F%BA%E7%A1%80/"/>
    <id>https://joeforkyou.github.io/2024/11/10/GMS/XTS%E6%B1%87%E6%80%BB%E5%9F%BA%E7%A1%80/</id>
    <published>2024-11-10T06:01:39.000Z</published>
    <updated>2024-11-10T06:31:02.267Z</updated>
    
    <content type="html"><![CDATA[<p>参考谷歌官网：<br><a href="https://source.android.google.cn/compatibility/tests/development">https://source.android.google.cn/compatibility/tests/development</a></p><h1 id="1-XTS-概述"><a href="#1-XTS-概述" class="headerlink" title="1 XTS 概述"></a>1 XTS 概述</h1><p>GMS全称为GoogleMobile Service，即谷歌移动服务。我们常说的XTS其实就谷歌认证<br>GMS是Google所提供的一系列移动服务，包括开发用的一系列服务和用户所用的Google Apps。<br>Maps与Location：地理位置相关服务，AOSP也包括一个简易的Location服务，这是升级版，有用但并非必要，国内也有百度、高德等提供了类似的API；<br>Games、Play Services、In-app Billing、Play Distribution：与Google Play相关的服务，毫无疑问这个在国内是用不到的，但如果要在Google Play上发布应用，则非常有用；**(GL和IN做大量测试的原因)** （GL 国外发型的版本: IN :印度发型的版本  有的项目是发往欧美或者东南亚的，都需要经过认证）<br>Google+、Drive、Cloud Platform、Cloud Messaging：与Google的社交网络和云平台相关的服务，前三个在国内也基本上用不到，第四个是推送服务对开发者非常有用，但国内有很多类似的第三方服务可替代；<br>Cast、Wallet、Ads：这里是Google推出的与Android平台关系不大的服务，Ads广告对开发者有用，但国内也有很多的移动广告平台和服务。<br>这些服务不是构建一个Android App所必需的，也可以使用其他的服务替代，因此，没有GMS对国内手机厂商影响没有想象那么大。**(CN少测的原因)**<br>Google Apps则包括Gmail、Google Maps等Google官方应用，这些系统应用对于一个完善的Android设备是很重要的，但是手机厂商也可以使用自己的或者第三方应用替代。<br>整个Android平台可以看成是：AOSP+GMS，AOSP（安卓开源项目）是所有手机厂商可以免费获得的开源代码，但GMS则需要Google同意授权才行。<br>Google给GMS认证设置了比较高的门槛。首先要通过CTS兼容性测试（Compatible Test Suite），一般而言所有的Android厂商都必须通过这个认证，否则会出现兼容性问题。这个认证一般由手机厂商自己做，然后提交结果给Google。<br><strong>AOSP是工具，GMS则是服务</strong></p><h2 id="1-1-CTS"><a href="#1-1-CTS" class="headerlink" title="1.1 CTS"></a>1.1 CTS</h2><p>谷歌官网:<br><a href="https://source.android.google.cn/compatibility/cts">https://source.android.google.cn/compatibility/cts</a></p><p>CTS是Compatibility Test Suite的缩写,即兼容测试，是Google为Android设备制造商免费提供的兼容性测试套件。</p><p>CTS 是一个自动化测试套件，包括两个主要的软件组件：</p><p>1.CTS Trade Federation</p><p>自动化测试框架会在桌面设备上运行，并管理测试执行情况。此框架可实现对多个被测设备 (DUT) 进行分片测试。您还可以利用套件重试功能仅重试失败的测试而不是完整的套件，从而大大减少重新运行所花的时间。</p><p>2.单独的测试用例会在 DUT 上执行。</p><p>测试用例采用 Java 语言编写为 JUnit 测试，并打包为 Android .apk 文件，以在实际目标设备上运行。</p><p>APP层跟Framework层在设计上是分开的，但通过CTS测试，确保了APP无Android Framework之间有一致的调用接口（API），这使得APP开发者编写的同一款程序可以运行在不同系统版本（向前兼容）、不同硬件平台、不同产商制造的不同设备上。<strong>如这个示例图.</strong></p><p><img src="https://i.loli.net/2021/11/13/UbfqzP8gvRhTpOy.png" alt="1.png"></p><p>CTS定义了众多Android设备必须满足的技术指标，以确保每台通过CTS认证的设备，都可以顺利运行Google Play中出售的软件。（并不是每个软件都可以在所有Android设备上运行，Google Play仅显示可以运行在该Android设备上的应用，并且还受到当地法律法规的限制。）<br><strong>CTS的目的就是让Android设备开发商能够开发出兼容性更好的Android设备。</strong></p><p>通过以上概述可以知道这些认证的本意是：</p><p>1.让APP提供更好的用户体验。用户可以选择更多的适合自己设备的APP。让APP更稳定。</p><p>2.让开发者设计更高质量的APP。</p><h2 id="1-2-GTS"><a href="#1-2-GTS" class="headerlink" title="1.2 GTS"></a>1.2 GTS</h2><p>GTS的全称是Google Mobile Services Test Suite，所谓的Google Mobile Services即谷歌移动服务<br>谷歌移动服务提供了Search、 Search by Voice、Gmail、Contact Sync、 Calendar Sync、Talk、 Maps、 Steet View、 YouTube、 Android Market (Play store)等服务，当用户使用谷歌时，谷歌可以把各种广告嵌入到谷歌的服务中。<br>这些服务依赖于网络.</p><h2 id="1-3-VTS"><a href="#1-3-VTS" class="headerlink" title="1.3 VTS"></a>1.3 VTS</h2><p>Android 目前有一个比较明显的缺点是<strong>设备升级到新版本系统所要花费的时间太长（比如从 Android 6.0 升级到 Android 7.0）</strong>。通常在由 Google 发布新版本的 AOSP 之后，还需要 SoC 厂商对 HAL 进行升级，以及 OEM 厂商对 HAL 和 Framework  进行升级后，用户才能在设备上收到 OTA 升级包的推送。低端一点的产品甚至在出厂后就不会再进行系统升级了。用户对此抱怨良多。反观竞争对手 iOS 在这方面就做得比较好（但这不代表我支持 iOS)<br> <strong>为了解决这个问题，于是 Google 发起了 Project  Treble 项目</strong>2017 年 5 月 12 日，官方在”Developers Blog”上向公众介绍了这一项目并宣布 Android  8.0 中将引入它，但从目前我拿到的描述 Project Treble 的相关文档的修订记录来看，这些文档最早的起草时间可以追溯到 2015 年 10 月 30 日。<br> 　　<strong>而 Project Treble 中最重要的就是新增了 Vendor Interface 这一概念，以及相应的 Vendor Test Suite (VTS) 测试。</strong></p><hr><p>Project Treble 中引入 Vendor Interface 的目的是将 Android Framework 与 HAL 分开，通过对Vendor Interface进行测试，确保同一个版本的Android Framework可以运行在不同的HAL上，或者Android Framework可以运行在同一个HAL，即保证HAL的向前兼容性。通过这样的Framework&#x2F;HAL分离设计和接口一致性保证，这就使得8.0版本之后的Android系统在进行升级时，可以直接对Framework进行升级而不用考虑HAL层的改动，从而缩短了用户手上设备得到系统升级OTA推送的时间。</p><h2 id="1-4-GSI"><a href="#1-4-GSI" class="headerlink" title="1.4 GSI"></a>1.4 GSI</h2><p>GSI是在VTS环境下用google img测试CTS用例,从andorid 11版本后面迁移道cts环境下跑测，是替换掉自己framework相关的内容，用谷歌原生的system.img</p><h2 id="1-5-CTS-V"><a href="#1-5-CTS-V" class="headerlink" title="1.5 CTS-V"></a>1.5 CTS-V</h2><p>CTS Verifier是CTS兼容性测试的补充。CTS检查的是可以自动化的API和功能，而CTS Verifier是测试在没有手动输入的静态设备上测试这些API和功能，例如音频质量，触摸屏，加速度计，相机等等.这边可以重点关注FOV和尺寸video相关的测试项.</p><h2 id="1-6-ITS"><a href="#1-6-ITS" class="headerlink" title="1.6 ITS"></a>1.6 ITS</h2><p>Android 相机图像测试套件 (ITS) 是 Android 兼容性测试套件 (CTS) 验证程序的一部分，其中包含用于验证图像内容的测试</p><p><code>scenes=sensor_fusion</code> </p><p>在传感器融合测试中，将分别针对 AR 和 VR 应用，测试相机和陀螺仪之间的时间戳差异，因此需要按特定轨迹移动相机。<br><code>REALTIME</code> 功能标记和 VR&#x2F;AR 应用要求相机&#x2F;陀螺仪的定时偏差小于 1 毫秒</p><p>ITS测试输出:</p><p>PASS：测试通过</p><p>FAIL：测试失败，必须修复</p><p>SKIP：跳过测试项</p><p>FAIL*：测试失败，目前可以不修复，但可能在未来的测试中变为强制性</p><p>注意:另外还有STS安全补丁包相关的测试,因为和camera无关,就没有提及,GTS大部分依赖的是服务，camera相关性低，也与我们无关,但是有camera测试项目,就顺带一提.</p><p>its测试的图表可以用另外一台平板电脑来提供</p><p><img src="https://i.loli.net/2021/11/29/JcXSDagpFMtvYfn.png" alt="平板要求.png"></p><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2 环境搭建"></a>2 环境搭建</h1><h2 id="2-1-CTS"><a href="#2-1-CTS" class="headerlink" title="2.1 CTS"></a>2.1 CTS</h2><p>CTS环境搭建只需要一个jdk和aapt</p><p>前者这个比较大问相关人员拿吧.<br>或者直接去官网拿对应的jdk:</p><p>这里放一个11版本的下载链接</p><p><a href="https://www.oracle.com/java/technologies/javase/javase11-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase11-archive-downloads.html</a></p><p>andorid 11后面要求的jdk&gt;&#x3D;11  </p><p>然后vim ~&#x2F;.bashrc 把对应的路径配置写入后:wq保存退出,source ~&#x2F;.bashrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">jdk</span></span><br><span class="line">export JAVA_HOME=/home/ubuntu/Jdk11</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><p>然后用以下命令检查jdk版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>输出打印</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openjdk version &quot;11&quot; 2018-09-25</span><br><span class="line">OpenJDK Runtime Environment 18.9 (build 11+28)</span><br><span class="line">OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)</span><br></pre></td></tr></table></figure><p>说明jdk配置成功</p><p>cts包下载路径:</p><p><a href="https://source.android.google.cn/compatibility/cts/downloads">https://source.android.google.cn/compatibility/cts/downloads</a></p><p>CTS会使用aapt工具,如下命令安装aapt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install aapt</span><br></pre></td></tr></table></figure><p>aapt 是什么？谷歌官网有很详细的介绍.</p><p><a href="https://developer.android.google.cn/studio/command-line/aapt2?hl=zh-cn">https://developer.android.google.cn/studio/command-line/aapt2?hl=zh-cn</a></p><p>AAPT2（Android 资源打包工具）是一种构建工具. 这里理解下输出的报告就是通过这个工具构建的,当然不仅仅是报告.</p><p>两种皆可以直接命令装.检查是否搭建成功直接看基本操作命令中CTS单跑一项即可</p><h2 id="2-2-ITS-VTS"><a href="#2-2-ITS-VTS" class="headerlink" title="2.2 ITS&#x2F;VTS"></a>2.2 ITS&#x2F;VTS</h2><p>its和vts同样依赖python包.具体另外有个XTS基础有单独的操作说明.还有GTS需要连接外网,<br>VTS 不依赖网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br><span class="line">sudo apt-get install python-protobuf</span><br><span class="line">sudo apt-get install protobuf-compiler</span><br><span class="line">sudo apt-get install python-virtualenv</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install python-numpy</span><br><span class="line">sudo apt-get install python-scipy</span><br><span class="line">sudo apt-get install python-matplotlib</span><br><span class="line">sudo apt-get install python-opencv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pip install pyserial</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pip install serial <span class="comment">#如果这两个命令不行就用下面这两个命令.</span></span></span><br><span class="line">sudo apt install python-pyudev</span><br><span class="line">sudo apt install python-serial</span><br></pre></td></tr></table></figure><p>因为ubuntu16和18以及其他系统默认带的python包不一致，请根据实际情况下载其他相关的python</p><p>以上完成后直接看基本操作命令ITS部分</p><p>其他测试项不依赖任何环境.</p><h1 id="3-基本操作命令"><a href="#3-基本操作命令" class="headerlink" title="3 基本操作命令"></a>3 基本操作命令</h1><p>谷歌官网：</p><p><a href="https://source.android.google.cn/compatibility/cts/command-console-v2#ctsv2_reference">https://source.android.google.cn/compatibility/cts/command-console-v2#ctsv2_reference</a></p><p>手机开发者选项打开，永不锁屏，充电不休眠这些打开.因为测试过程中长时间未操作会影响测试结果的</p><h2 id="3-1-CTS"><a href="#3-1-CTS" class="headerlink" title="3.1 CTS"></a>3.1 CTS</h2><p>进入到cts的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd android-cts/tools/</span><br><span class="line">./cts-tradefed   #进入到cts的终端命令里</span><br></pre></td></tr></table></figure><p>相关的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run cts -m CtsCameraTestCases #cts整跑三个abi的命令</span><br></pre></td></tr></table></figure><p>我们一般debug只要跑一个abi,使用的cts-dev,会跑测当前设备对应的abi.</p><p>上述命令会直接跑侧当前环境下所有相关的abi.</p><p>出报告还是要整跑三个abi的</p><p>谷歌原话是:<br><strong>On 64-bit devices, run the test against only the 32-bit or 64-bit ABI</strong></p><p><strong>运行默认的 CTS 计划（即完整的 CTS 调用），但跳过前提条件以缩减运行时间，从而对新测试执行迭代开发。这会绕过对设备配置的验证和设置（例如推送媒体文件或检查 Wi-Fi 连接），就如同使用了 –skip-preconditions 选项。此命令还会跳过设备信息收集和所有系统状态检查工具。它还仅在单个 ABI 上运行测试。对于设备验证，请忽略此优化操作并添加所有前提条件和检查。有关要排除的内容，请参阅 cts-dev.xml。</strong></p><p>在测试过程中，CTS 控制台可以接受其他命令。</p><p>如果没有连接任何设备，CTS 台式机（或主机）会等到设备连接后再启动测试。如果连接了多台设备，则 CTS 主机将自动选择一台设备。</p><p>它还仅在单个 ABI 上运行测试<br>cts-dev 是跑测当前设备默认abi.</p><p>abi(Application Binary Interface，ABI)：<br>应用程序二进制接口<br>默认情况下，CTS 会为设备支持的每个 ABI 运行一次测试。</p><p>只跑一个命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run cts-dev -m CtsCameraTestCases#单跑当前设备默认Module命令</span><br><span class="line">run cts-dev -m CtsCameraTestCase --shard-count 3 -s sn1 -s sn2 -s sn3 #多台设备跑测一个报告</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Android12 以后建议用subplan的方式创建计划表 去跑测试，别用cts-dev的方式.</span></span><br></pre></td></tr></table></figure><p>单跑一个测试项命令.加参数-t -s -m 还有list(l d) 这些相关的命令其他XTS测试是一样的.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run cts-dev -m CtsCameraTestCases -t</span><br><span class="line">android.hardware.camera2.cts.RecordingTest#testVideoSnapshot</span><br></pre></td></tr></table></figure><p>如果有多个设备挂跑的时候, 用以下命令 加-s 设备序列号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run cts-dev -m CtsCameraTestCases -s 141190ce0312</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb device #查看设备序列号</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l r #list result查看报告结果状态,如下图能看到session 为O(记住要考)</span><br><span class="line">Pass测试项为569</span><br><span class="line">Fail项目为0 </span><br><span class="line">完成测试Module为1</span><br><span class="line">报告结果时间和名字以及其他一些相关信息.</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/ZifKRjmh5V7pa6r.png" alt="ITS.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l d #list device列举设备信息，主要关注Allocation 下设备的状态Available为可以使用的状态.</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/PQeURF45zWOZxEw.png" alt="ld.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l c #查看运行的command命令</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/4NfjRGVbmiqvDtW.png" alt="lc.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l i #查看当前命令运行的时间</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/G7Pbes18xp3vKqC.png" alt="li.png"></p><p>一般跑测没有那么快一下子全PASS,很有可能受到环境或者其他因素影响导致Fail,所以需要retry</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run retry --retry &lt;session-number&gt; #retry 格式</span><br><span class="line">run retry --retry 0 #这个就是l r 里面报告里面的session,重跑你fail的报告即可，注意版本和机器设备必须是之前出报告的同一个，不然重跑不起来.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当然你有了这个报告,也可以在其他电脑上重跑</span></span><br></pre></td></tr></table></figure><p>生成的报告路径在android-cts&#x2F;results</p><p>subplan的方式进行跑测:</p><p>什么是subplan? 是自己创建的跑测计划,一般用于跑测.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add subplan --session 10 -n cts_dev --result-type failed #创建一个名未cts_dev的 session10中跑测失败的计划表</span><br></pre></td></tr></table></figure><pre><code>#这是参数说明add s[ubplan]: create a subplan from a previous session    Available Options:        --session &lt;session_id&gt;: The session used to create a subplan        --name/-n &lt;subplan_name&gt;: The name of the new subplan        --result-type &lt;status&gt;: Which results to include in the subplan. One of passed, failed, not_executed. Repeatable</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run cts --subplan cts_dev -s 81926A8J00072 #这是subplan的使用说明,在上述已经创建了一个名未cts_dev的计划，跑测该计划中的内容</span><br></pre></td></tr></table></figure><p>打开test_result.html即可,其他测试项除ITS外都是在相似的文件路劲下</p><p>一般cts debug都是到这个路劲android-cts&#x2F;testcases</p><p>-t -g 强制下载并且打开相关权限.打开这个可以不用去操作打开apk的权限了.可以直接运行相关的命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install -t -g CtsCameraTestCases.apk</span><br></pre></td></tr></table></figure><p>然后需要进入到setting里面</p><p><img src="https://i.loli.net/2021/07/15/lEU6eTQmrWdApjN.png" alt="01.png"></p><p>选择app&amp;notifications</p><img src="https://i.loli.net/2021/07/16/CE4vAgwNjIbLpSR.png" alt="01.png" style="zoom: 66%;" />选择App info<img src="https://i.loli.net/2021/07/16/UKrLbaGpwHCf5XO.png" alt="01.png" style="zoom:67%;" /><p>找到我们cts 测试apk,  android.camera.cts<br><img src="https://i.loli.net/2021/07/16/iAgW2XIExwnlsmz.png" alt="01.png" style="zoom:67%;" /></p><p>把所有的权限都打开</p><img src="https://i.loli.net/2021/07/16/d6lYgqXWzbNLv2a.png" alt="01.png" style="zoom:67%;" /><p>然后在终端上运行以下类似格式的命令就可以了.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell am instrument -e class android.hardware.camera2.cts.RecordingTest#testVideoSnapshot --abi arm64-v8a -w android.camera.cts/androidx.test.runner.AndroidJUnitRunner</span><br><span class="line"></span><br><span class="line">adb shell am instrument -e class 对应的测试项目 --abi arm64-v8a -w android.camera.cts/androidx.test.runner.AndroidJUnitRunner</span><br></pre></td></tr></table></figure><p>运行结果如下即便就是PASS,否则为Fail</p><p><img src="https://i.loli.net/2021/07/16/vtLFJ5Ec73OlX4Z.png" alt="01.png"></p><h2 id="3-2-VTS"><a href="#3-2-VTS" class="headerlink" title="3.2 VTS"></a>3.2 VTS</h2><p>vts需要连接外网,再一次强调.<br>查看gsi版本日期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strings system.img | grep ro.build.version.security_patch</span><br><span class="line">adb shell getprop ro.build.version.security_patch</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/15/Srp6vI2cX3RAb1O.png" alt="补丁包的时间.png"><br>预备准备好对应的system.img 和boot-debug.img</p><p>要刷入这两个镜像要先解锁设备.一般默认是上锁的无法烧录镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader # 进入fastboot模式</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">有的项目解锁方式</span></span><br><span class="line">fastboot oem unlock</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">有的项目解锁方式</span></span><br><span class="line">fastboot flashing unlock</span><br></pre></td></tr></table></figure><p>解锁完就能烧录对应的镜像,以下命令往下跑就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fastboot reboot fastboot</span><br><span class="line">fastboot flash system system.img # 需要进入fastboot 下烧录.bootloader下没有system的分区</span><br><span class="line">fastboot reboot bootloader</span><br><span class="line">fastboot flash boot boot-debug.img #boot 分区在bootloader模式下.</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>进入到vts的tool目录下运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vts-tradefed</span><br></pre></td></tr></table></figure><p>vts整跑命令,vts 我们就关注这三个模块的部分</p><p>注意，并不是三个都一定存在的项目.需要根据实际项目来看.</p><p>比如展讯平台上没有2_5的接口，所以实际无法跑测.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run vts --include-filter VtsHalCameraProviderV2_4Target --include-filter VtsHalCameraProviderV2_5Target --include-filter VtsHalCameraServiceV2_0Target --skip-preconditions</span><br><span class="line"></span><br><span class="line">run vts --skip-preconditions  --include-filter -m VtsHalCameraServiceV2_0TargetTest VtsHalCameraServiceV2_0Target</span><br></pre></td></tr></table></figure><p>单跑对应的模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run vts -m VtsHalCameraProviderV2_4Target -s 1769E47E</span><br><span class="line">run vts -m VtsHalCameraProviderV2_5Target -s 1769E47E</span><br><span class="line">run vts -m VtsHalCameraServiceV2_0Target -s 1769E47E</span><br></pre></td></tr></table></figure><p>单跑单个测试项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run vts -m VtsHalCameraProviderV2_4Target -t CameraHidlTest.processCaptureRequestBurstISO(legacy/0)_64bit</span><br></pre></td></tr></table></figure><p>其他操作命令和CTS一样</p><h2 id="3-3-GSI"><a href="#3-3-GSI" class="headerlink" title="3.3 GSI"></a>3.3 GSI</h2><p>GSI也是要刷入system.img.但是不用刷boot.img.&#x2F;(andorid11后都要刷.)</p><p>一般system分区会做在fastboot 模式下，但是后来有的项目好像是得进bootloader刷system.这个要确定好，不然刷进去就无法<br>进入系统了.</p><p>GSI刷镜像按照如下的操作即可.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader #刷入对应的谷歌镜像system.img</span><br><span class="line">fastboot devices</span><br><span class="line">fastboot flashing unlock</span><br><span class="line">fastboot reboot fastboot</span><br><span class="line">fastboot erase system</span><br><span class="line">fastboot flash system system.img #谷歌官网获取</span><br><span class="line">fastboot -w</span><br><span class="line">fastboot reboot bootloader</span><br><span class="line">fastboot flashing unlock</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按音量上键</span></span><br><span class="line">fastboot flashing lock </span><br><span class="line">fastboot flashing unlock</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>打开开发者选项 , 打开 stay awake 和 USB debugging<br>andorid 11 后 gsi 在 cts&#x2F;vts 的运行环境中跑测。</p><p>android10以前以及10版本都是在vts的运行环境中跑测试.11以及11以后谷歌将测试挪到了11中</p><p>GSI整跑命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run cts-on-gsi -m CtsCameraTestCases</span><br></pre></td></tr></table></figure><h2 id="3-4-ITS"><a href="#3-4-ITS" class="headerlink" title="3.4 ITS"></a>3.4 ITS</h2><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1 准备"></a>1 准备</h3><p>我们可以编译对应的项目生成CtsVerifier.apk或者直接在ITS包里面把测试apk下载到手机中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mk -p 项目名字 -s -v userdebug -m mma -o cts/apps/CtsVerifier</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install CtsVerifier.apk</span><br></pre></td></tr></table></figure><p>进入到手机apk，所有的权限都打开.</p><p>操作步骤如下:</p><p><img src="https://i.loli.net/2021/07/15/lEU6eTQmrWdApjN.png" alt="01.png"></p><p>选择app&amp;notifications</p><img src="https://i.loli.net/2021/07/16/CE4vAgwNjIbLpSR.png" alt="01.png" style="zoom: 66%;" /><img src="https://i.loli.net/2021/07/16/UKrLbaGpwHCf5XO.png" alt="01.png" style="zoom:67%;" /><p>找到CTS Verifer 测试apk,</p><p><img src="https://i.loli.net/2021/07/16/2BM7Imz5KJV8pH1.png" alt="01.png"></p><p>打开其所有的权限即可<br><img src="https://i.loli.net/2021/07/16/ZsL7hkT2zERSu1v.png" alt="01.png"></p><h3 id="2-场景说明"><a href="#2-场景说明" class="headerlink" title="2 场景说明"></a>2 场景说明</h3><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>场景0</td><td>无任何要求</td></tr><tr><td>场景1</td><td>相机位于三脚架上, 指向一个静态场景, 其中包含灰色卡和白色背景, 在恒定 (稳定) 相对明亮的光照源下。这是 CTS 验证程序物理设置上面描述的场景。镜头视野中，灰卡大致放在中间，周围为白色背景</td></tr><tr><td>场景 2</td><td>这是测试人脸检测的场景。相机位于三脚架上, 指向一张包含3人脸的静态图片, 在恒定 (稳定) 相对明亮的照明光源下。</td></tr><tr><td>场景3</td><td>这是测试图像清晰度的场景。相机位于三脚架上, 指向包含某些边缘的静态图片, 如打印的 ISO 12233 图表。现场应在一个恒定 (稳定) 相对明亮的照明源。</td></tr><tr><td>场景4</td><td>这是测试纵横比的场景。相机位于三脚架上, 指向一个静态测试页, 其中包含一个黑色圆圈和一个方块。现场应在一个恒定 (稳定) 相对明亮的照明源</td></tr><tr><td>场景5</td><td>这是测试镜头着色和颜色均匀性的场景。在摄像机前放置一个扩散器(毛玻璃)。相机位于三脚架上，指向恒定的 (稳定) 相对地明亮的照明源。<br/>我们这边就用的一张白色餐巾纸(A4纸也可以，只要白色)代替了扩散器，将镜头对着光源，用餐巾纸挡住镜头即可。</td></tr><tr><td>sensor_fusion</td><td>马达灯箱</td></tr></tbody></table><p>注意，在andorid 11后这些场景会进一步细分和增加，具体看对应的CTSVerfier的包里面,路劲如下,这个路劲下面也有对应场景的图片.pdf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~/GMS/r4/CameraITS/tests</span><br></pre></td></tr></table></figure><h3 id="3-命令"><a href="#3-命令" class="headerlink" title="3 命令"></a>3 命令</h3><p>终端需要source its的环境.只要source一次，终端没有关闭不用再次source.新开终端要重新source</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh </span><br></pre></td></tr></table></figure><p>ITS 整跑命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python tools/run_all_tests.py device=008bcdcf0405   camera=1 scenes=5 #更改成对应的camera和场景即可</span><br><span class="line">python tools/run_all_tests.py device=008bcdcf0405   camera=1 scenes=scenes_fusion #如果只有一台机器可以不加device参数</span><br><span class="line">python tools/run_all_tests.py camera=0 scenes=sensor_fusion rot_rig=04d8:fc73:1 #rot_rig后面加马达相关的参数，这个用默认即可不用更改</span><br><span class="line"></span><br><span class="line">python tools/run_all_tests.py camera=0 scenes=0 tmp_dir=~/XTS/CtsVerifier_r6/CameraITS/outfile/ </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置输出的路径</span></span><br></pre></td></tr></table></figure><p>整跑会在&#x2F;tmp&#x2F;xxx 目录下创建对应的跑测相关的文件.其中summary.txt文件记录了整跑的结果，如果没有则PASS，如果有fail项目,需要单跑检查</p><p>单跑命令,python 运行对应的场景，对应的测试项即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tests/scene1_1/test_ev_compensation_advanced.py camera=0</span><br></pre></td></tr></table></figure><p>关于sensor_fusion 场景，如果马达不会转动，则需要赋予马达权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /dev/ttyACM0</span><br></pre></td></tr></table></figure><h3 id="4-创建报告"><a href="#4-创建报告" class="headerlink" title="4 创建报告"></a>4 创建报告</h3><p>单跑是空的,显示在终端上。创建报告需要全 pass ,有一项没跑或者 fail, 报告出来都是 fail ,并且没有详<br>细的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">its 跑测全部PASS后要点击绿色√后往下操作</span></span><br><span class="line">adb shell settings put global hidden_api_policy 1</span><br><span class="line">adb shell appops set com.android.cts.verifier android:read_device_identifiers allow</span><br><span class="line">adb shell appops set com.android.cts.verifier MANAGE_EXTERNAL_STORAGE 0 (保存报告之前)</span><br><span class="line">在cts界面点击右上角保存报告</span><br><span class="line">adb pull /storage/emulated/0/verifierReports ~/桌面/</span><br></pre></td></tr></table></figure><p>注意这个报告的结果只能用ie浏览器打开.</p><h2 id="3-5-GTS"><a href="#3-5-GTS" class="headerlink" title="3.5 GTS"></a>3.5 GTS</h2><p>GTS需要电脑和手机都连接外部的网络.</p><p>GTS 跑测命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run gts -m GtsCameraTestCases -s xxx</span><br><span class="line">run gts -m GtsCameraTestCases -s 008bcdcf0405</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考谷歌官网：&lt;br&gt;&lt;a href=&quot;https://source.android.google.cn/compatibility/tests/development&quot;&gt;https://source.android.google.cn/compatibility/test</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    <category term="GMS" scheme="https://joeforkyou.github.io/categories/Android/GMS/"/>
    
    <category term="cts" scheme="https://joeforkyou.github.io/categories/Android/GMS/cts/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
    <category term="GMS" scheme="https://joeforkyou.github.io/tags/GMS/"/>
    
    <category term="cts" scheme="https://joeforkyou.github.io/tags/cts/"/>
    
  </entry>
  
  <entry>
    <title>testAfRegions</title>
    <link href="https://joeforkyou.github.io/2024/11/10/GMS/testAfRegions/"/>
    <id>https://joeforkyou.github.io/2024/11/10/GMS/testAfRegions/</id>
    <published>2024-11-09T23:46:56.000Z</published>
    <updated>2024-11-09T23:50:33.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-测试流程"><a href="#1-测试流程" class="headerlink" title="1 测试流程"></a>1 测试流程</h1><p>测试命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am instrument -e class android.hardware.camera2.cts.StillCaptureTest#testAfRegions[1] --abi arm64-v8a  -w android.camera.cts/androidx.test.runner.AndroidJUnitRunner </span><br></pre></td></tr></table></figure><p>测试代码的位置如下:</p><p>cts&#x2F;tests&#x2F;camera&#x2F;src&#x2F;android&#x2F;hardware&#x2F;camera2&#x2F;cts&#x2F;StillCaptureTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test Af region for still capture.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAfRegions</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">for</span> (String id : mCameraIdsUnderTest) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;Testing AF regions for Camera &quot;</span> + id);</span><br><span class="line">            openDevice(id);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">afRegionsSupported</span> <span class="operator">=</span> isRegionsSupportedFor3A(MAX_REGIONS_AF_INDEX);</span><br><span class="line">            Log.i(TAG,<span class="string">&quot;afRegionsSupported=&quot;</span>+afRegionsSupported); <span class="comment">//可以加这个log. true则继续往下测试,反之直接跳过这个camera</span></span><br><span class="line">            <span class="keyword">if</span> (!afRegionsSupported) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ArrayList&lt;MeteringRectangle[]&gt; afRegionTestCases = get3ARegionTestCasesForCamera();<span class="comment">//看下述这个函数的说明</span></span><br><span class="line">            <span class="keyword">for</span> (MeteringRectangle[] afRegions : afRegionTestCases) &#123; <span class="comment">//遍历afRegionTestCases的内容去测试</span></span><br><span class="line">                takePictureTestByCamera(<span class="comment">/*aeRegions*/</span><span class="literal">null</span>, <span class="comment">/*awbRegions*/</span><span class="literal">null</span>, afRegions);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeDevice();</span><br><span class="line">            closeImageReader();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Get 5 3A region test cases, each with one square region in it.</span></span><br><span class="line"><span class="comment">    * The first one is at center, the other four are at corners of</span></span><br><span class="line"><span class="comment">    * active array rectangle.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> array of test 3A regions</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> ArrayList&lt;MeteringRectangle[]&gt; get3ARegionTestCasesForCamera() </span><br><span class="line">       </span><br><span class="line">       ...</span><br><span class="line">       Log.v(TAG, <span class="string">&quot;Generated test regions are: &quot;</span> + sb.toString()); <span class="comment">//这边可以把这个log打开看这五个区域的坐标分别是多少. 这五个区域的坐标会返回到上述afRegionTestCases,然后遍历去测试takePictureTestByCamera</span></span><br></pre></td></tr></table></figure><p>主要执行的测试内容在这个函数takePictureTestByCamera</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Step 1: trigger an auto focus run, and wait for AF locked.</span><br><span class="line">Step 2: AF is already locked, wait for AWB converged, then lock it.</span><br><span class="line">Step 3: trigger an AE precapture metering sequence and wait for AE converged.</span><br><span class="line">Step 4: take a picture when all 3A are in good state</span><br></pre></td></tr></table></figure><p>我们遇到的报错内容如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mCollector.expectMeteringRegionsAreSimilar(</span><br><span class="line">                    <span class="string">&quot;AF regions in result and request should be similar&quot;</span>,</span><br><span class="line">                    afRegions,</span><br><span class="line">                    resultAfRegions,</span><br><span class="line">                    METERING_REGION_ERROR_PERCENT_DELTA);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>afRegions和resultAfRegions内容不一致.</p><p>resultAfRegions是重新下发上报的: afRegions则上述遍历中传递过来的值.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MeteringRectangle[] resultAfRegions =</span><br><span class="line">                    getValueNotNull(result, CaptureResult.CONTROL_AF_REGIONS);</span><br></pre></td></tr></table></figure><h1 id="2-hal-上报"><a href="#2-hal-上报" class="headerlink" title="2 hal 上报"></a>2 hal 上报</h1><p>上报路径:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;aaa&#x2F;source&#x2F;common&#x2F;hal3a&#x2F;v1.0&#x2F;Hal3AAdapter3.cpp</p><p>关注这个值的下发:CaptureResult.CONTROL_AF_REGIONS, mtk平台对andorid 机制的处理都会映射转成对应的mtk标准.</p><p>这个值对应的就是MTK_CONTROL_AF_REGIONS.</p><p>详细的内容见如下的文件:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;include&#x2F;mtkcam&#x2F;utils&#x2F;metadata&#x2F;client&#x2F;TagMap.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_IMP_TAGCONVERT_(    ANDROID_CONTROL_AF_MODE,    MTK_CONTROL_AF_MODE)\</span><br><span class="line">_IMP_TAGCONVERT_(    ANDROID_CONTROL_AF_REGIONS,    MTK_CONTROL_AF_REGIONS)\</span><br></pre></td></tr></table></figure><p>看文件Hal3AAdapter3.cpp内容:这是解析meta的内容.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MUINT8</span><br><span class="line">Hal3AAdapter3::</span><br><span class="line"><span class="built_in">parseMeta</span>(<span class="type">const</span> vector&lt;MetaSet_T*&gt;&amp; requestQ)&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">if</span> ( (!u1RepeatTag) || ReparseMetaForDummy) <span class="comment">// not repeating tag, parse app meta</span></span><br><span class="line">    ...</span><br><span class="line">            <span class="keyword">case</span> MTK_CONTROL_AF_REGIONS:</span><br><span class="line">    ...</span><br><span class="line">        mUpdateMetaResult.<span class="built_in">push</span>(&#123;MTK_CONTROL_AF_REGIONS, entryNew&#125;); <span class="comment">//这里是上报上去的位置.将entryNew的内容上报上去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往上翻看entryNew的内容从哪里来,从rArea处获取.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Left,   <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Top,    <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Right,  <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Bottom, <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br><span class="line">entryNew.<span class="built_in">push_back</span>(rArea.i4Weight, <span class="built_in">Type2Type</span>&lt;MINT32&gt;());</span><br></pre></td></tr></table></figure><p>rArea又是根据rArea和rSclCrop存在以下的逻辑关系.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rArea.i4Left   = <span class="built_in">MIN</span>(<span class="built_in">MAX</span>(rArea.i4Left, rSclCrop[<span class="number">0</span>]), rSclCrop[<span class="number">2</span>]);</span><br><span class="line">rArea.i4Top    = <span class="built_in">MIN</span>(<span class="built_in">MAX</span>(rArea.i4Top, rSclCrop[<span class="number">1</span>]), rSclCrop[<span class="number">3</span>]);</span><br><span class="line">rArea.i4Right  = <span class="built_in">MAX</span>(<span class="built_in">MIN</span>(rArea.i4Right, rSclCrop[<span class="number">2</span>]), rSclCrop[<span class="number">0</span>]);</span><br><span class="line">rArea.i4Bottom = <span class="built_in">MAX</span>(<span class="built_in">MIN</span>(rArea.i4Bottom, rSclCrop[<span class="number">3</span>]), rSclCrop[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>检查rSclCrop的内容.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mi4AppfgCrop = <span class="built_in">QUERY_ENTRY_SINGLE</span>(_appmeta, MTK_SCALER_CROP_REGION, rSclCropRect);</span><br><span class="line">fgCrop = mi4AppfgCrop;</span><br><span class="line"></span><br><span class="line">mAppCropRegion.p.x = rSclCropRect.p.x;</span><br><span class="line">mAppCropRegion.p.y = rSclCropRect.p.y;</span><br><span class="line">mAppCropRegion.s.w = rSclCropRect.s.w;</span><br><span class="line">mAppCropRegion.s.h = rSclCropRect.s.h;</span><br><span class="line">rSclCrop[<span class="number">0</span>] = rSclCropRect.p.x;</span><br><span class="line">rSclCrop[<span class="number">1</span>] = rSclCropRect.p.y;</span><br><span class="line">rSclCrop[<span class="number">2</span>] = rSclCropRect.p.x + rSclCropRect.s.w;</span><br><span class="line">rSclCrop[<span class="number">3</span>] = rSclCropRect.p.y + rSclCropRect.s.h;</span><br></pre></td></tr></table></figure><p>该问题出现的原因是有人误删了 rSclCrop相关的内容导致该相关内容呈现如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mi4AppfgCrop = <span class="built_in">QUERY_ENTRY_SINGLE</span>(_appmeta, MTK_SCALER_CROP_REGION, rSclCropRect);</span><br><span class="line">fgCrop = mi4AppfgCrop;</span><br><span class="line">rSclCrop[<span class="number">3</span>] = rSclCropRect.p.y + rSclCropRect.s.h;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-测试流程&quot;&gt;&lt;a href=&quot;#1-测试流程&quot; class=&quot;headerlink&quot; title=&quot;1 测试流程&quot;&gt;&lt;/a&gt;1 测试流程&lt;/h1&gt;&lt;p&gt;测试命令:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    <category term="GMS" scheme="https://joeforkyou.github.io/categories/Android/GMS/"/>
    
    <category term="cts" scheme="https://joeforkyou.github.io/categories/Android/GMS/cts/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
    <category term="GMS" scheme="https://joeforkyou.github.io/tags/GMS/"/>
    
    <category term="cts" scheme="https://joeforkyou.github.io/tags/cts/"/>
    
  </entry>
  
  <entry>
    <title>冷启动</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/hal/%E5%86%B7%E5%90%AF%E5%8A%A8/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/hal/%E5%86%B7%E5%90%AF%E5%8A%A8/</id>
    <published>2024-11-09T23:34:29.000Z</published>
    <updated>2024-11-09T23:35:14.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>冷启动大致可以分成以下几块内容:</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>S0</td><td>(system)</td><td>主要是 Activity 的创建耗时（从 Touch up，即 <code>ptr:up</code> 开始）</td><td>ptr:up</td></tr><tr><td>S1</td><td>App</td><td>从 Activity 创建成功，到下 open camera 的时间（对应 <code>CameraService::connect</code>）； Note：我习惯把 S0 和 S1 算成一大阶段；</td><td></td></tr><tr><td>S2</td><td>HAL</td><td>open camera 到 <code>onOpened</code>（即 connect 调用完成）回调上去的时间；</td><td></td></tr><tr><td>S3</td><td>App</td><td><code>onOpened</code> 回调后，到 App 去 <code>creatSession</code> 的时间；</td><td></td></tr><tr><td>S4</td><td>HAL</td><td><code>creatSession</code> 的耗时（对应整个endConfigure);</td><td></td></tr><tr><td>S5</td><td>App</td><td><code>creatSession</code> 完成到 <code>setRepeatingRequest</code> 的时间；</td><td></td></tr><tr><td>S6</td><td>HAL</td><td><code>setRepeatingRequest</code> 后到底层抛出第一帧（cameraserver 会有一个 <code>first full buffer</code> 的记录）的时间；</td><td></td></tr><tr><td>S7</td><td><strong>App+MultiMedia</strong></td><td>底层出第一帧后，到 App 真正第一次开始 draw 数据，数据送到 surfaceFlinger 显示出来（第二次 <code>onMessageReceived</code> 完成）的时间。</td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell setprop service.adb.root 1</span><br><span class="line">开发者模式关闭再打开</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sched/freq/idle  #这三个tag是cpu　信息,无论如何必须带上</span><br><span class="line">gfx/view/input 　#测试列表滑动.桌面滑动.这种流畅性问题</span><br><span class="line">gfx/view/imput/hwui  #绘图问题</span><br><span class="line">gfx/view/input/res/am/wm #测试app启动</span><br><span class="line">gfx/view/input/dalvik/disk  #GC或者IO导致卡顿</span><br><span class="line">gfx/view/input/res/am/wm/power #亮屏,电量相关</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python systrace.py gfx camera view input sched freq video disk dalvik res am wm -b 20480 -t 5 -o trace.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">S0：Touch Up → ActivityStart</span><br><span class="line"></span><br><span class="line">S1：ActivityStart → open camera | start</span><br><span class="line"></span><br><span class="line">S2：Open camera</span><br><span class="line"></span><br><span class="line">S3：Open camera | end → Configure streams | start</span><br><span class="line"></span><br><span class="line">S4：Configure streams</span><br><span class="line"></span><br><span class="line">S5：Configure streams | end → SetRepeatingRequests</span><br><span class="line"></span><br><span class="line">S6：SetRepeatingRequests → 1st frame out from hal</span><br><span class="line"></span><br><span class="line">S7：1st frame out from hal → Display show 1st frame</span><br></pre></td></tr></table></figure><h1 id="2-S0-S1"><a href="#2-S0-S1" class="headerlink" title="2 S0+S1"></a>2 S0+S1</h1><p>system+app耗时<br>搜索关键字ptr:up<br><img src="https://i.loli.net/2021/02/05/yK8TitEbIUNgmuW.png" alt="1.png"></p><p>可以看到如下的内容:这是按下相机按钮并且抬起的操作<br><img src="https://i.loli.net/2021/02/05/DCQZysUbLd5njHB.png" alt="2.png"><br>从 这里开始计时到connectDevice结束是S0+S1的时间.</p><p>S1的主要时间是activityStart到connectDevice</p><p>S0: AppLaunch_dispatchPtr:Up –&gt; activityStart</p><p>S1: activityStart –&gt; connectDevice</p><p><img src="https://i.loli.net/2021/02/13/vJPn9CIAjFhYcKe.png" alt="1.png"></p><h1 id="3-S2"><a href="#3-S2" class="headerlink" title="3 S2"></a>3 S2</h1><p>hal耗时</p><p>搜索connectDevice<br><img src="https://i.loli.net/2021/02/07/oNEQFBJ8z1tYHLi.png" alt="微信图片_20210207161216.png"></p><p>可以看到 connectDevice的持续时间.这就是S2的耗时<br><img src="https://i.loli.net/2021/02/07/Z5B3GHkUhon2cyj.png" alt="微信图片_20210207161216.png"></p><h1 id="4-S3"><a href="#4-S3" class="headerlink" title="4 S3"></a>4 S3</h1><p>app耗时</p><p>从下图可以看到是从connectDevice的结尾到endConfigure的开始</p><p><img src="https://i.loli.net/2021/02/13/C5EvmfbHDwYlUus.png" alt="1.png"></p><h1 id="5-S4"><a href="#5-S4" class="headerlink" title="5 S4"></a>5 S4</h1><p>hal 耗时<br>endConfigure的持续时间</p><p><img src="https://i.loli.net/2021/02/13/rKZuInyARo9pzmL.png" alt="3.png"></p><h1 id="6-S5"><a href="#6-S5" class="headerlink" title="6 S5"></a>6 S5</h1><p>app耗时</p><p>从endConfigure的结尾到setRepeatingRequest返回完成</p><p><img src="https://i.loli.net/2021/02/13/LRqojJPDYcwM9lB.png" alt="1.png"><br><img src="https://i.loli.net/2021/02/13/7iDupNsqbwOlQnG.png" alt="3.png"></p><h1 id="7-S6"><a href="#7-S6" class="headerlink" title="7 S6"></a>7 S6</h1><p>hal耗时</p><p>直接搜索first full buffer .有的apk会返回多个.一般都是以最后一个收尾为主.<br>这个一般都是和captureRequest返回在一起的.</p><p>耗时是从setRepeatingRequest 计算到first full buffer返回</p><h1 id="8-S7"><a href="#8-S7" class="headerlink" title="8 S7"></a>8 S7</h1><p>app和多媒体耗时</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;冷启动大致可以分成以下几块内容:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
</summary>
      
    
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/categories/camera/"/>
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/tags/camera/"/>
    
  </entry>
  
  <entry>
    <title>模式切换</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/hal/%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/hal/%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2/</id>
    <published>2024-11-09T23:32:09.000Z</published>
    <updated>2024-11-09T23:34:46.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1 摘要"></a>1 摘要</h1><p>这里提到的mode切换主要是拍照切换到video，或者切换到超夜之类</p><table><thead><tr><th>阶段</th><th>说明</th></tr></thead><tbody><tr><td>S0(App)</td><td>从点击事件到调用 <code>flush</code> 的间隔；</td></tr><tr><td>S1(HAL)</td><td>flush的总耗时</td></tr><tr><td>S2(App)</td><td><code>flush</code> 结束后，到 <code>createSession</code> 的间隔；</td></tr><tr><td>S3(Hal)</td><td><code>createSession</code> 的耗时；</td></tr><tr><td>S4(App)</td><td><code>createSession</code> 结束到 <code>setRepeatingRequests</code> 的间隔；</td></tr><tr><td>S5(HAL)</td><td><code>setRepeatingRequests</code> 到底层出第一帧的时间；</td></tr><tr><td>S6(<strong>App + Multimedia</strong>)</td><td>底层第一帧到真正显示出第一帧的间隔。</td></tr></tbody></table><h1 id="2-S0"><a href="#2-S0" class="headerlink" title="2 S0"></a>2 S0</h1><p>从点击事件到调用 <code>flush</code> 的间隔；</p><p>搜索ptr:up<br>这个是按下抬起的动作<br><img src="https://i.loli.net/2021/04/09/B8yZztXA1hR7urT.png" alt="选区_003.png"><br><img src="https://i.loli.net/2021/04/09/RYChKUed5HTM1IA.png" alt="选区_004.png"><br>然后搜索CameraHal::flush</p><p><img src="https://i.loli.net/2021/04/09/2oaSdCM1zYVxg48.png" alt="选区_006.png"></p><p>上面的间隔时间56.958ms就是s0</p><h1 id="3-S1"><a href="#3-S1" class="headerlink" title="3 S1"></a>3 S1</h1><p>  flush的总耗时,</p><p>搜索CameraHal::flush,这个持续时间就是S1的耗时</p><p><img src="https://i.loli.net/2021/04/09/FiMa7me4VRK2H1h.png" alt="选区_005.png"></p><h1 id="4-S2"><a href="#4-S2" class="headerlink" title="4 S2"></a>4 S2</h1><p><code>flush</code> 结束后，到 <code>createSession</code> 的间隔；</p><p>如下图：</p><p><img src="https://i.loli.net/2021/04/09/Kcr9st7LDgWNmOJ.png"></p><h1 id="5-S3"><a href="#5-S3" class="headerlink" title="5 S3"></a>5 S3</h1><p><code>endConfigure</code> 的总耗时</p><p><img src="https://i.loli.net/2021/04/09/6t3oGNqIkuDz58Z.png" alt="选区_001.png"></p><h1 id="6-S4"><a href="#6-S4" class="headerlink" title="6 S4"></a>6 S4</h1><p>即 <code>endConfigure</code> 结束到下 <code>setRepeatingRequests</code> 的间隔<br><img src="https://i.loli.net/2021/04/09/jg6okQ9WwcMBPLX.png" alt="选区_002.png"></p><h1 id="7-S5"><a href="#7-S5" class="headerlink" title="7 S5"></a>7 S5</h1><p>则是 <code>setRepeatingRequests</code> 到底层出第一帧（cameraserver 收到 <code>first full buffer</code>）的间隔<br><img src="https://i.loli.net/2021/04/09/ZFn2C75TaGAI9ib.png" alt="2021-04-09 09-49-19屏幕截图.png"></p><h1 id="8-S7"><a href="#8-S7" class="headerlink" title="8 S7"></a>8 S7</h1><p>是底层第一帧上传后，到真正显示的第一帧的间隔：</p><p>根据 <code>first full buffer</code> 时间，找到 SurfaceTexture 收到第一帧的时间点，再找到 APP 第一次取用帧数据去 <code>Draw</code> 的时间点</p><p>多媒体画图日后研究，每个项目的机制不一样，需要根据实际去研究</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-摘要&quot;&gt;&lt;a href=&quot;#1-摘要&quot; class=&quot;headerlink&quot; title=&quot;1 摘要&quot;&gt;&lt;/a&gt;1 摘要&lt;/h1&gt;&lt;p&gt;这里提到的mode切换主要是拍照切换到video，或者切换到超夜之类&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;t</summary>
      
    
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/categories/camera/"/>
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/tags/camera/"/>
    
  </entry>
  
  <entry>
    <title>前后摄切换</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/hal/%E5%89%8D%E5%90%8E%E6%91%84%E5%88%87%E6%8D%A2/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/hal/%E5%89%8D%E5%90%8E%E6%91%84%E5%88%87%E6%8D%A2/</id>
    <published>2024-11-09T23:24:01.000Z</published>
    <updated>2024-11-09T23:25:11.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1 摘要"></a>1 摘要</h1><p>这里提到的切换主要是前摄&lt;-&gt;后摄的切换<br>总的来说可以分成以下的内容:</p><table><thead><tr><th>阶段</th><th>说明</th></tr></thead><tbody><tr><td>S0(App)</td><td>从点击事件到调用 <code>flush</code> 的间隔</td></tr><tr><td>S1(Hal)</td><td><code>flush</code> + <code>disconnect</code> 的总耗时，即关闭前一个摄像头的整个流程</td></tr><tr><td>S2(App)</td><td><code>disconnect</code> 完成后，到下 open camera 指令的间隔</td></tr><tr><td>S3(Hal)</td><td>open camera 到 <code>onOpened</code> 回调的耗时</td></tr><tr><td>S4(App)</td><td>onOpened<code>回调上来后，间隔多久才开始</code>createSession</td></tr><tr><td>S5(Hal)</td><td><code>createSession</code> 完成的时间，对应 <code>endConfigure</code> 的耗时</td></tr><tr><td>S6(App)</td><td><code>createSession</code> 完成后，到下 <code>setRepeatingRequests</code> 的间隔；</td></tr><tr><td>S7(Hal)</td><td><code>setRepeatingRequests</code> 指令下来后，底层要多久才准备好第一帧上抛</td></tr><tr><td>S8(App + Multimedia)</td><td>第一帧送给 App 后，多久后才真正第一次显示出数据帧</td></tr></tbody></table><h1 id="2-拆解"><a href="#2-拆解" class="headerlink" title="2 拆解"></a>2 拆解</h1><h2 id="2-1-S0-App"><a href="#2-1-S0-App" class="headerlink" title="2.1 S0(App)"></a>2.1 S0(App)</h2><p>App管辖<br>S0:从点击事件到调用 <code>flush</code> 的间隔<br>搜索ptr:up，找到如下的内容:这是按下切换释放的操作.<br>按下和释放分别对应:</p><p>AppLaunch_dispatchPtr:Down</p><p>AppLaunch_dispatchPtr:Up</p><p>我们拆解S0的时候关注up的操作.从这个start开始记录.</p><p><img src="https://img-blog.csdnimg.cn/20210320220203593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">搜索CameraHal::flush<img src="https://img-blog.csdnimg.cn/20210320220715608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>S0的时间就是AppLaunch_dispatchPtr:Up的开始到CameraHal::flush的开始</p><h2 id="2-2-S1-Hal"><a href="#2-2-S1-Hal" class="headerlink" title="2.2 S1(Hal)"></a>2.2 S1(Hal)</h2><p>Hal 管辖<br>closeStart-&gt;CloseDone的过程.<br><img src="https://img-blog.csdnimg.cn/20210320221536995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-3-S2-App"><a href="#2-3-S2-App" class="headerlink" title="2.3 S2(App)"></a>2.3 S2(App)</h2><p>App管辖<br>disconnect 完成后，到下 open camera 指令的间隔<br>关键字:connectDevice</p><p><img src="https://img-blog.csdnimg.cn/2021032022190832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-4-S3-Hal"><a href="#2-4-S3-Hal" class="headerlink" title="2.4 S3(Hal)"></a>2.4 S3(Hal)</h2><p>Hal管辖<br>open camera 到 <code>onOpened</code> 回调的耗时<br>关键字connectDevices<br><img src="https://img-blog.csdnimg.cn/2021032022235337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-5-S4-App"><a href="#2-5-S4-App" class="headerlink" title="2.5 S4(App)"></a>2.5 S4(App)</h2><p>App管辖<br>onOpened<code>回调上来后，间隔多久才开始</code>createSession<br><img src="https://img-blog.csdnimg.cn/20210320222831820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-6-S5-Hal"><a href="#2-6-S5-Hal" class="headerlink" title="2.6 S5(Hal)"></a>2.6 S5(Hal)</h2><p><code>createSession</code> 完成的时间，对应 <code>endConfigure</code> 的耗时<br>内容如下:<br><img src="https://img-blog.csdnimg.cn/20210320223348459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-7-S6-App"><a href="#2-7-S6-App" class="headerlink" title="2.7 S6(App)"></a>2.7 S6(App)</h2><p> <code>createSession</code> 完成后，到下 <code>setRepeatingRequests</code> 的间隔<br> <img src="https://img-blog.csdnimg.cn/20210320224052997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-8-S7-Hal"><a href="#2-8-S7-Hal" class="headerlink" title="2.8 S7(Hal)"></a>2.8 S7(Hal)</h2><p><code>setRepeatingRequests</code> 指令下来后，底层要准备好第一帧上抛<br>搜索关键字:first full buffer<br><img src="https://img-blog.csdnimg.cn/20210320224431766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NzUzNzQ5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-9-S8-App-Multimedia"><a href="#2-9-S8-App-Multimedia" class="headerlink" title="2.9 S8(App + Multimedia)"></a>2.9 S8(App + Multimedia)</h2><p>每个手机的绘画机制不一样，有待研究.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-摘要&quot;&gt;&lt;a href=&quot;#1-摘要&quot; class=&quot;headerlink&quot; title=&quot;1 摘要&quot;&gt;&lt;/a&gt;1 摘要&lt;/h1&gt;&lt;p&gt;这里提到的切换主要是前摄&amp;lt;-&amp;gt;后摄的切换&lt;br&gt;总的来说可以分成以下的内容:&lt;/p&gt;
&lt;table&gt;
&lt;thea</summary>
      
    
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/categories/camera/"/>
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/tags/camera/"/>
    
  </entry>
  
  <entry>
    <title>cif</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/cif/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/cif/</id>
    <published>2024-11-09T23:15:45.000Z</published>
    <updated>2024-11-09T23:18:04.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CIF概述"><a href="#CIF概述" class="headerlink" title="CIF概述"></a>CIF概述</h1><p>cif的给我的感觉就是一个光敏电阻，就是要单独供电，当一个单独的设备看即可。</p><p>我们当前的项目都是通过去读cif的gpio口的状态，然后根据实际情况是否把这个tag上传给app端，在此基础上完成其相关的需求开发.</p><h1 id="1-DTS"><a href="#1-DTS" class="headerlink" title="1 DTS"></a>1 DTS</h1><p>和正常的设备一样都是需要供电的.</p><p>只不过cif模组只要一个io口供电即可.</p><p>拿我做过的项目来举例:</p><p>我做的项目是供电是借在vddcama1上的.</p><p>读取状态的io是接在gpio41上的.所以在对应的dts上需要配置如下相关的内容.</p><p>至于这部分内容可以挂在某些camera上暂时未使用的io口.</p><p>比如我看到前摄马达这个供电没用，我就顺带映射到马达供电，(如果是gpio 供电，建议招gpio定义的mipi switch io或者其他不占用的io使用)而不是单独做一个。虽然不规范，但是很实用.</p><p>同理映射io也建议使用未占用的口. 我读取的io的脚挂在后摄的power-down脚上.</p><pre><code>vddcammot-supply = &lt;&amp;vddcama1&gt;;/*cif power*/power-down-gpios = &lt;&amp;ap_gpio 41 0&gt;;/*cif read io*/</code></pre><p>dts示例代码位置</p><p>bsp&#x2F;kernel5.15&#x2F;kernel5.15&#x2F;arch&#x2F;arm64&#x2F;boot&#x2F;dts&#x2F;sprd&#x2F;ums9230-6h10-overlay.dts</p><h1 id="2-供电"><a href="#2-供电" class="headerlink" title="2 供电"></a>2 供电</h1><h2 id="2-1-hal"><a href="#2-1-hal" class="headerlink" title="2.1 hal"></a>2.1 hal</h2><p>基本配电搞定了,下来要分别上kernel里做读取的操作.还有对应的hal部分做下ioctrl读取的操作.</p><p>由于cif是挂载其他camera上的,当然可以单独做一个设备做，但是我感觉也没啥功能，挂就挂吧，多大点事.</p><p>在对应的sensor 上电和下点的位置做cif的上电和下电.</p><pre><code>hw_sensor_power_down_cif(sns_drv_cxt-&gt;hw_handle,!power_down); //上电hw_sensor_power_down_cif(sns_drv_cxt-&gt;hw_handle,power_down);  //下电//这个power_down=的值随便设置，反正到kernel也是根据读出来的值进行上下电操作的.</code></pre><p>vendor&#x2F;sprd&#x2F;modules&#x2F;libcamera&#x2F;sensor&#x2F;hw_drv&#x2F;hw_sensor_drv.h</p><p>这个文件里做申明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cmr_int <span class="title">hw_sensor_power_down_cif</span><span class="params">(cmr_handle hw_handle, cmr_u32 power_level)</span></span>;</span><br></pre></td></tr></table></figure><p>vendor&#x2F;sprd&#x2F;modules&#x2F;libcamera&#x2F;sensor&#x2F;hw_drv&#x2F;hw_sensor_drv.c</p><p>这个文件里面实现.这个实现会直接通过ioctrl调用到kernel里面.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cmr_int <span class="title">hw_sensor_power_down_cif</span><span class="params">(cmr_handle hw_handle, cmr_u32 power_level)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ATRACE_BEGIN</span>(__FUNCTION__);</span><br><span class="line">    cmr_int ret = HW_SUCCESS;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CHECK_HANDLE</span>(hw_handle);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">hw_drv_cxt</span> *hw_drv_cxt = (<span class="keyword">struct</span> hw_drv_cxt *)hw_handle;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">HW_LOGE</span>(<span class="string">&quot;cif power_level %d&quot;</span>, power_level);</span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">ioctl</span>(hw_drv_cxt-&gt;fd_sensor, SENSOR_IO_PD_CIF, &amp;power_level); <span class="comment">//这里ioctrl</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != ret) &#123;</span><br><span class="line">        <span class="built_in">HW_LOGE</span>(<span class="string">&quot;cif failed,  power_level = %d, ret=%ld &quot;</span>, power_level, ret);</span><br><span class="line">        ret = HW_FAILED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ATRACE_END</span>();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-kernel"><a href="#2-2-kernel" class="headerlink" title="2.2 kernel"></a>2.2 kernel</h2><p>在此文件内定义</p><p>bsp&#x2F;modules&#x2F;common&#x2F;camera&#x2F;interface&#x2F;sprd_sensor.h</p><p>往上补一个就行了.</p><pre><code>#define SENSOR_IO_PD_CIF       \        _IOW(SENSOR_IOC_MAGIC,  29, uint8_t)</code></pre><p>在这个文件中对应函数中补充下发</p><p>bsp\modules\common\camera\sensor\sprd_sensor_core.c</p><pre><code>static long sprd_sensor_file_ioctl(struct file *file, unsigned int cmd,......    case SENSOR_IO_PD_CIF:        ret = sprd_sensor_io_set_pd_cif(arg);        break;</code></pre><p>实现也在这里一并实现了吧.因为我这边是直接 用cam mot的位置去映射，就没有继续封装了.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">sprd_sensor_io_set_pd_cif</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> power_level;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> vdd_val = <span class="number">0</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> sensor_id = <span class="number">1</span>; <span class="comment">//front sensor id = 1 由于我是挂在前摄上的供电，所以要通过前摄的配电节点来访问我下面的供电配置.</span></span><br><span class="line"></span><br><span class="line">        ret = <span class="built_in">copy_from_user</span>(&amp;power_level, (<span class="type">unsigned</span> <span class="type">char</span> *)arg,</span><br><span class="line">                            <span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>));</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vdd_val = <span class="built_in">sprd_sensor_get_voltage_value</span>(power_level);</span><br><span class="line">            <span class="keyword">if</span>(power_level == <span class="number">1</span>)   <span class="comment">//这个和sensor驱动中对应. 看实际上1/0 分别对应的是上电和下电.</span></span><br><span class="line">            &#123;</span><br><span class="line">                vdd_val = <span class="number">2800000</span>; <span class="comment">//CIF供电2.8v 后续记得改. 这个影响功耗</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                vdd_val = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">pr_info</span>(<span class="string">&quot;cif vdd_val=%d power_level=%d&quot;</span>,vdd_val,power_level);</span><br><span class="line">            ret = <span class="built_in">sprd_sensor_set_voltage</span>(sensor_id, vdd_val,SENSOR_REGULATOR_CAMMOT_ID_E); <span class="comment">//实际上下的电压操作</span></span><br><span class="line">            <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">pr_info</span>(<span class="string">&quot;cif set cammot successfully\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">pr_info</span>(<span class="string">&quot;cif set cammot fail\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述我加的log只是为了我方便debug，实际过程都可以直接删点多余的log.</p><p>到此供电已经完成了.</p><p>接下来梳理下读取io口电平的操作</p><h1 id="3-读取"><a href="#3-读取" class="headerlink" title="3 读取"></a>3 读取</h1><h2 id="3-1-hal"><a href="#3-1-hal" class="headerlink" title="3.1 hal"></a>3.1 hal</h2><p>这边我也是从梳理sensor驱动开始，因为这样好理解.</p><p>gc13a0_drv_access_val 中做如下操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cmr_int ret = SENSOR_FAIL;</span><br><span class="line">   SENSOR_VAL_T *param_ptr = (SENSOR_VAL_T *)param;</span><br><span class="line">   <span class="type">int</span> cif_value = <span class="number">0</span>;</span><br><span class="line">   <span class="type">char</span> test[PROPERTY_VALUE_MAX] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">   </span><br><span class="line"><span class="built_in">SENSOR_IC_CHECK_HANDLE</span>(handle);</span><br><span class="line"><span class="built_in">SENSOR_IC_CHECK_PTR</span>(param_ptr);</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">sensor_ic_drv_cxt</span> * sns_drv_cxt = (<span class="keyword">struct</span> sensor_ic_drv_cxt *)handle; </span><br><span class="line">   cif_value = <span class="built_in">hw_sensor_read_cif</span>(sns_drv_cxt-&gt;hw_handle); <span class="comment">//这个是主要的操作</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SENSOR_LOGI</span>(<span class="string">&quot;sensor gc13a0: param_ptr-&gt;type=%x&quot;</span>, param_ptr-&gt;type);</span><br><span class="line">   <span class="keyword">if</span>(cif_value == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">property_set</span>(<span class="string">&quot;persist.vendor.cam.back.cif&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       <span class="built_in">SENSOR_LOGI</span>(<span class="string">&quot;set cif 1&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">property_set</span>(<span class="string">&quot;persist.vendor.cam.back.cif&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">       <span class="built_in">SENSOR_LOGI</span>(<span class="string">&quot;set cif 0&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">property_get</span>(<span class="string">&quot;persist.vendor.cam.back.cif&quot;</span>, test, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">   <span class="built_in">SENSOR_LOGI</span>(<span class="string">&quot;test cif:%s&quot;</span>,test);</span><br></pre></td></tr></table></figure><p>hw_sensor_read_cif在如下位置声明</p><p>vendor&#x2F;sprd&#x2F;modules&#x2F;libcamera&#x2F;sensor&#x2F;hw_drv&#x2F;hw_sensor_drv.h</p><pre><code>cmr_int hw_sensor_read_cif(cmr_handle hw_handle);</code></pre><p>跟供电一样在另外一个位置实现ioctrl下发到kernel</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">cmr_int <span class="title">hw_sensor_read_cif</span><span class="params">(cmr_handle hw_handle)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ATRACE_BEGIN</span>(__FUNCTION__);</span><br><span class="line">    cmr_int ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CHECK_HANDLE</span>(hw_handle);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">hw_drv_cxt</span> *hw_drv_cxt = (<span class="keyword">struct</span> hw_drv_cxt *)hw_handle; <span class="comment">//ioctrl下发到kernel上</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">ioctl</span>(hw_drv_cxt-&gt;fd_sensor, SENSOR_IO_READ_CIF, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">ATRACE_END</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-kernel"><a href="#3-2-kernel" class="headerlink" title="3.2 kernel"></a>3.2 kernel</h2><p>kernel这部分的逻辑和上述的供电的相似.只不过一个是下电压，一个是读电压.</p><p>bsp&#x2F;modules&#x2F;common&#x2F;camera&#x2F;interface&#x2F;sprd_sensor.h 中补充id</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SENSOR_IO_READ_CIF\</span></span><br><span class="line"><span class="meta">_IOW(SENSOR_IOC_MAGIC,28, uint32_t)</span></span><br></pre></td></tr></table></figure><p>bsp&#x2F;modules&#x2F;common&#x2F;camera&#x2F;sensor&#x2F;sprd_sensor_core.c 中实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> SENSOR_IO_READ_CIF:</span><br><span class="line">        ret = <span class="built_in">sprd_sensor_io_read_cif</span>(); <span class="comment">//通过id下发</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">sprd_sensor_io_read_cif</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">ret = <span class="built_in">sprd_sensor_read_cif_value</span>();</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_info</span>(<span class="string">&quot;read cif successfully\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;read cif fail\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看</p><p>sprd_sensor_read_cif_value</p><p>具体实现在:</p><p>bsp&#x2F;modules&#x2F;common&#x2F;camera&#x2F;sensor&#x2F;sprd_sensor_drv.c</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sprd_sensor_read_cif_value</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> gpio_id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sprd_sensor_dev_info_tag</span> *p_dev;</span><br><span class="line">    p_dev = <span class="built_in">sprd_sensor_get_dev_context</span>(<span class="number">0</span>); <span class="comment">//映射挂在后主摄的dts上.</span></span><br><span class="line">    gpio_id = p_dev-&gt;gpio_tab[SPRD_SENSOR_PWN_GPIO_TAG_E];</span><br><span class="line">    <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309:gpio id =%d&quot;</span>,gpio_id);</span><br><span class="line">    ret = <span class="built_in">gpio_direction_input</span>(gpio_id); </span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309: set gpio in successful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309:set gpio_value fail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = <span class="built_in">gpio_get_value</span>(gpio_id);<span class="comment">// 直接读gpio电压的值</span></span><br><span class="line">    <span class="keyword">if</span>(ret &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309:cif_value = %d&quot;</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pr_err</span>(<span class="string">&quot;CIF0309:get gpio_value fail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细的流程图如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">sensor_drv -&gt; hw_sensor_drv: hw_sensor_power_down_cif</span><br><span class="line"></span><br><span class="line">hw_sensor_drv-&gt;sprd_sensor_core:SENSOR_IO_PD_CIF</span><br><span class="line"></span><br><span class="line">sprd_sensor_core-&gt;sprd_sensor_core:sprd_sensor_io_set_pd_cif</span><br><span class="line"></span><br><span class="line">sensor_drv -&gt; hw_sensor_drv: hw_sensor_read_cif</span><br><span class="line"></span><br><span class="line">hw_sensor_drv-&gt;sprd_sensor_core:SENSOR_IO_READ_CIF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sprd_sensor_core-&gt;sprd_sensor_core:sprd_sensor_read_cif_value</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CIF概述&quot;&gt;&lt;a href=&quot;#CIF概述&quot; class=&quot;headerlink&quot; title=&quot;CIF概述&quot;&gt;&lt;/a&gt;CIF概述&lt;/h1&gt;&lt;p&gt;cif的给我的感觉就是一个光敏电阻，就是要单独供电，当一个单独的设备看即可。&lt;/p&gt;
&lt;p&gt;我们当前的项目都是通过去</summary>
      
    
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/categories/camera/"/>
    
    
    <category term="camera" scheme="https://joeforkyou.github.io/tags/camera/"/>
    
  </entry>
  
</feed>
