<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoeNero的博客</title>
  
  
  <link href="https://joeforkyou.github.io/atom.xml" rel="self"/>
  
  <link href="https://joeforkyou.github.io/"/>
  <updated>2024-11-09T22:25:15.104Z</updated>
  <id>https://joeforkyou.github.io/</id>
  
  <author>
    <name>JoeNero</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>meta工具acdk获取camera</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/hal/meta%E5%B7%A5%E5%85%B7acdk%E8%8E%B7%E5%8F%96camera/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/hal/meta%E5%B7%A5%E5%85%B7acdk%E8%8E%B7%E5%8F%96camera/</id>
    <published>2024-11-09T20:29:50.000Z</published>
    <updated>2024-11-09T22:25:15.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h1><p>meta工具需要获取到cameraModuleInfo,然后把这个信息给到工具，工具需要字符串匹配检查.(<strong>meta这个工具自检就应该被废弃，太没有用了</strong>)</p><p>对于我们camera驱动来说，要完成的工作无非两点，一个就是创建节点，给予hal和上层ap的权限(selinux),其二就是把这个信息存好给返回给工具.</p><p>对于这个需求的难点.如果对我来说就是camerahalserver要在关机状态下先自启一遍，保证把相关的Camera info先拷贝给节点.因为关机状态下的cameraProvider是不启动的.</p><p>关机下init.rc 去启动cameraProvider的流程，我到现在都懒得去整理，没有好一点的项目练手这部分，找机会再说.</p><h1 id="2-流程"><a href="#2-流程" class="headerlink" title="2 流程"></a>2 流程</h1><p>节点的创建，我这边不想再说了，这边做的节点就是一坨屎.</p><p>老子要是有空就全部删了 重做.</p><p>下面主要描述下meta的工作流程和camera的资源获取.</p><p>meta的路径:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;meta</p><p>我这边主要先关注这个文件<strong>FtModule.cpp</strong></p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;meta&#x2F;common&#x2F;src&#x2F;FtModule.cpp</p><p>获取节点信息的代码非常简单，打开这个节点，获取copy过来就可以了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CAM_INFO_PATH  <span class="string">&quot;/proc/cameraModuleInfo&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> <span class="title">read_cam_info</span><span class="params">(<span class="type">char</span>* peer_buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">255</span>];</span><br><span class="line"><span class="type">ssize_t</span> byte_read = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> inode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (peer_buf == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> META_FAILED;</span><br><span class="line"></span><br><span class="line">inode = <span class="built_in">open</span>(CAM_INFO_PATH, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (inode &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">META_LOG</span>(<span class="string">&quot;[Meta][FT] read_cam_info open %s fail!&quot;</span>, CAM_INFO_PATH);</span><br><span class="line"><span class="keyword">return</span> META_FAILED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">byte_read = <span class="built_in">read</span>(inode, buf, <span class="built_in">sizeof</span>(buf) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">META_LOG</span>(<span class="string">&quot;[Meta][FT] read_cam_info: %s&quot;</span>, buf);</span><br><span class="line"><span class="built_in">close</span>(inode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(peer_buf, <span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line"><span class="keyword">return</span> META_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在这个函数执行对应cmd</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FtModCustomer::exec</span><span class="params">(Frame **pFrm*)</span></span></span><br><span class="line"><span class="function">    ...</span></span><br><span class="line"><span class="function">    <span class="title">switch</span><span class="params">(req-&gt;cmd.m_u1Dummy)</span></span></span><br><span class="line"><span class="function">        ...</span></span><br><span class="line"><span class="function">            <span class="keyword">case</span> 4:</span></span><br><span class="line"><span class="function">META_LOG(<span class="string">&quot;[Meta][FT] read cam info&quot;</span>);</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">acdkIFInit</span>())&#123; <span class="comment">//跟踪这个 </span></span><br><span class="line">    ft_cnf.status = <span class="built_in">read_cam_info</span>(peer_buf); <span class="comment">//获取节点信息</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ft_cnf.status = META_FAILED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>acdkIFInit 中使用了ioctrl 我自定义的ACDK_CMD_SET_HAL_INIT 来完成camerahal 的信息自启动获取.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">acdkIFInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ACDK_FEATURE_INFO_STRUCT rAcdkFeatureInfo;</span><br><span class="line">    <span class="type">bool</span> bRet;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> u4RetLen;</span><br><span class="line">    <span class="type">int</span> srcDev = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//====== Create ACDK Object ======</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Mdk_Open</span>() == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">META_LOG</span>(<span class="string">&quot;Mdk_Open() Fail&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//====== Select Camera Sensor ======</span></span><br><span class="line">    rAcdkFeatureInfo.puParaIn = (MUINT8 *)&amp;srcDev;</span><br><span class="line">    rAcdkFeatureInfo.u4ParaInLen = <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    rAcdkFeatureInfo.puParaOut = <span class="literal">NULL</span>;</span><br><span class="line">    rAcdkFeatureInfo.u4ParaOutLen = <span class="number">0</span>;</span><br><span class="line">    rAcdkFeatureInfo.pu4RealParaOutLen = &amp;u4RetLen;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">META_LOG</span>(<span class="string">&quot;%s : srcDev:%d\n&quot;</span>,__FUNCTION__,srcDev);</span><br><span class="line">    bRet = <span class="built_in">Mdk_IOControl</span>(ACDK_CMD_SET_SRC_DEV, &amp;rAcdkFeatureInfo);</span><br><span class="line">    <span class="keyword">if</span> (!bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">META_LOG</span>(<span class="string">&quot;ACDK_FEATURE_SET_SRC_DEV Fail: %d\n&quot;</span>,srcDev);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bRet = <span class="built_in">Mdk_IOControl</span>(ACDK_CMD_SET_HAL_INIT, &amp;rAcdkFeatureInfo); <span class="comment">//主要是跟踪这个位置的代码</span></span><br><span class="line">    <span class="keyword">if</span> (!bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">META_LOG</span>(<span class="string">&quot;ACDK_CMD_SET_HAL_INIT Fail: %d\n&quot;</span>,srcDev);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">META_LOG</span>(<span class="string">&quot;ACDK_CMD_SET_HAL_INIT ok: srcDev%d\n&quot;</span>,srcDev);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个文件中新添加对应的cmd(<strong>ACDK_COMMAND_END</strong>)</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;include&#x2F;mtkcam&#x2F;main&#x2F;acdk&#x2F;AcdkCommon.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    ++ACDK_CMD_SET_HAL_INIT,</span><br><span class="line">    ACDK_COMMAND_END</span><br><span class="line">&#125;eACDK_COMMAND;</span><br></pre></td></tr></table></figure><p>好了 到这部基本就可以使用这个cmd.</p><p>接下来就是通过这个cmd 做对应的操作了</p><p>这个ioctrl 的cmd的</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;main&#x2F;acdk&#x2F;v4.0&#x2F;src&#x2F;acdk&#x2F;AcdkMain.cpp</p><p><strong>Mdk_IOControl</strong>的实际实现是通过一下的这个函数.直接在里面加我需要的camera hal的操作即可.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">AcdkMain::sendcommand</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+    <span class="keyword">else</span> <span class="keyword">if</span>(a_u4Ioctl == ACDK_CMD_SET_HAL_INIT)</span><br><span class="line">+    &#123;</span><br><span class="line">+        <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] ioctrl a_u4Ioctl=%d&quot;</span>,a_u4Ioctl);</span><br><span class="line">+        err = <span class="built_in">sensorInit</span>();</span><br><span class="line">+        <span class="keyword">if</span> (err != ACDK_RETURN_NO_ERROR)</span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] Sensor setting Fail. err(0x%x)&quot;</span>,err);</span><br><span class="line">+            err = ACDK_RETURN_API_FAIL;</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">else</span></span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] Sensor setting ok&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        err = <span class="built_in">getSensorInfo</span>();</span><br><span class="line">+        <span class="keyword">if</span>(err != ACDK_RETURN_NO_ERROR)</span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] getSensorInfo error(0x%x)&quot;</span>,err);</span><br><span class="line">+            err = ACDK_RETURN_API_FAIL;</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">else</span></span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] getSensorInfo ok&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        <span class="comment">//====== Initialize AcdkMhal ======</span></span><br><span class="line">+        err = m_pAcdkMhalObj-&gt;<span class="built_in">acdkMhalInit</span>();</span><br><span class="line">+        <span class="keyword">if</span>(err != ACDK_RETURN_NO_ERROR)</span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] acdkMhalInit Fail(0x%x)&quot;</span>, err);</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">else</span></span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] acdkMhalInit ok&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        err = m_pAcdkMhalObjEng-&gt;<span class="built_in">acdkMhalInit</span>();</span><br><span class="line">+        <span class="keyword">if</span>(err != ACDK_RETURN_NO_ERROR)</span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] acdkMhalInit eng Fail(0x%x)&quot;</span>, err);</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">else</span></span><br><span class="line">+        &#123;</span><br><span class="line">+            <span class="built_in">ACDK_LOGE</span>(<span class="string">&quot;[meta] acdkMhalInit eng ok&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span>(a_u4Ioctl == ACDK_CMD_SET_OPERATION_MODE)</span><br><span class="line">     &#123;</span><br><span class="line">         eACDK_OPERA_MODE eOpMode = ACDK_OPT_NONE_MODE;</span><br></pre></td></tr></table></figure><h1 id="3-编译debug"><a href="#3-编译debug" class="headerlink" title="3 编译debug"></a>3 编译debug</h1><h2 id="3-1-meta"><a href="#3-1-meta" class="headerlink" title="3.1 meta"></a>3.1 meta</h2><p>对于meta部分:直接看这个Android.mk</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;meta&#x2F;common&#x2F;Android.mk</p><pre><code>LOCAL_MODULE:=meta_tst</code></pre><p>目标模块名字是这个.我本来以为是编译出来so或者a文件，结果编译出来一个二进制文件就叫meta_tst.</p><p>直接push到vendor&#x2F;bin&#x2F;中就可以. meta的工具是直接通过这个bin 来下cmd交互的.我也不想研究，早该弃用的东西没什么软用.这一套和车机ais_server和ais_be_server的交互倒是很相似的.</p><pre><code>adb push  meta_tst vendor/bin/meta_tst</code></pre><p>理论上这个meta_tst可以直接在手机上运行. 当然是直接运行其main函数.而不是通过工具来操作的.</p><p>这个我不想梳理，没啥用. 知道改meta路径下的文件push  meta_tst到 vendor&#x2F;bin&#x2F;即可.</p><h2 id="3-2-acdk"><a href="#3-2-acdk" class="headerlink" title="3.2 acdk"></a>3.2 acdk</h2><p>我们本质上是通过acdk已经写好的函数来完成操作的.</p><p>acdk代码路径:</p><p>外部接口头文件说明:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;include&#x2F;mtkcam&#x2F;main&#x2F;acdk</p><p>该so库主要实现代码:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;main&#x2F;acdk</p><p>这边主要用到v4.0(<strong>能观察到mtk源码和很多其他的acdk，那些都是针对单独模块做的.我这个是最源生的</strong>.)</p><p>然后我们看到对应的mk文件:</p><p>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;main&#x2F;acdk&#x2F;v4.0&#x2F;src&#x2F;Android.mk</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := libacdk</span><br></pre></td></tr></table></figure><p>从这里就能知道编译生成的文件是libacdk.so</p><p>push路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push libacdk.so vendor/lib64/</span><br></pre></td></tr></table></figure><p>同理需要杀掉cameraProvider才能生效.</p><p>mtk对cameraProvider进行了封装,是camerahalserver.所以杀掉camerahalserver即可</p><p>从上述内容基本了解到如何编译，但是怎么debug呢？这是关机的状态.如果一直拿meta工具去debug,要不停地重启和抓log.效率极其低下。因为进meta模式机器经常卡死，要好久才能开机.</p><p>于是乎，这边就用到mtk自己编写的测试文件.平台的专业就专业在每个模块都是可以做单独的测试，都写好了对应的接口，push到vendor&#x2F;bin下运行即可.</p><p>对应的test文件路径也在其对应的模块下.</p><p>示例如下:</p><p><strong>vendor&#x2F;mediatek&#x2F;proprietary&#x2F;hardware&#x2F;mtkcam&#x2F;main&#x2F;acdk&#x2F;v4.0&#x2F;src&#x2F;test</strong></p><p>main.cpp 函数入口，我自己debug的时候基本删的很干净，一来是方便debug，二来是跑得快.只跑我要的代码块即可.</p><p>main中其他的我不关注.只要关注这个</p><pre><code>ret *=* main_testMdk(argc, argv, &amp;(crcResults[loop]));</code></pre><p>main_testMdk在test_mdk.cpp中实现</p><p>这个编译是生成acdk_camshottest  然后push到vendor&#x2F;bin&#x2F;</p><p>直接在手机里运行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vendor/bin/acdk_camshottest  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1 背景&quot;&gt;&lt;/a&gt;1 背景&lt;/h1&gt;&lt;p&gt;meta工具需要获取到cameraModuleInfo,然后把这个信息给到工具，工具需要字符串匹配检查.(&lt;strong&gt;m</summary>
      
    
    
    
    <category term="hal" scheme="https://joeforkyou.github.io/categories/hal/"/>
    
    <category term="camera" scheme="https://joeforkyou.github.io/categories/hal/camera/"/>
    
    <category term="meta" scheme="https://joeforkyou.github.io/categories/hal/camera/meta/"/>
    
    <category term="acdk" scheme="https://joeforkyou.github.io/categories/hal/camera/meta/acdk/"/>
    
    
    <category term="hal" scheme="https://joeforkyou.github.io/tags/hal/"/>
    
    <category term="camera" scheme="https://joeforkyou.github.io/tags/camera/"/>
    
    <category term="meta" scheme="https://joeforkyou.github.io/tags/meta/"/>
    
    <category term="acdk" scheme="https://joeforkyou.github.io/tags/acdk/"/>
    
  </entry>
  
  <entry>
    <title>lightroomv</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/3rd/lightroomv/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/3rd/lightroomv/</id>
    <published>2024-11-09T19:28:45.000Z</published>
    <updated>2024-11-09T22:22:29.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-lightroomv"><a href="#1-lightroomv" class="headerlink" title="1 lightroomv"></a>1 lightroomv</h1><p>三方apk lightroomv 拍照. 一次性只能拍照4张，无法生成第5张图片.</p><p>很明显能看到异常的时候会有如下的报错log,到这里hal就没有收到任何拍照请求.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上一张拍照请求到hal,下述<span class="built_in">log</span>. pic_req =1 ，拍照请求到hal 查收了</span></span><br><span class="line">05-13 17:32:18.966   560 12747 D Cam3HWI : 2317, processCaptureRequest: camId=0, bufs_num=2, frame_num=49, cap_intent=2, pic_req=1, first_regular_req=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">已经报错</span></span><br><span class="line">05-13 16:53:39.869  8798 12489 W ImageReader_JNI: Unable to acquire a buffer item, very likely client tried to acquire more than maxImages buffers</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下面就无法打印出对应的拍照请求.</span></span><br></pre></td></tr></table></figure><h1 id="2-JNI"><a href="#2-JNI" class="headerlink" title="2 JNI"></a>2 JNI</h1><p>我们camera相关的会涉及如下路径的JNI<br>frameworks&#x2F;base&#x2F;media&#x2F;jni      (这个是多媒体相关的，主要涉及到拍照的image相关的内容)</p><p>编译的so 为libmedia_jni.so</p><p>frameworks&#x2F;base&#x2F;core&#x2F;jni</p><p>编译的so为libandroid_runtime.so</p><p>具体查看编译什么可以去看对应目录文件下Android.bp文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cc_library_shared &#123;</span><br><span class="line">    name: <span class="string">&quot;libandroid_runtime&quot;</span>,</span><br><span class="line">    host_supported: true,</span><br><span class="line">    cflags: [</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cc_library_shared &#123;</span><br><span class="line">    name: <span class="string">&quot;libmedia_jni&quot;</span>,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>举个例子<br>1.android_hardware_Camera.cpp 这个文件中如下的内容:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> JNINativeMethod camMethods[] = &#123;</span><br><span class="line">  &#123; <span class="string">&quot;getNumberOfCameras&quot;</span>,</span><br><span class="line">    <span class="string">&quot;()I&quot;</span>,</span><br><span class="line">    (<span class="type">void</span> *)android_hardware_Camera_getNumberOfCameras &#125;,</span><br></pre></td></tr></table></figure><p>对于java hardware 中的虚函数  getNumberOfCameras使用的实际方法是通过这个JNI的方法映射过来. 实际使用函数是这个文件中的android_hardware_Camera_getNumberOfCameras</p><ol start="2"><li></li></ol><p><code>ImageReader</code>允许应用程序直接获取渲染到<code>surface</code>的图形数据，并转换为图片</p><p>更为详细的内容可以查阅<a href="https://developer.android.google.cn/reference/android/media/ImageReader.html">https://developer.android.google.cn/reference/android/media/ImageReader.html</a></p><p>frameworks&#x2F;base&#x2F;media&#x2F;java&#x2F;android&#x2F;media&#x2F;ImageReader.java中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">nativeImageSetup</span><span class="params">(Image i)</span>;</span><br></pre></td></tr></table></figure><p>实际上调用的是如下位置的内容.下述是其映射关系.</p><p>frameworks&#x2F;base&#x2F;media&#x2F;jni&#x2F;android_media_ImageReader.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> JNINativeMethod gImageReaderMethods[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;nativeClassInit&quot;</span>,        <span class="string">&quot;()V&quot;</span>,                        (<span class="type">void</span>*)ImageReader_classInit &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeInit&quot;</span>,             <span class="string">&quot;(Ljava/lang/Object;IIIIJ)V&quot;</span>,  (<span class="type">void</span>*)ImageReader_init &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeClose&quot;</span>,            <span class="string">&quot;()V&quot;</span>,                        (<span class="type">void</span>*)ImageReader_close &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeReleaseImage&quot;</span>,     <span class="string">&quot;(Landroid/media/Image;)V&quot;</span>,   (<span class="type">void</span>*)ImageReader_imageRelease &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeImageSetup&quot;</span>,       <span class="string">&quot;(Landroid/media/Image;)I&quot;</span>,   (<span class="type">void</span>*)ImageReader_imageSetup &#125;, </span><br><span class="line">    &#123;<span class="string">&quot;nativeGetSurface&quot;</span>,       <span class="string">&quot;()Landroid/view/Surface;&quot;</span>,   (<span class="type">void</span>*)ImageReader_getSurface &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeDetachImage&quot;</span>,      <span class="string">&quot;(Landroid/media/Image;)I&quot;</span>,   (<span class="type">void</span>*)ImageReader_detachImage &#125;,</span><br><span class="line">    &#123;<span class="string">&quot;nativeDiscardFreeBuffers&quot;</span>, <span class="string">&quot;()V&quot;</span>,                      (<span class="type">void</span>*)ImageReader_discardFreeBuffers &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/13/13qiodPny2csMCW.png" alt="JNI.png"></p><h1 id="3-追溯原因"><a href="#3-追溯原因" class="headerlink" title="3 追溯原因"></a>3 追溯原因</h1><p>报错内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">05-13 16:53:39.869  8798 12489 W ImageReader_JNI: Unable to acquire a buffer item, very likely client tried to acquire more than maxImages buffers</span><br></pre></td></tr></table></figure><p>报错位置:frameworks&#x2F;base&#x2F;media&#x2F;jni&#x2F;android_media_ImageReader.cpp.我们可以把相关的logv 都改成可以打印出的loge看具体的差异.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> jint <span class="title">ImageReader_imageSetup</span><span class="params">(JNIEnv* env, jobject thiz, jobject image)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ALOGV</span>(<span class="string">&quot;%s:&quot;</span>, __FUNCTION__);</span><br><span class="line">    JNIImageReaderContext* ctx = <span class="built_in">ImageReader_getContext</span>(env, thiz);</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">jniThrowException</span>(env, <span class="string">&quot;java/lang/IllegalStateException&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ImageReader is not initialized or was already closed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BufferItemConsumer* bufferConsumer = ctx-&gt;<span class="built_in">getBufferConsumer</span>();</span><br><span class="line">    BufferItem* buffer = ctx-&gt;<span class="built_in">getBufferItem</span>();<span class="comment">//看这个函数的调用</span></span><br><span class="line">    <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;Unable to acquire a buffer item, very likely client tried to acquire more than&quot;</span></span><br><span class="line">            <span class="string">&quot; maxImages buffers&quot;</span>); <span class="comment">//这是报错的位置.我们看buffer 为NULL,打印了这个log</span></span><br><span class="line">        <span class="keyword">return</span> ACQUIRE_MAX_IMAGES;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BufferItem* <span class="title">JNIImageReaderContext::getBufferItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mBuffers.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">//&lt;==== 这是实际返回的NULL,说明mBuffers.empty()是为空了.然后往下面的内容看构造函数.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Return a BufferItem pointer and remove it from the list</span></span><br><span class="line">    List&lt;BufferItem*&gt;::iterator it = mBuffers.<span class="built_in">begin</span>();   <span class="comment">//用一块，擦一块</span></span><br><span class="line">    BufferItem* buffer = *it;</span><br><span class="line">    mBuffers.<span class="built_in">erase</span>(it);</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">JNIImageReaderContext::<span class="built_in">JNIImageReaderContext</span>(JNIEnv* env,</span><br><span class="line">        jobject weakThiz, jclass clazz, <span class="type">int</span> maxImages) :</span><br><span class="line">    <span class="built_in">mWeakThiz</span>(env-&gt;<span class="built_in">NewGlobalRef</span>(weakThiz)),</span><br><span class="line">    <span class="built_in">mClazz</span>((jclass)env-&gt;<span class="built_in">NewGlobalRef</span>(clazz)),</span><br><span class="line">    <span class="built_in">mFormat</span>(<span class="number">0</span>),</span><br><span class="line">    <span class="built_in">mDataSpace</span>(HAL_DATASPACE_UNKNOWN),</span><br><span class="line">    <span class="built_in">mWidth</span>(<span class="number">-1</span>),</span><br><span class="line">    <span class="built_in">mHeight</span>(<span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxImages; i++) &#123;   <span class="comment">//这是构造上述BufferItem的内容,只申请了4块空间.</span></span><br><span class="line">        BufferItem* buffer = <span class="keyword">new</span> BufferItem;</span><br><span class="line">        mBuffers.<span class="built_in">push_back</span>(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关路径:frameworks&#x2F;base&#x2F;media&#x2F;java&#x2F;android&#x2F;media&#x2F;ImageReader.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attempts to acquire the next image from the underlying native implementation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note that unexpected failures will throw at the JNI level.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> si A blank SurfaceImage.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> One of the &#123;<span class="doctag">@code</span> ACQUIRE_*&#125; codes that determine success or failure.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #ACQUIRE_MAX_IMAGES</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #ACQUIRE_NO_BUFS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #ACQUIRE_SUCCESS</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">acquireNextSurfaceImage</span><span class="params">(SurfaceImage si)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mCloseLock) &#123;</span><br><span class="line">        <span class="comment">// A null image will eventually be returned if ImageReader is already closed.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> ACQUIRE_NO_BUFS;</span><br><span class="line">        <span class="keyword">if</span> (mIsReaderValid) &#123;</span><br><span class="line">            status = nativeImageSetup(si);<span class="comment">//这边会对应到JNI android_media_ImageReader的对应方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">            <span class="keyword">case</span> ACQUIRE_SUCCESS:</span><br><span class="line">                si.mIsImageValid = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> ACQUIRE_NO_BUFS:</span><br><span class="line">            <span class="keyword">case</span> ACQUIRE_MAX_IMAGES: <span class="comment">//这是JNI 上报的最大值</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Unknown nativeImageSetup return code &quot;</span> + status);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only keep track the successfully acquired image, as the native buffer is only mapped</span></span><br><span class="line">        <span class="comment">// for such case.</span></span><br><span class="line">        <span class="keyword">if</span> (status == ACQUIRE_SUCCESS) &#123;</span><br><span class="line">            mAcquiredImages.add(si);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/16/EXj5iBuNPFo3cy4.png" alt="JNI.png"></p><p>相关log 关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CameraService: CameraService::connect call</span><br><span class="line">Camera2ClientBase: Camera 0: Opened</span><br><span class="line">CameraDeviceClient: CameraDeviceClient</span><br><span class="line">open_: open camera</span><br><span class="line">hal3: Constructor</span><br><span class="line">cap_intent=2</span><br><span class="line">ImageReader_JNI</span><br></pre></td></tr></table></figure><p>这是三方打开相机JNI的相关log.这里我们能清楚看到maxImages的值为4. 这也解释通这个三方apk只能拍4张照片的原因.一旦超过4张照片就不再申请新的buffer去拍照存第5张图片.而我们正常apk  有的设置拍照8张后会立马清空缓冲，然后重新拍照,所以不存在这个问题.也有平台专门对JNI进行更好的兼容,所以也不存在这个问题.但是目前看来这个apk 在mtk 和高通不同的项目上也存在拍照4张后无法拍第5张的情况.说明这个apk 确定很拉胯.而且平板项目这个apk没有拍照的功能.</p><p><img src="https://s2.loli.net/2022/05/16/NLPwStgWZJ1hRi5.png" alt="2022-05-16 14-21-45 的屏幕截图.png"></p><h1 id="4-修改方案"><a href="#4-修改方案" class="headerlink" title="4 修改方案"></a>4 修改方案</h1><p>在acquireNextSurfaceImage拿buffer 满的时候.给它逐一释放关闭.image.close();</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">diff --git a/media/java/android/media/ImageReader.java b/media/java/android/media/ImageReader.java</span></span><br><span class="line"><span class="comment">index 87c3bb9..8b7f8d0 100644</span></span><br><span class="line"><span class="comment">--- a/media/java/android/media/ImageReader.java</span></span><br><span class="line"><span class="comment">+++ b/media/java/android/media/ImageReader.java</span></span><br><span class="line"><span class="meta">@@ -36,6 +36,7 @@</span></span><br><span class="line"> import java.util.List;</span><br><span class="line"> import java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"> import java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"><span class="addition">+import android.util.Log;</span></span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * &lt;p&gt;The ImageReader class allows direct application access to image data</span><br><span class="line"><span class="meta">@@ -58,7 +59,7 @@</span></span><br><span class="line">  * production rate.&lt;/p&gt;</span><br><span class="line">  */</span><br><span class="line"> public class ImageReader implements AutoCloseable &#123;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+    private final static String TAG = &quot;qtf&quot;;</span></span><br><span class="line">     /**</span><br><span class="line">      * Returned by nativeImageSetup when acquiring the image was successful.</span><br><span class="line">      */</span><br><span class="line"><span class="meta">@@ -469,6 +470,10 @@</span></span><br><span class="line">                     si.mIsImageValid = true;</span><br><span class="line">                 case ACQUIRE_NO_BUFS:</span><br><span class="line">                 case ACQUIRE_MAX_IMAGES:</span><br><span class="line"><span class="addition">+                    for(Image image : mAcquiredImages)&#123;  //sprd_qtf</span></span><br><span class="line"><span class="addition">+                        image.close();</span></span><br><span class="line"><span class="addition">+                        &#125;</span></span><br><span class="line"><span class="addition">+                    Log.i(TAG, &quot;imageBuffer has been clear!&quot;);</span></span><br><span class="line">                     break;</span><br><span class="line">                 default:</span><br><span class="line">                     throw new AssertionError(&quot;Unknown nativeImageSetup return code &quot; + status);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-lightroomv&quot;&gt;&lt;a href=&quot;#1-lightroomv&quot; class=&quot;headerlink&quot; title=&quot;1 lightroomv&quot;&gt;&lt;/a&gt;1 lightroomv&lt;/h1&gt;&lt;p&gt;三方apk lightroomv 拍照. 一次性只能拍照4张</summary>
      
    
    
    
    <category term="3rd" scheme="https://joeforkyou.github.io/categories/3rd/"/>
    
    
    <category term="3rd" scheme="https://joeforkyou.github.io/tags/3rd/"/>
    
  </entry>
  
  <entry>
    <title>linux下openCV搭建</title>
    <link href="https://joeforkyou.github.io/2024/11/10/%E6%90%AD%E5%BB%BA/linux%E4%B8%8BopenCV%E6%90%AD%E5%BB%BA/"/>
    <id>https://joeforkyou.github.io/2024/11/10/%E6%90%AD%E5%BB%BA/linux%E4%B8%8BopenCV%E6%90%AD%E5%BB%BA/</id>
    <published>2024-11-09T19:09:18.000Z</published>
    <updated>2024-11-09T22:22:05.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-依赖项"><a href="#1-依赖项" class="headerlink" title="1 依赖项"></a>1 依赖项</h1><p>先下载好相关的依赖项目.确保编译成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev</span><br><span class="line">sudo apt-get install libopencv-dev</span><br></pre></td></tr></table></figure><h1 id="2-源码编译"><a href="#2-源码编译" class="headerlink" title="2 源码编译"></a>2 源码编译</h1><p>clone 源码,我在gitee上放了一份。但是呢，实际上cmake的时候,部分内容还是会链接到github上。如果某些同学连接不到github的网站,那也没辙。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/joenero/opencv.git</span><br></pre></td></tr></table></figure><p>进入源码目录,创建一个单独文件build</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd opencv</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure><p>cmake 一下到&#x2F;usr&#x2F;local&#x2F;目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure><p>执行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make -j8</span><br></pre></td></tr></table></figure><p>将make生成的文件下载到系统目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h1><p>用vim打开这个文件。因为这些只读文件。有些文本编辑器可能无法强制修改。但是vim是万能的。强制保存命令为 : w ! sudo tee %</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>在打开的文件添加makefile安装路劲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib</span><br></pre></td></tr></table></figure><p>再运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h1 id="4示例代码"><a href="#4示例代码" class="headerlink" title="4示例代码"></a>4示例代码</h1><h2 id="4-1-cmake"><a href="#4-1-cmake" class="headerlink" title="4.1 cmake"></a>4.1 cmake</h2><p>cmakelist.txt添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include_directories(/usr/local/include/opencv4/opencv2)</span><br><span class="line">set (OpenCV_LIBS /usr/local/lib)</span><br><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line">target_link_libraries(helloCV $&#123;OpenCV_LIBS&#125;) #helloCV 工程名字</span><br></pre></td></tr></table></figure><p>完整的cmakelist.txt如下:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.17</span>)</span><br><span class="line"><span class="keyword">project</span>(myTool)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(/usr/local/<span class="keyword">include</span>/opencv4/opencv2)</span><br><span class="line"><span class="keyword">set</span> (OpenCV_LIBS /usr/local/lib)</span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">add_executable</span>(myTool main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(myTool <span class="variable">$&#123;OpenCV_LIBS&#125;</span>) <span class="comment">#helloCV 工程名字</span></span><br></pre></td></tr></table></figure><p>demon代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;../test.jpeg&quot;</span>);</span><br><span class="line"> <span class="comment">//   cout&lt;&lt;img;</span></span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;My picture: &quot;</span>&lt;&lt; img.<span class="built_in">size</span>() &lt;&lt;endl;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;image&quot;</span>,img);</span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现报错： Gtk-Message: 21:57:35.293: Failed to load module “canberra-gtk-module” 则安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcanberra-gtk-module</span><br></pre></td></tr></table></figure><h2 id="4-2-Qt使用"><a href="#4-2-Qt使用" class="headerlink" title="4.2 Qt使用"></a>4.2 Qt使用</h2><p>在.pro文件中添加如下内容,根据个人情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += /usr/local/include \</span><br><span class="line">                /usr/local/include/opencv4 \</span><br><span class="line"></span><br><span class="line">LIBS += /usr/local/lib/libopencv*</span><br></pre></td></tr></table></figure><p>出现这个错误，只需要在对应的文件中添加头文件<br>#include &lt;opencv2&#x2F;highgui&#x2F;highgui_c.h&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenNCC_View/widget.cpp:330: error: ~~‘cvGetWindowHandle’~~ was not declared in this scope</span><br><span class="line">                 if (!cvGetWindowHandle(&quot;OpenNCC&quot;))</span><br><span class="line">                      ^~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-依赖项&quot;&gt;&lt;a href=&quot;#1-依赖项&quot; class=&quot;headerlink&quot; title=&quot;1 依赖项&quot;&gt;&lt;/a&gt;1 依赖项&lt;/h1&gt;&lt;p&gt;先下载好相关的依赖项目.确保编译成功。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext</summary>
      
    
    
    
    <category term="linux" scheme="https://joeforkyou.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://joeforkyou.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令之AWK过滤提取需要的信息</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Linux/Linux-%E5%91%BD%E4%BB%A4%E4%B9%8BAWK%E8%BF%87%E6%BB%A4%E6%8F%90%E5%8F%96%E9%9C%80%E8%A6%81%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Linux/Linux-%E5%91%BD%E4%BB%A4%E4%B9%8BAWK%E8%BF%87%E6%BB%A4%E6%8F%90%E5%8F%96%E9%9C%80%E8%A6%81%E7%9A%84%E4%BF%A1%E6%81%AF/</id>
    <published>2024-11-09T19:07:29.000Z</published>
    <updated>2024-11-09T22:26:16.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>AWK是一个优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。这种编程及数据操作语言（其名称得自于它的创始人阿尔佛雷德·艾侯、彼得·温伯格和布莱恩·柯林汉姓氏的首个字母）的最大功能取决于一个人所拥有的知识。awk经过改进生成的新的版本nawk,gawk，现在默认linux系统下日常使用的是gawk，用命令可以查看正在应用的awk的来源（ls -l &#x2F;bin&#x2F;awk ）</p><h1 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2 基本用法"></a>2 基本用法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;pattern + action&#125;&#x27;</span> &lt;file&gt;</span><br></pre></td></tr></table></figure><p>pattern表示在数据中要查找的内容</p><p>action是要执行的一系列的命令</p><p>awk 通过指定分隔符，将一行分为多个字段，依次用 $1、$2 … $n 表示第一个字段、第二个字段… 第n个字段。</p><p>举例有以下一个文件。我们已经知道的格式如下。想过滤的PSS和RSS之后的文件，对应的字段是3和6。通过以下命令即可过滤出第3个字段和第6个字段的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TOTAL PSS:   102206            TOTAL RSS:   127132      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102438            TOTAL RSS:   127364      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102494            TOTAL RSS:   127420      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102578            TOTAL RSS:   127504      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102610            TOTAL RSS:   127536      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102558            TOTAL RSS:   127484      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102378            TOTAL RSS:   127304      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102594            TOTAL RSS:   127520      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102554            TOTAL RSS:   127480      TOTAL SWAP (KB):        0</span><br><span class="line">TOTAL PSS:   102262            TOTAL RSS:   127188      TOTAL SWAP (KB):        0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print $3, $6&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><h2 id="2-1-分隔符"><a href="#2-1-分隔符" class="headerlink" title="2.1 分隔符"></a>2.1 分隔符</h2><p>awk默认分割符是空格和制表符,上面的例子中,若希望把逗号去掉则加 -F即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F &#x27;:|,&#x27; &#x27;&#123;print $3 $6&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><p>这里制定冒号（:）和逗号（,）作为作为分割符号</p><h2 id="2-2-条件判断"><a href="#2-2-条件判断" class="headerlink" title="2.2 条件判断"></a>2.2 条件判断</h2><p>将第三个字段满足小于102262的数字真与否打印出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;print $3&lt;102262&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><p>打印结果为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>将第三个字段满足小于102262的那一行的信息打印出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;$3 &lt;102262 &#123;print $0&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><p>打印结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOTAL PSS:   102206            TOTAL RSS:   127132      TOTAL SWAP (KB):        0</span><br></pre></td></tr></table></figure><h2 id="2-3-统计计算"><a href="#2-3-统计计算" class="headerlink" title="2.3 统计计算"></a>2.3 统计计算</h2><h3 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN &#123;max=0&#125; &#123;if($3&gt;max) max=$3&#125; END &#123;print &quot;max PSS:&quot;, max&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><h3 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN &#123;min=102262&#125; &#123;if($3&lt;min) min=$3&#125; END &#123;print &quot;min PSS:&quot;, min&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure><h3 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN &#123;sum=0&#125; &#123;sum+=$3&#125; END &#123;print &quot;mean steer:&quot;, sum/NR&#125;&#x27; hal_PSS.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;AWK是一个优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。这种编程及数据操作语言（其名称</summary>
      
    
    
    
    <category term="linux" scheme="https://joeforkyou.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://joeforkyou.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>火焰图抓取</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/%E7%81%AB%E7%84%B0%E5%9B%BE%E6%8A%93%E5%8F%96/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/%E7%81%AB%E7%84%B0%E5%9B%BE%E6%8A%93%E5%8F%96/</id>
    <published>2024-11-09T18:45:27.000Z</published>
    <updated>2024-11-09T22:24:03.394Z</updated>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>Simpleperf 是 Android 的原生 CPU 分析工具。 它可用于分析 Android 应用程序和在 Android 上运行的本机进程。 它可以在 Android 上分析 Java 和 C++ 代码。 simpleperf 可执行文件可以在 Android &gt;&#x3D;L 上运行，而 Python 脚本可以在 Android &gt;&#x3D; N 上使用。</p><p>火焰图是基于 perf 结果产生的 SVG 图片，用来展示进程在一段时间 CPU 的调用栈。</p><p>现代的CPU具有一个硬件组件，称为性能监控单元(PMU)。PMU具有一些硬件计数器，计数一些诸如 经历了多少次CPU周期，执行了多少条指令，或发生了多少次缓存未命中 等的事件。</p><p>Linux内核将这些硬件计数器包装到硬件perf事件 (hardware perf events)中。此外，Linux内核还提供了独立于硬件的软件事件和跟踪点事件。Linux内核通过 perf_event_open 系统调用将这些都暴露给了用户空间，这正是simpleperf所使用的机制。</p><p>Simpleperf具有三个主要的功能：stat,record 和 report。</p><p>Stat命令给出了在一个时间段内被分析的进程中发生了多少事件的摘要。以下是它的工作原理：</p><pre><code>给定用户选项，simpleperf通过对linux内核进行系统调用来启用分析。Linux 内核在调度到被分析进程时启用计数器。分析之后，simpleperf从内核读取计数器，并报告计数器摘要。</code></pre><p>Record 命令在一段时间内记录剖析进程的样本。它的工作原理如下：</p><pre><code>给定用户选项，simpleperf通过对linux内核进行系统调用来启用分析。Simpleperf 在simpleperf 和 linux 内核之间创建映射缓冲区。Linux 内核在调度到被分析进程时启用计数器。每次给定数量的事件发生时，linux 内核将样本转储到映射缓冲区。Simpleperf 从映射缓冲区读取样本并生成 perf.data。</code></pre><p>Report 命令读取 “perf.data” 文件及所有被剖析进程用到的共享库，并输出一份报告，展示时间消耗在了哪里。</p><h1 id="2-抓取火焰图"><a href="#2-抓取火焰图" class="headerlink" title="2 抓取火焰图"></a>2 抓取火焰图</h1><p>simpleperf是集成在谷歌内部.直接使用即可</p><p>抓取30s的perf.data 路径随便你. 我一般放在data&#x2F;vendor&#x2F;camera_dump</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">adb shell simpleperf record -p 13248 -g --duration 30 -o /sdcard/perf.data</span><br><span class="line"></span><br><span class="line">adb shell simpleperf record -p 1791 -g --duration 30 -o /data/vendor/camera_dump/simpleperf_mcu.data</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">adb shell 进入到手机:</span><br><span class="line">simpleperf record -g -p `pidof cameraserver` --duration 60 -o /sdcard/perf.data</span><br><span class="line">simpleperf record -g -p `pidof camerahalserver` --duration 60 -o /sdcard/perf.data</span><br><span class="line">//示例中的 &quot; -p 13248 &quot; 指的是需要分析的进程号 </span><br><span class="line">//示例中的 &quot; -p 1791 &quot; 指的是需要分析的进程号 </span><br></pre></td></tr></table></figure><h1 id="3-SDK火焰图"><a href="#3-SDK火焰图" class="headerlink" title="3 SDK火焰图"></a>3 SDK火焰图</h1><p>谷歌官网下载Android NDK： <a href="https://developer.android.google.cn/ndk/downloads/">https://developer.android.google.cn/ndk/downloads/</a></p><p>进入到android-ndk-r25b-linux&#x2F;android-ndk-r25b&#x2F;simpleperf<br>将上述生产的perf.data文件拉取出来放到这个同级目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/perf.data</span><br></pre></td></tr></table></figure><p>直接运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python report_html.py</span><br></pre></td></tr></table></figure><p>会生成对应的火焰图.这个火焰图有三种呈现方式.呈现的偏重点不一样.</p><p>以下都是进入到adb shell中执行操作:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MCPS每秒百万个时钟</span><br><span class="line">（Million Clocks Per Second）</span><br><span class="line">simpleperf record -g -e cpu-cycles -p `pidof camerahalserver` --duration 60 -o /sdcard/perf.data --call-graph dward</span><br><span class="line"></span><br><span class="line">MIPS每秒数百万条指令</span><br><span class="line">（Million Instructions Per Second）</span><br><span class="line">simpleperf record -g -e instructions -p `pidof camerahalserver` --duration 60 -o /sdcard/perf.data --call-graph dward</span><br><span class="line"></span><br><span class="line">MCPS_MIPS:</span><br><span class="line">simpleperf record -g -e cpu-cycles,instructions -p `pidof camerahalserver` --duration 60 -o /sdcard/perf.data --call-graph dward</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以将相关线程合入到一个报告表中</span></span><br><span class="line">simpleperf record -g -e cpu-cycles,instructions -p `pidof camerahalserver`,`pidof cameraserver`,`pidof com.sec.android.app.camera` --duration 60 -o /sdcard/perf.data --call-graph dward</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">simpleperf record -g --exclude-pid 813 880 11872 --duration 60 -o /sdcard/perf.data --call-graph dwarf</span><br><span class="line"></span><br><span class="line">-e cpu-cycles</span><br><span class="line"></span><br><span class="line">python report_html.py</span><br></pre></td></tr></table></figure><h1 id="4-分析火焰图"><a href="#4-分析火焰图" class="headerlink" title="4 分析火焰图"></a>4 分析火焰图</h1><p>火焰图x-y轴代表</p><ul><li><p>x轴代表的不是时间,而是采样总量</p></li><li><p>y轴代表方法的调用栈深度,倘若方法调用用的越多,火焰越高,顶部的栈就是当前正在执行的方法</p></li></ul><p>栈宽含义(cpu时间)</p><ul><li>宽度可以理解为CPU采样率的占比,越宽代表当前栈在采样数中占比高,其可能为三种含义:<ol><li>函数运行时间较长</li><li>该函数被调用次数多</li></ol></li></ul><p>平顶现象：</p><ul><li>平顶现象是由于当前程序的采样数在总采样数中占用过高导致的,出现这种现象需要特意关注一下程序具体的调用栈,采样比例占用</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;Simpleperf 是 Android 的原生 CPU 分析工具。 它可用于分析 Androi</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>一篇文章入门python去写shell</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Python/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%85%A5%E9%97%A8python%E5%8E%BB%E5%86%99shell/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Python/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%85%A5%E9%97%A8python%E5%8E%BB%E5%86%99shell/</id>
    <published>2024-11-09T18:44:14.000Z</published>
    <updated>2024-11-09T22:26:22.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h1><p>有的编程语言要求必须提前将所有源代码一次性转换成二进制指令，也就是生成一个可执行程序（比如 Windows 下的 .exe 文件），比如C语言、<a href="http://c.biancheng.net/cplus/">C++</a>、Golang、<a href="http://c.biancheng.net/asm/">汇编语言</a>等，它们都属于<strong>编译型语言</strong>，使用的转换工具称为<strong>编译器</strong>。</p><p>有的编程语言可以一边执行一边转换，需要哪些源代码就转换哪些源代码，不会生成可执行程序，比如 <a href="http://c.biancheng.net/python/">Python</a>、<a href="http://c.biancheng.net/js/">JavaScript</a>、<a href="http://c.biancheng.net/php/">PHP</a>、Shell 等，这类编程语言称为<strong>解释型语言</strong>，使用的转换工具称为<strong>解释器</strong></p><p>注意:python使用的是对其方式来区分同一级的逻辑控制。不使用分号(；)所以设置的时候，一定要设置好一个tab对4个空格，不要使用tab,不然换到其他编辑器中，容易报语法错误。tab和空格不要混用。</p><p>python 中都是通过import去导入一些系统包或者自己写的包。这个和java的操作很相似,也和c中的#include &lt;某些.h&gt;相似。</p><p>毕竟市面上绝大多数的python的底层逻辑都是用c去写的。</p><p>加减乘除取余就不赘述了。所有编程的语法都是大同小异的。</p><p>python在linux的环境下不需要安装，我们使用的图形化界面都是以python和一些桌面管理为基础的。</p><p>一般存在的路径在&#x2F;usr&#x2F;bin&#x2F;python, 查看python 默认的版本,直接python -v</p><p>python文件开头解释器说明。我是用python3版本的。编码格式为utf-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>函数入口我一般是这样定义的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>然后在定义出main函数的运行内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">执行语句</span><br></pre></td></tr></table></figure><h2 id="1-1-流程控制"><a href="#1-1-流程控制" class="headerlink" title="1.1 流程控制"></a>1.1 流程控制</h2><p>选择控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ifTest</span>():</span><br><span class="line">    i = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;随机生成的数字为&quot;</span>,i)</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是个偶数&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是个奇数&quot;</span>)</span><br></pre></td></tr></table></figure><p>选择控制的格式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">执行命令</span><br><span class="line"><span class="keyword">elif</span> 条件:</span><br><span class="line">执行命令</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">执行命令</span><br></pre></td></tr></table></figure><p>循环控制 while循环和for循环的示例如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">whileTest</span>(<span class="params">i</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> :</span><br><span class="line">        i -=<span class="number">1</span></span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;循环的第&quot;</span>,count,<span class="string">&quot;次&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forTest</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;循环的第&quot;</span>,count,<span class="string">&quot;次&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,i,<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;步进循环的第&quot;</span>,count,<span class="string">&quot;次&quot;</span>)</span><br></pre></td></tr></table></figure><p>python不提供switch语句。虽然可以自己实现，但是我觉得没啥必要的。</p><h2 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h2><p>python中有6个标准的数据类型:</p><ul><li>Number(数字型号)</li><li>String(字符串型号)</li><li>List(列表)</li><li>Tuple(元组)</li><li>Sets(集合)</li><li>Dictionaries(字典)</li></ul><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>int(x) 将x转换为一个整数。</p><p>float(x) 将x转换到一个浮点数。</p><p>complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。</p><p>complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>字符串直接拿引号包起来就可以了。</p><p>索引下标[-1]表示倒数第一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">s1 = s[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s[0] = &#x27;</span> + s1)   <span class="comment">#s[0] = 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s[3] = &#x27;</span>+ s[<span class="number">3</span>])  <span class="comment">#s[3] = 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;倒数第三个数为：&#x27;</span> + s[-<span class="number">3</span>])   <span class="comment">#倒数第三个数为：6</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最后一个数为：&#x27;</span> + s[-<span class="number">1</span>])     <span class="comment">#最后一个数为：8</span></span><br></pre></td></tr></table></figure><p>切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">s2 = s[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s[0:3] = &#x27;</span> + s2)     </span><br><span class="line"><span class="comment">#s[0:3] = 012</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;整个字符串如下：&#x27;</span> + s[:])    </span><br><span class="line"><span class="comment">#整个字符串如下：0123456789</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;整个字符串如下：&#x27;</span> + s[<span class="number">0</span>:])   </span><br><span class="line"><span class="comment">#整个字符串如下：0123456789</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;前两个字符：&#x27;</span> + s[:<span class="number">2</span>])      </span><br><span class="line"><span class="comment">#前两个字符：01</span></span><br></pre></td></tr></table></figure><p>跳首</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;01234567489&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]) <span class="comment">#行首0,行尾6，间隔2 取 打印出024</span></span><br><span class="line"><span class="built_in">print</span>(s[::<span class="number">2</span>])      <span class="comment">#024649</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">4</span>:<span class="number">0</span>:-<span class="number">1</span>])   <span class="comment">#倒着取:4321</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>::-<span class="number">1</span>])    <span class="comment">#3210</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>::-<span class="number">1</span>])   <span class="comment">#98476543210</span></span><br></pre></td></tr></table></figure><h4 id="常见的字符串操作"><a href="#常见的字符串操作" class="headerlink" title="常见的字符串操作"></a>常见的字符串操作</h4><ul><li><p>大小写操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;adbCDefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;首字母大写&quot;</span>,s.capitalize())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全部大写  &quot;</span>,s.upper())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全部小写  &quot;</span>,s.lower())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;大小写互换&quot;</span>,s.swapcase())</span><br></pre></td></tr></table></figure></li><li><p>删除空格操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;  xtt  123&#x27;</span></span><br><span class="line">s_1 = s.strip()             <span class="comment">#删除字符串前后的空格    </span></span><br><span class="line"><span class="built_in">print</span>(s_1)                  <span class="comment">#xtt 123</span></span><br><span class="line">s_2 = s.strip(<span class="string">&#x27;%&#x27;</span>)          <span class="comment">#删除字符串前后的空格 </span></span><br><span class="line"><span class="built_in">print</span>(s_2)                  <span class="comment">#  xtt  123</span></span><br><span class="line">s_3 = s.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)     <span class="comment">#替换掉所有的空格</span></span><br><span class="line"><span class="built_in">print</span>(s_3)                  <span class="comment">#使用join()方法将字符串中所有的空格删除</span></span><br><span class="line">s=<span class="string">&#x27; This is a demo code&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(s.split()))   <span class="comment">#Thisisademo</span></span><br><span class="line"><span class="comment">#其中，join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</span></span><br></pre></td></tr></table></figure></li><li><p>计算字符出现的次数count</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;  xtt  123 xtt&#x27;</span></span><br><span class="line">count = s.count(<span class="string">&quot;t&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(count)  <span class="comment">#打印出现的次数为4次</span></span><br></pre></td></tr></table></figure></li><li><p>分割。split不加任何参数则默认空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;I am the king of amazon!!!&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;I am the: king: of amazon:&#x27;</span></span><br><span class="line">s_1 = s1.split()</span><br><span class="line"><span class="built_in">print</span>(s_1)              <span class="comment">#[&#x27;I&#x27;, &#x27;am&#x27;, &#x27;the&#x27;, &#x27;king&#x27;, &#x27;of&#x27;, &#x27;amazon!!!&#x27;]</span></span><br><span class="line">s_2 = s2.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s_2)              <span class="comment">#[&#x27;I am the&#x27;, &#x27; king&#x27;, &#x27; of amazon&#x27;, &#x27;&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>格式化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s12_1 = <span class="string">&#x27;我叫&#123;&#125;,今年&#123;&#125;岁，爱好&#123;&#125;,再说一下我叫&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;小明&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;学习&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s12_1)  </span><br><span class="line">s12_2 = <span class="string">&#x27;我叫&#123;0&#125;,今年&#123;1&#125;岁，爱好&#123;2&#125;,再说一下我叫&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;小明&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;学习&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s12_2)</span><br><span class="line">s12_3 = s1 = <span class="string">&#x27;我叫&#123;name&#125;,今年&#123;age&#125;岁，爱好&#123;hobby&#125;,再说一下我叫&#123;name&#125;&#x27;</span>.<span class="built_in">format</span>(name = <span class="string">&#x27;小明&#x27;</span>,age = <span class="number">18</span>,hobby = <span class="string">&#x27;学习&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s12_3)</span><br></pre></td></tr></table></figure></li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>list列表可以存放多个值，创建list列表，使用[ ]，多个值之间用逗号隔开，不限制数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 =[<span class="string">&quot;joenero&quot;</span>,<span class="string">&quot;amazon&quot;</span>,<span class="string">&quot;joker&quot;</span>,<span class="string">&quot;father&quot;</span>,<span class="string">&quot;was&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(l1)<span class="comment">#[&#x27;joenero&#x27;, &#x27;amazon&#x27;, &#x27;joker&#x27;, &#x27;father&#x27;, &#x27;was&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(l1[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])<span class="comment">#[&#x27;joenero&#x27;, &#x27;joker&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(l1[-<span class="number">3</span>:-<span class="number">1</span>])<span class="comment">#[&#x27;joker&#x27;, &#x27;father&#x27;]</span></span><br></pre></td></tr></table></figure><p>list相关的方法如下:</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.append(元素)</td><td>向列表最后追加一个元素</td></tr><tr><td>.extend(元素)</td><td>向列表最后追加多个元素</td></tr><tr><td>.insert(下标,元素)</td><td>向指定的下标位置插入元素</td></tr><tr><td>.pop(下标)</td><td>移除下标指定的元素，如果没有指定的下标，则删除最后一个元素</td></tr><tr><td>.remove(元素)</td><td>删除指定元素</td></tr><tr><td>.clear()</td><td>清空列表</td></tr><tr><td>.index(元素)</td><td>获取指定元素在list列表中的第一次出现的下标</td></tr><tr><td>.count(元素)</td><td>统计元素在list列表中出现的次数</td></tr><tr><td>.reverse()</td><td>反转list列表</td></tr><tr><td>.sort()</td><td>排序.默认是升序，降序添加参数:reverse&#x3D;True</td></tr></tbody></table><p>这三比较复杂,会在之后单独拎出来讲解</p><ul><li>Tuple(元组)</li><li>Sets(集合)</li><li>Dictionaries(字典)</li></ul><h1 id="2-添加help参数"><a href="#2-添加help参数" class="headerlink" title="2 添加help参数"></a>2 添加help参数</h1><p>一般我们写一个需要外部输入的参数，我们都需要借用解析器argparse去获取和解析对应的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">help</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;PSS文件&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-o&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;生成的图片&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="built_in">print</span>(args)  <span class="comment">#打印存储的所有输入值</span></span><br><span class="line">    <span class="built_in">print</span>(args.f)<span class="comment">#打印存储的-f 之后的值</span></span><br><span class="line">    <span class="built_in">print</span>(args.o)<span class="comment">#打印存储的-o 之后的值</span></span><br></pre></td></tr></table></figure><p>然后运行这个py文件后面加-h的参数就可以显示对应的help值</p><p>例如上面的内容显示如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python plot.py -h</span><br><span class="line">usage: plot.py [-h] [-f F] [-o O]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help  show this help message and exit</span><br><span class="line">  -f F        PSS文件</span><br><span class="line">  -o O        生成的图片</span><br></pre></td></tr></table></figure><h1 id="3-文件操作"><a href="#3-文件操作" class="headerlink" title="3 文件操作"></a>3 文件操作</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><p>open</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = open(&quot;fileName.txt&quot;,mode=&quot;r&quot;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>‘r’</td><td>以「只读」模式打开文件，如果指定文件不存在，则会报错，默认情况下文件指针指向文件开头</td></tr><tr><td>‘w’</td><td>以「只写」模式打开文件，如果文件不存在，则根据 filename 创建相应的文件，如果文件已存在，则会覆盖原文件</td></tr><tr><td>‘a’</td><td>以「追加」模式打开文件，如果文件已存在，文件指针会指向文件尾部，将内容追加在原文件后面，如果文件不存在，则会新建文件且写入内容</td></tr><tr><td>‘t’</td><td>以「文本文件」模式打开文件</td></tr><tr><td>‘b’</td><td>以「二进制」模式打开文件，主要用于打开图片、音频等非文本文件</td></tr><tr><td>‘+’</td><td>打开文件并允许更新（可读可写），也就是说，使用参数 w+、a+ 也是可以读入文件的，在使用的时候，需要注意区别</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;fileName.txt&quot;</span>,mode=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>,num,<span class="string">&quot;行内容:&quot;</span>,line)</span><br><span class="line">    num +=<span class="number">1</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure></li><li><p>read(): 直接读取整个文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;fileName.txt&quot;</span>,mode=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">fileCon = file.read()</span><br><span class="line"><span class="built_in">print</span>(fileCon)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=<span class="string">r&quot;fileName.txt&quot;</span>,mode=<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure></li><li><p>readline():读一行</p></li><li><p>readlines():按行读取所有数据。结果为列表，一行为一个成员。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>直接举个实际例子如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@File    : main.py</span></span><br><span class="line"><span class="string">@Author  : JoeNero</span></span><br><span class="line"><span class="string">@Time    : 2022/12/30 16:32</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.signal <span class="keyword">import</span> find_peaks</span><br><span class="line"></span><br><span class="line">fileName = <span class="string">&quot;&quot;</span></span><br><span class="line">outTxt   = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">INFO</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">help</span>():</span><br><span class="line">    <span class="keyword">global</span> fileName</span><br><span class="line">    <span class="keyword">global</span> outTxt</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-f&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;对应的TXT文件&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-o&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;生成的文件&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    fileName = args.f</span><br><span class="line">    outTxt = args.o</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取解析txt</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readTxt</span>(<span class="params">filename</span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    aInfo = INFO()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fileinput.<span class="built_in">input</span>(filename):</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">            temp = line.split(<span class="string">&#x27;username:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            temp = temp.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="comment"># print(&quot;temp&quot;,temp)</span></span><br><span class="line">            aInfo.username = temp</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            temp = line.split(<span class="string">&#x27;password:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># print(&quot;temp&quot;,temp)</span></span><br><span class="line">            temp = temp.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">            aInfo.password = temp</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;username&quot;</span>,aInfo.username,<span class="string">&quot;password&quot;</span>,aInfo.password)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#主函数入口</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">help</span>()</span><br><span class="line">    <span class="keyword">if</span> fileName == <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(fileName):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入文件不能为空&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        readTxt(fileName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>我这边是有个外部文件。其格式如下，可以通过以上的内容来读取解析其中的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username:xtt</span><br><span class="line">password:123456</span><br></pre></td></tr></table></figure><p>生成临时文件. 路径为&#x2F;tmp&#x2F;tmp06pz62p5 文件名字为随机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    dir_name = tempfile.mkdtemp()</span><br><span class="line">    <span class="built_in">print</span> (dir_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="4-shell"><a href="#4-shell" class="headerlink" title="4 shell"></a>4 shell</h1><p>python有很多操作shell的方式。需要先import 的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><p>第一种方式是直接用os.system(“command”)，其中返回0,表示执行命令成功，明显的缺点是无法将返回的值保存下来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devices = os.system(<span class="string">&quot;adb devices&quot;</span>)</span><br></pre></td></tr></table></figure><p>第二种方式是用os.popen(“command”)</p><p>os.popen() 返回的是 file read 的对象，对其进行读取 read() 的操作可以看到执行的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devices = os.popen(<span class="string">&quot;adb devices&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;deviecs = &quot;</span>,devices.read())</span><br></pre></td></tr></table></figure><p>打印输出的结果为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deviecs =  List of devices attached</span><br><span class="line">L7Z5AABQAILZPBTO        device</span><br></pre></td></tr></table></figure><p>配合下将其修改成如下的内容，就可以把对应的adb设备获取出来，当前只能获取到最上面的那个，可以自己根据逻辑来完善</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">devices = os.popen(<span class="string">&quot;adb  devices|awk &#x27;&#123;print $1&#125;&#x27;|sed -n &#x27;2p&#x27;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;deviecs = &quot;</span>,devices.read())</span><br></pre></td></tr></table></figure><p>注意:popen中主要涉及到文件上的操作，但是一些shell中的sleep和拍照等操作不需要返回值还是用system来操作。</p><p>我实际操作拍照的时候，发现存在的这个问题。popen不生效，只有system的才生效。</p><h1 id="5-类"><a href="#5-类" class="headerlink" title="5 类"></a>5 类</h1><p>python中的类和c++的及其相似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义INFO类,用来存储</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">INFO</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line">aInfo = INFO()</span><br><span class="line">aInfo.username = temp</span><br><span class="line">aInfo.password = temp</span><br></pre></td></tr></table></figure><h1 id="6-import"><a href="#6-import" class="headerlink" title="6 import"></a>6 import</h1><p>python import 和包含头文件的用法相似。</p><p>在同一个目录下直接import 文件名即可</p><p>导入模块的方式有如下几种:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hello.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say</span> ():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello,World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#say.py</span></span><br><span class="line"><span class="keyword">import</span> hello</span><br><span class="line">hello.say()</span><br></pre></td></tr></table></figure><p>临时添加模块完整路径如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(&#x27;D:\\python_module&#x27;)</span><br></pre></td></tr></table></figure><p>“from 模块名 import 成员”的形式直接导入指定成员</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-基础&quot;&gt;&lt;a href=&quot;#1-基础&quot; class=&quot;headerlink&quot; title=&quot;1 基础&quot;&gt;&lt;/a&gt;1 基础&lt;/h1&gt;&lt;p&gt;有的编程语言要求必须提前将所有源代码一次性转换成二进制指令，也就是生成一个可执行程序（比如 Windows 下的 .exe </summary>
      
    
    
    
    <category term="python" scheme="https://joeforkyou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://joeforkyou.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>anaconda3管理python包环境说明</title>
    <link href="https://joeforkyou.github.io/2024/11/10/%E6%90%AD%E5%BB%BA/anaconda3%E7%AE%A1%E7%90%86python%E5%8C%85%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E/"/>
    <id>https://joeforkyou.github.io/2024/11/10/%E6%90%AD%E5%BB%BA/anaconda3%E7%AE%A1%E7%90%86python%E5%8C%85%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E/</id>
    <published>2024-11-09T18:38:18.000Z</published>
    <updated>2024-11-09T22:21:55.480Z</updated>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>在实际项目开发的时候,我们往往需要不同的python包版本和环境。</p><p>pycharm对此就有很好的器包环境。</p><p>今天要介绍的是anaconda3 这个环境包管理。</p><p>Conda as a package manager helps you find and install packages. If you need a package that requires a different version of Python, you do not need to switch to a different environment manager, because conda is also an environment manager. With just a few commands, you can set up a totally separate environment to run that different version of Python, while continuing to run your usual version of Python in your normal environment.</p><p>—-Conda官网</p><p>anaconda相当于一个包的管理者，去管理这些不同的环境，你可以本地建立多个虚拟环境，并且互相不影响。</p><h1 id="2-安装配置"><a href="#2-安装配置" class="headerlink" title="2 安装配置"></a>2 安装配置</h1><p>下载官网<a href="http://continuum.io/downloads">http://continuum.io/downloads</a></p><p>下载下来一路回车,配置好对应的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 Anaconda3-2021.11-Linux-x86_64.sh</span><br><span class="line">./Anaconda3-2021.11-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>添加conda环境变量,根据本地下载的实际地方路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">export PATH=~/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><p>由于我本地需要一个测试ITS的环境,并且在R版本和S版本的架构中.python的版本要求也不同,所以我同时也需要本地有python2和python3</p><p>新建一个环境，设定的python版本为python2.7，然后会跳出给你安装的相关配置，一路回车。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py2 python=2.7</span><br></pre></td></tr></table></figure><p>激活环境命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate py2</span><br></pre></td></tr></table></figure><p>退出当前环境命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><p>需要在当前环境下安装对应的pip包之前需要先激活对应的环境，然后pip安装即可</p><p>以下是我ITS S版本的python环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py3 python=3.7.9 #这表示创建python版本为3.7.9 ,名字为py3的虚拟环境。不加python=版本 默认是2.7版本</span><br><span class="line">conda activate py3 #激活并进入py3。</span><br><span class="line">conda install opencv=3.4.2 //安装3.4.2版本的opencv 遇见选择Y/N 选择Y 下面都一样</span><br><span class="line">conda install numpy=1.19.2 //安装1.19.2版本的numpy</span><br><span class="line">conda install matplotlib=3.3.2 //安装3.3.2版本的matplotlib</span><br><span class="line">conda install scipy=1.5.2 //安装1.5.2版本的scipy</span><br><span class="line">conda install pyserial=3.5 //安装3.5版本的pyserial</span><br><span class="line">conda install pillow=8.1.0 //安装8.1.0版本的pillow</span><br><span class="line">conda install pyyaml=5.3.1 //安装5.3.1版本的pyyaml</span><br><span class="line">pip install mobly //安装mobly</span><br></pre></td></tr></table></figure><h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h1><p>这边搭建一个AI环境为例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pyAI python=3.7.9</span><br><span class="line">conda activate pyAI #激活并进入环境</span><br><span class="line">pip list #查看当前pip 的包</span><br><span class="line">pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install scikit-learn -i https://pypi.tuna.tsinghua.edu.cn/simple </span><br><span class="line">pip install scipy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install nltk -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install jiaba -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install tensorflow -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install tensorflow_addons  -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>AI安装好，运行如下命令打开对应的界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h1 id="4-使用命令"><a href="#4-使用命令" class="headerlink" title="4 使用命令"></a>4 使用命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs  #查看存在的环境</span><br><span class="line">conda activate 环境 #激活对应的环境</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;在实际项目开发的时候,我们往往需要不同的python包版本和环境。&lt;/p&gt;
&lt;p&gt;pycharm</summary>
      
    
    
    
    <category term="python" scheme="https://joeforkyou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://joeforkyou.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Android编码文件概述</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/Android%E7%BC%96%E7%A0%81%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/Android%E7%BC%96%E7%A0%81%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0/</id>
    <published>2024-11-09T18:35:12.000Z</published>
    <updated>2024-11-09T22:24:13.174Z</updated>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>需要小心的是修改item后要注意CTS测项testGetWithId(android.media.cts.CamcorderProfileTest)，也就是high profile一定要和分辨率的profile适配，比如spec为1920 x 1080的spec(平台所supprot的)<br>那么high的分辨率和1080p的分辨率一定要一样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EncoderProfile</span> <span class="attr">quality</span>=<span class="string">&quot;1080p&quot;</span> <span class="attr">fileFormat</span>=<span class="string">&quot;3gp&quot;</span> <span class="attr">duration</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Video</span> <span class="attr">codec</span>=<span class="string">&quot;h264&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">bitRate</span>=<span class="string">&quot;17000000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">width</span>=<span class="string">&quot;1920&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">height</span>=<span class="string">&quot;1080&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">frameRate</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Audio</span> <span class="attr">codec</span>=<span class="string">&quot;aac&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">bitRate</span>=<span class="string">&quot;128000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">sampleRate</span>=<span class="string">&quot;48000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">channels</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">EncoderProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EncoderProfile</span> <span class="attr">quality</span>=<span class="string">&quot;high&quot;</span> <span class="attr">fileFormat</span>=<span class="string">&quot;3gp&quot;</span> <span class="attr">duration</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Video</span> <span class="attr">codec</span>=<span class="string">&quot;h264&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bitRate</span>=<span class="string">&quot;17000000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">width</span>=<span class="string">&quot;1920&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">height</span>=<span class="string">&quot;1080&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">frameRate</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Audio</span> <span class="attr">codec</span>=<span class="string">&quot;aac&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">bitRate</span>=<span class="string">&quot;128000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">sampleRate</span>=<span class="string">&quot;48000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">channels</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">EncoderProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-标准尺寸"><a href="#2-标准尺寸" class="headerlink" title="2 标准尺寸"></a>2 标准尺寸</h1><p>详细参考谷歌官网说明:</p><p><a href="https://developer.android.com/reference/android/media/CamcorderProfile.html#QUALITY_1080P">https://developer.android.com/reference/android/media/CamcorderProfile.html#QUALITY_1080P</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static final int QUALITY_1080P </span><br><span class="line">public static final int QUALITY_2160P</span><br><span class="line">public static final int QUALITY_2K</span><br><span class="line">public static final int QUALITY_480P</span><br><span class="line">public static final int QUALITY_4KDCI</span><br><span class="line">public static final int QUALITY_720P</span><br><span class="line">public static final int QUALITY_8KUHD</span><br><span class="line">public static final int QUALITY_CIF</span><br><span class="line">public static final int QUALITY_HIGH</span><br><span class="line">public static final int QUALITY_HIGH_SPEED_1080P</span><br></pre></td></tr></table></figure><table><thead><tr><th>标准尺寸</th><th></th><th>常量值</th></tr></thead><tbody><tr><td>QUALITY_1080P</td><td>1920x1080</td><td>6          (0x00000006)</td></tr><tr><td>QUALITY_2160P</td><td>3840x2160</td><td>8          (0x00000008)</td></tr><tr><td>QUALITY_2K</td><td>2048x1080</td><td>12          (0x0000000c)</td></tr><tr><td>QUALITY_480P</td><td>720 x 480</td><td>4          (0x00000004)</td></tr><tr><td>QUALITY_4KDCI</td><td>4096 x 2160</td><td>10          (0x0000000a)</td></tr><tr><td>QUALITY_720P</td><td>1280 x 720</td><td>5          (0x00000005)</td></tr><tr><td>QUALITY_8KUHD</td><td>7680 x 4320</td><td>13          (0x0000000d)</td></tr><tr><td>QUALITY_CIF</td><td>352 x 288</td><td>3          (0x00000003)</td></tr><tr><td>QUALITY_HIGH</td><td>Quality level corresponding to the highest available resolution.</td><td>1          (0x00000001)</td></tr><tr><td>QUALITY_HIGH_SPEED_1080P</td><td>High speed ( &gt;&#x3D; 100fps) quality level corresponding to the 1080p (1920 x 1080 or 1920x1088) resolution.</td><td>2004          (0x000007d4)</td></tr><tr><td>QUALITY_HIGH_SPEED_2160P</td><td>High speed ( &gt;&#x3D; 100fps) quality level corresponding to the 2160p (3840 x 2160) resolution.</td><td>2005          (0x000007d5)</td></tr></tbody></table><p>可以通过如下代码获取到所支持的编码尺寸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static EncoderProfiles getAll (String cameraId, </span><br><span class="line">                int quality)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这个文件实际对应camera video 调用关系.</span><br><span class="line"></span><br><span class="line">系统启动后，通过CamcorderProfile.java：static&#123; &#125; 块，初始化并解析好。以供上层获取。</span><br><span class="line"></span><br><span class="line">进入录像模式后：VideoMode.java：initRecorder——&gt;configRecoderSpec——&gt;getProfile，去获取摄像头或录像的默认配置。</span><br><span class="line"></span><br><span class="line">native层主要是在 /frameworks/av/media/libmedia/MediaProfiles.cpp 文件里加载和检查参数。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;需要小心的是修改item后要注意CTS测项testGetWithId(android.media</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>cmake基础</title>
    <link href="https://joeforkyou.github.io/2024/11/10/CPP/cmake%E5%9F%BA%E7%A1%80/"/>
    <id>https://joeforkyou.github.io/2024/11/10/CPP/cmake%E5%9F%BA%E7%A1%80/</id>
    <published>2024-11-09T18:33:36.000Z</published>
    <updated>2024-11-09T22:24:49.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>选自百度百科:</p><p>CMake是一个跨平台的安装（<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91/1258343?fromModule=lemma_inlink">编译</a>）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件，能测试<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067?fromModule=lemma_inlink">编译器</a>所支持的C++特性,类似<a href="https://baike.baidu.com/item/UNIX/219943?fromModule=lemma_inlink">UNIX</a>下的automake。只是 CMake 的<a href="https://baike.baidu.com/item/%E7%BB%84%E6%80%81%E6%A1%A3/4812025?fromModule=lemma_inlink">组态档</a>取名为 CMakeLists.txt。Cmake 并不直接建构出最终的软件，而是产生标准的建构档（如 Unix 的 Makefile 或 <a href="https://baike.baidu.com/item/Windows/165458?fromModule=lemma_inlink">Windows</a> [Visual C++](<a href="https://baike.baidu.com/item/Visual">https://baike.baidu.com/item/Visual</a> C%2B%2B&#x2F;1811800?fromModule&#x3D;lemma_inlink) 的 projects&#x2F;workspaces），然后再依一般的建构方式使用。这使得熟悉某个<a href="https://baike.baidu.com/item/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/298524?fromModule=lemma_inlink">集成开发环境</a>（IDE）的开发者可以用标准的方式建构他的软件，这种可以使用各平台的原生建构系统的能力是 CMake 和 SCons 等其他类似系统的区别之处。</p><p>linux 下系统直接安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmake</span><br></pre></td></tr></table></figure><p>查看cmake版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br><span class="line">cmake version 3.16.3</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br></pre></td></tr></table></figure><p>我们一般都是通过cmake生成对应的makefile后来运行make。</p><h1 id="2-单个文件"><a href="#2-单个文件" class="headerlink" title="2 单个文件"></a>2 单个文件</h1><p>只有单个main.cpp的时候可以用如下CMakeLists.txt文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake最低版本需求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工程名称</span></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置C标准还是C++标准</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo</span><br><span class="line">        main.cpp)</span><br></pre></td></tr></table></figure><h1 id="3-多个文件夹"><a href="#3-多个文件夹" class="headerlink" title="3 多个文件夹"></a>3 多个文件夹</h1><p>但是实际开发中玩玩会更加复杂。</p><p>比如:下面每个模块都有自己的文件夹,并且每个文件夹下都有自己对应的头文件和源文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── abstract</span><br><span class="line">│   ├── inc</span><br><span class="line">│   │   └── abstractModel.h</span><br><span class="line">│   └── src</span><br><span class="line">│       └── abstractModel.cpp</span><br><span class="line">├── blueEar</span><br><span class="line">│   ├── inc</span><br><span class="line">│   │   └── blueEarModel.h</span><br><span class="line">│   └── src</span><br><span class="line">│       └── blueEarModel.cpp</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── CmakeOut</span><br><span class="line">├── main.cpp</span><br><span class="line">├── out</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><p>这个时候我们可以看如下的内容。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake最低版本需求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工程名称</span></span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置C标准还是C++标准</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#set(CMAKE_C_STANDARD 11) #c标准</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)<span class="comment">#c++标准11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置可执行文件输出路径</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set (EXECUTABLE_OUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/out)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include_directories</span> (   abstract/inc/</span><br><span class="line">                        blueEar/inc/</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">aux_source_directory</span> (abstract/src/ abstract_path)</span><br><span class="line"><span class="keyword">aux_source_directory</span> (blueEar/src/ blueEar_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(demo</span><br><span class="line">        main.cpp</span><br><span class="line">        <span class="variable">$&#123;abstract_path&#125;</span></span><br><span class="line">        <span class="variable">$&#123;blueEar_path&#125;</span>)</span><br></pre></td></tr></table></figure><p>可以看到如上的内容。</p><p>通过include_directories将相关的头文件包含进来</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span></span><br><span class="line">使用的格式如下:</span><br><span class="line"><span class="keyword">include_directories</span> (   abstract/inc/</span><br><span class="line">                        blueEar/inc/</span><br><span class="line">                        )</span><br></pre></td></tr></table></figure><p>另外通过aux_source_directory将相关的cpp文件都加载到对应的变量中</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用的格式如下:</span></span><br><span class="line"><span class="keyword">aux_source_directory</span> (abstract/src/ abstract_path)</span><br><span class="line"><span class="keyword">aux_source_directory</span> (blueEar/src/ blueEar_path)</span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置可执行文件输出路径.会输出到项目文件下的out目录下</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/out)</span><br></pre></td></tr></table></figure><p>cmake过程中会生成大量的中间文件。</p><p>其中的一种做法可以跟我上面一样建立一个 CmakeOut文件夹.</p><p>然后进入到这个文件夹中,运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br></pre></td></tr></table></figure><p>这样就会把编译的中间文件生成到这个目录中,不至于破坏工程的目录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;选自百度百科:&lt;/p&gt;
&lt;p&gt;CMake是一个跨平台的安装（&lt;a href=&quot;https://baike.baidu.com</summary>
      
    
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Andoird camera app从零养成计划【二】</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/APP/APP-2/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/APP/APP-2/</id>
    <published>2024-11-09T18:29:38.000Z</published>
    <updated>2024-11-09T22:25:18.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-API1"><a href="#1-API1" class="headerlink" title="1 API1"></a>1 API1</h1><p>AndroidManifest.xmlAndroidManifest官方解释是应用清单（manifest意思是货单），每个应用的根目录中都必须包含一个，并且文件名必须一模一样。这个文件中包含了APP的配置信息，系统需要根据里面的内容运行APP的代码，显示界面。示例如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.newcamera&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span>/&gt;</span>   //使用camera的权限</span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span> //写文件的权限</span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span>  //<span class="attr">apk图标</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.NewCamera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.PreviewActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>     //<span class="attr">告知打开apk的主Activity的入口</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于API 1 来说.打开camera 的对象已经封装好.在android&#x2F;hardware&#x2F;Camera.java中.</p><p>Camera API 中主要涉及以下几个关键类:</p><ul><li><p>Camera:操作和管理相机资源.支持相机资源切换.设置预览和拍摄尺寸.设置光圈,曝光等相关参数.</p></li><li><p>SurfaceView:用于绘制相机预览图像.提供实时预览的图像</p></li><li><p>SurfaceHolder:用于控制Surface的一个抽象接口.它可以控制Surface的尺寸,格式与像素等.并可以监视Surface的变化.</p></li><li><p>SurfaceHolder.Callback:用于监听Surface状态变化的接口</p></li></ul><p>SurfaceView和普通的View相比有什么区别呢？</p><p>普通View都是共享一个Surface的,所有的绘制也都在UI线程中进行.因为UI线程还要处理其他逻辑.因此对View的更新速度和绘制帧率无法保证.这显然不适合相机实时预览这种情况.因而SurfaceView持有一个单独Surface.它负责管理这个Surface的格式.尺寸以及显示位置,它的Surface绘制也在单独的线程中进行,因而拥有更高的绘制效率和帧率。</p><p>SurfaceHolder.Callback接口里定义了三个函数:</p><ul><li><strong>surfaceCreated(SufaceHolder holder)</strong>;当Surface第一次创建的时候调用.可以在这个方法里调用camera.open(),camera.setPreviewDisplay()来实现打开相机以及连接Camera与Surface等操作</li><li><strong>surfaceChanged(SurfaceHolder holder,int format,int width,int height)</strong>;当Surface的size,format等发生变化的时候调用,可以在这个方法里调用camera.startPreview()开启预览</li><li><strong>surfaceDestroyed(SurfaceHolder holder)</strong>;</li></ul><p>在打开相机前,我们需要获取到相机的一些基础信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getCameraInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//有多少个摄像头</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">numberOfCameras</span> <span class="operator">=</span> Camera.getNumberOfCameras();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numberOfCameras; ++i) &#123;</span><br><span class="line">        <span class="keyword">final</span> Camera.<span class="type">CameraInfo</span> <span class="variable">cameraInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Camera</span>.CameraInfo();</span><br><span class="line"></span><br><span class="line">        Camera.getCameraInfo(i, cameraInfo);</span><br><span class="line">        <span class="comment">//后置摄像头</span></span><br><span class="line">        <span class="keyword">if</span> (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_BACK) &#123;</span><br><span class="line">            faceBackCameraId = i;</span><br><span class="line">            faceBackCameraOrientation = cameraInfo.orientation;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//前置摄像头</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) &#123;</span><br><span class="line">            faceFrontCameraId = i;</span><br><span class="line">            faceFrontCameraOrientation = cameraInfo.orientation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Log.e(TAG,<span class="string">&quot;faceBackCameraId =&quot;</span>+faceBackCameraId+<span class="string">&quot;\tfaceBackCameraOrientation=&quot;</span>+faceBackCameraOrientation);</span><br><span class="line">    Log.e(TAG,<span class="string">&quot;faceFrontCameraId=&quot;</span>+faceFrontCameraId+<span class="string">&quot;\tfaceFrontCameraOrientation=&quot;</span>+faceFrontCameraOrientation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上打印出来的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">02-09 14:05:28.078  5280  5280 E CameraXTT: faceBackCameraId =0faceBackCameraOrientation=90</span><br><span class="line">02-09 14:05:28.078  5280  5280 E CameraXTT: faceFrontCameraId=1faceFrontCameraOrientation=270</span><br></pre></td></tr></table></figure><h2 id="1-1-打开相机"><a href="#1-1-打开相机" class="headerlink" title="1.1 打开相机"></a>1.1 打开相机</h2><p>知道了相机的相关信息,就可以通过对应的CameraID来打开对应的cameraDevices.注意 只针对单摄.双摄打开原理不一样.示例如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.hardware.Camera;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Camera</span> <span class="variable">camera</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">camera = Camera.open(<span class="number">0</span>);   <span class="comment">//open(参数),参数对应的camera id//针对单摄的情况.可以通过这个方法直接打开对应的device设备.</span></span><br><span class="line"></span><br><span class="line">camera.setPreviewDisplay(sfv_preview.getHolder());<span class="comment">//sfv_preview是定义的SurfaceView,用来呈现相机的预览.</span></span><br><span class="line">camera.setDisplayOrientation(<span class="number">90</span>);   <span class="comment">//让相机旋转90度,相机方向不对会出现拉伸情况.</span></span><br><span class="line">camera.startPreview();</span><br></pre></td></tr></table></figure><p>打开相机后可以获取到一个camera的对象.从这个对象里可以获取和设置相机的各种参数信息.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">camera.getParameters();</span><br><span class="line">这个后面跟对应的参数：</span><br><span class="line">例如:</span><br><span class="line"> camera.getParameters().getAntibanding()</span><br><span class="line"> <span class="comment">//获取预览尺寸</span></span><br><span class="line"> Log.e(TAG,<span class="string">&quot;w&quot;</span>+camera.getParameters().getPreviewSize().width+<span class="string">&quot;h=&quot;</span>+camera.getParameters().getPreviewSize().height);</span><br></pre></td></tr></table></figure><h2 id="1-2-关闭相机"><a href="#1-2-关闭相机" class="headerlink" title="1.2 关闭相机"></a>1.2 关闭相机</h2><p>关闭相机要先停止预览再release()即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">camera.stopPreview();</span><br><span class="line">camera.release();</span><br></pre></td></tr></table></figure><h2 id="1-3-拍照"><a href="#1-3-拍照" class="headerlink" title="1.3 拍照"></a>1.3 拍照</h2><p>拍照通过调用Camera的takePicture()方法来完成的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">takePicture(ShutterCallback shutter, PictureCallback raw, PictureCallback postview, PictureCallback jpeg)</span><br></pre></td></tr></table></figure><p>该方法有三个参数</p><ul><li><p>ShutterCallback shutter:在拍照的瞬间被回调.这里通常可以播放”咔擦”的音效</p></li><li><p>PictureCallback raw:返回未经压缩的图像数据</p></li><li><p>PictureCallback postview:返回postview的图像数据</p></li><li><p>PictureCallback jpeg:返回经过JPEG压缩的图像数据</p><p>我们一般用的是最后一个.实现最后一个PictureCallback即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takePic</span><span class="params">()</span>&#123;</span><br><span class="line">        camera.takePicture(<span class="literal">null</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Camera</span>.PictureCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPictureTaken</span><span class="params">(<span class="type">byte</span>[] data, Camera camera)</span> &#123;</span><br><span class="line">                <span class="type">Bitmap</span> <span class="variable">bmp</span> <span class="operator">=</span> BitmapFactory.decodeByteArray(data, <span class="number">0</span> ,data.length);</span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> Environment.getExternalStorageDirectory().toString()</span><br><span class="line">                                +File.separator</span><br><span class="line">                                +<span class="string">&quot;DCIM/Camera&quot;</span></span><br><span class="line">                                +File.separator</span><br><span class="line">                                +<span class="string">&quot;PicTest_&quot;</span>+System.currentTimeMillis()+<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                Log.e(TAG,<span class="string">&quot;fileName=&quot;</span>+fileName);</span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">                <span class="keyword">if</span>(!file.getParentFile().exists())&#123;</span><br><span class="line">                    file.getParentFile().mkdir();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    BufferedOutputStream bos=<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">                    bmp.compress(Bitmap.CompressFormat.JPEG, <span class="number">80</span>, bos);<span class="comment">//向缓冲区压缩图片</span></span><br><span class="line">                    bos.flush();</span><br><span class="line">                    bos.close();</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;拍照成功，照片保存在&quot;</span>+fileName+<span class="string">&quot;文件之中！&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    <span class="comment">//e.printStackTrace();</span></span><br><span class="line">                    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;拍照失败！&quot;</span>+e.toString(), Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">                stopPreview();</span><br><span class="line">                startPreivew();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-API2"><a href="#2-API2" class="headerlink" title="2 API2"></a>2 API2</h1><p>叫出CameraManager ，打开 CameraDevice ，拿住CameraCaptureSession，发送CaptureRequest .</p><p>Camera API2中主要涉及的以下几个关键类:</p><ul><li>CameraManager:摄像头管理器.用于打开和关闭系统摄像头</li><li>CameraCharacteristics:描述摄像头的各种特性.我们可以通过CameraManager的getCameraCharacteristics(@NonNull String cameraId)方法来获取</li><li>CameraDevice:描述系统摄像头.类似早期的Camera</li><li>CameraCaptureSession:Session类.当需要拍照,预览等功能时,需要创建该类的实例.然后通过该实例里的方法进行控制(例如:拍照 capture())</li><li>CaptureRequest:描述了一个操作请求,拍照,预览等操作都需要先传入CaptureRequest参数，具体的参数控制也是通过CameraRequest的成员变量来设置</li><li>CaptureResult:描述拍照完成后的结果</li></ul><p>开发者通过创建CaptureRequest向摄像头发起Capture请求,这些请求会排成一个队列供摄像头处理,摄像头将结果包装在CaptureMetadata中返回给开发者.整个流程建立一个CameraCaptureSession的会话中.</p><h2 id="2-1-打开相机"><a href="#2-1-打开相机" class="headerlink" title="2.1 打开相机"></a>2.1 打开相机</h2><p>打开相机之前,要获取到CameraManger,然后获取相机列表,进而获取各个摄像头(主要是前摄和后摄)的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CameraManager</span> <span class="variable">manager</span> <span class="operator">=</span> (CameraManager) getSystemService(Context.CAMERA_SERVICE);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-API1&quot;&gt;&lt;a href=&quot;#1-API1&quot; class=&quot;headerlink&quot; title=&quot;1 API1&quot;&gt;&lt;/a&gt;1 API1&lt;/h1&gt;&lt;p&gt;AndroidManifest.xmlAndroidManifest官方解释是应用清单（manifest意思</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    <category term="APP" scheme="https://joeforkyou.github.io/categories/Android/APP/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
    <category term="APP" scheme="https://joeforkyou.github.io/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>Android_S_ITS重构梳理</title>
    <link href="https://joeforkyou.github.io/2024/11/10/GMS/Andorid_S_ITS%E9%87%8D%E6%9E%84%E6%A2%B3%E7%90%86/"/>
    <id>https://joeforkyou.github.io/2024/11/10/GMS/Andorid_S_ITS%E9%87%8D%E6%9E%84%E6%A2%B3%E7%90%86/</id>
    <published>2024-11-09T18:26:46.000Z</published>
    <updated>2024-11-09T22:29:22.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>先看its环境搭建的文档.里面有基础操作说明.</p><p>然后为了更好理解梳理its的内容.我顺道整理出its 测试的脚本内容.</p><p>单刀直入.找到这个总的测试文件.我们所有的整跑命令都是从这个文件中调用起来的.</p><p>android-cts-verifier&#x2F;CameraITS&#x2F;tools&#x2F;run_all_tests.py<br>main函数的入口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br></pre></td></tr></table></figure><p>设置输出的tmp文件即测试生成的图片和log 保存的路径.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"><span class="comment"># Make output directories to hold the generated files.</span></span><br><span class="line">topdir = tempfile.mkdtemp(prefix=<span class="string">&#x27;CameraITS_&#x27;</span>)</span><br><span class="line">subprocess.call([<span class="string">&#x27;chmod&#x27;</span>, <span class="string">&#x27;g+rx&#x27;</span>, topdir])</span><br><span class="line">logging.info(<span class="string">&#x27;Saving output files to: %s&#x27;</span>, topdir)</span><br></pre></td></tr></table></figure><p>将输入的sys参数即场景拼接到scenes. 这个是针对直接输入测试cmd后面衔接场景和camera的.(exp:  python tools&#x2F;run_all_tests.py camera&#x3D;0 scenes&#x3D;0)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Override camera &amp; scenes with cmd line values if available</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">list</span>(sys.argv[<span class="number">1</span>:]):</span><br><span class="line">  <span class="keyword">if</span> <span class="string">&#x27;scenes=&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">    scenes = s.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="keyword">elif</span> <span class="string">&#x27;camera=&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">    camera_id_combos = s.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><p>读取测试testBeds. 这边和config.yml对应起来.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read config file and extract relevant TestBed</span></span><br><span class="line">config_file_contents = get_config_file_contents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> config_file_contents[<span class="string">&#x27;TestBeds&#x27;</span>]:</span><br><span class="line">  <span class="keyword">if</span> scenes == [<span class="string">&#x27;sensor_fusion&#x27;</span>]:</span><br><span class="line">    <span class="keyword">if</span> TEST_KEY_SENSOR_FUSION <span class="keyword">not</span> <span class="keyword">in</span> i[<span class="string">&#x27;Name&#x27;</span>].lower():</span><br><span class="line">      config_file_contents[<span class="string">&#x27;TestBeds&#x27;</span>].remove(i)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> TEST_KEY_SENSOR_FUSION <span class="keyword">in</span> i[<span class="string">&#x27;Name&#x27;</span>].lower():</span><br><span class="line">      config_file_contents[<span class="string">&#x27;TestBeds&#x27;</span>].remove(i)</span><br></pre></td></tr></table></figure><p>我们的config.yml 每一个TestBeds:下面会衔接<br>- Name: TEST_BED_TABLET_SCENES  # Need ‘tablet’ in name for tablet scenes</p><p>- Name: TEST_BED_SENSOR_FUSION  # Need ‘sensor_fusion’ in name for SF tests</p><p>分别对应标准灯箱和马达灯箱</p><p>继续往下看. 如果没有直接输入测试cmd后衔接参数. 而是直接python tools&#x2F;run_all_tests.py.</p><p>以下逻辑会走进去判断. 因为这几个值都没写.会直接读取config.yml的对应字符camera和scene后衔接的参数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get test parameters from config file</span></span><br><span class="line">test_params_content = get_test_params(config_file_contents)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> camera_id_combos:</span><br><span class="line">  camera_id_combos = <span class="built_in">str</span>(test_params_content[<span class="string">&#x27;camera&#x27;</span>]).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> scenes:</span><br><span class="line">  scenes = <span class="built_in">str</span>(test_params_content[<span class="string">&#x27;scene&#x27;</span>]).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  scenes = [_INT_STR_DICT.get(n, n) <span class="keyword">for</span> n <span class="keyword">in</span> scenes]  <span class="comment"># recover &#x27;1_1&#x27; &amp; &#x27;1_2&#x27;</span></span><br></pre></td></tr></table></figure><p>获取config.yml 中dut(测试机器的SN号),并且覆盖apk模式以允许写入外部存储.即让com.android.cts.verifier  拥有读写操作.  注意:我们一般把apk 下载到手机的时候 都是把相机以及其他所有权限都打开. 这两个是不一样的. 相机权限的打开是避免无法调用相机导致的fail. 而这边的读写操作主要是给apk 的各种服务开的.  使其能正常下发命令.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">device_id = get_device_serial_number(<span class="string">&#x27;dut&#x27;</span>, config_file_contents)</span><br><span class="line"><span class="comment"># Enable external storage on DUT to send summary report to CtsVerifier.apk</span></span><br><span class="line">enable_external_storage(device_id)</span><br></pre></td></tr></table></figure><p>然后获取测试图表的sn号. 如果TEST_KEY_TABLET 存在在对应的TestBeds里,则获取到table_id,否则为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TEST_KEY_TABLET = <span class="string">&#x27;tablet&#x27;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">config_file_test_key = config_file_contents[<span class="string">&#x27;TestBeds&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;Name&#x27;</span>].lower()</span><br><span class="line">  <span class="keyword">if</span> TEST_KEY_TABLET <span class="keyword">in</span> config_file_test_key:</span><br><span class="line">    tablet_id = get_device_serial_number(<span class="string">&#x27;tablet&#x27;</span>, config_file_contents)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    tablet_id = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>获取马达舵机的控制通道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testing_sensor_fusion_with_controller = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> TEST_KEY_SENSOR_FUSION <span class="keyword">in</span> config_file_test_key:</span><br><span class="line">  <span class="keyword">if</span> test_params_content[<span class="string">&#x27;rotator_cntl&#x27;</span>].lower() <span class="keyword">in</span> VALID_CONTROLLERS:</span><br><span class="line">    testing_sensor_fusion_with_controller = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>预加载场景，如果cmd line没有指出场景</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepend &#x27;scene&#x27; if not specified at cmd line</span></span><br><span class="line"><span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">enumerate</span>(scenes):</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">not</span> s.startswith(<span class="string">&#x27;scene&#x27;</span>) <span class="keyword">and</span></span><br><span class="line">      <span class="keyword">not</span> s.startswith((<span class="string">&#x27;sensor_fusion&#x27;</span>, <span class="string">&#x27;&lt;scene-name&gt;&#x27;</span>))):</span><br><span class="line">    scenes[i] = <span class="string">f&#x27;scene<span class="subst">&#123;s&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>如果用户没有制定特定的场景会跑测所有的场景.</p><p>创建子文件用于保存各个cameraID各个场景</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A subdir in topdir will be created for each camera_id. All scene test</span></span><br><span class="line"><span class="comment"># output logs for each camera id will be stored in this subdir.</span></span><br><span class="line"><span class="comment"># This output log path is a mobly param : LogPath</span></span><br><span class="line">cam_id_string = <span class="string">&#x27;cam_id_%s&#x27;</span> % (</span><br><span class="line">    camera_id.replace(its_session_utils.SUB_CAMERA_SEPARATOR, <span class="string">&#x27;_&#x27;</span>))</span><br><span class="line">mobly_output_logs_path = os.path.join(topdir, cam_id_string)</span><br><span class="line">os.mkdir(mobly_output_logs_path)</span><br></pre></td></tr></table></figure><p>以上对config.yml的读取和检索后都重新创建一个yml文件,用于正式的跑测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_yml_file_name = get_updated_yml_file(config_file_contents)</span><br></pre></td></tr></table></figure><h1 id="2-跑测"><a href="#2-跑测" class="headerlink" title="2 跑测"></a>2 跑测</h1><p>上面是一些跑测的文件创建和准备</p><p>下面直面跑测的内容.</p><p>这个逻辑是用来确定单跑和整跑的逻辑.</p><p>如果输入的命令有包含tests&#x2F;  则是单跑调用. 否则都是整跑，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;tests/&#x27;</span> <span class="keyword">in</span> test:</span><br><span class="line">  cmd = [</span><br><span class="line">      <span class="string">&#x27;python3&#x27;</span>,</span><br><span class="line">      os.path.join(os.environ[<span class="string">&#x27;CAMERA_ITS_TOP&#x27;</span>], test), <span class="string">&#x27;-c&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;%s&#x27;</span> % new_yml_file_name</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  cmd = [</span><br><span class="line">      <span class="string">&#x27;python3&#x27;</span>,</span><br><span class="line">      os.path.join(os.environ[<span class="string">&#x27;CAMERA_ITS_TOP&#x27;</span>], <span class="string">&#x27;tests&#x27;</span>, s, test),</span><br><span class="line">      <span class="string">&#x27;-c&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;%s&#x27;</span> % new_yml_file_name</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>创建subprocess 用于正式跑测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num_try <span class="keyword">in</span> <span class="built_in">range</span>(NUM_TRIES):</span><br><span class="line">      <span class="comment"># pylint: disable=subprocess-run-check</span></span><br><span class="line">      <span class="keyword">with</span> <span class="built_in">open</span>(MOBLY_TEST_SUMMARY_TXT_FILE, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        output = subprocess.run(cmd, stdout=fp)</span><br><span class="line">      <span class="comment"># pylint: enable=subprocess-run-check</span></span><br></pre></td></tr></table></figure><p>解析mobly log 记录跑测返回的状态(skip&#x2F;pass&#x2F;fail),并且记录此结果</p><p>大致的跑测逻辑如上概诉，真实挂测的def run(cmd): 在这不累诉</p><h2 id="2-1-加载场景"><a href="#2-1-加载场景" class="headerlink" title="2.1 加载场景"></a>2.1 加载场景</h2><p>下面看这俩个内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def report_result(device_id, camera_id, results):</span><br><span class="line">def load_scenes_on_tablet(scene, tablet_id):</span><br></pre></td></tr></table></figure><p>加载对应场景的逻辑很简单.</p><p>就是将对应场景下的png全部push进table 图表设备中.</p><p>push路径为.该路径 必须要有push 的权限. 就算是市面上的机器，不然没法正确调用出对应场景的图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_DST_SCENE_DIR = <span class="string">&#x27;/mnt/sdcard/Download/&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_scenes_on_tablet</span>(<span class="params">scene, tablet_id</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;Copies scenes onto the tablet before running the tests.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    scene: Name of the scene to copy image files.</span></span><br><span class="line"><span class="string">    tablet_id: adb id of tablet</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  logging.info(<span class="string">&#x27;Copying files to tablet: %s&#x27;</span>, tablet_id)</span><br><span class="line">  scene_dir = os.listdir(</span><br><span class="line">      os.path.join(os.environ[<span class="string">&#x27;CAMERA_ITS_TOP&#x27;</span>], <span class="string">&#x27;tests&#x27;</span>, scene))</span><br><span class="line">  <span class="keyword">for</span> file_name <span class="keyword">in</span> scene_dir:</span><br><span class="line">    <span class="keyword">if</span> file_name.endswith(<span class="string">&#x27;.png&#x27;</span>):</span><br><span class="line">      src_scene_file = os.path.join(os.environ[<span class="string">&#x27;CAMERA_ITS_TOP&#x27;</span>], <span class="string">&#x27;tests&#x27;</span>,</span><br><span class="line">                                    scene, file_name)</span><br><span class="line">      cmd = <span class="string">f&#x27;adb -s <span class="subst">&#123;tablet_id&#125;</span> push <span class="subst">&#123;src_scene_file&#125;</span> <span class="subst">&#123;_DST_SCENE_DIR&#125;</span>&#x27;</span></span><br><span class="line">      subprocess.Popen(cmd.split())</span><br><span class="line">  time.sleep(LOAD_SCENE_DELAY)</span><br><span class="line">  logging.info(<span class="string">&#x27;Finished copying files to tablet.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>而对于这个函数用于改变场景和check</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def check_manual_scenes(device_id, camera_id, scene, out_path):</span><br></pre></td></tr></table></figure><h2 id="2-2-上报结果"><a href="#2-2-上报结果" class="headerlink" title="2.2 上报结果"></a>2.2 上报结果</h2><p>所有的结果都会记录到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTION_ITS_RESULT = <span class="string">&#x27;com.android.cts.verifier.camera.its.ACTION_ITS_RESULT&#x27;</span></span><br></pre></td></tr></table></figure><p>本质上是通过这个将结果上报给apk. 会在手机目录下看到类似its_camera1_scene0.txt的文件.本质上是把这个文件读写上报给测试apk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">report_result</span>(<span class="params">device_id, camera_id, results</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;Sends a pass/fail result to the device, via an intent.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">   device_id: The ID string of the device to report the results to.</span></span><br><span class="line"><span class="string">   camera_id: The ID string of the camera for which to report pass/fail.</span></span><br><span class="line"><span class="string">   results: a dictionary contains all ITS scenes as key and result/summary of</span></span><br><span class="line"><span class="string">            current ITS run. See test_report_result unit test for an example.</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  adb = <span class="string">f&#x27;adb -s <span class="subst">&#123;device_id&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Start ItsTestActivity to receive test results</span></span><br><span class="line">  cmd = <span class="string">f&#x27;<span class="subst">&#123;adb&#125;</span> shell am start <span class="subst">&#123;ITS_TEST_ACTIVITY&#125;</span> --activity-brought-to-front&#x27;</span></span><br><span class="line">  run(cmd)</span><br><span class="line">  time.sleep(ACTIVITY_START_WAIT)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Validate/process results argument</span></span><br><span class="line">  <span class="keyword">for</span> scene <span class="keyword">in</span> results:</span><br><span class="line">    <span class="keyword">if</span> RESULT_KEY <span class="keyword">not</span> <span class="keyword">in</span> results[scene]:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">f&#x27;ITS result not found for <span class="subst">&#123;scene&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> results[scene][RESULT_KEY] <span class="keyword">not</span> <span class="keyword">in</span> RESULT_VALUES:</span><br><span class="line">      <span class="keyword">raise</span> ValueError(<span class="string">f&#x27;Unknown ITS result for <span class="subst">&#123;scene&#125;</span>: <span class="subst">&#123;results[RESULT_KEY]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> SUMMARY_KEY <span class="keyword">in</span> results[scene]:</span><br><span class="line">      device_summary_path = <span class="string">f&#x27;/sdcard/its_camera<span class="subst">&#123;camera_id&#125;</span>_<span class="subst">&#123;scene&#125;</span>.txt&#x27;</span></span><br><span class="line">      run(<span class="string">&#x27;%s push %s %s&#x27;</span> %</span><br><span class="line">          (adb, results[scene][SUMMARY_KEY], device_summary_path))</span><br><span class="line">      results[scene][SUMMARY_KEY] = device_summary_path</span><br><span class="line"></span><br><span class="line">  json_results = json.dumps(results)</span><br><span class="line">  cmd = (<span class="string">f&quot;<span class="subst">&#123;adb&#125;</span> shell am broadcast -a <span class="subst">&#123;ACTION_ITS_RESULT&#125;</span> --es <span class="subst">&#123;EXTRA_VERSION&#125;</span>&quot;</span></span><br><span class="line">         <span class="string">f&quot; <span class="subst">&#123;CURRENT_ITS_VERSION&#125;</span> --es <span class="subst">&#123;EXTRA_CAMERA_ID&#125;</span> <span class="subst">&#123;camera_id&#125;</span> --es &quot;</span></span><br><span class="line">         <span class="string">f&quot;<span class="subst">&#123;EXTRA_RESULTS&#125;</span> \&#x27;<span class="subst">&#123;json_results&#125;</span>\&#x27;&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(cmd) &gt; <span class="number">8000</span>:</span><br><span class="line">    logging.info(<span class="string">&#x27;ITS command string might be too long! len:%s&#x27;</span>, <span class="built_in">len</span>(cmd))</span><br><span class="line">  run(cmd)</span><br></pre></td></tr></table></figure><h1 id="3-测试场景"><a href="#3-测试场景" class="headerlink" title="3 测试场景"></a>3 测试场景</h1><p>注意SUB_CAMERA_TESTS 数组保存了 对应场景 对应的测试项目. 但是这个不是最后全部的测试项目。也有部分api 测试存在于android-cts-verifier&#x2F;CameraITS&#x2F;tests&#x2F;its_base_test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SUB_CAMERA_TESTS = &#123;</span><br><span class="line">    <span class="string">&#x27;scene0&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;test_burst_capture&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_jitter&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_metadata&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_read_write&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_sensor_events&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_solid_color_test_pattern&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test_unified_timestamps&#x27;</span>,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>另外对于以下这种场景有说明:比如场景1中的1_1,1_2 是分出来</p><p>场景2 中的不同人脸图都共有测试项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;scene2_a&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;test_faces&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;test_num_faces&#x27;</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>#   scene*_1&#x2F;2&#x2F;… are same scene split to load balance run times for scenes</p><p>#   scene*_a&#x2F;b&#x2F;… are similar scenes that share one or more tests</p><h1 id="4-ITS-apK-代码"><a href="#4-ITS-apK-代码" class="headerlink" title="4 ITS apK 代码"></a>4 ITS apK 代码</h1><p>apk代码路径如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cts/apps/CtsVerifier/src/com/android/cts/verifier/camera</span><br><span class="line">目录结构如下:和camera有关的有如下的测试.</span><br><span class="line">├── bokeh</span><br><span class="line">│   └── CameraBokehActivity.java</span><br><span class="line">├── flashlight</span><br><span class="line">│   └── CameraFlashlightActivity.java</span><br><span class="line">├── formats</span><br><span class="line">│   └── CameraFormatsActivity.java</span><br><span class="line">├── fov</span><br><span class="line">│   ├── CalibrationPreferenceActivity.java</span><br><span class="line">│   ├── CameraPreviewView.java</span><br><span class="line">│   ├── CtsTestHelper.java</span><br><span class="line">│   ├── DetermineFovActivity.java</span><br><span class="line">│   ├── PhotoCaptureActivity.java</span><br><span class="line">│   ├── SelectableResolution.java</span><br><span class="line">│   └── Size.java</span><br><span class="line">├── intents</span><br><span class="line">│   ├── CameraContentJobService.java</span><br><span class="line">│   └── CameraIntentsActivity.java</span><br><span class="line">├── its</span><br><span class="line">│   ├── ItsException.java</span><br><span class="line">│   ├── ItsSerializer.java</span><br><span class="line">│   ├── ItsService.java</span><br><span class="line">│   ├── ItsTestActivity.java</span><br><span class="line">│   ├── ItsUtils.java</span><br><span class="line">│   ├── Logt.java</span><br><span class="line">│   └── StatsImage.java</span><br><span class="line">├── orientation</span><br><span class="line">│   └── CameraOrientationActivity.java</span><br><span class="line">├── OWNERS</span><br><span class="line">├── performance</span><br><span class="line">│   ├── CameraPerformanceActivity.java</span><br><span class="line">│   └── CameraTestInstrumentation.java</span><br><span class="line">└── video</span><br><span class="line">    └── CameraVideoActivity.java</span><br></pre></td></tr></table></figure><p>我们重点看its 目录下的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── its</span><br><span class="line">│   ├── ItsException.java   #记录异常的接口</span><br><span class="line">│   ├── ItsSerializer.java  #serialize  序列化解析json 对象</span><br><span class="line">│   ├── ItsService.java  #its 围绕这个服务进行交互的</span><br><span class="line">│   ├── ItsTestActivity.java #主要测试main</span><br><span class="line">│   ├── ItsUtils.java #检索的文件 获取图片格式等操作都在此文件内完成</span><br><span class="line">│   ├── Logt.java #传递log msg</span><br><span class="line">│   └── StatsImage.java #load ctsverifier_jni </span><br></pre></td></tr></table></figure><p>ItsTestActivity.java # 下列代码是两年前谷歌加入的为了修复tests&#x2F;scene0&#x2F;test_metadata.py 脚本的问题而加入的默认语言检查.所以我们使用cts-verifier apk的时候 系统的默认要美国地区的英语.不然无法进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Default locale must be set to &quot;en-us&quot;</span></span><br><span class="line"><span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> Locale.getDefault();</span><br><span class="line"><span class="keyword">if</span> (!Locale.US.equals(locale)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">toastMessage</span> <span class="operator">=</span> <span class="string">&quot;Unsupported default language &quot;</span> + locale + <span class="string">&quot;! &quot;</span> +</span><br><span class="line">            <span class="string">&quot;Please switch the default language to English (United States) in &quot;</span> +</span><br><span class="line">            <span class="string">&quot;Settings &gt; Language &amp; input &gt; Languages&quot;</span>;</span><br><span class="line">    Toast.makeText(ItsTestActivity.<span class="built_in">this</span>, toastMessage, Toast.LENGTH_LONG).show();</span><br><span class="line">    ItsTestActivity.<span class="built_in">this</span>.getReportLog().setSummary(</span><br><span class="line">            <span class="string">&quot;FAIL: Default language is not set to &quot;</span> + Locale.US,</span><br><span class="line">            <span class="number">1.0</span>, ResultType.NEUTRAL, ResultUnit.NONE);</span><br><span class="line">    setTestResultAndFinish(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是当时谷歌的commit.  感觉谷歌的操作真的是全是堆积这种bug. 以前就没有中文语言不支持一说.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CtsVerifier: Fail Camera ITS in case of unsupported locale</span><br><span class="line"></span><br><span class="line">Per CTS specification Camera ITS must only be run with default</span><br><span class="line">language set to English (United States). Check this and directly</span><br><span class="line">fail during ITS activity initialization and when processing ITS</span><br><span class="line">commands.</span><br><span class="line">The python script handling of socket errors must also be modified</span><br><span class="line">to appropriately notify users about this error condition.</span><br><span class="line"></span><br><span class="line">Bug: 149922652</span><br><span class="line">Test: Manual using CtsVerifier app,</span><br><span class="line">python tests/scene0/test_metadata.py</span><br><span class="line"></span><br><span class="line">Change-Id: I3a2833e2fbc8e8863f5dd13600d39e7d77cea438</span><br></pre></td></tr></table></figure><p>ITS apk部分的源码建议去谷歌官网看.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;先看its环境搭建的文档.里面有基础操作说明.&lt;/p&gt;
&lt;p&gt;然后为了更好理解梳理its的内容.我顺道整理出its 测试的脚</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    <category term="GMS" scheme="https://joeforkyou.github.io/categories/Android/GMS/"/>
    
    <category term="ITS" scheme="https://joeforkyou.github.io/categories/Android/GMS/ITS/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
    <category term="ITS" scheme="https://joeforkyou.github.io/tags/ITS/"/>
    
    <category term="GMS" scheme="https://joeforkyou.github.io/tags/GMS/"/>
    
  </entry>
  
  <entry>
    <title>Android编译概述</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/Android%E7%BC%96%E8%AF%91%E6%A6%82%E8%BF%B0/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/Android%E7%BC%96%E8%AF%91%E6%A6%82%E8%BF%B0/</id>
    <published>2024-11-09T18:22:33.000Z</published>
    <updated>2024-11-09T22:24:23.834Z</updated>
    
    <content type="html"><![CDATA[<p>所有的编译都要先source build&#x2F;envsetup.sh</p><p>然后lunch 对应的产品。</p><p>整编就直接make</p><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><ul><li><p>在Andorid 7.0 之前都是使用GNU make,模块编译脚本使用Android.mk;</p></li><li><p>之后,编译使用ninja,由kati工具把Andorid&#x2F;mk转换为构建规范文件buildxxx.ninja;</p></li><li><p>Android 8.0 开始,引入编译脚本Android.bp,及工具blueprint和soong用于把Android.bp转换为buildxxx.ninja.</p><p>Android 编译脚本主要为Android.mk和Android.bp,在编译过程中都会转换为buildxxx.nija构建文件,加入到ninja构建系统中参与编译.</p><p>buildxxxx.ninja文件生成在out目录中,文件大小比较大,包含了编译中的所有配置信息.</p></li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>m</td><td>编译整个源码,可以不用切换根目录</td></tr><tr><td>mm</td><td>编译当前目录下的源码.不包含他们的依赖模块</td></tr><tr><td>mmm</td><td>编译指定目录下的所有模块,不包含他们的依赖模块</td></tr><tr><td>mma</td><td>编译当前目录的下的源码,包含他们的依赖模块</td></tr><tr><td>mmma</td><td>编译指定目录下的所有模块.包含他们的依赖项目</td></tr></tbody></table><p>编译环境初始化.</p><p>由命令source build&#x2F;envsetup.sh完成</p><p>其中envsetup.sh主要做了下面几个事情.</p><ul><li><p>定义一些lunch &#x2F;m &#x2F;mm &#x2F;mmm &#x2F;provision等函数.</p></li><li><p>确定当前的shell 环境.建立shell命令</p></li><li><p>从device&#x2F;vendor&#x2F;product等目录遍历搜索vendorsetup.sh, 并source 进来</p></li><li><p>将下面的bash文件导入到当前环境中</p><p>system&#x2F;core&#x2F;adb&#x2F;adb.bash,</p><p>system&#x2F;core&#x2F;fastboot&#x2F;fastboot.bash,</p><p>tools&#x2F;asuite&#x2F;asuite.sh</p></li></ul><h1 id="1-image"><a href="#1-image" class="headerlink" title="1 image"></a>1 image</h1><p>像system&#x2F;vendor&#x2F;dtbo&#x2F;boot 这些</p><p>可以直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">make systemimage</span><br><span class="line">make bootimage</span><br><span class="line">make dtboimage</span><br><span class="line">make vendorimage</span><br><span class="line">make cts</span><br></pre></td></tr></table></figure><h1 id="2-framework"><a href="#2-framework" class="headerlink" title="2 framework"></a>2 framework</h1><p>framework部分内容是很复杂的一块的内容.</p><p>关于cameraservice的部分可以用ninja编译 ,jni的部分也可以直接mma或者找到对应的so去编译</p><p>下列命令是单编译对应的so.对于所有模块都是可以的.需要注意的是这种编译是不加依赖项的.所以会出现修改的Android.mk不生效. 对应的ninja工具需要在对应的项目内寻找.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prebuilts/build-tools/linux-x86/bin/ninja -f out/combined-vnd_xxxx.ninja libcameraservice</span><br></pre></td></tr></table></figure><p>这个路径下是apk层直接调用的硬件接口.可以用如下的命令直接编译生成framework.jar包.</p><p>frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;hardware&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make framework-minus-apex</span><br></pre></td></tr></table></figure><p>adb push framework.jar system&#x2F;framework&#x2F;</p><p>同时删除设备中system&#x2F;framework目录下</p><p>oat,arm,arm64的三个文件夹.</p><p>然后adb reboot. 不删除以上的三个文件，系统会一直处在开机动画中无法打开.</p><p>frameworks&#x2F;base&#x2F;Android.bp的相关编译规则如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">java_library &#123;</span><br><span class="line">    name: &quot;framework-minus-apex&quot;,</span><br><span class="line">    defaults: [&quot;framework-minus-apex-defaults&quot;],</span><br><span class="line">    installable: true,</span><br><span class="line">    // For backwards compatibility.</span><br><span class="line">    stem: &quot;framework&quot;,</span><br><span class="line">    apex_available: [&quot;//apex_available:platform&quot;],</span><br><span class="line">    visibility: [</span><br><span class="line">        &quot;//frameworks/base&quot;,</span><br><span class="line">        // TODO(b/147128803) remove the below lines</span><br><span class="line">        &quot;//frameworks/base/apex/appsearch/framework&quot;,</span><br><span class="line">        &quot;//frameworks/base/apex/blobstore/framework&quot;,</span><br><span class="line">        &quot;//frameworks/base/apex/jobscheduler/framework&quot;,</span><br><span class="line">        &quot;//frameworks/base/packages/Tethering/tests/unit&quot;,</span><br><span class="line">        &quot;//packages/modules/Connectivity/Tethering/tests/unit&quot;,</span><br><span class="line">    ],</span><br><span class="line">    errorprone: &#123;</span><br><span class="line">        javacflags: [</span><br><span class="line">            &quot;-Xep:AndroidFrameworkBinderIdentity:ERROR&quot;,</span><br><span class="line">            &quot;-Xep:AndroidFrameworkCompatChange:ERROR&quot;,</span><br><span class="line">            &quot;-Xep:AndroidFrameworkUid:ERROR&quot;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-selinux"><a href="#3-selinux" class="headerlink" title="3 selinux"></a>3 selinux</h1><p>adb shell setenforce 0会解放selinux权限<br>Android 的selinux权限路径,但是这个是总的. 不同平台的编译本质上是编译这个路径.</p><p>system&#x2F;sepolicy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make selinux_policy</span><br><span class="line">将编译生成的.cil相关文件push到设备中重启.</span><br><span class="line">adb push vendor/etc/selinux/* vendor/etc/selinux</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;所有的编译都要先source build&amp;#x2F;envsetup.sh&lt;/p&gt;
&lt;p&gt;然后lunch 对应的产品。&lt;/p&gt;
&lt;p&gt;整编就直接make&lt;/p&gt;
&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>OpenGrok搭建笔记</title>
    <link href="https://joeforkyou.github.io/2024/11/10/%E6%90%AD%E5%BB%BA/OpenGrok%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://joeforkyou.github.io/2024/11/10/%E6%90%AD%E5%BB%BA/OpenGrok%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2024-11-09T18:20:30.000Z</published>
    <updated>2024-11-09T22:22:16.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenGrok"><a href="#OpenGrok" class="headerlink" title="OpenGrok"></a>OpenGrok</h1><p>克隆仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/JoeNero/OpenGrok.git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#tomcat </span><br><span class="line">export CATALINA_HOME=&quot;/home/xtt/OpenGrok/apache-tomcat-8.5.55&quot;</span><br><span class="line"></span><br><span class="line">#opengrok</span><br><span class="line">export OPENGROK_TOMCAT_BASE=$CATALINA_HOME</span><br></pre></td></tr></table></figure><p>保存后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>打开本地端口8080测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><p>部署opengrok<br>进入opengrok bin目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./OpenGrok deploy</span><br></pre></td></tr></table></figure><p>测试部署是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/source</span><br></pre></td></tr></table></figure><p>建立索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./OpenGrok index /root/chrome  #代码存放的位置</span><br></pre></td></tr></table></figure><p>最终生成的索引默认会存放在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/opengrok</span><br></pre></td></tr></table></figure><h1 id="Ctags"><a href="#Ctags" class="headerlink" title="Ctags"></a>Ctags</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">ctags --version</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OpenGrok&quot;&gt;&lt;a href=&quot;#OpenGrok&quot; class=&quot;headerlink&quot; title=&quot;OpenGrok&quot;&gt;&lt;/a&gt;OpenGrok&lt;/h1&gt;&lt;p&gt;克隆仓库&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="openGrok" scheme="https://joeforkyou.github.io/categories/openGrok/"/>
    
    
    <category term="openGrok" scheme="https://joeforkyou.github.io/tags/openGrok/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 【vector】</title>
    <link href="https://joeforkyou.github.io/2024/11/10/CPP/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-vector/"/>
    <id>https://joeforkyou.github.io/2024/11/10/CPP/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-vector/</id>
    <published>2024-11-09T17:14:59.000Z</published>
    <updated>2024-11-09T22:24:42.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-STL-简介"><a href="#1-STL-简介" class="headerlink" title="1 STL 简介"></a>1 STL 简介</h1><blockquote><p>STL是Standard Template Library的简称，中文名标准模板库<br>STL可分为<br>容器(containers)、<br>迭代器(iterators)、<br>空间配置器(allocator)、<br>配接器(adapters)、<br>算法(algorithms)、<br>仿函数(functors)六个部分。</p></blockquote><p>选自百度词条<a href="https://baike.baidu.com/item/STL/70103?fr=aladdin">STL百度词条</a><br>C++标准中，STL组件被组织命名为以下13个头文件</p><blockquote><p>&lt; algorithm&gt;<br>&lt; deque&gt;<br>&lt; functional&gt;<br>&lt; iterator&gt;<br>&lt; vector&gt;<br>&lt; list&gt;<br>&lt; map&gt;<br>&lt; memory.h&gt;<br>&lt; numeric&gt;<br>&lt; queue&gt;<br>&lt; set&gt;<br>&lt; stack&gt;<br>&lt; utility&gt;</p></blockquote><h1 id="2-容器-vector"><a href="#2-容器-vector" class="headerlink" title="2 容器 vector"></a>2 容器 vector</h1><p>向量(vector) 连续存储的元素&lt; vector&gt;;<br>vector是一个能够存放任意类型的动态数组，能够增加和压缩数据。<br>为了更好理解，不用基础类型，自行定义一个MyInt结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MyInt</span></span><br><span class="line">&#123;</span><br><span class="line">string name;<span class="comment">//用作标识符</span></span><br><span class="line"><span class="type">int</span> Int;        <span class="comment">//实际存储类型</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写一个打印函数如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能: - vector类打印</span></span><br><span class="line"><span class="comment">@param</span></span><br><span class="line"><span class="comment">@param</span></span><br><span class="line"><span class="comment">@param</span></span><br><span class="line"><span class="comment">描述:</span></span><br><span class="line"><span class="comment">示例:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;MyInt&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;MyInt&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;标识符为:&quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数据为:&quot;</span>&lt;&lt; it-&gt;Int &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-构造"><a href="#2-1-构造" class="headerlink" title="2.1 构造"></a>2.1 构造</h2><p>vector类构造demo</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;MyInt&gt; v1; <span class="comment">//无参构造</span></span><br><span class="line">MyInt* myInt = <span class="keyword">new</span> MyInt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myInt[i].name = <span class="string">&#x27;0&#x27;</span> + i;</span><br><span class="line">myInt[i].Int = i;</span><br><span class="line">v<span class="number">1.</span><span class="built_in">push_back</span>(myInt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="function">vector&lt;MyInt&gt; <span class="title">v2</span><span class="params">(v<span class="number">1.</span>begin(), v<span class="number">1.</span>end())</span></span>;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line">vector&lt;MyInt&gt;::iterator it = v<span class="number">1.</span><span class="built_in">begin</span>();</span><br><span class="line"><span class="function">vector&lt;MyInt&gt; <span class="title">v3</span><span class="params">(it<span class="number">+1</span>, v<span class="number">1.</span>end())</span></span>;</span><br><span class="line"><span class="built_in">printVector</span>(v3);</span><br><span class="line"><span class="keyword">delete</span>[] myInt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，因为用了迭代器来访问v1.begin() + 1的位置 ，(非基础类型不能用v1[1]访问),所以打印v3容器输出的结果是1到9<br><img src="https://i-blog.csdnimg.cn/blog_migrate/cd43e6bd2b8d53298c83d9d6dc3ff2b2.jpeg" alt="在这里插入图片描述"></p><h2 id="2-2-成员函数"><a href="#2-2-成员函数" class="headerlink" title="2.2 成员函数"></a>2.2 成员函数</h2><p>基础访问操作:（注意v3.at[int index]适合访问基础类型,int,char等，自定义的类型还是用迭代器访问）<br>vector不支持头插(push_front)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">3.</span><span class="built_in">push_back</span>(elem)  <span class="comment">//在尾部插入一个elem数据。</span></span><br><span class="line">v<span class="number">3.</span><span class="built_in">pop_back</span>()       <span class="comment">//删除末尾的数据。</span></span><br><span class="line">v<span class="number">3.</span><span class="built_in">at</span>(<span class="type">int</span> index)<span class="comment">//传回索引为index的数据,如果index越界</span></span><br><span class="line"><span class="comment">//抛出out_of_range异常。</span></span><br><span class="line"><span class="comment">//非基础类型需要通过迭代器访问</span></span><br></pre></td></tr></table></figure><h3 id="2-2-1-assgin"><a href="#2-2-1-assgin" class="headerlink" title="2.2.1 assgin"></a>2.2.1 assgin</h3><p>v3.assign(beg,end)将[beg,end)一个左闭右开区间的数据赋值给v3。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">3.</span><span class="built_in">assign</span>(v<span class="number">1.</span><span class="built_in">begin</span>(), v<span class="number">1.</span><span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printVector</span>(v3);</span><br></pre></td></tr></table></figure><p>v3.assign (n,elem)将n个elem的拷贝赋值给v3。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">3.</span><span class="built_in">assign</span>(<span class="number">2</span>, myInt[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printVector</span>(v3);</span><br></pre></td></tr></table></figure><p>输出结果如下:<br><img src="https://i-blog.csdnimg.cn/blog_migrate/8f4409bb6edf35adcb6ebecb83746ac9.jpeg" alt="在这里插入图片描述"></p><h3 id="2-2-2-数据大小操作"><a href="#2-2-2-数据大小操作" class="headerlink" title="2.2.2 数据大小操作"></a>2.2.2 数据大小操作</h3><h4 id="2-2-1-empty"><a href="#2-2-1-empty" class="headerlink" title="2.2.1.empty"></a>2.2.1.empty</h4><p>v1.empty() &#x2F;&#x2F;  判空操作<br>先看empty()定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_NODISCARD <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; _My_data = _Mypair._Myval2;</span><br><span class="line">    <span class="keyword">return</span> _My_data._Myfirst == _My_data._Mylast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试容器空的状况:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;MyInt&gt; v1; <span class="comment">//无参构造</span></span><br><span class="line">cout &lt;&lt; v<span class="number">1.</span><span class="built_in">empty</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>空返回1<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d1d724b0d342e5c785976127f9cb4a2f.jpeg" alt="在这里插入图片描述"><br>非空返回 0<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f681f1fda108aa3696c04aa80a2a0b76.jpeg" alt="在这里插入图片描述"><br>了解empty后修改打印函数(暂时不抛出异常)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;MyInt&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打印Vector为空&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;MyInt&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;标识符为:&quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数据为:&quot;</span> &lt;&lt; it-&gt;Int &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-容量"><a href="#2-2-2-容量" class="headerlink" title="2.2.2  容量"></a>2.2.2  容量</h4><p>参考链接<a href="https://blog.csdn.net/JIEJINQUANIL/article/details/51166154">capacity用法</a></p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>capacity()</td><td>容器能存储 数据的个数(真实大小)</td></tr><tr><td>size()</td><td>目前存在的元素个数</td></tr><tr><td>max_size</td><td>最大容量</td></tr><tr><td>resize()</td><td>重新指定大小 ，若指定的更小，超出部分元素被删除</td></tr><tr><td>reserve</td><td>预留空间</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;v1真实的大小 = &quot;</span> &lt;&lt; v<span class="number">1.</span><span class="built_in">capacity</span>() &lt;&lt; endl;<span class="comment">//真实的大小</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1的大小 = &quot;</span> &lt;&lt; v<span class="number">1.</span><span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1最大容量 = &quot;</span> &lt;&lt; v<span class="number">1.</span><span class="built_in">max_size</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/67b826a0fe159edebbc23f08616daa89.jpeg" alt="在这里插入图片描述"><br>resize()使用，<br>重新指定大小10的v1容器为12，多指定的空间重新插入内容myInt[2]；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">1.</span><span class="built_in">resize</span>(<span class="number">12</span>, myInt[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br></pre></td></tr></table></figure><p>打印输出结果:<br><img src="https://i-blog.csdnimg.cn/blog_migrate/5fa6feb23652dc4f316bd766deac09f6.jpeg" alt="在这里插入图片描述"><br>重新指定v1打下，删除超过索引的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v<span class="number">1.</span><span class="built_in">resize</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br></pre></td></tr></table></figure><p>输出结果<br><img src="https://i-blog.csdnimg.cn/blog_migrate/8b63a542688e35cfd61689810353b8e5.jpeg" alt="在这里插入图片描述"></p><h3 id="2-2-3-删除与插入操作"><a href="#2-2-3-删除与插入操作" class="headerlink" title="2.2.3 删除与插入操作"></a>2.2.3 删除与插入操作</h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>pop_back()</td><td>尾删</td></tr><tr><td>insert（）</td><td>插入操作</td></tr><tr><td>erase()</td><td>擦除</td></tr><tr><td></td><td></td></tr><tr><td>测试代码如下:</td><td></td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;MyInt&gt; v1; <span class="comment">//无参构造</span></span><br><span class="line">MyInt* myInt = <span class="keyword">new</span> MyInt[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myInt[i].name = <span class="string">&#x27;0&#x27;</span> + i;</span><br><span class="line">myInt[i].Int = i;</span><br><span class="line">v<span class="number">1.</span><span class="built_in">push_back</span>(myInt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">vector&lt;MyInt&gt;::iterator it = v<span class="number">1.</span><span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">v<span class="number">1.</span><span class="built_in">insert</span>(it<span class="number">+1</span>, myInt[<span class="number">1</span>]);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">v<span class="number">1.</span><span class="built_in">insert</span>(v<span class="number">1.</span><span class="built_in">begin</span>(), <span class="number">2</span>, myInt[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">////删除</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">erase</span>(v<span class="number">1.</span><span class="built_in">begin</span>());</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;擦除头:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="comment">////清空</span></span><br><span class="line"><span class="comment">//v1.erase(v1.begin(), v1.end());</span></span><br><span class="line"><span class="comment">//printVector(v1);</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line"><span class="keyword">delete</span>[] myInt;</span><br></pre></td></tr></table></figure><p>打印输出结果</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/70b367434aee7da1b47c36dced4fab0f.jpeg" alt="在这里插入图片描述"></p><h3 id="2-2-4-swap"><a href="#2-2-4-swap" class="headerlink" title="2.2.4 swap"></a>2.2.4 swap</h3><p>速览其定义:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(vector&amp; _Right)</span> <span class="keyword">noexcept</span> <span class="comment">/* strengthened */</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != _STD <span class="built_in">addressof</span>(_Right)) &#123;</span><br><span class="line">        _Pocs(_Getal(), _Right._Getal());</span><br><span class="line">        _Mypair._Myval<span class="number">2.</span>_Swap_val(_Right._Mypair._Myval2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>swap交换，直接看代码吧:两容器大小需要一致，否在会进入异常</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;MyInt&gt; v1; </span><br><span class="line">vector&lt;MyInt&gt; v2;</span><br><span class="line">MyInt* myInt = <span class="keyword">new</span> MyInt[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myInt[i].name = <span class="string">&#x27;0&#x27;</span> + i;</span><br><span class="line">myInt[i].Int = i;</span><br><span class="line">v<span class="number">1.</span><span class="built_in">push_back</span>(myInt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">myInt[i].name = <span class="string">&#x27;0&#x27;</span> + i;</span><br><span class="line">myInt[i].Int = <span class="number">3</span> - i;</span><br><span class="line">v<span class="number">2.</span><span class="built_in">push_back</span>(myInt[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; v1 =&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; v2 =&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br><span class="line"><span class="comment">//互换容器</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;互换后&quot;</span> &lt;&lt; endl;</span><br><span class="line">v<span class="number">1.</span><span class="built_in">swap</span>(v2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; v1 =&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; v2 =&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printVector</span>(v2);</span><br></pre></td></tr></table></figure><p>输出打印结果如下:<br><img src="https://i-blog.csdnimg.cn/blog_migrate/76d01921df3a4cba71f040a84ae42ae5.jpeg" alt="在这里插入图片描述"><br>在实际应用中swap常常用于与自身交换来达到收缩内存的效果，这里不加累述<br><a href="https://blog.csdn.net/liyazhen2011/article/details/103179974">swap收缩内存参考链接</a></p><h1 id="3-vector总结"><a href="#3-vector总结" class="headerlink" title="3 vector总结"></a>3 vector总结</h1><table><thead><tr><th>成员函数</th><th>说明</th></tr></thead><tbody><tr><td>push_back</td><td>尾插</td></tr><tr><td>assign</td><td><a href="https://blog.csdn.net/qq844352155/article/details/38583529">assgin用法</a></td></tr><tr><td>resize</td><td>重构大小</td></tr><tr><td>capacity</td><td>容量(真实大小)</td></tr><tr><td>size</td><td>当前大小</td></tr><tr><td>max_size</td><td>最大容量</td></tr><tr><td>pop_back</td><td>尾删</td></tr><tr><td>insert</td><td>插入</td></tr><tr><td>erase</td><td>删除</td></tr><tr><td>clear</td><td>清空</td></tr><tr><td>swap</td><td>交换</td></tr><tr><td>reserve</td><td>预留空间</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-STL-简介&quot;&gt;&lt;a href=&quot;#1-STL-简介&quot; class=&quot;headerlink&quot; title=&quot;1 STL 简介&quot;&gt;&lt;/a&gt;1 STL 简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;STL是Standard Template Library的简称，</summary>
      
    
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>python爬取天气</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Python/python%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Python/python%E7%88%AC%E5%8F%96%E5%A4%A9%E6%B0%94/</id>
    <published>2024-11-09T17:07:35.000Z</published>
    <updated>2024-11-09T22:26:32.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装使用"><a href="#1-安装使用" class="headerlink" title="1 安装使用"></a>1 安装使用</h1><p>VSCode中安装相关的插件就可以配合chatgpt来实现一些简单的爬虫操作，只能应对比较简单的场景.<br>安装插件<br>chatGPT-ChatMoss</p><h1 id="2-实例"><a href="#2-实例" class="headerlink" title="2 实例"></a>2 实例</h1><p>给AI发送<br>python 爬取无锡七日天气<br>回复如下:<br>要爬取无锡七日天气，可以使用Python中的第三方库 requests 和 Beautiful Soup。以下是详细步骤：</p><ol><li>导入必要的库</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><ol start="2"><li>发送GET请求获取网页内容</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;http://www.weather.com.cn/weather/101190201.shtml&quot;</span></span><br><span class="line">response = requests.get(url)</span><br></pre></td></tr></table></figure><ol start="3"><li>解析网页内容</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(response.content, <span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>找到需要的天气信息所在的标签</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weather_data = soup.select(<span class="string">&quot;.t&gt;li&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>提取天气信息并输出</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> weather <span class="keyword">in</span> weather_data:</span><br><span class="line">    <span class="comment"># 获取日期、天气状况、最高温度和最低温度</span></span><br><span class="line">    date = weather.select_one(<span class="string">&quot;.date&quot;</span>).get_text()</span><br><span class="line">    condition = weather.select_one(<span class="string">&quot;.wea&quot;</span>).get_text()</span><br><span class="line">    high_temperature = weather.select_one(<span class="string">&quot;.tem span&quot;</span>).get_text()</span><br><span class="line">    low_temperature = weather.select_one(<span class="string">&quot;.tem i&quot;</span>).get_text()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印天气信息</span></span><br><span class="line">    <span class="built_in">print</span>(date, condition, high_temperature, low_temperature)</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.weather.com.cn/weather/101190201.shtml&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(response.content, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">weather_data = soup.select(<span class="string">&quot;.t&gt;li&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> weather <span class="keyword">in</span> weather_data:</span><br><span class="line">    date = weather.select_one(<span class="string">&quot;.date&quot;</span>).get_text()</span><br><span class="line">    condition = weather.select_one(<span class="string">&quot;.wea&quot;</span>).get_text()</span><br><span class="line">    high_temperature = weather.select_one(<span class="string">&quot;.tem span&quot;</span>).get_text()</span><br><span class="line">    low_temperature = weather.select_one(<span class="string">&quot;.tem i&quot;</span>).get_text()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(date, condition, high_temperature, low_temperature)</span><br></pre></td></tr></table></figure><p>但是上述实际运行是存在一些小问题的。</p><p>打印结果如下: 这个很明显就是date这个数据为None</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">None &lt;p <span class="class"><span class="keyword">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;多云&quot;&gt;多云&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;28&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;17℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;多云&quot;&gt;多云&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;27&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;15℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;多云&quot;&gt;多云&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;24&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;12℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;阴转小雨&quot;&gt;阴转小雨&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;20&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;15℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;阴&quot;&gt;阴&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;15&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;13℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;小雨&quot;&gt;小雨&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;19&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;14℃&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span> &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">wea</span>&quot; <span class="title">title</span>=&quot;小雨转晴&quot;&gt;小雨转晴&lt;/<span class="title">p</span>&gt; &lt;<span class="title">span</span>&gt;16&lt;/<span class="title">span</span>&gt; &lt;<span class="title">i</span>&gt;8℃&lt;/<span class="title">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续追问机器人:</p><p>优化下代码，没有获取到天数，并且这个get_text有报错.</p><p>机器人直接回复:</p><p>以下是优化后的代码，已解决上述问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.weather.com.cn/weather/101190201.shtml&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(response.content, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">weather_data = soup.select(<span class="string">&quot;.t li&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> weather <span class="keyword">in</span> weather_data:</span><br><span class="line">    <span class="comment"># 获取日期、天气状况、最高温度和最低温度</span></span><br><span class="line">    date = weather.select_one(<span class="string">&quot;h1&quot;</span>).get_text()</span><br><span class="line">    condition = weather.select_one(<span class="string">&quot;.wea&quot;</span>).get_text()</span><br><span class="line">    high_temperature = weather.select(<span class="string">&quot;.tem span&quot;</span>)[<span class="number">0</span>].get_text()</span><br><span class="line">    low_temperature = weather.select(<span class="string">&quot;.tem i&quot;</span>)[<span class="number">0</span>].get_text()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印天气信息</span></span><br><span class="line">    <span class="built_in">print</span>(date, condition, high_temperature, low_temperature)</span><br></pre></td></tr></table></figure><p>在优化代码时，我们对原有代码进行了以下改进：</p><ul><li>将CSS选择器中的“&gt;”删除，因为它只会选择直接子元素，导致无法获取到所有的天气信息。</li><li>由于天数信息并不在 “.date” 标签内，所以将日期信息从该标签中提取出来。在这里，我们使用了 h1 标签来获取日期信息。</li><li>使用 select() 方法来选取多个元素，并且使用索引 [0] 来定位到需要的元素，因为 .select_one() 方法只能返回单个元素，如果要选取多个元素，需要使用 select() 方法。同时，我们还修改了 “.tem span” 和 “.tem i” 的类选择器，以便正确获取最高温度和最低温度。</li><li>在使用 get_text() 方法时，需要确保该元素存在并且不为空。如果该元素不存在或为空，会导致 AttributeError 异常。</li></ul><p>这一次就非常好用了.</p><p>打印出的结果如下:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span>日（今天） 多云 <span class="number">28</span> <span class="number">17</span>℃</span><br><span class="line"><span class="number">20</span>日（明天） 多云 <span class="number">27</span> <span class="number">15</span>℃</span><br><span class="line"><span class="number">21</span>日（后天） 多云 <span class="number">24</span> <span class="number">12</span>℃</span><br><span class="line"><span class="number">22</span>日（周六） 阴转小雨 <span class="number">20</span> <span class="number">15</span>℃</span><br><span class="line"><span class="number">23</span>日（周日） 阴 <span class="number">15</span> <span class="number">13</span>℃</span><br><span class="line"><span class="number">24</span>日（周一） 小雨 <span class="number">19</span> <span class="number">14</span>℃</span><br><span class="line"><span class="number">25</span>日（周二） 小雨转晴 <span class="number">16</span> <span class="number">8</span>℃</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装使用&quot;&gt;&lt;a href=&quot;#1-安装使用&quot; class=&quot;headerlink&quot; title=&quot;1 安装使用&quot;&gt;&lt;/a&gt;1 安装使用&lt;/h1&gt;&lt;p&gt;VSCode中安装相关的插件就可以配合chatgpt来实现一些简单的爬虫操作，只能应对比较简单的场景.&lt;br</summary>
      
    
    
    
    <category term="python" scheme="https://joeforkyou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://joeforkyou.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CTS基础操作</title>
    <link href="https://joeforkyou.github.io/2024/11/10/GMS/cts%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://joeforkyou.github.io/2024/11/10/GMS/cts%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</id>
    <published>2024-11-09T17:01:39.000Z</published>
    <updated>2024-11-09T22:29:11.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h1><p>设置永久不锁屏</p><h1 id="1-CTS"><a href="#1-CTS" class="headerlink" title="1 CTS"></a>1 CTS</h1><p>进入cts目录tools<br>运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cts-tradefed</span><br><span class="line">adb devices找设备数串</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">整跑</span><br><span class="line">run cts -m CtsCameraTestCases --skip-preconditions</span><br><span class="line">run cts -m CtsMediaTestCases</span><br><span class="line">单测格式如下 -t 后面是单跑的内容</span><br><span class="line">run cts -m CtsCameraTestCases -t android.hardware.camera2.cts.StillCaptureTest#testAeCompensation --skip-preconditions</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">查看设备状态</span><br><span class="line">l d</span><br><span class="line">查看报告状态</span><br><span class="line">l r</span><br><span class="line">查看当前命令</span><br><span class="line">l c</span><br><span class="line">打开报告</span><br><span class="line">nautilus ./</span><br><span class="line">run retry --retry &lt;session-number&gt;</span><br><span class="line">重跑(注意:重跑需要同一个机子同一个版本)</span><br><span class="line">run retry --retry session</span><br><span class="line">run retry --retry 0</span><br></pre></td></tr></table></figure><p>以上的是在环境中跑cts.<br>cts 的本质是下载测试的apk到手机中（在谷歌释放包中CtsCameraTest.apk），这个apk集成了测试相关的内容来调用手机的一些功能完成测试项目<br>以下命令在终端运行即可，替换成你需要跑的单项和abi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am instrument -e android.hardware.camera2.cts.CameraDeviceTest#testSessionParametersStateLeak --abi arm64-v8a  -w android.camera.cts/androidx.</span><br></pre></td></tr></table></figure><h1 id="2-VTS-需要镜像"><a href="#2-VTS-需要镜像" class="headerlink" title="2 VTS(需要镜像)"></a>2 VTS(需要镜像)</h1><p>vts 需要python 相关的环境包配置,相关命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br><span class="line">sudo apt-get install python-protobuf</span><br><span class="line">sudo apt-get install protobuf-compiler</span><br><span class="line">sudo apt-get install python-virtualenv</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install python-numpy</span><br><span class="line">sudo apt-get install python-scipy</span><br><span class="line">sudo apt-get install python-matplotlib</span><br><span class="line">sudo apt-get install python-opencv</span><br></pre></td></tr></table></figure><h2 id="2-1进入fastbootd模式"><a href="#2-1进入fastbootd模式" class="headerlink" title="2.1进入fastbootd模式"></a>2.1进入fastbootd模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb unroot</span><br><span class="line">adb reboot fastboot #进入这个模式刷system.img,bootloader模式没有这个分区</span><br></pre></td></tr></table></figure><h2 id="2-2-system-img"><a href="#2-2-system-img" class="headerlink" title="2.2 system.img"></a>2.2 system.img</h2><p>刷入谷歌 system.img</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash system system.img</span><br></pre></td></tr></table></figure><p>查看gsi版本日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings system.img | grep ro.build.version.security_patch</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.security_patch</span><br></pre></td></tr></table></figure><p>重新进入fastboot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastboot reboot bootloader</span><br><span class="line">fastboot -w</span><br></pre></td></tr></table></figure><h2 id="2-3-boot-debug-img"><a href="#2-3-boot-debug-img" class="headerlink" title="2.3 boot-debug.img"></a>2.3 boot-debug.img</h2><p>vts需要debug的权限，所以需要刷debug的镜像,另外fastboot 的版本不能太旧,太久分区不对，刷system.img会破坏分区，导致无限重启无法进去到系统里面进去.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot boot-debug.img</span><br><span class="line">fastboot -w</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><h2 id="2-4-手机配置"><a href="#2-4-手机配置" class="headerlink" title="2.4 手机配置"></a>2.4 手机配置</h2><p>进入设置打开开发者模式,usb调试模式,不锁定屏幕,语言设置成英语(这个语言无所谓)</p><h2 id="2-5-命令"><a href="#2-5-命令" class="headerlink" title="2.5 命令"></a>2.5 命令</h2><p>需要连接外网(电脑)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ./vts-tradefed</span><br><span class="line">VTS camera 相关的三个模块</span><br><span class="line">run vts -m VtsHalCameraProviderV2_4Target --skip-preconditions</span><br><span class="line">run vts -m VtsHalCameraProviderV2_5Target --skip-preconditions</span><br><span class="line">run vts -m VtsHalCameraServiceV2_0Target --skip-preconditions</span><br><span class="line">单跑</span><br><span class="line">run vts --include-filter VtsHalCameraProviderV2_4Target --include-filter VtsHalCameraProviderV2_5Target --include-filter VtsHalCameraServiceV2_0Target --include-filter VtsVndkDependency -s xxx；</span><br><span class="line">单跑命令</span><br><span class="line">run vts -m xxx -t xxx -s xxx</span><br><span class="line">run vts -s</span><br></pre></td></tr></table></figure><p>vts常用命令<br>列出所有的跑测结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l  r</span><br></pre></td></tr></table></figure><p>列出所有渐层到或已知的设备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l d</span><br><span class="line">列出当前运行的模块内容</span><br><span class="line">l i</span><br></pre></td></tr></table></figure><p>单跑某个模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run vts -m &lt;模块&gt;</span><br></pre></td></tr></table></figure><p>可用选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run vts -s &lt;device_id&gt; --logcat-on-failure --screenshot-on-failure --shard-count &lt;shards&gt;</span><br></pre></td></tr></table></figure><h1 id="3-ITS"><a href="#3-ITS" class="headerlink" title="3 ITS"></a>3 ITS</h1><p>its以来python环境(不建议使用ubuntu20测试,默认python包可能太新，跑不起来)</p><h2 id="3-1-环境包"><a href="#3-1-环境包" class="headerlink" title="3.1 环境包"></a>3.1 环境包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-numpy</span><br><span class="line">sudo apt install python-scipy</span><br><span class="line">sudo apt install python-matplotlib</span><br><span class="line">sudo apt install python-opencv</span><br></pre></td></tr></table></figure><h2 id="3-2-手机端"><a href="#3-2-手机端" class="headerlink" title="3.2 手机端"></a>3.2 手机端</h2><p>手机需要安装CtsVerifier.apk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install CtsVerifier.apk</span><br></pre></td></tr></table></figure><p>进入到手机apk，所有的权限都打开，选择its测试项目<br><img src="https://i-blog.csdnimg.cn/blog_migrate/98bd0b0e3985e78f88f07014ebaf5ade.png#pic_center" alt="在这里插入图片描述"></p><p>然后选择测试的场景和摄像头<br><img src="https://i-blog.csdnimg.cn/blog_migrate/5b08b61f99d217a0609f2e75a70e1800.jpeg#pic_center" alt="在这里插入图片描述"></p><h2 id="3-3-电脑端"><a href="#3-3-电脑端" class="headerlink" title="3.3 电脑端"></a>3.3 电脑端</h2><p>进入到对应的tools目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android-cts-verifier/CameraITS</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./build/envsetup.sh</span><br></pre></td></tr></table></figure><p>整跑命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/run_all_tests.py device=017650f70401   camera=0 scenes=1</span><br></pre></td></tr></table></figure><p>单跑命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python ./tests/xxx/xxx.py camera=x（执行tests目录下的对应scenes的报错项）。</span><br><span class="line">python tools/run_all_tests.py camera=0 scenes=1</span><br></pre></td></tr></table></figure><h2 id="3-4-场景说明"><a href="#3-4-场景说明" class="headerlink" title="3.4 场景说明"></a>3.4 场景说明</h2><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>场景0</td><td>无任何要求</td></tr><tr><td>场景1</td><td>相机位于三脚架上, 指向一个静态场景, 其中包含灰色卡和白色背景, 在恒定 (稳定) 相对明亮的光照源下。这是 CTS 验证程序物理设置上面描述的场景。镜头视野中，灰卡大致放在中间，周围为白色背景</td></tr><tr><td>场景 2</td><td>这是测试人脸检测的场景。相机位于三脚架上, 指向一张包含3人脸的静态图片, 在恒定 (稳定) 相对明亮的照明光源下。</td></tr><tr><td>场景3</td><td>这是测试图像清晰度的场景。相机位于三脚架上, 指向包含某些边缘的静态图片, 如打印的 ISO 12233 图表。现场应在一个恒定 (稳定) 相对明亮的照明源。</td></tr><tr><td>场景4</td><td>这是测试纵横比的场景。相机位于三脚架上, 指向一个静态测试页, 其中包含一个黑色圆圈和一个方块。现场应在一个恒定 (稳定) 相对明亮的照明源</td></tr><tr><td>场景5</td><td>这是测试镜头着色和颜色均匀性的场景。在摄像机前放置一个扩散器。相机位于三脚架上，指向恒定的 (稳定) 相对地明亮的照明源。</td></tr><tr><td>我们这边就用的一张白色餐巾纸代替了扩散器，将镜头对着光源，用餐巾纸挡住镜头即可。（很好使，反正不用钱）场景的具体说明看its的官方文档</td><td></td></tr></tbody></table><h2 id="3-5-创建报告"><a href="#3-5-创建报告" class="headerlink" title="3.5 创建报告"></a>3.5 创建报告</h2><p>单跑是空的，显示在终端上。暂不创建报告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">appops set com.android.cts.verifier android:read_device_identifiers allow</span><br><span class="line">exit</span><br><span class="line">adb pull /storage/emulated/0/verifierReports ~/桌面/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-GTS"><a href="#4-GTS" class="headerlink" title="4 GTS"></a>4 GTS</h1><p>进入到tool目录下,手机电脑需要挂VPN 连接外网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run gts -m GtsCameraTestCases -s xxx</span><br><span class="line">run gts -m GtsCameraTestCases -s 008bcdcf0405</span><br></pre></td></tr></table></figure><h1 id="5-STS"><a href="#5-STS" class="headerlink" title="5 STS"></a>5 STS</h1><p>安全补丁包测试以后再说</p><h1 id="6-GSI"><a href="#6-GSI" class="headerlink" title="6 GSI"></a>6 GSI</h1><p>需要烧录谷歌镜像<br>进入fastboot模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot fastboot</span><br></pre></td></tr></table></figure><p>刷入对应的谷歌镜像system.img</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash system system.img</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fastboot reboot bootloader</span><br><span class="line">fastboot -w</span><br><span class="line">fastboot oem unlock</span><br><span class="line">adb reboot bootloader</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>打开开发者选项,打开stay awake和USB debugging<br>进入vts目录，运行     .&#x2F;vts-tradefed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">全跑      </span><br><span class="line">run cts-on-gsi -m CtsCameraTestCases</span><br><span class="line">单跑</span><br><span class="line">run cts-on-gsi --include-filter CtsCameraApi25TestCases --include-filter CtsCameraTestCases -s xxx</span><br><span class="line">run cts-on-gsi -m CtsCameraTestCases -t xxx</span><br><span class="line">run cts-on-gsi -o</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;手机端&quot;&gt;&lt;a href=&quot;#手机端&quot; class=&quot;headerlink&quot; title=&quot;手机端&quot;&gt;&lt;/a&gt;手机端&lt;/h1&gt;&lt;p&gt;设置永久不锁屏&lt;/p&gt;
&lt;h1 id=&quot;1-CTS&quot;&gt;&lt;a href=&quot;#1-CTS&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    <category term="GMS" scheme="https://joeforkyou.github.io/categories/Android/GMS/"/>
    
    <category term="cts" scheme="https://joeforkyou.github.io/categories/Android/GMS/cts/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
    <category term="GMS" scheme="https://joeforkyou.github.io/tags/GMS/"/>
    
    <category term="cts" scheme="https://joeforkyou.github.io/tags/cts/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 【链表】</title>
    <link href="https://joeforkyou.github.io/2024/11/10/CPP/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E9%93%BE%E8%A1%A8/"/>
    <id>https://joeforkyou.github.io/2024/11/10/CPP/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E9%93%BE%E8%A1%A8/</id>
    <published>2024-11-09T16:58:26.000Z</published>
    <updated>2024-11-09T22:24:35.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-链表的创建"><a href="#1-链表的创建" class="headerlink" title="1 链表的创建"></a>1 链表的创建</h1><p>链表是一种物理存储单元上非连续、非顺序的存储结构。<a href="https://baike.baidu.com/item/%E9%93%BE%E8%A1%A8/9794473?fr=aladdin">摘自百度百科</a><br>如下存储:<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f48f0f5139f85857d9312f68547090a9.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;  <span class="comment">//数据域</span></span><br><span class="line">Node* next;<span class="comment">//指针域</span></span><br><span class="line"><span class="built_in">Node</span>():<span class="built_in">data</span>(<span class="number">0</span>),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line"><span class="built_in">Node</span>(<span class="type">int</span> _data,Node* _next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;data = _data;</span><br><span class="line"><span class="keyword">this</span>-&gt;next = _next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-1-头插"><a href="#1-1-头插" class="headerlink" title="1.1 头插"></a>1.1 头插</h2><p><img src="https://i-blog.csdnimg.cn/blog_migrate/632c55adc58345acff9828e9156eccf8.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushFront</span><span class="params">(Node* head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* pNew= <span class="keyword">new</span> <span class="built_in">Node</span>();           <span class="comment">//定义新节点头</span></span><br><span class="line">pNew-&gt;data = data;                <span class="comment">//存储数据</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span>== head-&gt;next)<span class="comment">//判断是不是只有头结点</span></span><br><span class="line">&#123;</span><br><span class="line">head-&gt;next = pNew;                 </span><br><span class="line">&#125;</span><br><span class="line">pNew-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = pNew;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-尾插"><a href="#1-2-尾插" class="headerlink" title="1.2 尾插"></a>1.2 尾插</h2><p>尾插:<br>申请一个新的节点pNew.将要插入的数据赋值给pNew节点的数据域.并且将pNew的指针域指向空.<br>定义一个节点p指向head(实际操作时一般定义一个新的节点来操作,以便返回头结点)<br><img src="https://i-blog.csdnimg.cn/blog_migrate/32562b09f6b08b564462edc635094d76.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushBack</span><span class="params">(Node* head, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* pNew = <span class="keyword">new</span> Node;          <span class="comment">//定义一个Node结点指针newNode</span></span><br><span class="line">pNew-&gt;next = <span class="literal">NULL</span>;              <span class="comment">//定义newNode的数据域和指针域</span></span><br><span class="line">pNew-&gt;data = data;</span><br><span class="line">Node* p = head;                 <span class="comment">//定义指针p指向头结点</span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;                               <span class="comment">//当头结点为空时，设置newNode为头结点</span></span><br><span class="line">head = pNew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>                            <span class="comment">//循环直到最后一个节点，将newNode放置在最后</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = pNew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-获取链表长度"><a href="#1-3-获取链表长度" class="headerlink" title="1.3 获取链表长度"></a>1.3 获取链表长度</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLens</span><span class="params">(Node* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> lens = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">lens++;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-翻转链表"><a href="#2-翻转链表" class="headerlink" title="2 翻转链表"></a>2 翻转链表</h1><p><img src="https://i-blog.csdnimg.cn/blog_migrate/8c9f8af8dce4ffb2b62ca9986fba3e80.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(Node* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((head-&gt;next == <span class="literal">nullptr</span> )||(head-&gt;next-&gt;next == <span class="literal">nullptr</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Node* pCur = head-&gt;next;</span><br><span class="line">Node* pNext = pCur-&gt;next;</span><br><span class="line">Node* pre = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">while</span> (pNext)</span><br><span class="line">&#123;</span><br><span class="line">pCur-&gt;next = pre;</span><br><span class="line">pre = pCur;</span><br><span class="line">pCur = pNext;</span><br><span class="line">pNext = pCur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pCur-&gt;next = pre;</span><br><span class="line">head-&gt;next = pCur;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-链表的创建&quot;&gt;&lt;a href=&quot;#1-链表的创建&quot; class=&quot;headerlink&quot; title=&quot;1 链表的创建&quot;&gt;&lt;/a&gt;1 链表的创建&lt;/h1&gt;&lt;p&gt;链表是一种物理存储单元上非连续、非顺序的存储结构。&lt;a href=&quot;https://baike.ba</summary>
      
    
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Linux/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Linux/git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-11-09T16:50:40.000Z</published>
    <updated>2024-11-09T22:26:07.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-git-下载"><a href="#1-git-下载" class="headerlink" title="1.git 下载"></a>1.git 下载</h1><p>最好是更新下镜像源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> update</span><br></pre></td></tr></table></figure><p>下载git</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install git</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/57610ea2389eed7f411f029a43c3c8b5.png"><br>检测git下载成功的版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><p>版本显示正确后执行再执行下一步<br><img src="https://i-blog.csdnimg.cn/blog_migrate/804594cf93c6f0f70dbe0f7e487fed39.png"></p><h1 id="2-ssh"><a href="#2-ssh" class="headerlink" title="2 ssh"></a>2 ssh</h1><p>ssh具体内容参考百度词条<a href="https://baike.baidu.com/item/SSH/10407">ssh</a><br>执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install ssh </span><br></pre></td></tr></table></figure><p>显示如下<br><img src="https://i-blog.csdnimg.cn/blog_migrate/2d7bb5fce1275523d01140a2a1c01424.png"><br>查看ssh服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ps</span> <span class="literal">-e</span> | grep sshd</span><br></pre></td></tr></table></figure><p>显示sshd的话表示ssh-server已经启动<br><img src="https://i-blog.csdnimg.cn/blog_migrate/ccac9456c7008cd8439c45c645c8c26e.png"><br>生成ssh-key</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;你的邮箱@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>生成后默认就行，直接回车生成文件隐藏<br>用下面命令检测是否在根目录下生存(上面建议默认，是直接在根目录下生成的)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> <span class="literal">-al</span> ~/.ssh</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/de0994ad8d808f189ed4ec9030615e3b.png"><br>然后打开显示隐藏文件<br><img src="https://i-blog.csdnimg.cn/blog_migrate/eb47eba16f9a712bd8047524f5f5eb84.png">找到<br><img src="https://i-blog.csdnimg.cn/blog_migrate/bcc065d14a29d13598f4d56647b41ed2.png"><br>再进入到文件夹下找到以下文件，这个是公钥。<br>打开这个文件将其内容复制(用记事本或者vim打开都行)<br><img src="https://i-blog.csdnimg.cn/blog_migrate/7c0c0e8b5c356f45ba34f74f38fd475a.png"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/c787fd589d622eef983fe42f02857eff.png">打开你的github帐号，进入你的settings<br><img src="https://i-blog.csdnimg.cn/blog_migrate/c948ad84b69384cd61385fe7347ad056.png">找到ssh<br><img src="https://i-blog.csdnimg.cn/blog_migrate/978cb04f1e14a96e65df43568252c90d.png"><br>新建一个ssh<br><img src="https://i-blog.csdnimg.cn/blog_migrate/df880886f641c1af1f64f360b189b121.png">将复制的内容粘贴进去后便是如上显示</p><h1 id="3-git-使用"><a href="#3-git-使用" class="headerlink" title="3 git 使用"></a>3 git 使用</h1><h2 id="3-1-新建仓库"><a href="#3-1-新建仓库" class="headerlink" title="3.1 新建仓库"></a>3.1 新建仓库</h2><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d9eb93e958f4078d7cbca14191487f6d.png"><br>这部分比较简单(其实都不难)，直接看图说话吧。名字和描诉整干净后直接创建仓库</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/4eb16a6a5731d31d61aea7dca0a0c4eb.png">然后把地址复制下来<br><img src="https://i-blog.csdnimg.cn/blog_migrate/460b2d3f06233ee1b0a8aaade07a981e.png"></p><h2 id="3-2-git它！！！git就万事了"><a href="#3-2-git它！！！git就万事了" class="headerlink" title="3.2 git它！！！git就万事了"></a>3.2 git它！！！git就万事了</h2><p>在你自己的文件夹下git clone远程仓库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 网址</span><br></pre></td></tr></table></figure><p>然后进入到目录里初始化他<br><img src="https://i-blog.csdnimg.cn/blog_migrate/36735234074ff0312a22d082cb636779.png"><br>在该目录下创建你自己的文件,这个随便你怎么建立，touch 是创建命令</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch README.md</span><br></pre></td></tr></table></figure><p>git add .  是有个空格后再家一个点。直接该该目录下的文件添加到暂存区域<br>git add 文件名  是直接将相应的文件添加到暂存区域</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"><span class="comment">#git add README.md</span></span><br></pre></td></tr></table></figure><p>提交本次修改<br>git commit</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;add readme file&quot;</span> <span class="comment">#提交本次修改</span></span><br></pre></td></tr></table></figure><p>推送到远程仓库<br>格式为 git push (brash) 我这里是直接推送到origin master</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master<span class="comment">#推送到远程仓库</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/e1c8ad0468251a3f08b6c1b1de785d3e.png"><br>输入你名字和密码<br><img src="https://i-blog.csdnimg.cn/blog_migrate/524377bf2fdf3cca28cc2a639e873c5a.png"><br>刷新你的仓库，内容就提交上去了<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d4fb82ae9b4940d3130cff0c98c91b05.png"></p><p>更多笔记请访问<br><a href="https://joenero.github.io/">JoeNero私人博客</a><br>参考链接<br><a href="https://blog.csdn.net/wxy540843763/article/details/80197301">参考链接1</a><br><a href="https://blog.csdn.net/qicheng777/article/details/74724015">参考链接2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-git-下载&quot;&gt;&lt;a href=&quot;#1-git-下载&quot; class=&quot;headerlink&quot; title=&quot;1.git 下载&quot;&gt;&lt;/a&gt;1.git 下载&lt;/h1&gt;&lt;p&gt;最好是更新下镜像源&lt;/p&gt;
&lt;figure class=&quot;highlight powersh</summary>
      
    
    
    
    <category term="git" scheme="https://joeforkyou.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://joeforkyou.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Andoird camera app从零养成计划【一】</title>
    <link href="https://joeforkyou.github.io/2024/11/10/Android/APP/APP_1/"/>
    <id>https://joeforkyou.github.io/2024/11/10/Android/APP/APP_1/</id>
    <published>2024-11-09T16:41:32.000Z</published>
    <updated>2024-11-09T22:22:46.515Z</updated>
    
    <content type="html"><![CDATA[<p>要创建一个基本的Camera App demo，我们将使用Android Studio和Java来编写一个应用，该应用能够打开相机预览，拍照，并保存照片到设备的存储中。这里将使用Android的Camera2 API，因为它提供了更丰富的功能和更好的性能，尽管它比Camera API（已弃用）更复杂一些。</p><h3 id="步骤-1-创建一个新的Android项目"><a href="#步骤-1-创建一个新的Android项目" class="headerlink" title="步骤 1: 创建一个新的Android项目"></a>步骤 1: 创建一个新的Android项目</h3><ol><li>打开Android Studio，选择“Start a new Android Studio project”。</li><li>选择“Empty Activity”，然后点击“Next”。</li><li>填写你的应用名称（如 <code>CameraDemo</code>），选择你的保存位置，语言选择Java，最小API级别设置为21（因为Camera2 API在API 21（Android 5.0）上引入）。</li><li>点击“Finish”创建项目。</li></ol><h3 id="步骤-2-添加权限"><a href="#步骤-2-添加权限" class="headerlink" title="步骤 2: 添加权限"></a>步骤 2: 添加权限</h3><p>在你的 <code>AndroidManifest.xml</code> 文件中添加必要的权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;你的包名&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera&quot;</span> <span class="attr">android:required</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera.autofocus&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤-3-布局文件"><a href="#步骤-3-布局文件" class="headerlink" title="步骤 3: 布局文件"></a>步骤 3: 布局文件</h3><p>修改 <code>res/layout/activity_main.xml</code> 文件来添加必要的视图控件（如TextureView用于显示相机预览，Button用于拍照）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextureView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textureView&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_above</span>=<span class="string">&quot;@+id/button_capture&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_capture&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;拍照&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="步骤-4-编写MainActivity"><a href="#步骤-4-编写MainActivity" class="headerlink" title="步骤 4: 编写MainActivity"></a>步骤 4: 编写MainActivity</h3><p>由于Camera2 API较为复杂，这里不会详细展开全部代码，但会概述主要步骤和关键代码片段。</p><ol><li><strong>初始化Camera2 API</strong>：打开相机，设置预览大小，创建CaptureSession等。</li><li><strong>设置TextureView显示预览</strong>。</li><li><strong>处理拍照和保存</strong>：在点击按钮时，捕获图像并保存到存储。</li></ol><p>你需要创建多个类来处理Camera2的不同部分，如CameraStateCallback、CaptureRequest等。</p><h3 id="示例代码片段（MainActivity部分）"><a href="#示例代码片段（MainActivity部分）" class="headerlink" title="示例代码片段（MainActivity部分）"></a>示例代码片段（MainActivity部分）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TextureView textureView;</span><br><span class="line">    <span class="keyword">private</span> CameraDevice cameraDevice;</span><br><span class="line">    <span class="keyword">private</span> CaptureRequest.Builder previewRequestBuilder;</span><br><span class="line">    <span class="comment">// 其他变量...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        textureView = findViewById(R.id.textureView);</span><br><span class="line">        <span class="comment">// 初始化相机，设置TextureView显示预览等...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拍照按钮点击事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCaptureButtonClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="comment">// 拍照逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相机打开，关闭等状态的回调</span></span><br><span class="line">    <span class="keyword">private</span> CameraDevice.<span class="type">StateCallback</span> <span class="variable">stateCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CameraDevice</span>.StateCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpened</span><span class="params">(<span class="meta">@NonNull</span> CameraDevice camera)</span> &#123;</span><br><span class="line">            <span class="comment">// 相机成功打开</span></span><br><span class="line">            cameraDevice = camera;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDisconnected</span><span class="params">(<span class="meta">@NonNull</span> CameraDevice camera)</span> &#123;</span><br><span class="line">            <span class="comment">// 相机被断开</span></span><br><span class="line">            cameraDevice.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(<span class="meta">@NonNull</span> CameraDevice camera, <span class="type">int</span> error)</span> &#123;</span><br><span class="line">            <span class="comment">// 相机发生错误</span></span><br><span class="line">            cameraDevice.close();</span><br><span class="line">            cameraDevice = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5-运行时权限请求"><a href="#步骤-5-运行时权限请求" class="headerlink" title="步骤 5: 运行时权限请求"></a>步骤 5: 运行时权限请求</h3><p>由于Android 6.0（API 级别 23）及以上版本需要在运行时请求权限，你需要检查并在必要时请求权限。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里只提供了一个基本的框架和思路。Camera2 API 涉及很多复杂的步骤和概念，如处理相机状态、创建和管理CaptureRequests、SurfaceTexture等。为了完整实现功能，你需要深入研究Camera2 API的文档和示例代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要创建一个基本的Camera App demo，我们将使用Android Studio和Java来编写一个应用，该应用能够打开相机预览，拍照，并保存照片到设备的存储中。这里将使用Android的Camera2 API，因为它提供了更丰富的功能和更好的性能，尽管它比Camer</summary>
      
    
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/categories/Android/"/>
    
    <category term="APP" scheme="https://joeforkyou.github.io/categories/Android/APP/"/>
    
    
    <category term="Android" scheme="https://joeforkyou.github.io/tags/Android/"/>
    
    <category term="APP" scheme="https://joeforkyou.github.io/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>STL速学</title>
    <link href="https://joeforkyou.github.io/2024/11/10/CPP/STL/"/>
    <id>https://joeforkyou.github.io/2024/11/10/CPP/STL/</id>
    <published>2024-11-09T16:39:08.000Z</published>
    <updated>2024-11-09T22:24:56.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-容器"><a href="#1-容器" class="headerlink" title="1.容器"></a>1.容器</h1><h2 id="1-1-array"><a href="#1-1-array" class="headerlink" title="1.1 array"></a>1.1 array</h2><p><strong>array保存在栈中</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">std::array&lt;<span class="type">int</span>, 4&gt; arr= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="number">4</span>;</span><br><span class="line">std::array&lt;<span class="type">int</span>, len&gt; arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;; <span class="comment">// 非法, 数组大小参数必须是常量表达式</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> len = <span class="number">4</span>;</span><br><span class="line">std::array&lt;<span class="type">int</span>, len&gt; arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;; <span class="comment">// 正确写法</span></span><br></pre></td></tr></table></figure><h2 id="1-2-vector"><a href="#1-2-vector" class="headerlink" title="1.2 vector"></a>1.2 vector</h2><p>不同的编译器实现的扩容方式不一样，vector 在VS2015中以1.5倍扩容，GCC以2倍扩容。</p><p><strong>vector保存在堆中</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">size</span>();<span class="comment">//返回行数</span></span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>].<span class="built_in">size</span>();<span class="comment">//返回列数</span></span><br></pre></td></tr></table></figure><h2 id="1-3-list"><a href="#1-3-list" class="headerlink" title="1.3 list"></a>1.3 list</h2><p>list 是双向循环链表 记住！！！</p><p>List的插入、删除或者拼合操作不会造成原有迭代器的失效。</p><p>List不能用STL 中的sort函数进行排序，而是要用自身的sort函数。List仅支持随机访问迭代器，而List是双向迭代器。</p><h2 id="1-4-forward-list"><a href="#1-4-forward-list" class="headerlink" title="1.4 forward_list"></a>1.4 forward_list</h2><p>单向链表，标准库容器中唯一不提供size()方法的容器，当不需要双向迭代时，具备比list更高的空间利用率。</p><h2 id="1-5-stack"><a href="#1-5-stack" class="headerlink" title="1.5 stack"></a>1.5 stack</h2><p>基础示例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//输出栈顶元素</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈顶元素&quot;</span> &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//弹出栈顶元素</span></span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈的大小为:&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>emplace :&#x2F;&#x2F;emplace函数可以将一个元素加入栈中，与push的区别在于：emplace可以直接传入Node的构造函数的参数，并将构造的元素加入栈中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>       </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">Node</span> (<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        a = x; b = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack&lt;Node&gt; mystack;</span><br><span class="line">    mystack.<span class="built_in">emplace</span>(<span class="number">1</span>,<span class="number">2</span>);        </span><br><span class="line">    <span class="comment">//mystack.push(1,2);        //编译不通过，要达到上面的效果需要手动构造，例如mystack.push(Node(1,2));</span></span><br><span class="line">    Node p = mystack.<span class="built_in">top</span>();</span><br><span class="line">    cout &lt;&lt; p.a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p.b &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    stack&lt;Node&gt; my2;</span><br><span class="line">    my<span class="number">2.</span><span class="built_in">swap</span>(mystack);            <span class="comment">//swap函数可以交换两个栈的元素</span></span><br><span class="line">    cout &lt;&lt; mystack.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; my<span class="number">2.</span><span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-智能指针"><a href="#2-智能指针" class="headerlink" title="2.智能指针"></a>2.智能指针</h1><p>对于编译器来说，智能指针实际上是一个栈对象，并非指针类型，在栈对象生命期即将结束时，智能指针通过析构函数释放有它管理的堆内存。所有智能指针都重载了“operator-&gt;”操作符，直接返回对象的引用，用以操作对象。访问智能指针原来的方法则使用“.”操作符。</p><p>访问智能指针包含的裸指针则可以用 get() 函数。由于智能指针是一个对象，所以if (my_smart_object)永远为真，要判断智能指针的裸指针是否为空，需要这样判断：if (my_smart_object.get())。</p><h2 id="2-1auto-ptr"><a href="#2-1auto-ptr" class="headerlink" title="2.1auto_ptr"></a>2.1auto_ptr</h2><p><strong>采用管理权转移，拷贝时会导致对象悬空，设计有缺陷，不建议使用</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//auto_ptr&lt;int&gt; p;//初始化为NULL</span></span><br><span class="line"><span class="comment">//  错误写法  auto_ptr&lt;int&gt; p = new int(123);</span></span><br><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">123</span>))</span></span>;</span><br><span class="line">cout &lt;&lt; *p;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">123</span>))</span></span>;</span><br><span class="line">    <span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(p)</span></span>;<span class="comment">//将p的使用权转给p1,p1已经指向nullptr无法正常访问</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; *p &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; *p1 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="2-2unique-ptr"><a href="#2-2unique-ptr" class="headerlink" title="2.2unique_ptr"></a>2.2unique_ptr</h2><p><strong>特点：防拷贝，简单粗暴，建议使用</strong></p><p><strong>缺点：不能拷贝，可以转让</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">123</span>))</span></span>;</span><br><span class="line">*p = <span class="number">7</span>;</span><br><span class="line">cout &lt;&lt; *p&lt;&lt; endl;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;string&gt; upt1=std::<span class="built_in">move</span>(upt);  <span class="comment">//控制权限转移</span></span><br><span class="line"><span class="keyword">if</span>(upt.<span class="built_in">get</span>()!=<span class="literal">nullptr</span>)<span class="comment">//判空操作更安全</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; p1;          <span class="comment">//创建空的智能指针</span></span><br><span class="line">p<span class="number">1.</span><span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">3</span>));    <span class="comment">//绑定动态对象</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">4</span>))</span> </span>;        <span class="comment">//创建时绑定动态对象</span></span><br><span class="line">cout &lt;&lt; *p1 &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; *p2 &lt;&lt;endl;</span><br><span class="line"><span class="comment">//所有权发生变化</span></span><br><span class="line"><span class="type">int</span> *p = p<span class="number">1.</span><span class="built_in">release</span>();      <span class="comment">//释放所有权</span></span><br><span class="line"></span><br><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">p_s1</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;abc&quot;</span>))</span></span>;</span><br><span class="line"><span class="comment">//    unique_ptr&lt;string&gt; p_s2 = std::move(p_s1);</span></span><br><span class="line">    cout &lt;&lt; *p_s1 &lt;&lt;endl;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; p_s2 &lt;&lt;endl;</span></span><br></pre></td></tr></table></figure><h2 id="2-3shared-ptr"><a href="#2-3shared-ptr" class="headerlink" title="2.3shared_ptr"></a>2.3shared_ptr</h2><p> shared_ptr的原理：通过引用计数的方式来实现多个shared_ptr对象之间共享资源。</p><ol><li>shared_ptr在其内部，给每个资源都维护了一份计数，用来记录该份资源被几个对象共享。</li><li>在对象被销毁时(也就是析构函数调用)，就说明自己不使用该资源了，对象的引用计数减一。</li><li>如果引用计数是0，就说明自己是最后一个使用该资源的对象，必须释放该资源。</li><li>如果不是0，就说明除了自己还有其他对象在使用该份资源，不能释放该资源，否则其他对象就成野指针了。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">123</span>))</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p3</span><span class="params">(p2)</span></span>;</span><br><span class="line">cout &lt;&lt; *p1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>循环引用</p><p>循坏引用分析：</p><ol><li>node1和node2两个智能指针对象指向两个结点，引用计数变成1，我们不需要手动delete。</li><li>node1和_next指向node2，node2的_prev还指向下一个结点。但是_prev还指向上一个节点。</li><li>node1和node2析构，引用计数减一，但是_next还指向下一个节点。但是_prev还指向上一个节点。</li><li>也就是说_next析构了，node2就释放了。</li><li>也就是说_prev析构了，node1就释放了。</li><li>但是_next属于node成员，node1释放了，_next才会析构，而node1由_prev管理，_prev属于node2成员，所以这就叫循环引用，谁也不会释放。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">    shared_ptr&lt;ListNode&gt; _prev;</span><br><span class="line">    shared_ptr&lt;ListNode&gt; _next;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">ListNode</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~ListNode()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;ListNode&gt; <span class="title">node1</span><span class="params">(<span class="keyword">new</span> ListNode)</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;ListNode&gt; <span class="title">node2</span><span class="params">(<span class="keyword">new</span> ListNode)</span></span>;</span><br><span class="line">    cout &lt;&lt; node<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; node<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    node1-&gt;_next = node2;</span><br><span class="line">    node2-&gt;_prev = node1;</span><br><span class="line">    cout &lt;&lt; node<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; node<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：在引用计数的场景下，把节点中的_prev和_next改成weak_ptr就可以了</strong></p><p><strong>原理：node1-&gt;_next &#x3D; node2;和node2-&gt;_prev &#x3D; node1;时weak_ptr的_next和_prev不会增加 node1和node2的引用计数。</strong> </p><h2 id="2-4weak-ptr"><a href="#2-4weak-ptr" class="headerlink" title="2.4weak_ptr"></a>2.4weak_ptr</h2><p>weak_ptr 被设计为与 shared_ptr 共同工作，可以从一个 shared_ptr 或者另一个 weak_ptr 对象构造而来。weak_ptr 是为了配合 shared_ptr 而引入的一种智能指针，它更像是 shared_ptr 的一个助手而不是智能指针，因为它不具有普通指针的行为，没有重载 operator* 和 operator-&gt; ，因此取名为 weak，表明其是功能较弱的智能指针。它的最大作用在于协助 shared_ptr 工作，可获得资源的观测权，像旁观者那样观测资源的使用情况。观察者意味着 weak_ptr 只对 shared_ptr 进行引用，而不改变其引用计数，当被观察的 shared_ptr 失效后，相应的 weak_ptr 也相应失效。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">    weak_ptr&lt;ListNode&gt; _prev;</span><br><span class="line">    weak_ptr&lt;ListNode&gt; _next;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">ListNode</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;~ListNode()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;ListNode&gt; <span class="title">node1</span><span class="params">(<span class="keyword">new</span> ListNode)</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;ListNode&gt; <span class="title">node2</span><span class="params">(<span class="keyword">new</span> ListNode)</span></span>;</span><br><span class="line">    cout &lt;&lt; node<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; node<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    node1-&gt;_next = node2;</span><br><span class="line">    node2-&gt;_prev = node1;</span><br><span class="line">    cout &lt;&lt; node<span class="number">1.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; node<span class="number">2.</span><span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给出几个使用指南。<br>（1）如果程序要使用多个指向同一个对象的指针，应选择shared_ptr。这样的情况包括：<br>（a）的元素和最小的元素；<br>（b）两个对象都包含指向第三个对象的指针；<br>（c）STL容器包含指针。很多STL算法都支持复制和赋值操作，这些操作可用于shared_ptr，但不能用于unique_ptr（编译器发出warning）和auto_ptr（行为不确定）。如果你的编译器没有提供shared_ptr，可使用Boost库提供的shared_ptr</p><h1 id="3-类型推导"><a href="#3-类型推导" class="headerlink" title="3.类型推导"></a>3.类型推导</h1><h2 id="3-1-auto"><a href="#3-1-auto" class="headerlink" title="3.1 auto"></a>3.1 auto</h2><p>编程时候常常需要把表达式的值付给变量,需要在声明变量的时候清楚的知道变量是什么类型。然而做到这一点并非那么容易(特别是模板中)，有时候根本做不到。为了解决这个问题，C++11新标准就引入了auto类型说明符，用它就能让编译器替我们去分析表达式所属的类型。和原来那些只对应某种特定的类型说明符(例如 int)不同。auto 让编译器通过初始值来进行类型推演。从而获得定义变量的类型，所以说 auto 定义的变量必须有初始值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">auto</span> a = i,&amp;b = i,*c = &amp;i;<span class="comment">//正确: a初始化为i的副本,b初始化为i的引用,c为i的指针.</span></span><br><span class="line"><span class="keyword">auto</span> sz = <span class="number">0</span>, pi = <span class="number">3.14</span>;<span class="comment">//错误,两个变量的类型不一样。</span></span><br></pre></td></tr></table></figure><h2 id="3-2-decltype"><a href="#3-2-decltype" class="headerlink" title="3.2 decltype"></a>3.2 decltype</h2><p><code>decltype</code> 关键字是为了解决 auto 关键字只能对变量进行类型推导的缺陷而出现的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">decltype</span>(i) i2 = i;</span><br><span class="line">cout  &lt;&lt; i &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">cout &lt;&lt; i2;</span><br></pre></td></tr></table></figure><h1 id="4-强制类型转换"><a href="#4-强制类型转换" class="headerlink" title="4.强制类型转换"></a>4.强制类型转换</h1><p>C++中四种类型转换是：static_cast, dynamic_cast, const_cast, reinterpret_cast</p><h2 id="4-1-const-cast"><a href="#4-1-const-cast" class="headerlink" title="4.1 const_cast"></a>4.1 const_cast</h2><p><strong>const_cast&lt;类型说明符&gt; (变量或表达式)</strong></p><p> 用于将const变量转换为非const类型</p><p>const_cast用于强制去掉const这种不能被修改的常数特性，但需要特别注意的是const_cast不是用于去除变量的常量性，而是去除指向常数对象的指针或引用的常量性，其去除常量性的对象必须为指针或引用。</p><h2 id="4-2-static-cast"><a href="#4-2-static-cast" class="headerlink" title="4.2  static_cast"></a>4.2  static_cast</h2><p>static_cast&lt;类型说明符&gt; (变量或表达式)</p><p>用于各种隐私转换，比如非const转const， void*转指针等， static_cast 能用于多态向上转化，如果向下转能成功但是不安全，结果未知。</p><h2 id="4-3-dynamic-cast"><a href="#4-3-dynamic-cast" class="headerlink" title="4.3 dynamic_cast"></a>4.3 dynamic_cast</h2><p>dynamic_cast&lt;类型说明符&gt; (变量或表达式)</p><p>用于动态类型转换，只能用于含有虚函数的类，用于类层次间的向上和向下转化。只能转指针或引用。向上转换：指的是子类向基类转换。 向下转换：指的是基类向子类转换。  他通过判断在执行到该语句的时候变量的运行时类型和要转换的类型是否相同来判断是否能够向下转换。    </p><h2 id="4-4-reinterpret-cast"><a href="#4-4-reinterpret-cast" class="headerlink" title="4.4 reinterpret_cast"></a>4.4 reinterpret_cast</h2><p>reinterpret_cast&lt;类型说明符&gt; (变量或表达式)</p><p>几乎什么都可以转，比如将int转指针，可能会出问题，尽量少用。</p><p>改变指针或引用的类型、将指针或引用转换为一个足够长度的整形、将整型转换为指针或引用类型。</p><h2 id="4-5-为什么不用C的强制转换？"><a href="#4-5-为什么不用C的强制转换？" class="headerlink" title="4.5 为什么不用C的强制转换？"></a>4.5 为什么不用C的强制转换？</h2><p>C的强制转换表面上看起来功能强大什么都能转换，但转化不够明确，不能进行错误检查，容易出错。</p><h1 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a>委托构造函数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> value1;</span><br><span class="line">    <span class="type">int</span> value2;</span><br><span class="line">    <span class="built_in">Base</span>() &#123;</span><br><span class="line">        value1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> value) : <span class="built_in">Base</span>() &#123;  <span class="comment">// 委托 Base() 构造函数</span></span><br><span class="line">        value2 = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="继承构造"><a href="#继承构造" class="headerlink" title="继承构造"></a>继承构造</h1><p>在继承体系中，如果派生类想要使用基类的构造函数，需要在构造函数中显式声明。<br> 假若基类拥有为数众多的不同版本的构造函数，这样，在派生类中得写很多对应的“透传”构造函数。如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">int</span> i) &#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">double</span> d,<span class="type">int</span> i)&#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">float</span> f,<span class="type">int</span> i,<span class="type">const</span> <span class="type">char</span>* c)&#123;&#125;</span><br><span class="line">  <span class="comment">//...等等系列的构造函数版本</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>:A</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">B</span>(<span class="type">int</span> i):<span class="built_in">A</span>(i)&#123;&#125;</span><br><span class="line">  <span class="built_in">B</span>(<span class="type">double</span> d,<span class="type">int</span> i):<span class="built_in">A</span>(d,i)&#123;&#125;</span><br><span class="line">  <span class="built_in">B</span>(folat f,<span class="type">int</span> i,<span class="type">const</span> <span class="type">char</span>* c):<span class="built_in">A</span>(f,i,e)&#123;&#125;</span><br><span class="line">  <span class="comment">//......等等好多个和基类构造函数对应的构造函数</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>C++11的继承构造：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">int</span> i) &#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">double</span> d,<span class="type">int</span> i)&#123;&#125;</span><br><span class="line">  <span class="built_in">A</span>(<span class="type">float</span> f,<span class="type">int</span> i,<span class="type">const</span> <span class="type">char</span>* c)&#123;&#125;</span><br><span class="line">  <span class="comment">//...等等系列的构造函数版本</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>:A</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">using</span> A::A;</span><br><span class="line">  <span class="comment">//关于基类各构造函数的继承一句话搞定</span></span><br><span class="line">  <span class="comment">//......</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><h1 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int a = 0;</span><br><span class="line">auto f = [=] &#123; return a; &#125;;</span><br><span class="line"></span><br><span class="line">a+=1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f() &lt;&lt; endl;       //输出0</span><br><span class="line"></span><br><span class="line">int a = 0;</span><br><span class="line">auto f = [&amp;a] &#123; return a; &#125;;</span><br><span class="line"></span><br><span class="line">a+=1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f() &lt;&lt;endl;       //输出1</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; len ; i++)&#123;</span><br><span class="line">        temp ^=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-容器&quot;&gt;&lt;a href=&quot;#1-容器&quot; class=&quot;headerlink&quot; title=&quot;1.容器&quot;&gt;&lt;/a&gt;1.容器&lt;/h1&gt;&lt;h2 id=&quot;1-1-array&quot;&gt;&lt;a href=&quot;#1-1-array&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/categories/cpp/"/>
    
    
    <category term="cpp" scheme="https://joeforkyou.github.io/tags/cpp/"/>
    
  </entry>
  
</feed>
